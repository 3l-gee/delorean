-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_whxcdo.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykdoyr.*) AS annotation
  from master_join master_join_omtwne
  join notes.note_view notes_note_lat_ykdoyr on master_join_omtwne.target_id = notes_note_lat_ykdoyr.id
  where master_join_omtwne.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_whxcdo on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_jivefy.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_nehacw.layer::jsonb as layer,
    notes_note_view_xbzift.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ikgzkc.id) as criticalridge
  from master_join master_join_lhsrjo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ikgzkc on master_join_lhsrjo.target_id = airport_heliport_ridge_lat_ikgzkc.id
  where master_join_lhsrjo.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_jivefy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_dstmnv.id) as layer
  from master_join master_join_vgehmk
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_dstmnv on master_join_vgehmk.target_id = airport_heliport_surfacecontaminationlayer_lat_dstmnv.id
  where master_join_vgehmk.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_nehacw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mzqsmf.*) AS annotation
  from master_join master_join_trerqd
  join notes.note_view notes_note_lat_mzqsmf on master_join_trerqd.target_id = notes_note_lat_mzqsmf.id
  where master_join_trerqd.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_xbzift on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_nzamqj.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_njuicd.layer::jsonb as layer,
    notes_note_view_hyeamt.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_meizcz.id) as criticalridge
  from master_join master_join_vsqhgv
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_meizcz on master_join_vsqhgv.target_id = airport_heliport_ridge_lat_meizcz.id
  where master_join_vsqhgv.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_nzamqj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_llipix.id) as layer
  from master_join master_join_teevwe
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_llipix on master_join_teevwe.target_id = airport_heliport_surfacecontaminationlayer_lat_llipix.id
  where master_join_teevwe.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_njuicd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nplovd.*) AS annotation
  from master_join master_join_ciqmxd
  join notes.note_view notes_note_lat_nplovd on master_join_ciqmxd.target_id = notes_note_lat_nplovd.id
  where master_join_ciqmxd.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_hyeamt on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_aeolqg.id)::jsonb AS theairspacevolume,
    notes_note_view_rozfhv.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_aeolqg on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_aeolqg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vozfzy.*) AS annotation
  from master_join master_join_icfbxh
  join notes.note_view notes_note_lat_vozfzy on master_join_icfbxh.target_id = notes_note_lat_vozfzy.id
  where master_join_icfbxh.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_rozfhv on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_xmuoiu.title as varchar), '(' || shared_standardlevelcolumn_pt_xmuoiu.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_xmuoiu.href::text AS discretelevelseries_href,
    notes_note_view_fxcwog.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_xmuoiu on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_xmuoiu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgvtnl.*) AS annotation
  from master_join master_join_dgelsy
  join notes.note_view notes_note_lat_bgvtnl on master_join_dgelsy.target_id = notes_note_lat_bgvtnl.id
  where master_join_dgelsy.source_id = shared.airspacelayer.id
) as notes_note_view_fxcwog on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_ftviod.title as varchar), '(' || airspace_airspace_pt_ftviod.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_ftviod.href::text AS theairspace_href,
    notes_note_view_ccehlc.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_ftviod on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_ftviod.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_glakvn.*) AS annotation
  from master_join master_join_ztxyfl
  join notes.note_view notes_note_lat_glakvn on master_join_ztxyfl.target_id = notes_note_lat_glakvn.id
  where master_join_ztxyfl.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_ccehlc on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_bwcmtf.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nptpbf.*) AS annotation
  from master_join master_join_midivd
  join notes.note_view notes_note_lat_nptpbf on master_join_midivd.target_id = notes_note_lat_nptpbf.id
  where master_join_midivd.source_id = shared.altitudeadjustment.id
) as notes_note_view_bwcmtf on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_vdxevz.title as varchar), '(' || navaids_points_angleindication_pt_vdxevz.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_vdxevz.href::text AS theangleindication_href,
    notes_note_view_gcgdrj.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vdxevz on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_vdxevz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_guielt.*) AS annotation
  from master_join master_join_ljiijp
  join notes.note_view notes_note_lat_guielt on master_join_ljiijp.target_id = notes_note_lat_guielt.id
  where master_join_ljiijp.source_id = navaids_points.angleuse.id
) as notes_note_view_gcgdrj on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_werhyt.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfuqmn.*) AS annotation
  from master_join master_join_cbdebp
  join notes.note_view notes_note_lat_gfuqmn on master_join_cbdebp.target_id = notes_note_lat_gfuqmn.id
  where master_join_cbdebp.source_id = procedure.approachaltitudetable.id
) as notes_note_view_werhyt on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_lpzdaj.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_tpfjha.title as varchar), '(' || airport_heliport_altimetersource_pt_tpfjha.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_tpfjha.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_cfpmxp.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_ashrjx.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_iiiboi.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_glkaod.designsurface::jsonb as designsurface,
    notes_note_view_zkqpdm.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_lpzdaj on procedure.approachcondition.minimumset_id = procedure_minima_pt_lpzdaj.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_tpfjha on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_tpfjha.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_umbths.id) as circlingrestriction
  from master_join master_join_lbevwo
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_umbths on master_join_lbevwo.target_id = procedure_circlingrestriction_lat_umbths.id
  where master_join_lbevwo.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_cfpmxp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pzpvzk.id) as aircraftcategory
  from master_join master_join_nlumfi
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_pzpvzk on master_join_nlumfi.target_id = shared_aircraftcharacteristic_lat_pzpvzk.id
  where master_join_nlumfi.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_ashrjx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_icavpc.id) as landingarea
  from master_join master_join_unferd
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_icavpc on master_join_unferd.target_id = procedure_landingtakeoffareacollection_lat_icavpc.id
  where master_join_unferd.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_iiiboi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_kggzie.id) as designsurface
  from master_join master_join_iooccy
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_kggzie on master_join_iooccy.target_id = shared_obstacleassessmentarea_lat_kggzie.id
  where master_join_iooccy.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_glkaod on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tyqdox.*) AS annotation
  from master_join master_join_qtgcey
  join notes.note_view notes_note_lat_tyqdox on master_join_qtgcey.target_id = notes_note_lat_tyqdox.id
  where master_join_qtgcey.source_id = procedure.approachcondition.id
) as notes_note_view_zkqpdm on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_geeqqa.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_easxdl.*) AS annotation
  from master_join master_join_wmqzhg
  join notes.note_view notes_note_lat_easxdl on master_join_wmqzhg.target_id = notes_note_lat_easxdl.id
  where master_join_wmqzhg.source_id = procedure.approachdistancetable.id
) as notes_note_view_geeqqa on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_jipzoo.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asbvmn.*) AS annotation
  from master_join master_join_xvzivu
  join notes.note_view notes_note_lat_asbvmn on master_join_xvzivu.target_id = notes_note_lat_asbvmn.id
  where master_join_xvzivu.source_id = procedure.approachtimingtable.id
) as notes_note_view_jipzoo on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_ypwgwh.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_aryojn.layer::jsonb as layer,
    notes_note_view_opulax.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ngblgz.id) as criticalridge
  from master_join master_join_wcufik
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ngblgz on master_join_wcufik.target_id = airport_heliport_ridge_lat_ngblgz.id
  where master_join_wcufik.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_ypwgwh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_pfzfyo.id) as layer
  from master_join master_join_klzahw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_pfzfyo on master_join_klzahw.target_id = airport_heliport_surfacecontaminationlayer_lat_pfzfyo.id
  where master_join_klzahw.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_aryojn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qnlvta.*) AS annotation
  from master_join master_join_gojosm
  join notes.note_view notes_note_lat_qnlvta on master_join_gojosm.target_id = notes_note_lat_qnlvta.id
  where master_join_gojosm.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_opulax on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_gwdexz.title as varchar), '(' || organisation_organisationauthority_pt_gwdexz.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_gwdexz.href::text AS theorganisationauthority_href,
    notes_note_view_jrlvnr.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gwdexz on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_gwdexz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zylzph.*) AS annotation
  from master_join master_join_zkfjfv
  join notes.note_view notes_note_lat_zylzph on master_join_zkfjfv.target_id = notes_note_lat_zylzph.id
  where master_join_zkfjfv.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_jrlvnr on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_kgdsus.title as varchar), '(' || organisation_organisationauthority_pt_kgdsus.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_kgdsus.href::text AS theorganisationauthority_href,
    notes_note_view_ekaxzd.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_kgdsus on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_kgdsus.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_grznsi.*) AS annotation
  from master_join master_join_eyhfyi
  join notes.note_view notes_note_lat_grznsi on master_join_eyhfyi.target_id = notes_note_lat_grznsi.id
  where master_join_eyhfyi.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_ekaxzd on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_wqwxhi.title as varchar), '(' || organisation_organisationauthority_pt_wqwxhi.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_wqwxhi.href::text AS theorganisationauthority_href,
    notes_note_view_xuqlcv.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_wqwxhi on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_wqwxhi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_elxmkk.*) AS annotation
  from master_join master_join_swudub
  join notes.note_view notes_note_lat_elxmkk on master_join_swudub.target_id = notes_note_lat_elxmkk.id
  where master_join_swudub.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_xuqlcv on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xrzrjz.title as varchar), '(' || organisation_organisationauthority_pt_xrzrjz.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_xrzrjz.href::text AS theorganisationauthority_href,
    notes_note_view_ukynxq.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xrzrjz on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_xrzrjz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbksdu.*) AS annotation
  from master_join master_join_efpqez
  join notes.note_view notes_note_lat_rbksdu on master_join_efpqez.target_id = notes_note_lat_rbksdu.id
  where master_join_efpqez.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_ukynxq on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_xgpqiw.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lpbbvc.*) AS annotation
  from master_join master_join_frfbde
  join notes.note_view notes_note_lat_lpbbvc on master_join_frfbde.target_id = notes_note_lat_lpbbvc.id
  where master_join_frfbde.source_id = service.callsigndetail.id
) as notes_note_view_xgpqiw on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_tclnlp.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgvxtf.*) AS annotation
  from master_join master_join_klaxwa
  join notes.note_view notes_note_lat_vgvxtf on master_join_klaxwa.target_id = notes_note_lat_vgvxtf.id
  where master_join_klaxwa.source_id = shared.circlesector.id
) as notes_note_view_tclnlp on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_xuqguc.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vjltgo.*) AS annotation
  from master_join master_join_liapne
  join notes.note_view notes_note_lat_vjltgo on master_join_liapne.target_id = notes_note_lat_vjltgo.id
  where master_join_liapne.source_id = airport_heliport.city.id
) as notes_note_view_xuqguc on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_ilvjuf.id)::jsonb AS enginetype,
    notes_note_view_ggqnad.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ilvjuf on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_ilvjuf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnviwu.*) AS annotation
  from master_join master_join_xuoknx
  join notes.note_view notes_note_lat_lnviwu on master_join_xuoknx.target_id = notes_note_lat_lnviwu.id
  where master_join_xuoknx.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_ggqnad on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_wufppb.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_prfkxc.*) AS annotation
  from master_join master_join_lnmcsz
  join notes.note_view notes_note_lat_prfkxc on master_join_lnmcsz.target_id = notes_note_lat_prfkxc.id
  where master_join_lnmcsz.source_id = routes.directflightclass.id
) as notes_note_view_wufppb on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_feonyw.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfmhgt.*) AS annotation
  from master_join master_join_fnmjno
  join notes.note_view notes_note_lat_nfmhgt on master_join_fnmjno.target_id = notes_note_lat_nfmhgt.id
  where master_join_fnmjno.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_feonyw on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_kmucoy.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_hjqilf.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_ptynvs.id) as adjustmentinopcol
  from master_join master_join_emgcke
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_ptynvs on master_join_emgcke.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_ptynvs.id
  where master_join_emgcke.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_kmucoy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qzwacs.*) AS annotation
  from master_join master_join_zredar
  join notes.note_view notes_note_lat_qzwacs on master_join_zredar.target_id = notes_note_lat_qzwacs.id
  where master_join_zredar.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_hjqilf on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_wfdrhl.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_upohiz.*) AS annotation
  from master_join master_join_nzvhmm
  join notes.note_view notes_note_lat_upohiz on master_join_nzvhmm.target_id = notes_note_lat_upohiz.id
  where master_join_nzvhmm.source_id = public.fasdatablock.id
) as notes_note_view_wfdrhl on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_gfeclr.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_xwmxzw.distance::jsonb as distance,
    procedure_approachtimingtable_pt_dmeuly.timing::jsonb as timing,
    notes_note_view_ctxrqw.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_jtbazu.id) as altitude
  from master_join master_join_swnwqn
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_jtbazu on master_join_swnwqn.target_id = procedure_approachaltitudetable_lat_jtbazu.id
  where master_join_swnwqn.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_gfeclr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_bvkjuy.id) as distance
  from master_join master_join_rndcpc
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_bvkjuy on master_join_rndcpc.target_id = procedure_approachdistancetable_lat_bvkjuy.id
  where master_join_rndcpc.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_xwmxzw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_tpsbew.id) as timing
  from master_join master_join_cpoyvr
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_tpsbew on master_join_cpoyvr.target_id = procedure_approachtimingtable_lat_tpsbew.id
  where master_join_cpoyvr.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_dmeuly on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lwjgoj.*) AS annotation
  from master_join master_join_kvjwbt
  join notes.note_view notes_note_lat_lwjgoj on master_join_kvjwbt.target_id = notes_note_lat_lwjgoj.id
  where master_join_kvjwbt.source_id = procedure.finalprofile.id
) as notes_note_view_ctxrqw on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_tuvuxt.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqkoyt.*) AS annotation
  from master_join master_join_xmvqlj
  join notes.note_view notes_note_lat_eqkoyt on master_join_xmvqlj.target_id = notes_note_lat_eqkoyt.id
  where master_join_xmvqlj.source_id = shared.flightcharacteristic.id
) as notes_note_view_tuvuxt on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_pitkqp.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dsuevs.*) AS annotation
  from master_join master_join_oywylc
  join notes.note_view notes_note_lat_dsuevs on master_join_oywylc.target_id = notes_note_lat_dsuevs.id
  where master_join_oywylc.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_pitkqp on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_hzwdpy.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lesvkx.*) AS annotation
  from master_join master_join_vejfvb
  join notes.note_view notes_note_lat_lesvkx on master_join_vejfvb.target_id = notes_note_lat_lesvkx.id
  where master_join_vejfvb.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_hzwdpy on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_hxjbzy.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iynewk.*) AS annotation
  from master_join master_join_wsvfkx
  join notes.note_view notes_note_lat_iynewk on master_join_wsvfkx.target_id = notes_note_lat_iynewk.id
  where master_join_wsvfkx.source_id = service.fuel.id
) as notes_note_view_hxjbzy on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_wpelil.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvzwmk.*) AS annotation
  from master_join master_join_arzlkf
  join notes.note_view notes_note_lat_jvzwmk on master_join_arzlkf.target_id = notes_note_lat_jvzwmk.id
  where master_join_arzlkf.source_id = holding.holdingpatterndistance.id
) as notes_note_view_wpelil on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_xcxirb.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kblexq.*) AS annotation
  from master_join master_join_xrvelf
  join notes.note_view notes_note_lat_kblexq on master_join_xrvelf.target_id = notes_note_lat_kblexq.id
  where master_join_xrvelf.source_id = holding.holdingpatternduration.id
) as notes_note_view_xcxirb on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_oyqdgn.title as varchar), '(' || holding_holdingpattern_pt_oyqdgn.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_oyqdgn.href::text AS theholdingpattern_href,
    notes_note_view_lvoafo.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_oyqdgn on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_oyqdgn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lmaebr.*) AS annotation
  from master_join master_join_zwxvvq
  join notes.note_view notes_note_lat_lmaebr on master_join_zwxvvq.target_id = notes_note_lat_lmaebr.id
  where master_join_zwxvvq.source_id = procedure.holdinguse.id
) as notes_note_view_lvoafo on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_fzlvfv.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_riqmur.tlof::jsonb as tlof,
    notes_note_view_xemxvz.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_hwxukk.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_hwxukk.title AS varchar), '(' || airport_heliport_runwaydirection_lat_hwxukk.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_hwxukk.href
  )) as runway  from master_join master_join_ulrvtc
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_hwxukk on master_join_ulrvtc.target_id = airport_heliport_runwaydirection_lat_hwxukk.id
  where master_join_ulrvtc.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_fzlvfv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_amanxn.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_amanxn.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_amanxn.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_amanxn.href
  )) as tlof  from master_join master_join_pzihwn
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_amanxn on master_join_pzihwn.target_id = airport_heliport_touchdownliftoff_lat_amanxn.id
  where master_join_pzihwn.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_riqmur on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ovecgw.*) AS annotation
  from master_join master_join_qmtqho
  join notes.note_view notes_note_lat_ovecgw on master_join_qmtqho.target_id = notes_note_lat_ovecgw.id
  where master_join_qmtqho.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_xemxvz on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_ltwuyv.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xzgxit.*) AS annotation
  from master_join master_join_qybbdh
  join notes.note_view notes_note_lat_xzgxit on master_join_qybbdh.target_id = notes_note_lat_xzgxit.id
  where master_join_qybbdh.source_id = airport_heliport.lightactivation.id
) as notes_note_view_ltwuyv on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_krglsa.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_abcjuv.*) AS annotation
  from master_join master_join_zeyjxd
  join notes.note_view notes_note_lat_abcjuv on master_join_zeyjxd.target_id = notes_note_lat_abcjuv.id
  where master_join_zeyjxd.source_id = shared.meteorology.id
) as notes_note_view_krglsa on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_wsnzra.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_xmairl.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_qtocro.id) as adjustmentinop
  from master_join master_join_ffvduw
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_qtocro on master_join_ffvduw.target_id = procedure_equipmentunavailableadjustment_lat_qtocro.id
  where master_join_ffvduw.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_wsnzra on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqllbg.*) AS annotation
  from master_join master_join_aqwxrq
  join notes.note_view notes_note_lat_lqllbg on master_join_aqwxrq.target_id = notes_note_lat_lqllbg.id
  where master_join_aqwxrq.source_id = procedure.minima.id
) as notes_note_view_xmairl on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_spddot.altimeter::jsonb as altimeter,
    notes_note_view_occsvh.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_coaplf.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_coaplf.title AS varchar), '(' || airport_heliport_altimetersource_lat_coaplf.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_coaplf.href
  )) as altimeter  from master_join master_join_etqrsy
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_coaplf on master_join_etqrsy.target_id = airport_heliport_altimetersource_lat_coaplf.id
  where master_join_etqrsy.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_spddot on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bpadyq.*) AS annotation
  from master_join master_join_kkjykk
  join notes.note_view notes_note_lat_bpadyq on master_join_kkjykk.target_id = notes_note_lat_bpadyq.id
  where master_join_kkjykk.source_id = procedure.missedapproachgroup.id
) as notes_note_view_occsvh on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    navaids_points_navaidequipment_pt_ckciga.thenavaidequipment::jsonb as thenavaidequipment,
    notes_note_view_ewzrtd.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_kymlug.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_kymlug.title AS varchar), '(' || navaids_points_navaidequipment_lat_kymlug.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_kymlug.href
  )) as thenavaidequipment  from master_join master_join_pkztfl
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_kymlug on master_join_pkztfl.target_id = navaids_points_navaidequipment_lat_kymlug.id
  where master_join_pkztfl.source_id = navaids_points.navaidcomponent.id
) as navaids_points_navaidequipment_pt_ckciga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iiazcf.*) AS annotation
  from master_join master_join_fcywjz
  join notes.note_view notes_note_lat_iiazcf on master_join_fcywjz.target_id = notes_note_lat_iiazcf.id
  where master_join_fcywjz.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_ewzrtd on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    navaids_points_navaidequipment_pt_njjlzp.thenavaidequipment::jsonb as thenavaidequipment,
    notes_note_view_labfpi.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_sxzfek.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_sxzfek.title AS varchar), '(' || navaids_points_navaidequipment_lat_sxzfek.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_sxzfek.href
  )) as thenavaidequipment  from master_join master_join_pnnvyd
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_sxzfek on master_join_pnnvyd.target_id = navaids_points_navaidequipment_lat_sxzfek.id
  where master_join_pnnvyd.source_id = airport_heliport.navaidequipmentdistance.id
) as navaids_points_navaidequipment_pt_njjlzp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egfhnv.*) AS annotation
  from master_join master_join_bpmwxg
  join notes.note_view notes_note_lat_egfhnv on master_join_bpmwxg.target_id = notes_note_lat_egfhnv.id
  where master_join_bpmwxg.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_labfpi on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_rouxiy.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_twrafs.*) AS annotation
  from master_join master_join_hiwjkw
  join notes.note_view notes_note_lat_twrafs on master_join_hiwjkw.target_id = notes_note_lat_twrafs.id
  where master_join_hiwjkw.source_id = service.nitrogen.id
) as notes_note_view_rouxiy on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_vybsju.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qikdws.*) AS annotation
  from master_join master_join_auphvu
  join notes.note_view notes_note_lat_qikdws on master_join_auphvu.target_id = notes_note_lat_qikdws.id
  where master_join_auphvu.source_id = shared.obstacleplacement.id
) as notes_note_view_vybsju on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_ekoytc.title as varchar), '(' || obstacles_verticalstructure_pt_ekoytc.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_ekoytc.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_vupqdw.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_aauxam.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_gluhbe.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_ekoytc on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_ekoytc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_zdtjbg.id) as adjustment
  from master_join master_join_zfsrol
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_zdtjbg on master_join_zfsrol.target_id = shared_altitudeadjustment_lat_zdtjbg.id
  where master_join_zfsrol.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_vupqdw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_dvhszd.id) as obstacleplacement
  from master_join master_join_mkfszh
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_dvhszd on master_join_mkfszh.target_id = shared_obstacleplacement_lat_dvhszd.id
  where master_join_mkfszh.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_aauxam on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsnayr.*) AS annotation
  from master_join master_join_tqmsbp
  join notes.note_view notes_note_lat_rsnayr on master_join_tqmsbp.target_id = notes_note_lat_rsnayr.id
  where master_join_tqmsbp.source_id = shared.obstruction.id
) as notes_note_view_gluhbe on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_uhnugm.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tafiil.*) AS annotation
  from master_join master_join_dgecch
  join notes.note_view notes_note_lat_tafiil on master_join_dgecch.target_id = notes_note_lat_tafiil.id
  where master_join_dgecch.source_id = service.oil.id
) as notes_note_view_uhnugm on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_hpgmys.title as varchar), '(' || organisation_organisationauthority_pt_hpgmys.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_hpgmys.href::text AS theorganisationauthority_href,
    notes_note_view_owjwgg.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hpgmys on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_hpgmys.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_amqhjb.*) AS annotation
  from master_join master_join_epaumb
  join notes.note_view notes_note_lat_amqhjb on master_join_epaumb.target_id = notes_note_lat_amqhjb.id
  where master_join_epaumb.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_owjwgg on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_lvzzfg.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikeysy.*) AS annotation
  from master_join master_join_hvysaz
  join notes.note_view notes_note_lat_ikeysy on master_join_hvysaz.target_id = notes_note_lat_ikeysy.id
  where master_join_hvysaz.source_id = service.oxygen.id
) as notes_note_view_lvzzfg on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    procedure_segmentleg_pt_zzrxsx.thesegmentleg::jsonb as thesegmentleg,
    notes_note_view_pxykrz.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_segmentleg_lat_hivxwu.id,
      'title', coalesce(cast(procedure_segmentleg_lat_hivxwu.title AS varchar), '(' || procedure_segmentleg_lat_hivxwu.nilreason[1] || ')'),
      'href', procedure_segmentleg_lat_hivxwu.href
  )) as thesegmentleg  from master_join master_join_tmxgzp
  join procedure.segmentleg_pt procedure_segmentleg_lat_hivxwu on master_join_tmxgzp.target_id = procedure_segmentleg_lat_hivxwu.id
  where master_join_tmxgzp.source_id = procedure.proceduretransitionleg.id
) as procedure_segmentleg_pt_zzrxsx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_phouac.*) AS annotation
  from master_join master_join_sznico
  join notes.note_view notes_note_lat_phouac on master_join_sznico.target_id = notes_note_lat_phouac.id
  where master_join_sznico.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_pxykrz on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    surveillance_radarequipment_pt_ojrjro.theradarequipment::jsonb as theradarequipment,
    notes_note_view_vrgcqb.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', surveillance_radarequipment_lat_jilblu.id,
      'title', coalesce(cast(surveillance_radarequipment_lat_jilblu.title AS varchar), '(' || surveillance_radarequipment_lat_jilblu.nilreason[1] || ')'),
      'href', surveillance_radarequipment_lat_jilblu.href
  )) as theradarequipment  from master_join master_join_czrdso
  join surveillance.radarequipment_pt surveillance_radarequipment_lat_jilblu on master_join_czrdso.target_id = surveillance_radarequipment_lat_jilblu.id
  where master_join_czrdso.source_id = surveillance.radarcomponent.id
) as surveillance_radarequipment_pt_ojrjro on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ltzdzl.*) AS annotation
  from master_join master_join_vzvpde
  join notes.note_view notes_note_lat_ltzdzl on master_join_vzvpde.target_id = notes_note_lat_ltzdzl.id
  where master_join_vzvpde.source_id = surveillance.radarcomponent.id
) as notes_note_view_vrgcqb on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_lyedpp.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yitlhy.*) AS annotation
  from master_join master_join_iztjnw
  join notes.note_view notes_note_lat_yitlhy on master_join_iztjnw.target_id = notes_note_lat_yitlhy.id
  where master_join_iztjnw.source_id = airport_heliport.ridge.id
) as notes_note_view_lyedpp on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_jflopz.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ekabpb.layer::jsonb as layer,
    notes_note_view_auuxyk.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_khbgjc.id) as criticalridge
  from master_join master_join_rgnvyj
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_khbgjc on master_join_rgnvyj.target_id = airport_heliport_ridge_lat_khbgjc.id
  where master_join_rgnvyj.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_jflopz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_tjgoei.id) as layer
  from master_join master_join_uqgagn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_tjgoei on master_join_uqgagn.target_id = airport_heliport_surfacecontaminationlayer_lat_tjgoei.id
  where master_join_uqgagn.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ekabpb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sadfky.*) AS annotation
  from master_join master_join_jichgh
  join notes.note_view notes_note_lat_sadfky on master_join_jichgh.target_id = notes_note_lat_sadfky.id
  where master_join_jichgh.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_auuxyk on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_cmkgth.declaredvalue::jsonb as declaredvalue,
    notes_note_view_kigjot.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_wfnjto.id) as declaredvalue
  from master_join master_join_yttbnn
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_wfnjto on master_join_yttbnn.target_id = airport_heliport_runwaydeclareddistancevalue_lat_wfnjto.id
  where master_join_yttbnn.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_cmkgth on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wyynlr.*) AS annotation
  from master_join master_join_okcxbi
  join notes.note_view notes_note_lat_wyynlr on master_join_okcxbi.target_id = notes_note_lat_wyynlr.id
  where master_join_okcxbi.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_kigjot on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_vkrcai.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_tdepte.layer::jsonb as layer,
    notes_note_view_dehyfj.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ynfqdm.id) as criticalridge
  from master_join master_join_irmsez
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ynfqdm on master_join_irmsez.target_id = airport_heliport_ridge_lat_ynfqdm.id
  where master_join_irmsez.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_vkrcai on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_sgddpe.id) as layer
  from master_join master_join_qgmysg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_sgddpe on master_join_qgmysg.target_id = airport_heliport_surfacecontaminationlayer_lat_sgddpe.id
  where master_join_qgmysg.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_tdepte on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ceicwq.*) AS annotation
  from master_join master_join_ivhgzc
  join notes.note_view notes_note_lat_ceicwq on master_join_ivhgzc.target_id = notes_note_lat_ceicwq.id
  where master_join_ivhgzc.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_dehyfj on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_dylayh.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ihmkai.*) AS annotation
  from master_join master_join_uhules
  join notes.note_view notes_note_lat_ihmkai on master_join_uhules.target_id = notes_note_lat_ihmkai.id
  where master_join_uhules.source_id = procedure.sectordesign.id
) as notes_note_view_dylayh on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_luzgrs.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mpznba.*) AS annotation
  from master_join master_join_zmdere
  join notes.note_view notes_note_lat_mpznba on master_join_zmdere.target_id = notes_note_lat_mpznba.id
  where master_join_zmdere.source_id = shared.standardlevel.id
) as notes_note_view_luzgrs on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_iamujd.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aiogwv.*) AS annotation
  from master_join master_join_upwfue
  join notes.note_view notes_note_lat_aiogwv on master_join_upwfue.target_id = notes_note_lat_aiogwv.id
  where master_join_upwfue.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_iamujd on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_qrotjo.title as varchar), '(' || organisation_unit_pt_qrotjo.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_qrotjo.href::text AS theunit_href,
    notes_note_view_boklar.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_qrotjo on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_qrotjo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_trwoxp.*) AS annotation
  from master_join master_join_olejdl
  join notes.note_view notes_note_lat_trwoxp on master_join_olejdl.target_id = notes_note_lat_trwoxp.id
  where master_join_olejdl.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_boklar on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_ylrogk.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ookdmv.layer::jsonb as layer,
    notes_note_view_rnfeaa.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ydapzj.id) as criticalridge
  from master_join master_join_tipkmo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ydapzj on master_join_tipkmo.target_id = airport_heliport_ridge_lat_ydapzj.id
  where master_join_tipkmo.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_ylrogk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_jvfmap.id) as layer
  from master_join master_join_egsisp
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_jvfmap on master_join_egsisp.target_id = airport_heliport_surfacecontaminationlayer_lat_jvfmap.id
  where master_join_egsisp.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ookdmv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vptpuy.*) AS annotation
  from master_join master_join_znxded
  join notes.note_view notes_note_lat_vptpuy on master_join_znxded.target_id = notes_note_lat_vptpuy.id
  where master_join_znxded.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_rnfeaa on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_bfuyku.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_vurvjf.layer::jsonb as layer,
    notes_note_view_ulgogc.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_ybrrnr.id) as criticalridge
  from master_join master_join_vlslmt
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_ybrrnr on master_join_vlslmt.target_id = airport_heliport_ridge_lat_ybrrnr.id
  where master_join_vlslmt.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_bfuyku on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_ovpvig.id) as layer
  from master_join master_join_geflcn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_ovpvig on master_join_geflcn.target_id = airport_heliport_surfacecontaminationlayer_lat_ovpvig.id
  where master_join_geflcn.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_vurvjf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_clwjkj.*) AS annotation
  from master_join master_join_vtumji
  join notes.note_view notes_note_lat_clwjkj on master_join_vtumji.target_id = notes_note_lat_clwjkj.id
  where master_join_vtumji.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_ulgogc on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_rtsrlr.title as varchar), '(' || organisation_unit_pt_rtsrlr.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_rtsrlr.href::text AS theunit_href,
    notes_note_view_bofjtf.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_rtsrlr on organisation.unitdependency.theunit_id = organisation_unit_pt_rtsrlr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tpbwhf.*) AS annotation
  from master_join master_join_kmlfep
  join notes.note_view notes_note_lat_tpbwhf on master_join_kmlfep.target_id = notes_note_lat_tpbwhf.id
  where master_join_kmlfep.source_id = organisation.unitdependency.id
) as notes_note_view_bofjtf on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_yzfcci.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_yzfcci.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_clrolw.point::jsonb as point,
    shared_airspacelayer_pt_cmhqzx.verticalextent::jsonb as verticalextent,
    notes_note_view_ztitju.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_yzfcci on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_yzfcci.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_thmund.id) as point
  from master_join master_join_vsgcoe
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_thmund on master_join_vsgcoe.target_id = aerial_refuelling_aerialrefuellingpoint_lat_thmund.id
  where master_join_vsgcoe.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_clrolw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ufgnex.id) as verticalextent
  from master_join master_join_gxcpli
  join shared.airspacelayer_pt shared_airspacelayer_lat_ufgnex on master_join_gxcpli.target_id = shared_airspacelayer_lat_ufgnex.id
  where master_join_gxcpli.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_cmhqzx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oofgtu.*) AS annotation
  from master_join master_join_iltsgn
  join notes.note_view notes_note_lat_oofgtu on master_join_iltsgn.target_id = notes_note_lat_oofgtu.id
  where master_join_iltsgn.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_ztitju on TRUE;
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_uujgnt.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_plowel.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_plowel.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_prlrni.transitionleg::jsonb as transitionleg,
    notes_note_view_uvobwp.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_uujgnt on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_uujgnt.id
left join geometry.curve_view geometry_curve_view_plowel on procedure.proceduretransition.trajectory_id = geometry_curve_view_plowel.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_wzxcjw.id) as transitionleg
  from master_join master_join_gsscsy
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_wzxcjw on master_join_gsscsy.target_id = procedure_proceduretransitionleg_lat_wzxcjw.id
  where master_join_gsscsy.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_prlrni on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wurzdg.*) AS annotation
  from master_join master_join_xwclgs
  join notes.note_view notes_note_lat_wurzdg on master_join_xwclgs.target_id = notes_note_lat_wurzdg.id
  where master_join_xwclgs.source_id = procedure.proceduretransition.id
) as notes_note_view_uvobwp on TRUE;
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_vxxmik.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vxxmik.longitude AS location_longitude,
    geometry_elevatedpoint_view_vxxmik.latitude AS location_latitude,
    geometry_elevatedpoint_view_vxxmik.elevation AS location_elevation,
    geometry_elevatedpoint_view_vxxmik.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vxxmik.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vxxmik.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vxxmik.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_pxqfqj.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_qnvtye.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vxxmik on shared.lightelement.location_id = geometry_elevatedpoint_view_vxxmik.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_okjovu.*) AS annotation
  from master_join master_join_iwlzam
  join notes.note_view notes_note_lat_okjovu on master_join_iwlzam.target_id = notes_note_lat_okjovu.id
  where master_join_iwlzam.source_id = shared.lightelement.id
) as notes_note_view_pxqfqj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_zqmtxh.id) as availability
  from master_join master_join_kmzvqs
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_zqmtxh on master_join_kmzvqs.target_id = shared_lightelementstatus_lat_zqmtxh.id
  where master_join_kmzvqs.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_qnvtye on TRUE;
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_xdymbe.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_xdymbe.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_xdymbe.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_xdymbe.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_xdymbe.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_xdymbe.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_xdymbe.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_xdymbe.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_unnivh.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xdymbe on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_xdymbe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_emjthm.*) AS annotation
  from master_join master_join_zzjtzu
  join notes.note_view notes_note_lat_emjthm on master_join_zzjtzu.target_id = notes_note_lat_emjthm.id
  where master_join_zzjtzu.source_id = surveillance.reflector.id
) as notes_note_view_unnivh on TRUE;
-- MarkingElementPropertyType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_skevvz.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_skevvz.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_skevvz.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_skevvz.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_skevvz.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_skevvz.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_tvyuqn.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_tvyuqn.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_tvyuqn.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_tvyuqn.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_tvyuqn.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_tvyuqn.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_sjszvf.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_sjszvf.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_sjszvf.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_sjszvf.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_sjszvf.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_sjszvf.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_sjszvf.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_sjszvf.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_ltulde.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_skevvz on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_skevvz.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_tvyuqn on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_tvyuqn.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sjszvf on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_sjszvf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lcshpz.*) AS annotation
  from master_join master_join_qzstxp
  join notes.note_view notes_note_lat_lcshpz on master_join_qzstxp.target_id = notes_note_lat_lcshpz.id
  where master_join_qzstxp.source_id = airport_heliport.markingelement.id
) as notes_note_view_ltulde on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_gjvgse.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_gjvgse.attr::jsonb  as extent,
    notes_note_view_eymkgx.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_zgltdi.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_zgltdi.id,
      'elevation', geometry_elevatedsurface_lat_zgltdi.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_zgltdi.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_zgltdi.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_zgltdi.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_zgltdi.horizontalAccuracy
    )) AS attr
  from master_join master_join_fejzbq
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_zgltdi on master_join_fejzbq.target_id = geometry_elevatedsurface_lat_zgltdi.id
  where master_join_fejzbq.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_gjvgse on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nxhjub.*) AS annotation
  from master_join master_join_cuwebw
  join notes.note_view notes_note_lat_nxhjub on master_join_cuwebw.target_id = notes_note_lat_nxhjub.id
  where master_join_cuwebw.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_eymkgx on TRUE;
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_heouvk.title as varchar), '(' || navaids_points_designatedpoint_pt_heouvk.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_heouvk.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jdkkbe.title as varchar), '(' || navaids_points_navaid_pt_jdkkbe.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jdkkbe.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mayuzu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mayuzu.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_mayuzu.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nyobic.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nyobic.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nyobic.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_frmrwp.title as varchar), '(' || airport_heliport_airportheliport_pt_frmrwp.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_frmrwp.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_oosrxo.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_oosrxo.longitude AS pointchoiceposition_longitude,
    geometry_point_view_oosrxo.latitude AS pointchoiceposition_latitude,
    geometry_point_view_oosrxo.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_sbocnf.title as varchar), '(' || shared_radiofrequencyarea_pt_sbocnf.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_sbocnf.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_xqrewu.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_cgflaz.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_heouvk on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_heouvk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jdkkbe on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_jdkkbe.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mayuzu on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mayuzu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nyobic on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nyobic.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_frmrwp on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_frmrwp.id
left join geometry.point_view geometry_point_view_oosrxo on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_oosrxo.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_sbocnf on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_sbocnf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_sohfpo.id) as facilitymakeup
  from master_join master_join_nsxntr
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_sohfpo on master_join_nsxntr.target_id = navaids_points_pointreference_lat_sohfpo.id
  where master_join_nsxntr.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_xqrewu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zdveku.*) AS annotation
  from master_join master_join_eloeaa
  join notes.note_view notes_note_lat_zdveku on master_join_eloeaa.target_id = notes_note_lat_zdveku.id
  where master_join_eloeaa.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_cgflaz on TRUE;
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_nlxkby.title as varchar), '(' || navaids_points_designatedpoint_pt_nlxkby.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nlxkby.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ivkhji.title as varchar), '(' || navaids_points_designatedpoint_pt_ivkhji.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ivkhji.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wjnrmz.title as varchar), '(' || navaids_points_navaid_pt_wjnrmz.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_wjnrmz.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_dgnzbz.title as varchar), '(' || navaids_points_navaid_pt_dgnzbz.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_dgnzbz.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kyztvn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kyztvn.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_kyztvn.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pzktea.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pzktea.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_pzktea.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tldtvh.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tldtvh.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tldtvh.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bcidft.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bcidft.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bcidft.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nlmdrd.title as varchar), '(' || airport_heliport_airportheliport_pt_nlmdrd.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_nlmdrd.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dqfsaz.title as varchar), '(' || airport_heliport_airportheliport_pt_dqfsaz.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_dqfsaz.href::text AS startairportreferencepoint_href,
    geometry_point_view_efecus.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_efecus.longitude AS endposition_longitude,
    geometry_point_view_efecus.latitude AS endposition_latitude,
    geometry_point_view_efecus.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_talawb.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_talawb.longitude AS startposition_longitude,
    geometry_point_view_talawb.latitude AS startposition_latitude,
    geometry_point_view_talawb.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_otvxga.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nlxkby on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nlxkby.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wjnrmz on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_wjnrmz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kyztvn on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kyztvn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tldtvh on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tldtvh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nlmdrd on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_nlmdrd.id
left join geometry.point_view geometry_point_view_efecus on routes.directflightsegment.end_position_id = geometry_point_view_efecus.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ivkhji on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ivkhji.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dgnzbz on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_dgnzbz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pzktea on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pzktea.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bcidft on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bcidft.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dqfsaz on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_dqfsaz.id
left join geometry.point_view geometry_point_view_talawb on routes.directflightsegment.start_position_id = geometry_point_view_talawb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_goirqj.*) AS annotation
  from master_join master_join_xgbsuy
  join notes.note_view notes_note_lat_goirqj on master_join_xgbsuy.target_id = notes_note_lat_goirqj.id
  where master_join_xgbsuy.source_id = routes.directflightsegment.id
) as notes_note_view_otvxga on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_ndaczx.title as varchar), '(' || navaids_points_designatedpoint_pt_ndaczx.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ndaczx.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_shhkob.title as varchar), '(' || navaids_points_navaid_pt_shhkob.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_shhkob.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jpwfhh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jpwfhh.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_jpwfhh.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ynjtft.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ynjtft.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ynjtft.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zqtgoe.title as varchar), '(' || airport_heliport_airportheliport_pt_zqtgoe.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zqtgoe.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ucwexw.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_ucwexw.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ucwexw.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ucwexw.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_zxxjcz.title as varchar), '(' || shared_radiofrequencyarea_pt_zxxjcz.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_zxxjcz.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_inhwdc.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_vnpkrk.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ndaczx on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ndaczx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_shhkob on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_shhkob.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jpwfhh on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jpwfhh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ynjtft on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ynjtft.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqtgoe on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zqtgoe.id
left join geometry.point_view geometry_point_view_ucwexw on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_ucwexw.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_zxxjcz on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_zxxjcz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_hagiyk.id) as facilitymakeup
  from master_join master_join_mqgujm
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_hagiyk on master_join_mqgujm.target_id = navaids_points_pointreference_lat_hagiyk.id
  where master_join_mqgujm.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_inhwdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgaodn.*) AS annotation
  from master_join master_join_dkbxsg
  join notes.note_view notes_note_lat_bgaodn on master_join_dkbxsg.target_id = notes_note_lat_bgaodn.id
  where master_join_dkbxsg.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_vnpkrk on TRUE;
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_xfobfr.title as varchar), '(' || airport_heliport_airportheliport_pt_xfobfr.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_xfobfr.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_obuftu.title as varchar), '(' || airport_heliport_airportheliport_pt_obuftu.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_obuftu.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_vabdps.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_vabdps.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_vabdps.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_nvoegq.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_tnghiy.title as varchar), '(' || organisation_organisationauthority_pt_tnghiy.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_tnghiy.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ebvufk.title as varchar), '(' || navaids_points_designatedpoint_pt_ebvufk.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ebvufk.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pvwlwb.title as varchar), '(' || navaids_points_navaid_pt_pvwlwb.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_pvwlwb.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_htweps.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_htweps.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_htweps.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wssroj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wssroj.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wssroj.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_txgjfk.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_txgjfk.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_txgjfk.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_txgjfk.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_iigoxc.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_cwesrw.title as varchar), '(' || routes_airspacebordercrossing_pt_cwesrw.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_cwesrw.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_fxinmh.title as varchar), '(' || airspace_airspace_pt_fxinmh.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_fxinmh.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_yxjyin.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_wnuabt.title as varchar), '(' || procedure_standardinstrumentarrival_pt_wnuabt.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_wnuabt.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_nohnrs.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_kcmuom.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_ghsdvn.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_ghsdvn.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_ghsdvn.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_ghwcbr.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_jgsuyd.flightlevel::jsonb as flightlevel,
    notes_note_view_uxztvs.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xfobfr on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_xfobfr.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_vabdps on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_vabdps.id
left join routes.routeportion_pt routes_routeportion_pt_nvoegq on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_nvoegq.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tnghiy on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_tnghiy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ebvufk on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ebvufk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pvwlwb on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_pvwlwb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_htweps on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_htweps.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wssroj on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wssroj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_obuftu on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_obuftu.id
left join geometry.point_view geometry_point_view_txgjfk on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_txgjfk.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_iigoxc on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_iigoxc.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_cwesrw on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_cwesrw.id
left join airspace.airspace_pt airspace_airspace_pt_fxinmh on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_fxinmh.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_yxjyin on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_yxjyin.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_wnuabt on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_wnuabt.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_nohnrs on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_nohnrs.id
left join shared.meteorology_pt shared_meteorology_pt_kcmuom on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_kcmuom.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_ghsdvn on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_ghsdvn.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_ghwcbr on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_ghwcbr.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_olynic.id) as flightlevel
  from master_join master_join_tijryw
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_olynic on master_join_tijryw.target_id = routes_flightrestrictionlevel_lat_olynic.id
  where master_join_tijryw.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_jgsuyd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kgdmbx.*) AS annotation
  from master_join master_join_yyebog
  join notes.note_view notes_note_lat_kgdmbx on master_join_yyebog.target_id = notes_note_lat_kgdmbx.id
  where master_join_yyebog.source_id = routes.flightconditionelement.id
) as notes_note_view_uxztvs on TRUE;
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_wdgyhd.title as varchar), '(' || procedure_standardinstrumentarrival_pt_wdgyhd.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_wdgyhd.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_akgeqq.title as varchar), '(' || airspace_airspace_pt_akgeqq.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_akgeqq.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bqlofi.title as varchar), '(' || navaids_points_designatedpoint_pt_bqlofi.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bqlofi.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_yphrwv.title as varchar), '(' || navaids_points_navaid_pt_yphrwv.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_yphrwv.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hlfkgo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hlfkgo.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_hlfkgo.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_liyolj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_liyolj.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_liyolj.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aqnmdb.title as varchar), '(' || airport_heliport_airportheliport_pt_aqnmdb.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_aqnmdb.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xhzjan.title as varchar), '(' || airport_heliport_airportheliport_pt_xhzjan.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_xhzjan.href::text AS elementairportheliportelement_href,
    geometry_point_view_diewpg.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_diewpg.longitude AS pointelementposition_longitude,
    geometry_point_view_diewpg.latitude AS pointelementposition_latitude,
    geometry_point_view_diewpg.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_iuyomw.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_buecdb.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_buecdb.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_buecdb.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_bgojvo.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_weajlm.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_weajlm.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_weajlm.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_yyqkir.flightlevel::jsonb as flightlevel,
    notes_note_view_zyrbqy.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_wdgyhd on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_wdgyhd.id
left join airspace.airspace_pt airspace_airspace_pt_akgeqq on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_akgeqq.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bqlofi on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bqlofi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yphrwv on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_yphrwv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hlfkgo on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hlfkgo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_liyolj on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_liyolj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aqnmdb on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_aqnmdb.id
left join geometry.point_view geometry_point_view_diewpg on routes.flightroutingelement.pointelement_position_id = geometry_point_view_diewpg.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_iuyomw on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_iuyomw.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_buecdb on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_buecdb.id
left join routes.routeportion_pt routes_routeportion_pt_bgojvo on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_bgojvo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xhzjan on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_xhzjan.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_weajlm on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_weajlm.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_vahqhj.id) as flightlevel
  from master_join master_join_wbpmna
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_vahqhj on master_join_wbpmna.target_id = routes_flightrestrictionlevel_lat_vahqhj.id
  where master_join_wbpmna.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_yyqkir on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmijrh.*) AS annotation
  from master_join master_join_elvemo
  join notes.note_view notes_note_lat_pmijrh on master_join_elvemo.target_id = notes_note_lat_pmijrh.id
  where master_join_elvemo.source_id = routes.flightroutingelement.id
) as notes_note_view_zyrbqy on TRUE;
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_mdwzyx.title as varchar), '(' || navaids_points_designatedpoint_pt_mdwzyx.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_mdwzyx.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_jeugqh.title as varchar), '(' || navaids_points_designatedpoint_pt_jeugqh.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_jeugqh.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_krsqjz.title as varchar), '(' || navaids_points_designatedpoint_pt_krsqjz.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_krsqjz.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jhjtoq.title as varchar), '(' || navaids_points_navaid_pt_jhjtoq.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_jhjtoq.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_jhyqlj.title as varchar), '(' || navaids_points_navaid_pt_jhyqlj.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_jhyqlj.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_gwyjsa.title as varchar), '(' || navaids_points_navaid_pt_gwyjsa.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_gwyjsa.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_eurhbn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_eurhbn.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_eurhbn.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gndfpe.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gndfpe.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_gndfpe.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_axyfiq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_axyfiq.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_axyfiq.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_weiiyy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_weiiyy.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_weiiyy.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_evtgda.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_evtgda.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_evtgda.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_szxwnk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_szxwnk.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_szxwnk.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_asrsgf.title as varchar), '(' || airport_heliport_airportheliport_pt_asrsgf.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_asrsgf.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_abuyzu.title as varchar), '(' || airport_heliport_airportheliport_pt_abuyzu.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_abuyzu.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ndvzjc.title as varchar), '(' || airport_heliport_airportheliport_pt_ndvzjc.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_ndvzjc.href::text AS endairportreferencepoint_href,
    geometry_point_view_aoakwi.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_aoakwi.longitude AS startposition_longitude,
    geometry_point_view_aoakwi.latitude AS startposition_latitude,
    geometry_point_view_aoakwi.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_qhgccz.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_qhgccz.longitude AS intermediatepointposition_longitude,
    geometry_point_view_qhgccz.latitude AS intermediatepointposition_latitude,
    geometry_point_view_qhgccz.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_hetuyg.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_hetuyg.longitude AS endposition_longitude,
    geometry_point_view_hetuyg.latitude AS endposition_latitude,
    geometry_point_view_hetuyg.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_ursqxi.title as varchar), '(' || routes_route_pt_ursqxi.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_ursqxi.href::text AS referencedroute_href,
    notes_note_view_fqgntk.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mdwzyx on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mdwzyx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jhjtoq on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_jhjtoq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_eurhbn on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_eurhbn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_weiiyy on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_weiiyy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_asrsgf on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_asrsgf.id
left join geometry.point_view geometry_point_view_aoakwi on routes.routeportion.start_position_id = geometry_point_view_aoakwi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jeugqh on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jeugqh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jhyqlj on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_jhyqlj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gndfpe on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gndfpe.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_evtgda on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_evtgda.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_abuyzu on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_abuyzu.id
left join geometry.point_view geometry_point_view_qhgccz on routes.routeportion.intermediatepoint_position_id = geometry_point_view_qhgccz.id
left join routes.route_pt routes_route_pt_ursqxi on routes.routeportion.referencedroute_id = routes_route_pt_ursqxi.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_krsqjz on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_krsqjz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gwyjsa on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_gwyjsa.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_axyfiq on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_axyfiq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_szxwnk on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_szxwnk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ndvzjc on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_ndvzjc.id
left join geometry.point_view geometry_point_view_hetuyg on routes.routeportion.end_position_id = geometry_point_view_hetuyg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pdsgau.*) AS annotation
  from master_join master_join_zjtlyx
  join notes.note_view notes_note_lat_pdsgau on master_join_zjtlyx.target_id = notes_note_lat_pdsgau.id
  where master_join_zjtlyx.source_id = routes.routeportion.id
) as notes_note_view_fqgntk on TRUE;
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_jnyzwa.title as varchar), '(' || navaids_points_designatedpoint_pt_jnyzwa.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_jnyzwa.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_atusqy.title as varchar), '(' || navaids_points_navaid_pt_atusqy.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_atusqy.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_imcpgl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_imcpgl.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_imcpgl.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nnswer.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nnswer.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nnswer.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ictwxr.title as varchar), '(' || airport_heliport_airportheliport_pt_ictwxr.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ictwxr.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_xoxvta.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_xoxvta.longitude AS pointchoiceposition_longitude,
    geometry_point_view_xoxvta.latitude AS pointchoiceposition_latitude,
    geometry_point_view_xoxvta.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_urvvil.title as varchar), '(' || shared_radiofrequencyarea_pt_urvvil.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_urvvil.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_cpsshn.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_btjlqg.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jnyzwa on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_jnyzwa.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_atusqy on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_atusqy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_imcpgl on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_imcpgl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nnswer on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nnswer.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ictwxr on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ictwxr.id
left join geometry.point_view geometry_point_view_xoxvta on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_xoxvta.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_urvvil on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_urvvil.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_wvlwni.id) as facilitymakeup
  from master_join master_join_qzoasg
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_wvlwni on master_join_qzoasg.target_id = navaids_points_pointreference_lat_wvlwni.id
  where master_join_qzoasg.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_cpsshn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lebbsw.*) AS annotation
  from master_join master_join_cwltiu
  join notes.note_view notes_note_lat_lebbsw on master_join_cwltiu.target_id = notes_note_lat_lebbsw.id
  where master_join_cwltiu.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_btjlqg on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_jqoujp.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_jqoujp.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_ssxpnr.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_azzrmv.point::jsonb as point,
    notes_note_view_xywiky.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_jqoujp on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_jqoujp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_pngcop.id) as verticalextent
  from master_join master_join_pgfgxp
  join shared.airspacelayer_pt shared_airspacelayer_lat_pngcop on master_join_pgfgxp.target_id = shared_airspacelayer_lat_pngcop.id
  where master_join_pgfgxp.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_ssxpnr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_siywtp.id) as point
  from master_join master_join_fxvoyq
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_siywtp on master_join_fxvoyq.target_id = aerial_refuelling_aerialrefuellingpoint_lat_siywtp.id
  where master_join_fxvoyq.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_azzrmv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjaxkj.*) AS annotation
  from master_join master_join_sfiyhw
  join notes.note_view notes_note_lat_qjaxkj on master_join_sfiyhw.target_id = notes_note_lat_qjaxkj.id
  where master_join_sfiyhw.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_xywiky on TRUE;
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_ofrdpo.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_ofrdpo.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_epglit.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_epglit.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_pwepmn.id)::jsonb AS contributorairspace,
    notes_note_view_wozlce.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_ofrdpo on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_ofrdpo.id
left join geometry.curve_view geometry_curve_view_epglit on airspace.airspacevolume.centreline_id = geometry_curve_view_epglit.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_pwepmn on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_pwepmn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujzmzw.*) AS annotation
  from master_join master_join_zbgnbt
  join notes.note_view notes_note_lat_ujzmzw on master_join_zbgnbt.target_id = notes_note_lat_ujzmzw.id
  where master_join_zbgnbt.source_id = airspace.airspacevolume.id
) as notes_note_view_wozlce on TRUE;
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_gwjzre.id)::jsonb AS sectordefinition,
    geometry_surface_view_iputev.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_iputev.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_zkfkjf.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_atozjj.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_zxcylg.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_gwjzre on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_gwjzre.id
left join geometry.surface_view geometry_surface_view_iputev on procedure.navigationareasector.extent_id = geometry_surface_view_iputev.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_kqvais.id) as significantobstacle
  from master_join master_join_rtvrnw
  join shared.obstruction_pt shared_obstruction_lat_kqvais on master_join_rtvrnw.target_id = shared_obstruction_lat_kqvais.id
  where master_join_rtvrnw.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_zkfkjf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_pvftwh.id) as sectorcriteria
  from master_join master_join_uzopym
  join procedure.sectordesign_pt procedure_sectordesign_lat_pvftwh on master_join_uzopym.target_id = procedure_sectordesign_lat_pvftwh.id
  where master_join_uzopym.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_atozjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykgrki.*) AS annotation
  from master_join master_join_pnjwed
  join notes.note_view notes_note_lat_ykgrki on master_join_pnjwed.target_id = notes_note_lat_ykgrki.id
  where master_join_pnjwed.source_id = procedure.navigationareasector.id
) as notes_note_view_zxcylg on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_mhembh.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_mhembh.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_ddyysu.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_ddyysu.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_rgznbz.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_mswhkk.significantobstacle::jsonb as significantobstacle,
    notes_note_view_hxqxto.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_mhembh on shared.obstacleassessmentarea.surface_id = geometry_surface_view_mhembh.id
left join geometry.curve_view geometry_curve_view_ddyysu on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_ddyysu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ycjmgf.id) as aircraftcategory
  from master_join master_join_cgxrcr
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_ycjmgf on master_join_cgxrcr.target_id = shared_aircraftcharacteristic_lat_ycjmgf.id
  where master_join_cgxrcr.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_rgznbz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_nndjyn.id) as significantobstacle
  from master_join master_join_aghtqz
  join shared.obstruction_pt shared_obstruction_lat_nndjyn on master_join_aghtqz.target_id = shared_obstruction_lat_nndjyn.id
  where master_join_aghtqz.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_mswhkk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_joydxs.*) AS annotation
  from master_join master_join_sgifru
  join notes.note_view notes_note_lat_joydxs on master_join_sgifru.target_id = notes_note_lat_joydxs.id
  where master_join_sgifru.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_hxqxto on TRUE;
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_znfsuz.title as varchar), '(' || navaids_points_designatedpoint_pt_znfsuz.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_znfsuz.href::text AS point_href,
    geometry_surface_view_iqwyec.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_iqwyec.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_qtcmsr.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_ojqbmq.facilitydistance::jsonb as facilitydistance,
    notes_note_view_hzxbdl.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_znfsuz on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_znfsuz.id
left join geometry.surface_view geometry_surface_view_iqwyec on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_iqwyec.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_tbrtkg.id) as facilityangle
  from master_join master_join_mtijho
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_tbrtkg on master_join_mtijho.target_id = navaids_points_angleuse_lat_tbrtkg.id
  where master_join_mtijho.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_qtcmsr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_cigpux.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_cigpux.title AS varchar), '(' || navaids_points_distanceindication_lat_cigpux.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_cigpux.href
  )) as facilitydistance  from master_join master_join_nkknfp
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_cigpux on master_join_nkknfp.target_id = navaids_points_distanceindication_lat_cigpux.id
  where master_join_nkknfp.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_ojqbmq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asfvbr.*) AS annotation
  from master_join master_join_chehbx
  join notes.note_view notes_note_lat_asfvbr on master_join_chehbx.target_id = notes_note_lat_asfvbr.id
  where master_join_chehbx.source_id = navaids_points.pointreference.id
) as notes_note_view_hzxbdl on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_ehzsif.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_ehzsif.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_cqlrfh.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_cfqvkg.significantobstacle::jsonb as significantobstacle,
    notes_note_view_joghdp.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_ehzsif on procedure.safealtitudeareasector.extent_id = geometry_surface_view_ehzsif.id
left join shared.circlesector_pt shared_circlesector_pt_cqlrfh on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_cqlrfh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_pkjzrt.id) as significantobstacle
  from master_join master_join_mznrph
  join shared.obstruction_pt shared_obstruction_lat_pkjzrt on master_join_mznrph.target_id = shared_obstruction_lat_pkjzrt.id
  where master_join_mznrph.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_cfqvkg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ovnvle.*) AS annotation
  from master_join master_join_hxtvvx
  join notes.note_view notes_note_lat_ovnvle on master_join_hxtvvx.target_id = notes_note_lat_ovnvle.id
  where master_join_hxtvvx.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_joghdp on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_yfjkps.id)::jsonb AS sectordefinition,
    geometry_surface_view_goyise.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_goyise.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_ijbvwc.significantobstacle::jsonb as significantobstacle,
    notes_note_view_rfebos.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_yfjkps on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_yfjkps.id
left join geometry.surface_view geometry_surface_view_goyise on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_goyise.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_dpocee.id) as significantobstacle
  from master_join master_join_aizyty
  join shared.obstruction_pt shared_obstruction_lat_dpocee on master_join_aizyty.target_id = shared_obstruction_lat_dpocee.id
  where master_join_aizyty.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_ijbvwc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jehqmm.*) AS annotation
  from master_join master_join_okxyxi
  join notes.note_view notes_note_lat_jehqmm on master_join_okxyxi.target_id = notes_note_lat_jehqmm.id
  where master_join_okxyxi.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_rfebos on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_lwtksr.timeinterval::jsonb as timeinterval,
    notes_note_view_tkgwre.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kdlldo.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_zcxqrj.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_pkfcnn.*) AS timeinterval
  from master_join master_join_vbjowu
  join shared.timesheet_view shared_timesheet_lat_pkfcnn on master_join_vbjowu.target_id = shared_timesheet_lat_pkfcnn.id
  where master_join_vbjowu.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_lwtksr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fmfsob.*) AS annotation
  from master_join master_join_tapmlp
  join notes.note_view notes_note_lat_fmfsob on master_join_tapmlp.target_id = notes_note_lat_fmfsob.id
  where master_join_tapmlp.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_tkgwre on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wptdqi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wptdqi.title AS varchar), '(' || organisation_organisationauthority_lat_wptdqi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wptdqi.href
  )) as specialdateauthority  from master_join master_join_tviryv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wptdqi on master_join_tviryv.target_id = organisation_organisationauthority_lat_wptdqi.id
  where master_join_tviryv.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_kdlldo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_rtccmn.id) as usage
  from master_join master_join_ledlil
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_rtccmn on master_join_ledlil.target_id = airport_heliport_airportheliportusage_lat_rtccmn.id
  where master_join_ledlil.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_zcxqrj on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_yhtoly.title as varchar), '(' || organisation_organisationauthority_pt_yhtoly.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_yhtoly.href::text AS theorganisationauthority_href,
    shared_timesheet_view_eeycwx.timeinterval::jsonb as timeinterval,
    notes_note_view_ufdzdb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jsqojh.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_yhtoly on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_yhtoly.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gdzwbv.*) AS timeinterval
  from master_join master_join_wtosoi
  join shared.timesheet_view shared_timesheet_lat_gdzwbv on master_join_wtosoi.target_id = shared_timesheet_lat_gdzwbv.id
  where master_join_wtosoi.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_eeycwx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mkofea.*) AS annotation
  from master_join master_join_hhlbmx
  join notes.note_view notes_note_lat_mkofea on master_join_hhlbmx.target_id = notes_note_lat_mkofea.id
  where master_join_hhlbmx.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_ufdzdb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jzziut.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jzziut.title AS varchar), '(' || organisation_organisationauthority_lat_jzziut.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jzziut.href
  )) as specialdateauthority  from master_join master_join_lzcvsg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jzziut on master_join_lzcvsg.target_id = organisation_organisationauthority_lat_jzziut.id
  where master_join_lzcvsg.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_jsqojh on TRUE;
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_gmuqxj.timeinterval::jsonb as timeinterval,
    notes_note_view_diracr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rtsqwq.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_towwgo.user::jsonb as user,
    shared_airspacelayer_pt_loslxt.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_qoklsb.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_azrrun.*) AS timeinterval
  from master_join master_join_ojsmlq
  join shared.timesheet_view shared_timesheet_lat_azrrun on master_join_ojsmlq.target_id = shared_timesheet_lat_azrrun.id
  where master_join_ojsmlq.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_gmuqxj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qkohyo.*) AS annotation
  from master_join master_join_dfjcoq
  join notes.note_view notes_note_lat_qkohyo on master_join_dfjcoq.target_id = notes_note_lat_qkohyo.id
  where master_join_dfjcoq.source_id = airspace.airspaceactivation.id
) as notes_note_view_diracr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pmsqvj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pmsqvj.title AS varchar), '(' || organisation_organisationauthority_lat_pmsqvj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pmsqvj.href
  )) as specialdateauthority  from master_join master_join_nwkmsm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pmsqvj on master_join_nwkmsm.target_id = organisation_organisationauthority_lat_pmsqvj.id
  where master_join_nwkmsm.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_rtsqwq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_swemwd.id) as levels
  from master_join master_join_rswiau
  join shared.airspacelayer_pt shared_airspacelayer_lat_swemwd on master_join_rswiau.target_id = shared_airspacelayer_lat_swemwd.id
  where master_join_rswiau.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_loslxt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yvcubs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yvcubs.title AS varchar), '(' || organisation_organisationauthority_lat_yvcubs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yvcubs.href
  )) as user  from master_join master_join_rcbtnr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yvcubs on master_join_rcbtnr.target_id = organisation_organisationauthority_lat_yvcubs.id
  where master_join_rcbtnr.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_towwgo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ouxzcx.id) as aircraft
  from master_join master_join_cjxhjd
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_ouxzcx on master_join_cjxhjd.target_id = shared_aircraftcharacteristic_lat_ouxzcx.id
  where master_join_cjxhjd.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_qoklsb on TRUE;
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_neuxbr.timeinterval::jsonb as timeinterval,
    notes_note_view_niwfbl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_htrsat.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_ctbsyk.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zlbahw.*) AS timeinterval
  from master_join master_join_exajqw
  join shared.timesheet_view shared_timesheet_lat_zlbahw on master_join_exajqw.target_id = shared_timesheet_lat_zlbahw.id
  where master_join_exajqw.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_neuxbr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aogflf.*) AS annotation
  from master_join master_join_ujxebj
  join notes.note_view notes_note_lat_aogflf on master_join_ujxebj.target_id = notes_note_lat_aogflf.id
  where master_join_ujxebj.source_id = airspace.airspacelayerclass.id
) as notes_note_view_niwfbl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nwyiau.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nwyiau.title AS varchar), '(' || organisation_organisationauthority_lat_nwyiau.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nwyiau.href
  )) as specialdateauthority  from master_join master_join_eqbsna
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nwyiau on master_join_eqbsna.target_id = organisation_organisationauthority_lat_nwyiau.id
  where master_join_eqbsna.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_htrsat on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_cgycly.id) as associatedlevels
  from master_join master_join_vqghvg
  join shared.airspacelayer_pt shared_airspacelayer_lat_cgycly on master_join_vqghvg.target_id = shared_airspacelayer_lat_cgycly.id
  where master_join_vqghvg.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_ctbsyk on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_dpsrfv.timeinterval::jsonb as timeinterval,
    notes_note_view_sagolv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pfhzam.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cupfhl.*) AS timeinterval
  from master_join master_join_iancqg
  join shared.timesheet_view shared_timesheet_lat_cupfhl on master_join_iancqg.target_id = shared_timesheet_lat_cupfhl.id
  where master_join_iancqg.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_dpsrfv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_honstl.*) AS annotation
  from master_join master_join_wkjdzs
  join notes.note_view notes_note_lat_honstl on master_join_wkjdzs.target_id = notes_note_lat_honstl.id
  where master_join_wkjdzs.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_sagolv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wznaka.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wznaka.title AS varchar), '(' || organisation_organisationauthority_lat_wznaka.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wznaka.href
  )) as specialdateauthority  from master_join master_join_fzaila
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wznaka on master_join_fzaila.target_id = organisation_organisationauthority_lat_wznaka.id
  where master_join_fzaila.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_pfhzam on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_hoiihi.timeinterval::jsonb as timeinterval,
    notes_note_view_hmmdcc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mwqxxs.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_bdjett.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bxgjgg.*) AS timeinterval
  from master_join master_join_qyfejs
  join shared.timesheet_view shared_timesheet_lat_bxgjgg on master_join_qyfejs.target_id = shared_timesheet_lat_bxgjgg.id
  where master_join_qyfejs.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_hoiihi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtlcbc.*) AS annotation
  from master_join master_join_zuecpa
  join notes.note_view notes_note_lat_rtlcbc on master_join_zuecpa.target_id = notes_note_lat_rtlcbc.id
  where master_join_zuecpa.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_hmmdcc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kvwwvg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kvwwvg.title AS varchar), '(' || organisation_organisationauthority_lat_kvwwvg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kvwwvg.href
  )) as specialdateauthority  from master_join master_join_hrdocc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kvwwvg on master_join_hrdocc.target_id = organisation_organisationauthority_lat_kvwwvg.id
  where master_join_hrdocc.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_mwqxxs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_tnunba.id) as usage
  from master_join master_join_lwboog
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_tnunba on master_join_lwboog.target_id = airport_heliport_apronareausage_lat_tnunba.id
  where master_join_lwboog.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_bdjett on TRUE;
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_ythwrr.id)::jsonb AS sectordescription,
    geometry_surface_view_nqoaao.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_nqoaao.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_kbozom.timeinterval::jsonb as timeinterval,
    notes_note_view_xfpwyh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ltaktq.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_ythwrr on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_ythwrr.id
left join geometry.surface_view geometry_surface_view_nqoaao on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_nqoaao.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cnuwul.*) AS timeinterval
  from master_join master_join_xncmqt
  join shared.timesheet_view shared_timesheet_lat_cnuwul on master_join_xncmqt.target_id = shared_timesheet_lat_cnuwul.id
  where master_join_xncmqt.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_kbozom on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjmezt.*) AS annotation
  from master_join master_join_pzwgja
  join notes.note_view notes_note_lat_yjmezt on master_join_pzwgja.target_id = notes_note_lat_yjmezt.id
  where master_join_pzwgja.source_id = procedure.circlingrestriction.id
) as notes_note_view_xfpwyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zfqpks.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zfqpks.title AS varchar), '(' || organisation_organisationauthority_lat_zfqpks.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zfqpks.href
  )) as specialdateauthority  from master_join master_join_lwkvsz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zfqpks on master_join_lwkvsz.target_id = organisation_organisationauthority_lat_zfqpks.id
  where master_join_lwkvsz.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_ltaktq on TRUE;
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_xfgvsg.timeinterval::jsonb as timeinterval,
    notes_note_view_zxupdz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hxbvjt.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_jltodg.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_zqaglu.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_skuxhn.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_ujzajt.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hipqfo.*) AS timeinterval
  from master_join master_join_wdluis
  join shared.timesheet_view shared_timesheet_lat_hipqfo on master_join_wdluis.target_id = shared_timesheet_lat_hipqfo.id
  where master_join_wdluis.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_xfgvsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_grbnqy.*) AS annotation
  from master_join master_join_cmfzlt
  join notes.note_view notes_note_lat_grbnqy on master_join_cmfzlt.target_id = notes_note_lat_grbnqy.id
  where master_join_cmfzlt.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_zxupdz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_obdbol.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_obdbol.title AS varchar), '(' || organisation_organisationauthority_lat_obdbol.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_obdbol.href
  )) as specialdateauthority  from master_join master_join_yzqvsf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_obdbol on master_join_yzqvsf.target_id = organisation_organisationauthority_lat_obdbol.id
  where master_join_yzqvsf.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_hxbvjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_nrfqqo.id) as weather
  from master_join master_join_waimku
  join shared.meteorology_pt shared_meteorology_lat_nrfqqo on master_join_waimku.target_id = shared_meteorology_lat_nrfqqo.id
  where master_join_waimku.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_jltodg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pyoyxj.id) as aircraft
  from master_join master_join_amtaqm
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_pyoyxj on master_join_amtaqm.target_id = shared_aircraftcharacteristic_lat_pyoyxj.id
  where master_join_amtaqm.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_zqaglu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_pnthxr.id) as flight
  from master_join master_join_cnqabo
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_pnthxr on master_join_cnqabo.target_id = shared_flightcharacteristic_lat_pnthxr.id
  where master_join_cnqabo.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_skuxhn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_yyaxxf.id) as subcondition
  from master_join master_join_uvrmve
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_yyaxxf on master_join_uvrmve.target_id = airport_heliport_conditioncombination_lat_yyaxxf.id
  where master_join_uvrmve.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_ujzajt on TRUE;
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_ywtbbm.timeinterval::jsonb as timeinterval,
    notes_note_view_iohhfq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_esveft.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_plhjxm.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wjiwed.*) AS timeinterval
  from master_join master_join_mytiuh
  join shared.timesheet_view shared_timesheet_lat_wjiwed on master_join_mytiuh.target_id = shared_timesheet_lat_wjiwed.id
  where master_join_mytiuh.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_ywtbbm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_datfnu.*) AS annotation
  from master_join master_join_gfodmk
  join notes.note_view notes_note_lat_datfnu on master_join_gfodmk.target_id = notes_note_lat_datfnu.id
  where master_join_gfodmk.source_id = routes.flightconditioncombination.id
) as notes_note_view_iohhfq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_brnkfk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_brnkfk.title AS varchar), '(' || organisation_organisationauthority_lat_brnkfk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_brnkfk.href
  )) as specialdateauthority  from master_join master_join_qohbom
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_brnkfk on master_join_qohbom.target_id = organisation_organisationauthority_lat_brnkfk.id
  where master_join_qohbom.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_esveft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_qgabqq.id) as element
  from master_join master_join_eqdmeq
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_qgabqq on master_join_eqdmeq.target_id = routes_flightconditionelement_lat_qgabqq.id
  where master_join_eqdmeq.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_plhjxm on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_hadryb.timeinterval::jsonb as timeinterval,
    notes_note_view_kuwlax.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dqzrke.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nwzvgg.*) AS timeinterval
  from master_join master_join_txeufw
  join shared.timesheet_view shared_timesheet_lat_nwzvgg on master_join_txeufw.target_id = shared_timesheet_lat_nwzvgg.id
  where master_join_txeufw.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_hadryb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brbjkg.*) AS annotation
  from master_join master_join_ftaird
  join notes.note_view notes_note_lat_brbjkg on master_join_ftaird.target_id = notes_note_lat_brbjkg.id
  where master_join_ftaird.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_kuwlax on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mhnibw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mhnibw.title AS varchar), '(' || organisation_organisationauthority_lat_mhnibw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mhnibw.href
  )) as specialdateauthority  from master_join master_join_daiilq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mhnibw on master_join_daiilq.target_id = organisation_organisationauthority_lat_mhnibw.id
  where master_join_daiilq.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_dqzrke on TRUE;
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_vakdus.timeinterval::jsonb as timeinterval,
    notes_note_view_rparjw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pgmmng.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dcolro.*) AS timeinterval
  from master_join master_join_xylpxt
  join shared.timesheet_view shared_timesheet_lat_dcolro on master_join_xylpxt.target_id = shared_timesheet_lat_dcolro.id
  where master_join_xylpxt.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_vakdus on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwhjxx.*) AS annotation
  from master_join master_join_magzns
  join notes.note_view notes_note_lat_qwhjxx on master_join_magzns.target_id = notes_note_lat_qwhjxx.id
  where master_join_magzns.source_id = shared.lightelementstatus.id
) as notes_note_view_rparjw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uxpifc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uxpifc.title AS varchar), '(' || organisation_organisationauthority_lat_uxpifc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uxpifc.href
  )) as specialdateauthority  from master_join master_join_jxbsow
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uxpifc on master_join_jxbsow.target_id = organisation_organisationauthority_lat_uxpifc.id
  where master_join_jxbsow.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_pgmmng on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_uofqsm.timeinterval::jsonb as timeinterval,
    notes_note_view_ciicnw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mvyxbj.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_unmrur.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lsrwxw.*) AS timeinterval
  from master_join master_join_woyggy
  join shared.timesheet_view shared_timesheet_lat_lsrwxw on master_join_woyggy.target_id = shared_timesheet_lat_lsrwxw.id
  where master_join_woyggy.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_uofqsm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yzsntk.*) AS annotation
  from master_join master_join_mjguga
  join notes.note_view notes_note_lat_yzsntk on master_join_mjguga.target_id = notes_note_lat_yzsntk.id
  where master_join_mjguga.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_ciicnw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qttoiw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qttoiw.title AS varchar), '(' || organisation_organisationauthority_lat_qttoiw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qttoiw.href
  )) as specialdateauthority  from master_join master_join_umlvvc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qttoiw on master_join_umlvvc.target_id = organisation_organisationauthority_lat_qttoiw.id
  where master_join_umlvvc.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_mvyxbj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_snbrum.id) as usage
  from master_join master_join_qqwror
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_snbrum on master_join_qqwror.target_id = airport_heliport_manoeuvringareausage_lat_snbrum.id
  where master_join_qqwror.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_unmrur on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_aqndbf.timeinterval::jsonb as timeinterval,
    notes_note_view_xqrdis.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mgueau.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_umkozj.*) AS timeinterval
  from master_join master_join_ewujll
  join shared.timesheet_view shared_timesheet_lat_umkozj on master_join_ewujll.target_id = shared_timesheet_lat_umkozj.id
  where master_join_ewujll.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_aqndbf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kachtj.*) AS annotation
  from master_join master_join_aximnb
  join notes.note_view notes_note_lat_kachtj on master_join_aximnb.target_id = notes_note_lat_kachtj.id
  where master_join_aximnb.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_xqrdis on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mztwme.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mztwme.title AS varchar), '(' || organisation_organisationauthority_lat_mztwme.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mztwme.href
  )) as specialdateauthority  from master_join master_join_ddrelo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mztwme on master_join_ddrelo.target_id = organisation_organisationauthority_lat_mztwme.id
  where master_join_ddrelo.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_mgueau on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_lndhxn.timeinterval::jsonb as timeinterval,
    notes_note_view_sddqsk.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rtvfjw.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hntpqn.*) AS timeinterval
  from master_join master_join_rcyjrv
  join shared.timesheet_view shared_timesheet_lat_hntpqn on master_join_rcyjrv.target_id = shared_timesheet_lat_hntpqn.id
  where master_join_rcyjrv.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_lndhxn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivjhjk.*) AS annotation
  from master_join master_join_mlvgyz
  join notes.note_view notes_note_lat_ivjhjk on master_join_mlvgyz.target_id = notes_note_lat_ivjhjk.id
  where master_join_mlvgyz.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_sddqsk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nsmrer.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nsmrer.title AS varchar), '(' || organisation_organisationauthority_lat_nsmrer.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nsmrer.href
  )) as specialdateauthority  from master_join master_join_bahfct
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nsmrer on master_join_bahfct.target_id = organisation_organisationauthority_lat_nsmrer.id
  where master_join_bahfct.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_rtvfjw on TRUE;
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_tkmwfd.timeinterval::jsonb as timeinterval,
    notes_note_view_medefw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hmybua.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yhwxjg.*) AS timeinterval
  from master_join master_join_vfctdm
  join shared.timesheet_view shared_timesheet_lat_yhwxjg on master_join_vfctdm.target_id = shared_timesheet_lat_yhwxjg.id
  where master_join_vfctdm.source_id = shared.onlinecontact.id
) as shared_timesheet_view_tkmwfd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mjdzyg.*) AS annotation
  from master_join master_join_payjdh
  join notes.note_view notes_note_lat_mjdzyg on master_join_payjdh.target_id = notes_note_lat_mjdzyg.id
  where master_join_payjdh.source_id = shared.onlinecontact.id
) as notes_note_view_medefw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qlxsek.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qlxsek.title AS varchar), '(' || organisation_organisationauthority_lat_qlxsek.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qlxsek.href
  )) as specialdateauthority  from master_join master_join_pujfit
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qlxsek on master_join_pujfit.target_id = organisation_organisationauthority_lat_qlxsek.id
  where master_join_pujfit.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_hmybua on TRUE;
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_epjqxm.timeinterval::jsonb as timeinterval,
    notes_note_view_ltdojf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cqolgt.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jfvgxq.*) AS timeinterval
  from master_join master_join_tybqfh
  join shared.timesheet_view shared_timesheet_lat_jfvgxq on master_join_tybqfh.target_id = shared_timesheet_lat_jfvgxq.id
  where master_join_tybqfh.source_id = shared.postaladdress.id
) as shared_timesheet_view_epjqxm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ugjoma.*) AS annotation
  from master_join master_join_avitdc
  join notes.note_view notes_note_lat_ugjoma on master_join_avitdc.target_id = notes_note_lat_ugjoma.id
  where master_join_avitdc.source_id = shared.postaladdress.id
) as notes_note_view_ltdojf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jbalkj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jbalkj.title AS varchar), '(' || organisation_organisationauthority_lat_jbalkj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jbalkj.href
  )) as specialdateauthority  from master_join master_join_xxrgxi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jbalkj on master_join_xxrgxi.target_id = organisation_organisationauthority_lat_jbalkj.id
  where master_join_xxrgxi.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_cqolgt on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_hbyjlb.timeinterval::jsonb as timeinterval,
    notes_note_view_ccsvsv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zqdzrf.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mrwmep.*) AS timeinterval
  from master_join master_join_cwrbnx
  join shared.timesheet_view shared_timesheet_lat_mrwmep on master_join_cwrbnx.target_id = shared_timesheet_lat_mrwmep.id
  where master_join_cwrbnx.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_hbyjlb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sixdlx.*) AS annotation
  from master_join master_join_sjnrxg
  join notes.note_view notes_note_lat_sixdlx on master_join_sjnrxg.target_id = notes_note_lat_sixdlx.id
  where master_join_sjnrxg.source_id = procedure.procedureavailability.id
) as notes_note_view_ccsvsv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ljybnc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ljybnc.title AS varchar), '(' || organisation_organisationauthority_lat_ljybnc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ljybnc.href
  )) as specialdateauthority  from master_join master_join_fhmnju
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ljybnc on master_join_fhmnju.target_id = organisation_organisationauthority_lat_ljybnc.id
  where master_join_fhmnju.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_zqdzrf on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_mpjsvu.timeinterval::jsonb as timeinterval,
    notes_note_view_djoifd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_flvyqx.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tsjpxe.*) AS timeinterval
  from master_join master_join_wctnwx
  join shared.timesheet_view shared_timesheet_lat_tsjpxe on master_join_wctnwx.target_id = shared_timesheet_lat_tsjpxe.id
  where master_join_wctnwx.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_mpjsvu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tmnvfy.*) AS annotation
  from master_join master_join_qgedfg
  join notes.note_view notes_note_lat_tmnvfy on master_join_qgedfg.target_id = notes_note_lat_tmnvfy.id
  where master_join_qgedfg.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_djoifd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_bpjcik.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_bpjcik.title AS varchar), '(' || organisation_organisationauthority_lat_bpjcik.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_bpjcik.href
  )) as specialdateauthority  from master_join master_join_lbohqe
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_bpjcik on master_join_lbohqe.target_id = organisation_organisationauthority_lat_bpjcik.id
  where master_join_lbohqe.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_flvyqx on TRUE;
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_cbvlqh.timeinterval::jsonb as timeinterval,
    notes_note_view_eyjdqv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jwpnsk.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_ktrxvc.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dhpqxk.*) AS timeinterval
  from master_join master_join_cbssff
  join shared.timesheet_view shared_timesheet_lat_dhpqxk on master_join_cbssff.target_id = shared_timesheet_lat_dhpqxk.id
  where master_join_cbssff.source_id = routes.routeavailability.id
) as shared_timesheet_view_cbvlqh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uhwfqx.*) AS annotation
  from master_join master_join_ncbcdj
  join notes.note_view notes_note_lat_uhwfqx on master_join_ncbcdj.target_id = notes_note_lat_uhwfqx.id
  where master_join_ncbcdj.source_id = routes.routeavailability.id
) as notes_note_view_eyjdqv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gvgnsf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gvgnsf.title AS varchar), '(' || organisation_organisationauthority_lat_gvgnsf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gvgnsf.href
  )) as specialdateauthority  from master_join master_join_tkskpk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gvgnsf on master_join_tkskpk.target_id = organisation_organisationauthority_lat_gvgnsf.id
  where master_join_tkskpk.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_jwpnsk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_obwstw.id) as levels
  from master_join master_join_mocenv
  join shared.airspacelayer_pt shared_airspacelayer_lat_obwstw on master_join_mocenv.target_id = shared_airspacelayer_lat_obwstw.id
  where master_join_mocenv.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_ktrxvc on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_wkdbpd.timeinterval::jsonb as timeinterval,
    notes_note_view_eyzygz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vpqydc.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mdyykn.*) AS timeinterval
  from master_join master_join_pklgyh
  join shared.timesheet_view shared_timesheet_lat_mdyykn on master_join_pklgyh.target_id = shared_timesheet_lat_mdyykn.id
  where master_join_pklgyh.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_wkdbpd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_komavh.*) AS annotation
  from master_join master_join_ufqwbm
  join notes.note_view notes_note_lat_komavh on master_join_ufqwbm.target_id = notes_note_lat_komavh.id
  where master_join_ufqwbm.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_eyzygz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xxulcg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xxulcg.title AS varchar), '(' || organisation_organisationauthority_lat_xxulcg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xxulcg.href
  )) as specialdateauthority  from master_join master_join_mycanj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xxulcg on master_join_mycanj.target_id = organisation_organisationauthority_lat_xxulcg.id
  where master_join_mycanj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_vpqydc on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_zuuoqk.timeinterval::jsonb as timeinterval,
    notes_note_view_oyfdkr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hjxnnt.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gaosnf.*) AS timeinterval
  from master_join master_join_umhkgx
  join shared.timesheet_view shared_timesheet_lat_gaosnf on master_join_umhkgx.target_id = shared_timesheet_lat_gaosnf.id
  where master_join_umhkgx.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_zuuoqk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pvhyxw.*) AS annotation
  from master_join master_join_iymzry
  join notes.note_view notes_note_lat_pvhyxw on master_join_iymzry.target_id = notes_note_lat_pvhyxw.id
  where master_join_iymzry.source_id = service.serviceoperationalstatus.id
) as notes_note_view_oyfdkr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dekolz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dekolz.title AS varchar), '(' || organisation_organisationauthority_lat_dekolz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dekolz.href
  )) as specialdateauthority  from master_join master_join_nzrvod
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dekolz on master_join_nzrvod.target_id = organisation_organisationauthority_lat_dekolz.id
  where master_join_nzrvod.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_hjxnnt on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_rrzwsf.timeinterval::jsonb as timeinterval,
    notes_note_view_pmfnjn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dndibc.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ijhglj.*) AS timeinterval
  from master_join master_join_yxopsa
  join shared.timesheet_view shared_timesheet_lat_ijhglj on master_join_yxopsa.target_id = shared_timesheet_lat_ijhglj.id
  where master_join_yxopsa.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_rrzwsf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jjqztt.*) AS annotation
  from master_join master_join_zvxfpq
  join notes.note_view notes_note_lat_jjqztt on master_join_zvxfpq.target_id = notes_note_lat_jjqztt.id
  where master_join_zvxfpq.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_pmfnjn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rcghel.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rcghel.title AS varchar), '(' || organisation_organisationauthority_lat_rcghel.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rcghel.href
  )) as specialdateauthority  from master_join master_join_cdkuoz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rcghel on master_join_cdkuoz.target_id = organisation_organisationauthority_lat_rcghel.id
  where master_join_cdkuoz.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_dndibc on TRUE;
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_zzgugy.timeinterval::jsonb as timeinterval,
    notes_note_view_zovvnm.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ohdixp.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kirhxg.*) AS timeinterval
  from master_join master_join_hrwjmi
  join shared.timesheet_view shared_timesheet_lat_kirhxg on master_join_hrwjmi.target_id = shared_timesheet_lat_kirhxg.id
  where master_join_hrwjmi.source_id = shared.telephonecontact.id
) as shared_timesheet_view_zzgugy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wlkwor.*) AS annotation
  from master_join master_join_bypglb
  join notes.note_view notes_note_lat_wlkwor on master_join_bypglb.target_id = notes_note_lat_wlkwor.id
  where master_join_bypglb.source_id = shared.telephonecontact.id
) as notes_note_view_zovvnm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jcrwfy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jcrwfy.title AS varchar), '(' || organisation_organisationauthority_lat_jcrwfy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jcrwfy.href
  )) as specialdateauthority  from master_join master_join_vibmet
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jcrwfy on master_join_vibmet.target_id = organisation_organisationauthority_lat_jcrwfy.id
  where master_join_vibmet.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_ohdixp on TRUE;
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ycsbil.timeinterval::jsonb as timeinterval,
    notes_note_view_svhvpx.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zowxft.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_erfkey.*) AS timeinterval
  from master_join master_join_voswro
  join shared.timesheet_view shared_timesheet_lat_erfkey on master_join_voswro.target_id = shared_timesheet_lat_erfkey.id
  where master_join_voswro.source_id = organisation.unitavailability.id
) as shared_timesheet_view_ycsbil on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fuxjlg.*) AS annotation
  from master_join master_join_bpwvja
  join notes.note_view notes_note_lat_fuxjlg on master_join_bpwvja.target_id = notes_note_lat_fuxjlg.id
  where master_join_bpwvja.source_id = organisation.unitavailability.id
) as notes_note_view_svhvpx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hxauuo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hxauuo.title AS varchar), '(' || organisation_organisationauthority_lat_hxauuo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hxauuo.href
  )) as specialdateauthority  from master_join master_join_ogfjcg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hxauuo on master_join_ogfjcg.target_id = organisation_organisationauthority_lat_hxauuo.id
  where master_join_ogfjcg.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_zowxft on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_ezlgym.timeinterval::jsonb as timeinterval,
    notes_note_view_noyoog.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sihlnx.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hxmmqg.*) AS timeinterval
  from master_join master_join_fduhnf
  join shared.timesheet_view shared_timesheet_lat_hxmmqg on master_join_fduhnf.target_id = shared_timesheet_lat_hxmmqg.id
  where master_join_fduhnf.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_ezlgym on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgkkvi.*) AS annotation
  from master_join master_join_vfoseu
  join notes.note_view notes_note_lat_lgkkvi on master_join_vfoseu.target_id = notes_note_lat_lgkkvi.id
  where master_join_vfoseu.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_noyoog on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qzkjfu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qzkjfu.title AS varchar), '(' || organisation_organisationauthority_lat_qzkjfu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qzkjfu.href
  )) as specialdateauthority  from master_join master_join_rqyssl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qzkjfu on master_join_rqyssl.target_id = organisation_organisationauthority_lat_qzkjfu.id
  where master_join_rqyssl.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_sihlnx on TRUE;
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'notes.note_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_vkirbh.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_vkirbh.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_vkirbh.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_vkirbh.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_vkirbh.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_vkirbh.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_vkirbh.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_vkirbh.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_rerrla.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_rerrla.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_rerrla.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_rerrla.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_rerrla.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_rerrla.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_wiaseg.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_wiaseg.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_wiaseg.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_wiaseg.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_wiaseg.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_wiaseg.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_muoxld.timeinterval::jsonb as timeinterval,
    notes_note_view_psskvz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_afkada.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_rcyadc.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vkirbh on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_vkirbh.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_rerrla on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_rerrla.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_wiaseg on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_wiaseg.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uaxgrc.*) AS timeinterval
  from master_join master_join_cwmosu
  join shared.timesheet_view shared_timesheet_lat_uaxgrc on master_join_cwmosu.target_id = shared_timesheet_lat_uaxgrc.id
  where master_join_cwmosu.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_muoxld on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_smukhw.*) AS annotation
  from master_join master_join_kcoeea
  join notes.note_view notes_note_lat_smukhw on master_join_kcoeea.target_id = notes_note_lat_smukhw.id
  where master_join_kcoeea.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_psskvz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_btlere.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_btlere.title AS varchar), '(' || organisation_organisationauthority_lat_btlere.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_btlere.href
  )) as specialdateauthority  from master_join master_join_gobimj
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_btlere on master_join_gobimj.target_id = organisation_organisationauthority_lat_btlere.id
  where master_join_gobimj.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_afkada on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ftleua.id) as lighting
  from master_join master_join_saaypf
  join shared.lightelement_pt shared_lightelement_lat_ftleua on master_join_saaypf.target_id = shared_lightelement_lat_ftleua.id
  where master_join_saaypf.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_rcyadc on TRUE;
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_rbcvsq.timeinterval::jsonb as timeinterval,
    notes_note_view_iqiyrp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rnqhzs.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_eeejmn.*) AS timeinterval
  from master_join master_join_pexycz
  join shared.timesheet_view shared_timesheet_lat_eeejmn on master_join_pexycz.target_id = shared_timesheet_lat_eeejmn.id
  where master_join_pexycz.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_rbcvsq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qinscf.*) AS annotation
  from master_join master_join_sqfick
  join notes.note_view notes_note_lat_qinscf on master_join_sqfick.target_id = notes_note_lat_qinscf.id
  where master_join_sqfick.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_iqiyrp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_etxbdf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_etxbdf.title AS varchar), '(' || organisation_organisationauthority_lat_etxbdf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_etxbdf.href
  )) as specialdateauthority  from master_join master_join_ejpicc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_etxbdf on master_join_ejpicc.target_id = organisation_organisationauthority_lat_etxbdf.id
  where master_join_ejpicc.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_rnqhzs on TRUE;
-- ContactInformationPropertyType
-- ['shared.postaladdress_view', 'notes.note_view', 'shared.onlinecontact_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_qvgvfj.id)::jsonb AS selection,
    notes_note_view_eazcjp.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_qvgvfj on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_qvgvfj.id
left join lateral(
  select
  from master_join master_join_fybyrb
  join shared.contactinformation_view shared_contactinformation_lat_mvxqbi on master_join_fybyrb.target_id = shared_contactinformation_lat_mvxqbi.id
  where master_join_fybyrb.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_hlkphz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ptkalf.*) AS annotation
  from master_join master_join_rpebab
  join notes.note_view notes_note_lat_ptkalf on master_join_rpebab.target_id = notes_note_lat_ptkalf.id
  where master_join_rpebab.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_eazcjp on TRUE;
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_aidbpr.id)::jsonb AS selection,
    notes_note_view_osytso.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_aidbpr on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_aidbpr.id
left join lateral(
  select
  from master_join master_join_yxmfse
  join shared.contactinformation_view shared_contactinformation_lat_uimrbj on master_join_yxmfse.target_id = shared_contactinformation_lat_uimrbj.id
  where master_join_yxmfse.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_seyrmu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_itdppl.*) AS annotation
  from master_join master_join_hvhras
  join notes.note_view notes_note_lat_itdppl on master_join_hvhras.target_id = notes_note_lat_itdppl.id
  where master_join_hvhras.source_id = airport_heliport.apronareausage.id
) as notes_note_view_osytso on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_llmytv.routeelement::jsonb as routeelement,
    notes_note_view_cibqjv.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_zopghx.id) as routeelement
  from master_join master_join_ulsptr
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_zopghx on master_join_ulsptr.target_id = routes_flightroutingelement_lat_zopghx.id
  where master_join_ulsptr.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_llmytv on TRUE
left join lateral(
  select
  from master_join master_join_hlfaga
  join shared.contactinformation_view shared_contactinformation_lat_lakqzs on master_join_hlfaga.target_id = shared_contactinformation_lat_lakqzs.id
  where master_join_hlfaga.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_kgbwwb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujyfog.*) AS annotation
  from master_join master_join_vmqzrr
  join notes.note_view notes_note_lat_ujyfog on master_join_vmqzrr.target_id = notes_note_lat_ujyfog.id
  where master_join_vmqzrr.source_id = routes.flightrestrictionroute.id
) as notes_note_view_cibqjv on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_rccwsv.id)::jsonb AS selection,
    notes_note_view_lpxxkc.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_rccwsv on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_rccwsv.id
left join lateral(
  select
  from master_join master_join_yvflxe
  join shared.contactinformation_view shared_contactinformation_lat_rqnmgx on master_join_yvflxe.target_id = shared_contactinformation_lat_rqnmgx.id
  where master_join_yvflxe.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_zvqhbo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oejypl.*) AS annotation
  from master_join master_join_aacwrz
  join notes.note_view notes_note_lat_oejypl on master_join_aacwrz.target_id = notes_note_lat_oejypl.id
  where master_join_aacwrz.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_lpxxkc on TRUE;
-- AerialRefuellingType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'notes.note_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'routes.routeavailability_view', 'aerial_refuelling.authorityforaerialrefuelling_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_zidmdy.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_zidmdy.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_zidmdy.href::text AS oppositetrack_href,
    routes_routeavailability_view_jfrpef.availability::jsonb as availability,
    routes_routeavailability_view_jfrpef.availability_annotation::jsonb as availability_annotation,
    airspace_airspace_pt_txkqnm.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_uukwgu.track::jsonb as track,
    aerial_refuelling_aerialrefuellingtrack_view_uukwgu.track_annotation::jsonb as track_annotation,
    aerial_refuelling_aerialrefuellinganchor_view_kptxur.anchor::jsonb as anchor,
    aerial_refuelling_aerialrefuellinganchor_view_kptxur.anchor_annotation::jsonb as anchor_annotation,
    aerial_refuelling_authorityforaerialrefuelling_view_ztfvjz.managingorganisation::jsonb as managingorganisation,
    aerial_refuelling_authorityforaerialrefuelling_view_ztfvjz.managingorganisation_annotation::jsonb as managingorganisation_annotation,
    notes_note_view_qjcqry.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_zidmdy on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_zidmdy.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_hoppcm.*) as availability,
      jsonb_agg(DISTINCT routes_routeavailability_lat_hoppcm.annotation) as availability_annotation  from master_join master_join_alrsud
  join routes.routeavailability_view routes_routeavailability_lat_hoppcm on master_join_alrsud.target_id = routes_routeavailability_lat_hoppcm.id
  where master_join_alrsud.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_jfrpef on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_duthvd.id,
      'title', coalesce(cast(airspace_airspace_lat_duthvd.title AS varchar), '(' || airspace_airspace_lat_duthvd.nilreason[1] || ')'),
      'href', airspace_airspace_lat_duthvd.href
  )) as protectingairspace  from master_join master_join_cqsvit
  join airspace.airspace_pt airspace_airspace_lat_duthvd on master_join_cqsvit.target_id = airspace_airspace_lat_duthvd.id
  where master_join_cqsvit.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_txkqnm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_dywrxk.*) as track,
      jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_dywrxk.annotation) as track_annotation  from master_join master_join_aembfi
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_dywrxk on master_join_aembfi.target_id = aerial_refuelling_aerialrefuellingtrack_lat_dywrxk.id
  where master_join_aembfi.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_uukwgu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_yoavak.*) as anchor,
      jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_yoavak.annotation) as anchor_annotation  from master_join master_join_ttcimv
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_yoavak on master_join_ttcimv.target_id = aerial_refuelling_aerialrefuellinganchor_lat_yoavak.id
  where master_join_ttcimv.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_kptxur on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_esacnw.*) as managingorganisation,
      jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_esacnw.annotation) as managingorganisation_annotation  from master_join master_join_jccfrs
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_esacnw on master_join_jccfrs.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_esacnw.id
  where master_join_jccfrs.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_ztfvjz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hhfqib.*) AS annotation
  from master_join master_join_crelwt
  join notes.note_view notes_note_lat_hhfqib on master_join_crelwt.target_id = notes_note_lat_hhfqib.id
  where master_join_crelwt.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_qjcqry on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_rsfmfp.title as varchar), '(' || obstacles_verticalstructure_pt_rsfmfp.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_rsfmfp.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sounrs.title as varchar), '(' || airport_heliport_airportheliport_pt_sounrs.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_sounrs.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_llqmxj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_llqmxj.longitude AS location_longitude,
    geometry_elevatedpoint_view_llqmxj.latitude AS location_latitude,
    geometry_elevatedpoint_view_llqmxj.elevation AS location_elevation,
    geometry_elevatedpoint_view_llqmxj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_llqmxj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_llqmxj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_llqmxj.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_uiztoy.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_rsfmfp on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_rsfmfp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sounrs on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_sounrs.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_llqmxj on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_llqmxj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ehglau.*) AS annotation
  from master_join master_join_focjoq
  join notes.note_view notes_note_lat_ehglau on master_join_focjoq.target_id = notes_note_lat_ehglau.id
  where master_join_focjoq.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_uiztoy on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_kmwfoe.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kmwfoe.longitude AS location_longitude,
    geometry_elevatedpoint_view_kmwfoe.latitude AS location_latitude,
    geometry_elevatedpoint_view_kmwfoe.elevation AS location_elevation,
    geometry_elevatedpoint_view_kmwfoe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kmwfoe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kmwfoe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kmwfoe.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_yqtyya.title as varchar), '(' || organisation_unit_pt_yqtyya.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_yqtyya.href::text AS serviceprovider_href,
    service_callsigndetail_view_fettmh.callsign::jsonb as callsign,
    service_callsigndetail_view_fettmh.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_rrtrba.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_iiscog.availability::jsonb as availability,
    service_serviceoperationalstatus_view_iiscog.availability_annotation::jsonb as availability_annotation,
    notes_note_view_nokmts.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_atfjtf.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kmwfoe on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_kmwfoe.id
left join organisation.unit_pt organisation_unit_pt_yqtyya on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_yqtyya.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ktxnsm.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_ktxnsm.annotation) as callsign_annotation  from master_join master_join_bahpqv
  join service.callsigndetail_view service_callsigndetail_lat_ktxnsm on master_join_bahpqv.target_id = service_callsigndetail_lat_ktxnsm.id
  where master_join_bahpqv.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_fettmh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mmfvdq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mmfvdq.title AS varchar), '(' || service_radiocommunicationchannel_lat_mmfvdq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mmfvdq.href
  )) as radiocommunication  from master_join master_join_derbot
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mmfvdq on master_join_derbot.target_id = service_radiocommunicationchannel_lat_mmfvdq.id
  where master_join_derbot.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_rrtrba on TRUE
left join lateral(
  select
  from master_join master_join_vzpfij
  join shared.contactinformation_view shared_contactinformation_lat_wmxttl on master_join_vzpfij.target_id = shared_contactinformation_lat_wmxttl.id
  where master_join_vzpfij.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_bilhew on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bhlikk.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bhlikk.annotation) as availability_annotation  from master_join master_join_aycxfq
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bhlikk on master_join_aycxfq.target_id = service_serviceoperationalstatus_lat_bhlikk.id
  where master_join_aycxfq.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_iiscog on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xtsyhl.*) AS annotation
  from master_join master_join_nsqvyw
  join notes.note_view notes_note_lat_xtsyhl on master_join_nsqvyw.target_id = notes_note_lat_xtsyhl.id
  where master_join_nsqvyw.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_nokmts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bgqcpf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bgqcpf.title AS varchar), '(' || airport_heliport_airportheliport_lat_bgqcpf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bgqcpf.href
  )) as airportheliport  from master_join master_join_dozudr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bgqcpf on master_join_dozudr.target_id = airport_heliport_airportheliport_lat_bgqcpf.id
  where master_join_dozudr.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_atfjtf on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.aircraftstandcontamination_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zznjje.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_zznjje.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_nafodo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nafodo.longitude AS location_longitude,
    geometry_elevatedpoint_view_nafodo.latitude AS location_latitude,
    geometry_elevatedpoint_view_nafodo.elevation AS location_elevation,
    geometry_elevatedpoint_view_nafodo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nafodo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nafodo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nafodo.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_bgcugd.title as varchar), '(' || airport_heliport_apronelement_pt_bgcugd.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_bgcugd.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_hxlefn.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_hxlefn.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hxlefn.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hxlefn.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hxlefn.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hxlefn.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_aipcgn.contaminant::jsonb as contaminant,
    airport_heliport_aircraftstandcontamination_view_aipcgn.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_ofufhz.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_leumqq.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_leumqq.availability_annotation::jsonb as availability_annotation
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zznjje on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zznjje.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nafodo on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_nafodo.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_bgcugd on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_bgcugd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hxlefn on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_hxlefn.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_uopvwi.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_uopvwi.annotation) as contaminant_annotation  from master_join master_join_imqtlz
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_uopvwi on master_join_imqtlz.target_id = airport_heliport_aircraftstandcontamination_lat_uopvwi.id
  where master_join_imqtlz.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_aipcgn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykulsa.*) AS annotation
  from master_join master_join_hvhden
  join notes.note_view notes_note_lat_ykulsa on master_join_hvhden.target_id = notes_note_lat_ykulsa.id
  where master_join_hvhden.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_ofufhz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_xaggjt.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_xaggjt.annotation) as availability_annotation  from master_join master_join_axnfin
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_xaggjt on master_join_axnfin.target_id = airport_heliport_apronareaavailability_lat_xaggjt.id
  where master_join_axnfin.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_leumqq on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_xqmvqw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xqmvqw.longitude AS location_longitude,
    geometry_elevatedpoint_view_xqmvqw.latitude AS location_latitude,
    geometry_elevatedpoint_view_xqmvqw.elevation AS location_elevation,
    geometry_elevatedpoint_view_xqmvqw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xqmvqw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xqmvqw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xqmvqw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uinzpm.title as varchar), '(' || organisation_unit_pt_uinzpm.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_uinzpm.href::text AS serviceprovider_href,
    service_callsigndetail_view_ijlvrb.callsign::jsonb as callsign,
    service_callsigndetail_view_ijlvrb.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_fwkvsf.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_lnltqe.availability::jsonb as availability,
    service_serviceoperationalstatus_view_lnltqe.availability_annotation::jsonb as availability_annotation,
    notes_note_view_bbwpsw.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_wezowa.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xqmvqw on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_xqmvqw.id
left join organisation.unit_pt organisation_unit_pt_uinzpm on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_uinzpm.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ajdqxm.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_ajdqxm.annotation) as callsign_annotation  from master_join master_join_zvcxbr
  join service.callsigndetail_view service_callsigndetail_lat_ajdqxm on master_join_zvcxbr.target_id = service_callsigndetail_lat_ajdqxm.id
  where master_join_zvcxbr.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_ijlvrb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_tptsut.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_tptsut.title AS varchar), '(' || service_radiocommunicationchannel_lat_tptsut.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_tptsut.href
  )) as radiocommunication  from master_join master_join_jvzcsz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_tptsut on master_join_jvzcsz.target_id = service_radiocommunicationchannel_lat_tptsut.id
  where master_join_jvzcsz.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_fwkvsf on TRUE
left join lateral(
  select
  from master_join master_join_awgbyq
  join shared.contactinformation_view shared_contactinformation_lat_opzigj on master_join_awgbyq.target_id = shared_contactinformation_lat_opzigj.id
  where master_join_awgbyq.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_qskpmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ortyrv.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ortyrv.annotation) as availability_annotation  from master_join master_join_tpgwxl
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ortyrv on master_join_tpgwxl.target_id = service_serviceoperationalstatus_lat_ortyrv.id
  where master_join_tpgwxl.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_lnltqe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vckvcz.*) AS annotation
  from master_join master_join_zxayhz
  join notes.note_view notes_note_lat_vckvcz on master_join_zxayhz.target_id = notes_note_lat_vckvcz.id
  where master_join_zxayhz.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_bbwpsw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_blaqjt.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_blaqjt.title AS varchar), '(' || airport_heliport_airportheliport_lat_blaqjt.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_blaqjt.href
  )) as airportheliport  from master_join master_join_hbikuz
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_blaqjt on master_join_hbikuz.target_id = airport_heliport_airportheliport_lat_blaqjt.id
  where master_join_hbikuz.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_wezowa on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_krvasw.title as varchar), '(' || airport_heliport_airportheliport_pt_krvasw.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_krvasw.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_oxfcwd.title as varchar), '(' || airport_heliport_airportheliport_pt_oxfcwd.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_oxfcwd.href::text AS dependentairport_href,
    notes_note_view_yeasty.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_krvasw on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_krvasw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oxfcwd on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_oxfcwd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_icokht.*) AS annotation
  from master_join master_join_toopff
  join notes.note_view notes_note_lat_icokht on master_join_toopff.target_id = notes_note_lat_icokht.id
  where master_join_toopff.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_yeasty on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportType
-- ['airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'notes.note_view', 'shared.contactinformation_view', 'geometry.elevatedsurface_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportavailability_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_qxriil.*)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_qxriil.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_mtinsb.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_mtinsb.longitude AS arp_longitude,
    geometry_elevatedpoint_view_mtinsb.latitude AS arp_latitude,
    geometry_elevatedpoint_view_mtinsb.elevation AS arp_elevation,
    geometry_elevatedpoint_view_mtinsb.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_mtinsb.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_mtinsb.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_mtinsb.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_cgorba.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_cgorba.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_cgorba.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_cgorba.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_cgorba.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_cgorba.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_wwomqt.contaminant::jsonb as contaminant,
    airport_heliport_airportheliportcontamination_view_wwomqt.contaminant_annotation::jsonb as contaminant_annotation,
    airport_heliport_city_view_xphkqc.servedcity::jsonb as servedcity,
    airport_heliport_city_view_xphkqc.servedcity_annotation::jsonb as servedcity_annotation,
    airport_heliport_altimetersource_pt_yhgjlo.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_jlanvd.availability::jsonb as availability,
    airport_heliport_airportheliportavailability_view_jlanvd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_qbpgmv.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_qxriil on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_qxriil.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mtinsb on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_mtinsb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cgorba on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_cgorba.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_pbtise.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_pbtise.annotation) as contaminant_annotation  from master_join master_join_jillpt
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_pbtise on master_join_jillpt.target_id = airport_heliport_airportheliportcontamination_lat_pbtise.id
  where master_join_jillpt.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_wwomqt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_iizxzg.*) as servedcity,
      jsonb_agg(DISTINCT airport_heliport_city_lat_iizxzg.annotation) as servedcity_annotation  from master_join master_join_qieqqf
  join airport_heliport.city_view airport_heliport_city_lat_iizxzg on master_join_qieqqf.target_id = airport_heliport_city_lat_iizxzg.id
  where master_join_qieqqf.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_xphkqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_zhbuol.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_zhbuol.title AS varchar), '(' || airport_heliport_altimetersource_lat_zhbuol.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_zhbuol.href
  )) as altimetersource  from master_join master_join_uygvsk
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_zhbuol on master_join_uygvsk.target_id = airport_heliport_altimetersource_lat_zhbuol.id
  where master_join_uygvsk.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_yhgjlo on TRUE
left join lateral(
  select
  from master_join master_join_wqsjkr
  join shared.contactinformation_view shared_contactinformation_lat_qhckzj on master_join_wqsjkr.target_id = shared_contactinformation_lat_qhckzj.id
  where master_join_wqsjkr.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_oprbts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_yywhpw.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_yywhpw.annotation) as availability_annotation  from master_join master_join_uonqbc
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_yywhpw on master_join_uonqbc.target_id = airport_heliport_airportheliportavailability_lat_yywhpw.id
  where master_join_uonqbc.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_jlanvd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdvyqn.*) AS annotation
  from master_join master_join_wyvvxd
  join notes.note_view notes_note_lat_mdvyqn on master_join_wyvvxd.target_id = notes_note_lat_mdvyqn.id
  where master_join_wyvvxd.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_qbpgmv on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_ewemkg.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_ewemkg.elevation AS area_elevation,
    geometry_elevatedsurface_view_ewemkg.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_ewemkg.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_ewemkg.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_ewemkg.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_gqobbn.title as varchar), '(' || airport_heliport_airportheliport_pt_gqobbn.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_gqobbn.href::text AS affectedairport_href,
    notes_note_view_dhphbt.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ewemkg on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_ewemkg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gqobbn on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_gqobbn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lsvyyo.*) AS annotation
  from master_join master_join_zpnpyw
  join notes.note_view notes_note_lat_lsvyyo on master_join_zpnpyw.target_id = notes_note_lat_lsvyyo.id
  where master_join_zpnpyw.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_dhphbt on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    airport_heliport_airportheliportprotectionarea_pt_ovugbe.markedprotectionarea::jsonb as markedprotectionarea,
    airport_heliport_markingelement_view_ipuhcr.element::jsonb as element,
    airport_heliport_markingelement_view_ipuhcr.element_annotation::jsonb as element_annotation,
    notes_note_view_msmzsz.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliportprotectionarea_lat_ukujsx.id,
      'title', coalesce(cast(airport_heliport_airportheliportprotectionarea_lat_ukujsx.title AS varchar), '(' || airport_heliport_airportheliportprotectionarea_lat_ukujsx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliportprotectionarea_lat_ukujsx.href
  )) as markedprotectionarea  from master_join master_join_rjzeoj
  join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_lat_ukujsx on master_join_rjzeoj.target_id = airport_heliport_airportheliportprotectionarea_lat_ukujsx.id
  where master_join_rjzeoj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_airportheliportprotectionarea_pt_ovugbe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_xqjagx.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_xqjagx.annotation) as element_annotation  from master_join master_join_dijidp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_xqjagx on master_join_dijidp.target_id = airport_heliport_markingelement_lat_xqjagx.id
  where master_join_dijidp.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_ipuhcr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ofukpl.*) AS annotation
  from master_join master_join_vxadwk
  join notes.note_view notes_note_lat_ofukpl on master_join_vxadwk.target_id = notes_note_lat_ofukpl.id
  where master_join_vxadwk.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_msmzsz on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceType
-- ['service.fuel_view', 'service.oxygen_view', 'notes.note_view', 'shared.contactinformation_view', 'service.oil_view', 'service.nitrogen_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_drmqbq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_drmqbq.longitude AS location_longitude,
    geometry_elevatedpoint_view_drmqbq.latitude AS location_latitude,
    geometry_elevatedpoint_view_drmqbq.elevation AS location_elevation,
    geometry_elevatedpoint_view_drmqbq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_drmqbq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_drmqbq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_drmqbq.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_orsgxa.title as varchar), '(' || organisation_unit_pt_orsgxa.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_orsgxa.href::text AS serviceprovider_href,
    service_callsigndetail_view_ejjkmr.callsign::jsonb as callsign,
    service_callsigndetail_view_ejjkmr.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_widvkg.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xcnqin.availability::jsonb as availability,
    service_serviceoperationalstatus_view_xcnqin.availability_annotation::jsonb as availability_annotation,
    notes_note_view_fyfsls.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_kyfbge.airportheliport::jsonb as airportheliport,
    service_fuel_view_rjkzhm.fuelsupply::jsonb as fuelsupply,
    service_fuel_view_rjkzhm.fuelsupply_annotation::jsonb as fuelsupply_annotation,
    service_oil_view_uctows.oilsupply::jsonb as oilsupply,
    service_oil_view_uctows.oilsupply_annotation::jsonb as oilsupply_annotation,
    service_nitrogen_view_fdkyte.nitrogensupply::jsonb as nitrogensupply,
    service_nitrogen_view_fdkyte.nitrogensupply_annotation::jsonb as nitrogensupply_annotation,
    service_oxygen_view_lgtfge.oxygensupply::jsonb as oxygensupply,
    service_oxygen_view_lgtfge.oxygensupply_annotation::jsonb as oxygensupply_annotation
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_drmqbq on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_drmqbq.id
left join organisation.unit_pt organisation_unit_pt_orsgxa on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_orsgxa.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dbylnv.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_dbylnv.annotation) as callsign_annotation  from master_join master_join_gdhani
  join service.callsigndetail_view service_callsigndetail_lat_dbylnv on master_join_gdhani.target_id = service_callsigndetail_lat_dbylnv.id
  where master_join_gdhani.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_ejjkmr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_eeqhrc.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_eeqhrc.title AS varchar), '(' || service_radiocommunicationchannel_lat_eeqhrc.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_eeqhrc.href
  )) as radiocommunication  from master_join master_join_xlxdln
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_eeqhrc on master_join_xlxdln.target_id = service_radiocommunicationchannel_lat_eeqhrc.id
  where master_join_xlxdln.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_widvkg on TRUE
left join lateral(
  select
  from master_join master_join_afztdx
  join shared.contactinformation_view shared_contactinformation_lat_wsbjwp on master_join_afztdx.target_id = shared_contactinformation_lat_wsbjwp.id
  where master_join_afztdx.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_xjetch on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_zmqrza.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_zmqrza.annotation) as availability_annotation  from master_join master_join_htwlws
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_zmqrza on master_join_htwlws.target_id = service_serviceoperationalstatus_lat_zmqrza.id
  where master_join_htwlws.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_xcnqin on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yflhst.*) AS annotation
  from master_join master_join_gzenrc
  join notes.note_view notes_note_lat_yflhst on master_join_gzenrc.target_id = notes_note_lat_yflhst.id
  where master_join_gzenrc.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_fyfsls on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_glmhyx.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_glmhyx.title AS varchar), '(' || airport_heliport_airportheliport_lat_glmhyx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_glmhyx.href
  )) as airportheliport  from master_join master_join_ngoapw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_glmhyx on master_join_ngoapw.target_id = airport_heliport_airportheliport_lat_glmhyx.id
  where master_join_ngoapw.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_kyfbge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_vkefns.*) as fuelsupply,
      jsonb_agg(DISTINCT service_fuel_lat_vkefns.annotation) as fuelsupply_annotation  from master_join master_join_cvqqfj
  join service.fuel_view service_fuel_lat_vkefns on master_join_cvqqfj.target_id = service_fuel_lat_vkefns.id
  where master_join_cvqqfj.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_rjkzhm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_zplrre.*) as oilsupply,
      jsonb_agg(DISTINCT service_oil_lat_zplrre.annotation) as oilsupply_annotation  from master_join master_join_rmpsrp
  join service.oil_view service_oil_lat_zplrre on master_join_rmpsrp.target_id = service_oil_lat_zplrre.id
  where master_join_rmpsrp.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_uctows on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_glcubs.*) as nitrogensupply,
      jsonb_agg(DISTINCT service_nitrogen_lat_glcubs.annotation) as nitrogensupply_annotation  from master_join master_join_ummzrj
  join service.nitrogen_view service_nitrogen_lat_glcubs on master_join_ummzrj.target_id = service_nitrogen_lat_glcubs.id
  where master_join_ummzrj.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_fdkyte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_ezqflj.*) as oxygensupply,
      jsonb_agg(DISTINCT service_oxygen_lat_ezqflj.annotation) as oxygensupply_annotation  from master_join master_join_cgsogd
  join service.oxygen_view service_oxygen_lat_ezqflj on master_join_cgsogd.target_id = service_oxygen_lat_ezqflj.id
  where master_join_cgsogd.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_lgtfge on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_hhkgei.title as varchar), '(' || airspace_airspace_pt_hhkgei.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_hhkgei.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_crjjit.title as varchar), '(' || airspace_airspace_pt_crjjit.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_crjjit.href::text AS enteredairspace_href,
    notes_note_view_upbdig.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_hhkgei on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_hhkgei.id
left join airspace.airspace_pt airspace_airspace_pt_crjjit on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_crjjit.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rnzunf.*) AS annotation
  from master_join master_join_rqmmyn
  join notes.note_view notes_note_lat_rnzunf on master_join_rqmmyn.target_id = notes_note_lat_rnzunf.id
  where master_join_rqmmyn.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_upbdig on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceType
-- ['airspace.airspaceactivation_view', 'airspace.airspacelayerclass_view', 'airspace.airspacegeometrycomponent_view', 'notes.note_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_grjuhx.title as varchar), '(' || routes_route_pt_grjuhx.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_grjuhx.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_wkwudf.clazz::jsonb as clazz,
    airspace_airspacelayerclass_view_wkwudf.clazz_annotation::jsonb as clazz_annotation,
    airspace_airspacegeometrycomponent_view_pustht.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspacegeometrycomponent_view_pustht.geometrycomponent_annotation::jsonb as geometrycomponent_annotation,
    airspace_airspaceactivation_view_blswbn.activation::jsonb as activation,
    airspace_airspaceactivation_view_blswbn.activation_annotation::jsonb as activation_annotation,
    notes_note_view_qdjjrk.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_grjuhx on airspace.airspace_ts.protectedroute_id = routes_route_pt_grjuhx.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_zofzyi.*) as clazz,
      jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_zofzyi.annotation) as clazz_annotation  from master_join master_join_lwzmpp
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_zofzyi on master_join_lwzmpp.target_id = airspace_airspacelayerclass_lat_zofzyi.id
  where master_join_lwzmpp.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_wkwudf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_zmlhbc.*) as geometrycomponent,
      jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_zmlhbc.annotation) as geometrycomponent_annotation  from master_join master_join_aaruru
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_zmlhbc on master_join_aaruru.target_id = airspace_airspacegeometrycomponent_lat_zmlhbc.id
  where master_join_aaruru.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_pustht on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_silfab.*) as activation,
      jsonb_agg(DISTINCT airspace_airspaceactivation_lat_silfab.annotation) as activation_annotation  from master_join master_join_eydqla
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_silfab on master_join_eydqla.target_id = airspace_airspaceactivation_lat_silfab.id
  where master_join_eydqla.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_blswbn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_arseno.*) AS annotation
  from master_join master_join_cqbyij
  join notes.note_view notes_note_lat_arseno on master_join_cqbyij.target_id = notes_note_lat_arseno.id
  where master_join_cqbyij.source_id = airspace.airspace_ts.id
) as notes_note_view_qdjjrk on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lloffe.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lloffe.longitude AS location_longitude,
    geometry_elevatedpoint_view_lloffe.latitude AS location_latitude,
    geometry_elevatedpoint_view_lloffe.elevation AS location_elevation,
    geometry_elevatedpoint_view_lloffe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lloffe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lloffe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lloffe.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_bqhwev.title as varchar), '(' || organisation_unit_pt_bqhwev.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_bqhwev.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_swzjya.title as varchar), '(' || navaids_points_directionfinder_pt_swzjya.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_swzjya.href::text AS aircraftlocator_href,
    service_callsigndetail_view_dhfeoq.callsign::jsonb as callsign,
    service_callsigndetail_view_dhfeoq.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_nvadeb.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_allzhr.availability::jsonb as availability,
    service_serviceoperationalstatus_view_allzhr.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ttxugu.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_vquhzg.clientairport::jsonb as clientairport,
    airspace_airspace_pt_iosrqx.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_qubddk.clientroute::jsonb as clientroute,
    routes_routeportion_view_qubddk.clientroute_annotation::jsonb as clientroute_annotation,
    procedure_procedure_pt_nrilmi.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_bglylj.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_lssfgr.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lloffe on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_lloffe.id
left join organisation.unit_pt organisation_unit_pt_bqhwev on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_bqhwev.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_swzjya on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_swzjya.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_jfypzb.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_jfypzb.annotation) as callsign_annotation  from master_join master_join_juezli
  join service.callsigndetail_view service_callsigndetail_lat_jfypzb on master_join_juezli.target_id = service_callsigndetail_lat_jfypzb.id
  where master_join_juezli.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_dhfeoq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_pptfdl.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_pptfdl.title AS varchar), '(' || service_radiocommunicationchannel_lat_pptfdl.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_pptfdl.href
  )) as radiocommunication  from master_join master_join_swqkdw
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_pptfdl on master_join_swqkdw.target_id = service_radiocommunicationchannel_lat_pptfdl.id
  where master_join_swqkdw.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_nvadeb on TRUE
left join lateral(
  select
  from master_join master_join_agquuz
  join shared.contactinformation_view shared_contactinformation_lat_xfshhm on master_join_agquuz.target_id = shared_contactinformation_lat_xfshhm.id
  where master_join_agquuz.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_btvmhu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_uatkdx.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_uatkdx.annotation) as availability_annotation  from master_join master_join_wnypas
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_uatkdx on master_join_wnypas.target_id = service_serviceoperationalstatus_lat_uatkdx.id
  where master_join_wnypas.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_allzhr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bphfpl.*) AS annotation
  from master_join master_join_ewawtk
  join notes.note_view notes_note_lat_bphfpl on master_join_ewawtk.target_id = notes_note_lat_bphfpl.id
  where master_join_ewawtk.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_ttxugu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_tnlpua.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_tnlpua.title AS varchar), '(' || airport_heliport_airportheliport_lat_tnlpua.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_tnlpua.href
  )) as clientairport  from master_join master_join_nglkvy
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_tnlpua on master_join_nglkvy.target_id = airport_heliport_airportheliport_lat_tnlpua.id
  where master_join_nglkvy.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_vquhzg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_chledp.id,
      'title', coalesce(cast(airspace_airspace_lat_chledp.title AS varchar), '(' || airspace_airspace_lat_chledp.nilreason[1] || ')'),
      'href', airspace_airspace_lat_chledp.href
  )) as clientairspace  from master_join master_join_uuvskm
  join airspace.airspace_pt airspace_airspace_lat_chledp on master_join_uuvskm.target_id = airspace_airspace_lat_chledp.id
  where master_join_uuvskm.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_iosrqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_snbevi.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_snbevi.annotation) as clientroute_annotation  from master_join master_join_sdyajp
  join routes.routeportion_view routes_routeportion_lat_snbevi on master_join_sdyajp.target_id = routes_routeportion_lat_snbevi.id
  where master_join_sdyajp.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_qubddk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_kttlql.id,
      'title', coalesce(cast(procedure_procedure_lat_kttlql.title AS varchar), '(' || procedure_procedure_lat_kttlql.nilreason[1] || ')'),
      'href', procedure_procedure_lat_kttlql.href
  )) as clientprocedure  from master_join master_join_cggdkj
  join procedure.procedure_pt procedure_procedure_lat_kttlql on master_join_cggdkj.target_id = procedure_procedure_lat_kttlql.id
  where master_join_cggdkj.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_nrilmi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_nofwvo.id,
      'title', coalesce(cast(holding_holdingpattern_lat_nofwvo.title AS varchar), '(' || holding_holdingpattern_lat_nofwvo.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_nofwvo.href
  )) as clientholding  from master_join master_join_xfzkxi
  join holding.holdingpattern_pt holding_holdingpattern_lat_nofwvo on master_join_xfzkxi.target_id = holding_holdingpattern_lat_nofwvo.id
  where master_join_xfzkxi.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_bglylj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_mcrxdv.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_mcrxdv.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_mcrxdv.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_mcrxdv.href
  )) as clientaerialrefuelling  from master_join master_join_ibpivg
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_mcrxdv on master_join_ibpivg.target_id = aerial_refuelling_aerialrefuelling_lat_mcrxdv.id
  where master_join_ibpivg.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_lssfgr on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lekcvc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lekcvc.longitude AS location_longitude,
    geometry_elevatedpoint_view_lekcvc.latitude AS location_latitude,
    geometry_elevatedpoint_view_lekcvc.elevation AS location_elevation,
    geometry_elevatedpoint_view_lekcvc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lekcvc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lekcvc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lekcvc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_bpikxc.title as varchar), '(' || organisation_unit_pt_bpikxc.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_bpikxc.href::text AS serviceprovider_href,
    service_callsigndetail_view_mdpcjz.callsign::jsonb as callsign,
    service_callsigndetail_view_mdpcjz.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_nksack.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_nwxegb.availability::jsonb as availability,
    service_serviceoperationalstatus_view_nwxegb.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ilgvpt.annotation::jsonb as annotation,
    airspace_airspace_pt_meyvfk.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_tkbzyw.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_zorcqg.clientroute::jsonb as clientroute,
    routes_routeportion_view_zorcqg.clientroute_annotation::jsonb as clientroute_annotation
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lekcvc on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_lekcvc.id
left join organisation.unit_pt organisation_unit_pt_bpikxc on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_bpikxc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tfjqab.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_tfjqab.annotation) as callsign_annotation  from master_join master_join_ajbmpg
  join service.callsigndetail_view service_callsigndetail_lat_tfjqab on master_join_ajbmpg.target_id = service_callsigndetail_lat_tfjqab.id
  where master_join_ajbmpg.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_mdpcjz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_jnzyyr.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_jnzyyr.title AS varchar), '(' || service_radiocommunicationchannel_lat_jnzyyr.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_jnzyyr.href
  )) as radiocommunication  from master_join master_join_zgypff
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_jnzyyr on master_join_zgypff.target_id = service_radiocommunicationchannel_lat_jnzyyr.id
  where master_join_zgypff.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_nksack on TRUE
left join lateral(
  select
  from master_join master_join_qpvidj
  join shared.contactinformation_view shared_contactinformation_lat_bmfqpv on master_join_qpvidj.target_id = shared_contactinformation_lat_bmfqpv.id
  where master_join_qpvidj.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_baxflf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_tdrmue.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_tdrmue.annotation) as availability_annotation  from master_join master_join_zpicdn
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_tdrmue on master_join_zpicdn.target_id = service_serviceoperationalstatus_lat_tdrmue.id
  where master_join_zpicdn.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_nwxegb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uiaesi.*) AS annotation
  from master_join master_join_mdrqtj
  join notes.note_view notes_note_lat_uiaesi on master_join_mdrqtj.target_id = notes_note_lat_uiaesi.id
  where master_join_mdrqtj.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_ilgvpt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_qwcdvw.id,
      'title', coalesce(cast(airspace_airspace_lat_qwcdvw.title AS varchar), '(' || airspace_airspace_lat_qwcdvw.nilreason[1] || ')'),
      'href', airspace_airspace_lat_qwcdvw.href
  )) as clientairspace  from master_join master_join_ikjewm
  join airspace.airspace_pt airspace_airspace_lat_qwcdvw on master_join_ikjewm.target_id = airspace_airspace_lat_qwcdvw.id
  where master_join_ikjewm.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_meyvfk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_wfejpi.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_wfejpi.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_wfejpi.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_wfejpi.href
  )) as clientaerialrefuelling  from master_join master_join_oaibfd
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_wfejpi on master_join_oaibfd.target_id = aerial_refuelling_aerialrefuelling_lat_wfejpi.id
  where master_join_oaibfd.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_tkbzyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_oljcjq.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_oljcjq.annotation) as clientroute_annotation  from master_join master_join_uxzipn
  join routes.routeportion_view routes_routeportion_lat_oljcjq on master_join_uxzipn.target_id = routes_routeportion_lat_oljcjq.id
  where master_join_uxzipn.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_zorcqg on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_hiuopd.availability::jsonb as availability,
    airport_heliport_altimetersourcestatus_view_hiuopd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_rqoosg.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_zbmjli.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_zbmjli.annotation) as availability_annotation  from master_join master_join_ogkskh
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_zbmjli on master_join_ogkskh.target_id = airport_heliport_altimetersourcestatus_lat_zbmjli.id
  where master_join_ogkskh.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_hiuopd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjycfh.*) AS annotation
  from master_join master_join_elcesf
  join notes.note_view notes_note_lat_xjycfh on master_join_elcesf.target_id = notes_note_lat_xjycfh.id
  where master_join_elcesf.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_rqoosg on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_jcxvqh.title as varchar), '(' || navaids_points_designatedpoint_pt_jcxvqh.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_jcxvqh.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cwupbx.title as varchar), '(' || navaids_points_designatedpoint_pt_cwupbx.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_cwupbx.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_repwru.title as varchar), '(' || navaids_points_navaid_pt_repwru.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_repwru.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zomyij.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zomyij.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_zomyij.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_djusvm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_djusvm.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_djusvm.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_eaohaw.title as varchar), '(' || airport_heliport_airportheliport_pt_eaohaw.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_eaohaw.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_dreisi.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_dreisi.longitude AS pointchoiceposition_longitude,
    geometry_point_view_dreisi.latitude AS pointchoiceposition_latitude,
    geometry_point_view_dreisi.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_rwuzhp.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_jcxvqh on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_jcxvqh.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cwupbx on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cwupbx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_repwru on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_repwru.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zomyij on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zomyij.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_djusvm on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_djusvm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eaohaw on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_eaohaw.id
left join geometry.point_view geometry_point_view_dreisi on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_dreisi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvrikq.*) AS annotation
  from master_join master_join_gmhzod
  join notes.note_view notes_note_lat_jvrikq on master_join_gmhzod.target_id = notes_note_lat_jvrikq.id
  where master_join_gmhzod.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_rwuzhp on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_epsufg.title as varchar), '(' || airport_heliport_runwaydirection_pt_epsufg.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_epsufg.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_thsxhh.element::jsonb as element,
    shared_lightelement_view_thsxhh.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_fjjfgd.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_fjjfgd.availability_annotation::jsonb as availability_annotation,
    notes_note_view_dqshxl.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_epsufg on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_epsufg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_dssuld.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_dssuld.annotation) as element_annotation  from master_join master_join_zgufdj
  join shared.lightelement_view shared_lightelement_lat_dssuld on master_join_zgufdj.target_id = shared_lightelement_lat_dssuld.id
  where master_join_zgufdj.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_thsxhh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ktbdkn.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ktbdkn.annotation) as availability_annotation  from master_join master_join_crydqt
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ktbdkn on master_join_crydqt.target_id = airport_heliport_groundlightingavailability_lat_ktbdkn.id
  where master_join_crydqt.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_fjjfgd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_icqwvd.*) AS annotation
  from master_join master_join_bctxac
  join notes.note_view notes_note_lat_icqwvd on master_join_bctxac.target_id = notes_note_lat_icqwvd.id
  where master_join_bctxac.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_dqshxl on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementType
-- ['airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_yfhnoz.title as varchar), '(' || airport_heliport_apron_pt_yfhnoz.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_yfhnoz.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bqxotw.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_bqxotw.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_jnohpg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jnohpg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jnohpg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jnohpg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jnohpg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jnohpg.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_glmlcu.supplyservice::jsonb as supplyservice,
    notes_note_view_crelhe.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_saixdw.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_saixdw.availability_annotation::jsonb as availability_annotation
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_yfhnoz on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_yfhnoz.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bqxotw on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bqxotw.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jnohpg on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_jnohpg.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_kjedaf.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_kjedaf.title AS varchar), '(' || service_airportsuppliesservice_lat_kjedaf.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_kjedaf.href
  )) as supplyservice  from master_join master_join_rwvggw
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_kjedaf on master_join_rwvggw.target_id = service_airportsuppliesservice_lat_kjedaf.id
  where master_join_rwvggw.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_glmlcu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_riuleg.*) AS annotation
  from master_join master_join_lwaofs
  join notes.note_view notes_note_lat_riuleg on master_join_lwaofs.target_id = notes_note_lat_riuleg.id
  where master_join_lwaofs.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_crelhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_ywpakd.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_ywpakd.annotation) as availability_annotation  from master_join master_join_sqvhjc
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_ywpakd on master_join_sqvhjc.target_id = airport_heliport_apronareaavailability_lat_ywpakd.id
  where master_join_sqvhjc.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_saixdw on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_apsgju.title as varchar), '(' || airport_heliport_apron_pt_apsgju.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_apsgju.href::text AS lightedapron_href,
    shared_lightelement_view_lqwpec.element::jsonb as element,
    shared_lightelement_view_lqwpec.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_jgxhvv.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_jgxhvv.availability_annotation::jsonb as availability_annotation,
    notes_note_view_awnzku.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_apsgju on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_apsgju.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hcvkwi.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_hcvkwi.annotation) as element_annotation  from master_join master_join_ixunrj
  join shared.lightelement_view shared_lightelement_lat_hcvkwi on master_join_ixunrj.target_id = shared_lightelement_lat_hcvkwi.id
  where master_join_ixunrj.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_lqwpec on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_wmlbpy.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_wmlbpy.annotation) as availability_annotation  from master_join master_join_kprooz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_wmlbpy on master_join_kprooz.target_id = airport_heliport_groundlightingavailability_lat_wmlbpy.id
  where master_join_kprooz.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_jgxhvv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuegbu.*) AS annotation
  from master_join master_join_wekjkw
  join notes.note_view notes_note_lat_vuegbu on master_join_wekjkw.target_id = notes_note_lat_vuegbu.id
  where master_join_wekjkw.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_awnzku on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_lqrmlj.title as varchar), '(' || airport_heliport_apron_pt_lqrmlj.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_lqrmlj.href::text AS markedapron_href,
    airport_heliport_markingelement_view_awjbnj.element::jsonb as element,
    airport_heliport_markingelement_view_awjbnj.element_annotation::jsonb as element_annotation,
    notes_note_view_glmcem.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_lqrmlj on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_lqrmlj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rckdsg.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rckdsg.annotation) as element_annotation  from master_join master_join_cqgftp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rckdsg on master_join_cqgftp.target_id = airport_heliport_markingelement_lat_rckdsg.id
  where master_join_cqgftp.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_awjbnj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_efhdbj.*) AS annotation
  from master_join master_join_zpzqmb
  join notes.note_view notes_note_lat_efhdbj on master_join_zpzqmb.target_id = notes_note_lat_efhdbj.id
  where master_join_zpzqmb.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_glmcem on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronType
-- ['airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gwhdgq.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_gwhdgq.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_vjgdaf.title as varchar), '(' || airport_heliport_airportheliport_pt_vjgdaf.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_vjgdaf.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_lputho.contaminant::jsonb as contaminant,
    airport_heliport_aproncontamination_view_lputho.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_xyrqqb.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_gtepiu.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_gtepiu.availability_annotation::jsonb as availability_annotation
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gwhdgq on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gwhdgq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vjgdaf on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_vjgdaf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_oszbfu.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_oszbfu.annotation) as contaminant_annotation  from master_join master_join_tifxcu
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_oszbfu on master_join_tifxcu.target_id = airport_heliport_aproncontamination_lat_oszbfu.id
  where master_join_tifxcu.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_lputho on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ejxtry.*) AS annotation
  from master_join master_join_lhcwpn
  join notes.note_view notes_note_lat_ejxtry on master_join_lhcwpn.target_id = notes_note_lat_ejxtry.id
  where master_join_lhcwpn.source_id = airport_heliport.apron_ts.id
) as notes_note_view_xyrqqb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_nwpqlr.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_nwpqlr.annotation) as availability_annotation  from master_join master_join_eeqhtg
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_nwpqlr on master_join_eeqhtg.target_id = airport_heliport_apronareaavailability_lat_nwpqlr.id
  where master_join_eeqhtg.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_gtepiu on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_gqqxoi.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_gqqxoi.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_yhcwti.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_yhcwti.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_yhcwti.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_yhcwti.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_yhcwti.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_yhcwti.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_jahnpk.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_jahnpk.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_jahnpk.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_jahnpk.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_jahnpk.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_jahnpk.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_ctalyo.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_ctalyo.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_ctalyo.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_ctalyo.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_ctalyo.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_ctalyo.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_ctalyo.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_ctalyo.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_bvmync.runwaydirection::jsonb as runwaydirection,
    notes_note_view_dvajfh.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_gqqxoi on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_gqqxoi.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_yhcwti on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_yhcwti.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jahnpk on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_jahnpk.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ctalyo on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_ctalyo.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_gnrujh.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_gnrujh.title AS varchar), '(' || airport_heliport_runwaydirection_lat_gnrujh.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_gnrujh.href
  )) as runwaydirection  from master_join master_join_aelplh
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_gnrujh on master_join_aelplh.target_id = airport_heliport_runwaydirection_lat_gnrujh.id
  where master_join_aelplh.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_bvmync on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jjbpoz.*) AS annotation
  from master_join master_join_dyftud
  join notes.note_view notes_note_lat_jjbpoz on master_join_dyftud.target_id = notes_note_lat_jjbpoz.id
  where master_join_dyftud.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_dvajfh on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tfsude.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_tfsude.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ctmlit.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_ctmlit.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_viotrd.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_viotrd.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_cozsie.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_cozsie.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ierenr.title as varchar), '(' || navaids_points_angleindication_pt_ierenr.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ierenr.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_qityhg.title as varchar), '(' || navaids_points_distanceindication_pt_qityhg.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_qityhg.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_xwluib.*)::jsonb AS holding,
    procedure_holdinguse_view_xwluib.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_bhwjdf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_bhwjdf.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_bhwjdf.href::text AS approach_href,
    shared_aircraftcharacteristic_view_ezgkdo.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_ezgkdo.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_qhysur.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_qhysur.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_tyczdw.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tfsude on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_tfsude.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ctmlit on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ctmlit.id
left join geometry.curve_view geometry_curve_view_cozsie on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_cozsie.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_viotrd on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_viotrd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ierenr on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_ierenr.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_qityhg on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_qityhg.id
left join procedure.holdinguse_view procedure_holdinguse_view_xwluib on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_xwluib.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_bhwjdf on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_bhwjdf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qqatpq.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qqatpq.annotation) as aircraftcategory_annotation  from master_join master_join_fpxzkx
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qqatpq on master_join_fpxzkx.target_id = shared_aircraftcharacteristic_lat_qqatpq.id
  where master_join_fpxzkx.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_ezgkdo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_rpmtmt.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_rpmtmt.annotation) as designsurface_annotation  from master_join master_join_hrdccf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_rpmtmt on master_join_hrdccf.target_id = shared_obstacleassessmentarea_lat_rpmtmt.id
  where master_join_hrdccf.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_qhysur on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thgdgx.*) AS annotation
  from master_join master_join_ifgyat
  join notes.note_view notes_note_lat_thgdgx on master_join_ifgyat.target_id = notes_note_lat_thgdgx.id
  where master_join_ifgyat.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_tyczdw on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bkcdso.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_bkcdso.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eevmjg.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_eevmjg.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jitmjz.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_jitmjz.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_npckio.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_npckio.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_vomajc.title as varchar), '(' || navaids_points_angleindication_pt_vomajc.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_vomajc.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_cnquwf.title as varchar), '(' || navaids_points_distanceindication_pt_cnquwf.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_cnquwf.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_dqjakf.*)::jsonb AS holding,
    procedure_holdinguse_view_dqjakf.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ilsiqt.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ilsiqt.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_ilsiqt.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_mrjjqa.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_mrjjqa.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_qbraka.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_qbraka.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_piaokv.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bkcdso on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_bkcdso.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eevmjg on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_eevmjg.id
left join geometry.curve_view geometry_curve_view_npckio on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_npckio.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jitmjz on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jitmjz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vomajc on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_vomajc.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_cnquwf on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_cnquwf.id
left join procedure.holdinguse_view procedure_holdinguse_view_dqjakf on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_dqjakf.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ilsiqt on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_ilsiqt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_aanxga.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_aanxga.annotation) as aircraftcategory_annotation  from master_join master_join_pvcwcb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_aanxga on master_join_pvcwcb.target_id = shared_aircraftcharacteristic_lat_aanxga.id
  where master_join_pvcwcb.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_mrjjqa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_yrhptw.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_yrhptw.annotation) as designsurface_annotation  from master_join master_join_bustql
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_yrhptw on master_join_bustql.target_id = shared_obstacleassessmentarea_lat_yrhptw.id
  where master_join_bustql.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_qbraka on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wjuncq.*) AS annotation
  from master_join master_join_pjwlle
  join notes.note_view notes_note_lat_wjuncq on master_join_pjwlle.target_id = notes_note_lat_wjuncq.id
  where master_join_pjwlle.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_piaokv on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_iuskjh.title as varchar), '(' || organisation_organisationauthority_pt_iuskjh.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_iuskjh.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_khaqfk.title as varchar), '(' || airspace_airspace_pt_khaqfk.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_khaqfk.href::text AS assignedairspace_href,
    notes_note_view_obusam.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_iuskjh on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_iuskjh.id
left join airspace.airspace_pt airspace_airspace_pt_khaqfk on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_khaqfk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_efqedz.*) AS annotation
  from master_join master_join_pnydwb
  join notes.note_view notes_note_lat_efqedz on master_join_pnydwb.target_id = notes_note_lat_efqedz.id
  where master_join_pnydwb.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_obusam on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_kwdqyp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kwdqyp.longitude AS location_longitude,
    geometry_elevatedpoint_view_kwdqyp.latitude AS location_latitude,
    geometry_elevatedpoint_view_kwdqyp.elevation AS location_elevation,
    geometry_elevatedpoint_view_kwdqyp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kwdqyp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kwdqyp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kwdqyp.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fmtjxd.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_fmtjxd.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_rvildv.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_rvildv.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_ygmyvg.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_ygmyvg.availability_annotation::jsonb as availability_annotation,
    notes_note_view_aacgfr.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kwdqyp on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_kwdqyp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_tnjynp.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_tnjynp.annotation) as authority_annotation  from master_join master_join_hhzspk
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_tnjynp on master_join_hhzspk.target_id = navaids_points_authorityfornavaidequipment_lat_tnjynp.id
  where master_join_hhzspk.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_fmtjxd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_tjuzyl.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_tjuzyl.annotation) as monitoring_annotation  from master_join master_join_azxweo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_tjuzyl on master_join_azxweo.target_id = navaids_points_navaidequipmentmonitoring_lat_tjuzyl.id
  where master_join_azxweo.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_rvildv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qmvwbe.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qmvwbe.annotation) as availability_annotation  from master_join master_join_ificcj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qmvwbe on master_join_ificcj.target_id = navaids_points_navaidoperationalstatus_lat_qmvwbe.id
  where master_join_ificcj.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_ygmyvg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yiivwo.*) AS annotation
  from master_join master_join_sszxww
  join notes.note_view notes_note_lat_yiivwo on master_join_sszxww.target_id = notes_note_lat_yiivwo.id
  where master_join_sszxww.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_aacgfr on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointType
-- ['routes.routeportion_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_ibqagi.title as varchar), '(' || navaids_points_designatedpoint_pt_ibqagi.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ibqagi.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_snwqjf.title as varchar), '(' || navaids_points_navaid_pt_snwqjf.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_snwqjf.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mjwkoz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mjwkoz.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_mjwkoz.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xmjjcr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xmjjcr.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xmjjcr.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cqcmqv.title as varchar), '(' || airport_heliport_airportheliport_pt_cqcmqv.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_cqcmqv.href::text AS locationairportreferencepoint_href,
    geometry_point_view_ahyweg.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_ahyweg.longitude AS locationposition_longitude,
    geometry_point_view_ahyweg.latitude AS locationposition_latitude,
    geometry_point_view_ahyweg.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_bedhrx.*)::jsonb AS applicablerouteportion,
    routes_routeportion_view_bedhrx.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_gddcub.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ibqagi on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ibqagi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_snwqjf on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_snwqjf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mjwkoz on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mjwkoz.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xmjjcr on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xmjjcr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cqcmqv on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_cqcmqv.id
left join geometry.point_view geometry_point_view_ahyweg on routes.changeoverpoint_ts.location_position_id = geometry_point_view_ahyweg.id
left join routes.routeportion_view routes_routeportion_view_bedhrx on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_bedhrx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oloxfs.*) AS annotation
  from master_join master_join_djvswc
  join notes.note_view notes_note_lat_oloxfs on master_join_djvswc.target_id = notes_note_lat_oloxfs.id
  where master_join_djvswc.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_gddcub on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_dbjyrp.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_dbjyrp.longitude AS position_longitude,
    geometry_elevatedpoint_view_dbjyrp.latitude AS position_latitude,
    geometry_elevatedpoint_view_dbjyrp.elevation AS position_elevation,
    geometry_elevatedpoint_view_dbjyrp.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_dbjyrp.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_dbjyrp.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_dbjyrp.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_cgmdzq.title as varchar), '(' || airport_heliport_airportheliport_pt_cgmdzq.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_cgmdzq.href::text AS airportheliport_href,
    notes_note_view_tlezji.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dbjyrp on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_dbjyrp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cgmdzq on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_cgmdzq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qibgju.*) AS annotation
  from master_join master_join_lwvcqa
  join notes.note_view notes_note_lat_qibgju on master_join_lwvcqa.target_id = notes_note_lat_qibgju.id
  where master_join_lwvcqa.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_tlezji on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_wgutfp.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_wgutfp.longitude AS position_longitude,
    geometry_elevatedpoint_view_wgutfp.latitude AS position_latitude,
    geometry_elevatedpoint_view_wgutfp.elevation AS position_elevation,
    geometry_elevatedpoint_view_wgutfp.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_wgutfp.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_wgutfp.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_wgutfp.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_eidrbd.title as varchar), '(' || airport_heliport_airportheliport_pt_eidrbd.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_eidrbd.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_zcuvva.title as varchar), '(' || navaids_points_vor_pt_zcuvva.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_zcuvva.href::text AS checkpointfacility_href,
    notes_note_view_phscvx.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wgutfp on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_wgutfp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eidrbd on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_eidrbd.id
left join navaids_points.vor_pt navaids_points_vor_pt_zcuvva on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_zcuvva.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpyzak.*) AS annotation
  from master_join master_join_znmbzm
  join notes.note_view notes_note_lat_gpyzak on master_join_znmbzm.target_id = notes_note_lat_gpyzak.id
  where master_join_znmbzm.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_phscvx on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaType
-- ['notes.note_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.surface_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_ucrrte.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_ucrrte.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lqzhlz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lqzhlz.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_lqzhlz.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_xvfunp.*)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_xvfunp.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_afrzlf.condition::jsonb as condition,
    procedure_approachcondition_view_afrzlf.condition_annotation::jsonb as condition_annotation,
    shared_obstacleassessmentarea_view_ykdfiw.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_ykdfiw.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_uajblw.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_ucrrte on public.circlingarea_ts.extent_id = geometry_surface_view_ucrrte.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lqzhlz on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_lqzhlz.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_xvfunp on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_xvfunp.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_otwhow.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_otwhow.annotation) as condition_annotation  from master_join master_join_zocdkh
  join procedure.approachcondition_view procedure_approachcondition_lat_otwhow on master_join_zocdkh.target_id = procedure_approachcondition_lat_otwhow.id
  where master_join_zocdkh.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_afrzlf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ajbpff.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ajbpff.annotation) as designsurface_annotation  from master_join master_join_zjahdm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ajbpff on master_join_zjahdm.target_id = shared_obstacleassessmentarea_lat_ajbpff.id
  where master_join_zjahdm.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_ykdfiw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bukbjd.*) AS annotation
  from master_join master_join_lozmrq
  join notes.note_view notes_note_lat_bukbjd on master_join_lozmrq.target_id = notes_note_lat_bukbjd.id
  where master_join_lozmrq.source_id = public.circlingarea_ts.id
) as notes_note_view_uajblw on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_tnhjem.title as varchar), '(' || airport_heliport_deicingarea_pt_tnhjem.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_tnhjem.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_sgevjz.element::jsonb as element,
    airport_heliport_markingelement_view_sgevjz.element_annotation::jsonb as element_annotation,
    notes_note_view_kvgdhq.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_tnhjem on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_tnhjem.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_oxwncl.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_oxwncl.annotation) as element_annotation  from master_join master_join_tcrsqi
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_oxwncl on master_join_tcrsqi.target_id = airport_heliport_markingelement_lat_oxwncl.id
  where master_join_tcrsqi.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_sgevjz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_itanwk.*) AS annotation
  from master_join master_join_enkkmq
  join notes.note_view notes_note_lat_itanwk on master_join_enkkmq.target_id = notes_note_lat_itanwk.id
  where master_join_enkkmq.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_kvgdhq on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaType
-- ['airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_tlbgvz.title as varchar), '(' || airport_heliport_apron_pt_tlbgvz.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_tlbgvz.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_afflqt.title as varchar), '(' || airport_heliport_taxiway_pt_afflqt.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_afflqt.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_zzqoep.title as varchar), '(' || airport_heliport_aircraftstand_pt_zzqoep.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_zzqoep.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_wjngvp.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_wjngvp.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_bsjqlu.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_bsjqlu.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bsjqlu.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bsjqlu.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bsjqlu.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bsjqlu.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_pydvvn.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_eonjgt.availability::jsonb as availability,
    airport_heliport_apronareaavailability_view_eonjgt.availability_annotation::jsonb as availability_annotation
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_tlbgvz on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_tlbgvz.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_afflqt on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_afflqt.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_zzqoep on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_zzqoep.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_wjngvp on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_wjngvp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bsjqlu on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_bsjqlu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwladh.*) AS annotation
  from master_join master_join_qjgkcf
  join notes.note_view notes_note_lat_pwladh on master_join_qjgkcf.target_id = notes_note_lat_pwladh.id
  where master_join_qjgkcf.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_pydvvn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_pbxwvo.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_pbxwvo.annotation) as availability_annotation  from master_join master_join_squmjs
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_pbxwvo on master_join_squmjs.target_id = airport_heliport_apronareaavailability_lat_pbxwvo.id
  where master_join_squmjs.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_eonjgt on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_nveggj.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_nveggj.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vimfto.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_vimfto.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hpqlvu.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_hpqlvu.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_dfytln.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_dfytln.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ghlqls.title as varchar), '(' || navaids_points_angleindication_pt_ghlqls.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ghlqls.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_dvglxs.title as varchar), '(' || navaids_points_distanceindication_pt_dvglxs.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_dvglxs.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_tylspj.*)::jsonb AS holding,
    procedure_holdinguse_view_tylspj.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_lsouls.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_lsouls.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_lsouls.href::text AS departure_href,
    shared_aircraftcharacteristic_view_kyeltz.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_kyeltz.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_cxusqp.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_cxusqp.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_epmhho.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_ylffwb.condition::jsonb as condition,
    procedure_departurearrivalcondition_view_ylffwb.condition_annotation::jsonb as condition_annotation
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_nveggj on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_nveggj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vimfto on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_vimfto.id
left join geometry.curve_view geometry_curve_view_dfytln on procedure.departureleg_ts.trajectory_id = geometry_curve_view_dfytln.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hpqlvu on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_hpqlvu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ghlqls on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_ghlqls.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_dvglxs on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_dvglxs.id
left join procedure.holdinguse_view procedure_holdinguse_view_tylspj on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_tylspj.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_lsouls on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_lsouls.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zuhvdu.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zuhvdu.annotation) as aircraftcategory_annotation  from master_join master_join_aeqpjx
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_zuhvdu on master_join_aeqpjx.target_id = shared_aircraftcharacteristic_lat_zuhvdu.id
  where master_join_aeqpjx.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_kyeltz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ehufdh.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ehufdh.annotation) as designsurface_annotation  from master_join master_join_bfytqy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ehufdh on master_join_bfytqy.target_id = shared_obstacleassessmentarea_lat_ehufdh.id
  where master_join_bfytqy.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_cxusqp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nkkdnx.*) AS annotation
  from master_join master_join_rmdurw
  join notes.note_view notes_note_lat_nkkdnx on master_join_rmdurw.target_id = notes_note_lat_nkkdnx.id
  where master_join_rmdurw.source_id = procedure.departureleg_ts.id
) as notes_note_view_epmhho on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_dynepr.*) as condition,
      jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_dynepr.annotation) as condition_annotation  from master_join master_join_fwrxnq
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_dynepr on master_join_fwrxnq.target_id = procedure_departurearrivalcondition_lat_dynepr.id
  where master_join_fwrxnq.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_ylffwb on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_ovwtet.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_ovwtet.longitude AS location_longitude,
    geometry_point_view_ovwtet.latitude AS location_latitude,
    geometry_point_view_ovwtet.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_weqybb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_weqybb.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_weqybb.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tucmhu.title as varchar), '(' || airport_heliport_airportheliport_pt_tucmhu.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_tucmhu.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bxlbde.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bxlbde.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bxlbde.href::text AS runwaypoint_href,
    notes_note_view_zhabcs.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_ovwtet on navaids_points.designatedpoint_ts.location_id = geometry_point_view_ovwtet.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_weqybb on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_weqybb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tucmhu on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_tucmhu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bxlbde on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bxlbde.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tmwljj.*) AS annotation
  from master_join master_join_mbbyws
  join notes.note_view notes_note_lat_tmwljj on master_join_mbbyws.target_id = notes_note_lat_tmwljj.id
  where master_join_mbbyws.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_zhabcs on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_dfjyop.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_dfjyop.longitude AS location_longitude,
    geometry_elevatedpoint_view_dfjyop.latitude AS location_latitude,
    geometry_elevatedpoint_view_dfjyop.elevation AS location_elevation,
    geometry_elevatedpoint_view_dfjyop.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dfjyop.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dfjyop.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dfjyop.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_uxidfc.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_uxidfc.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_hyrcci.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_hyrcci.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_nbmudc.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_nbmudc.availability_annotation::jsonb as availability_annotation,
    notes_note_view_tgumzt.annotation::jsonb as annotation,
    service_informationservice_pt_aremcd.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dfjyop on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_dfjyop.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_epviti.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_epviti.annotation) as authority_annotation  from master_join master_join_fzkhfj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_epviti on master_join_fzkhfj.target_id = navaids_points_authorityfornavaidequipment_lat_epviti.id
  where master_join_fzkhfj.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_uxidfc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zqglym.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zqglym.annotation) as monitoring_annotation  from master_join master_join_ajqyyx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zqglym on master_join_ajqyyx.target_id = navaids_points_navaidequipmentmonitoring_lat_zqglym.id
  where master_join_ajqyyx.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hyrcci on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lfsamo.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lfsamo.annotation) as availability_annotation  from master_join master_join_ukdruu
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_lfsamo on master_join_ukdruu.target_id = navaids_points_navaidoperationalstatus_lat_lfsamo.id
  where master_join_ukdruu.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_nbmudc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sumbun.*) AS annotation
  from master_join master_join_xfecfk
  join notes.note_view notes_note_lat_sumbun on master_join_xfecfk.target_id = notes_note_lat_sumbun.id
  where master_join_xfecfk.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_tgumzt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_clvltj.id,
      'title', coalesce(cast(service_informationservice_lat_clvltj.title AS varchar), '(' || service_informationservice_lat_clvltj.nilreason[1] || ')'),
      'href', service_informationservice_lat_clvltj.href
  )) as informationprovision  from master_join master_join_fflqxd
  join service.informationservice_pt service_informationservice_lat_clvltj on master_join_fflqxd.target_id = service_informationservice_lat_clvltj.id
  where master_join_fflqxd.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_aremcd on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_ocdpqq.title as varchar), '(' || navaids_points_designatedpoint_pt_ocdpqq.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_ocdpqq.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_fkcypw.title as varchar), '(' || navaids_points_designatedpoint_pt_fkcypw.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_fkcypw.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jnztkm.title as varchar), '(' || navaids_points_navaid_pt_jnztkm.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_jnztkm.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_noocil.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_noocil.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_noocil.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oupxrk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oupxrk.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oupxrk.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pholyg.title as varchar), '(' || airport_heliport_airportheliport_pt_pholyg.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_pholyg.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_hpcbhp.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_hpcbhp.longitude AS pointchoiceposition_longitude,
    geometry_point_view_hpcbhp.latitude AS pointchoiceposition_latitude,
    geometry_point_view_hpcbhp.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_xvtolr.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ocdpqq on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_ocdpqq.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_fkcypw on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_fkcypw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jnztkm on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_jnztkm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_noocil on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_noocil.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oupxrk on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oupxrk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pholyg on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_pholyg.id
left join geometry.point_view geometry_point_view_hpcbhp on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_hpcbhp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlramt.*) AS annotation
  from master_join master_join_zgffjh
  join notes.note_view notes_note_lat_vlramt on master_join_zgffjh.target_id = notes_note_lat_vlramt.id
  where master_join_zgffjh.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_xvtolr on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMEType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_woycqr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_woycqr.longitude AS location_longitude,
    geometry_elevatedpoint_view_woycqr.latitude AS location_latitude,
    geometry_elevatedpoint_view_woycqr.elevation AS location_elevation,
    geometry_elevatedpoint_view_woycqr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_woycqr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_woycqr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_woycqr.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_xxashz.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_xxashz.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_mysbye.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_mysbye.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_eqzbkm.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_eqzbkm.availability_annotation::jsonb as availability_annotation,
    notes_note_view_qritev.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_woycqr on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_woycqr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fqcynm.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fqcynm.annotation) as authority_annotation  from master_join master_join_nnbjzb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fqcynm on master_join_nnbjzb.target_id = navaids_points_authorityfornavaidequipment_lat_fqcynm.id
  where master_join_nnbjzb.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_xxashz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_purjbw.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_purjbw.annotation) as monitoring_annotation  from master_join master_join_cebsfn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_purjbw on master_join_cebsfn.target_id = navaids_points_navaidequipmentmonitoring_lat_purjbw.id
  where master_join_cebsfn.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mysbye on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_nrmudk.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_nrmudk.annotation) as availability_annotation  from master_join master_join_bcevuv
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_nrmudk on master_join_bcevuv.target_id = navaids_points_navaidoperationalstatus_lat_nrmudk.id
  where master_join_bcevuv.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_eqzbkm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtnfdx.*) AS annotation
  from master_join master_join_urrxdn
  join notes.note_view notes_note_lat_rtnfdx on master_join_urrxdn.target_id = notes_note_lat_rtnfdx.id
  where master_join_urrxdn.source_id = navaids_points.dme_ts.id
) as notes_note_view_qritev on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_bapcxj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bapcxj.longitude AS location_longitude,
    geometry_elevatedpoint_view_bapcxj.latitude AS location_latitude,
    geometry_elevatedpoint_view_bapcxj.elevation AS location_elevation,
    geometry_elevatedpoint_view_bapcxj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bapcxj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bapcxj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bapcxj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_mtqezr.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_mtqezr.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_asirmf.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_asirmf.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_xskyez.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_xskyez.availability_annotation::jsonb as availability_annotation,
    notes_note_view_cldpnr.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bapcxj on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_bapcxj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fxlcfs.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fxlcfs.annotation) as authority_annotation  from master_join master_join_lnyion
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fxlcfs on master_join_lnyion.target_id = navaids_points_authorityfornavaidequipment_lat_fxlcfs.id
  where master_join_lnyion.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_mtqezr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kjrurh.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kjrurh.annotation) as monitoring_annotation  from master_join master_join_nefmdm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kjrurh on master_join_nefmdm.target_id = navaids_points_navaidequipmentmonitoring_lat_kjrurh.id
  where master_join_nefmdm.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_asirmf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_iwygxv.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_iwygxv.annotation) as availability_annotation  from master_join master_join_mxpawc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_iwygxv on master_join_mxpawc.target_id = navaids_points_navaidoperationalstatus_lat_iwygxv.id
  where master_join_mxpawc.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_xskyez on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vmxvgx.*) AS annotation
  from master_join master_join_dljzrd
  join notes.note_view notes_note_lat_vmxvgx on master_join_dljzrd.target_id = notes_note_lat_vmxvgx.id
  where master_join_dljzrd.source_id = navaids_points.elevation_ts.id
) as notes_note_view_cldpnr on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegType
-- ['notes.note_view', 'procedure.approachcondition_view', 'geometry.point_view', 'public.fasdatablock_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jniyzk.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_jniyzk.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_aetfig.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_aetfig.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ekkfmv.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_ekkfmv.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_epuoyu.*)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_epuoyu.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_eipkkh.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_eipkkh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ccsvpw.title as varchar), '(' || navaids_points_angleindication_pt_ccsvpw.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ccsvpw.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jpxxei.title as varchar), '(' || navaids_points_distanceindication_pt_jpxxei.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_jpxxei.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ebvrwp.*)::jsonb AS holding,
    procedure_holdinguse_view_ebvrwp.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_voidgm.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_voidgm.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_voidgm.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_fniwud.title as varchar), '(' || navaids_points_designatedpoint_pt_fniwud.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_fniwud.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ymdokx.title as varchar), '(' || navaids_points_navaid_pt_ymdokx.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_ymdokx.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_taezab.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_taezab.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_taezab.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vknpzy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vknpzy.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vknpzy.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jkcaxw.title as varchar), '(' || airport_heliport_airportheliport_pt_jkcaxw.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_jkcaxw.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_eniaaf.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_eniaaf.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_eniaaf.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_eniaaf.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_zaqaui.*)::jsonb AS fasdata,
    public_fasdatablock_view_zaqaui.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_hqhuxk.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_hqhuxk.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_lytkbi.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_lytkbi.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_smzubt.annotation::jsonb as annotation,
    procedure_approachcondition_view_qevucd.condition::jsonb as condition,
    procedure_approachcondition_view_qevucd.condition_annotation::jsonb as condition_annotation
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jniyzk on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_jniyzk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_aetfig on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_aetfig.id
left join geometry.curve_view geometry_curve_view_eipkkh on procedure.finalleg_ts.trajectory_id = geometry_curve_view_eipkkh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ekkfmv on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ekkfmv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ccsvpw on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_ccsvpw.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jpxxei on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_jpxxei.id
left join procedure.holdinguse_view procedure_holdinguse_view_ebvrwp on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_ebvrwp.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_voidgm on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_voidgm.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_fniwud on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_fniwud.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ymdokx on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_ymdokx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_taezab on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_taezab.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vknpzy on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vknpzy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jkcaxw on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_jkcaxw.id
left join geometry.point_view geometry_point_view_eniaaf on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_eniaaf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_epuoyu on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_epuoyu.id
left join public.fasdatablock_view public_fasdatablock_view_zaqaui on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_zaqaui.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_rrrbbg.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_rrrbbg.annotation) as aircraftcategory_annotation  from master_join master_join_ilkicf
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_rrrbbg on master_join_ilkicf.target_id = shared_aircraftcharacteristic_lat_rrrbbg.id
  where master_join_ilkicf.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_hqhuxk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qiyepv.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qiyepv.annotation) as designsurface_annotation  from master_join master_join_gtovex
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qiyepv on master_join_gtovex.target_id = shared_obstacleassessmentarea_lat_qiyepv.id
  where master_join_gtovex.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_lytkbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mkuoyk.*) AS annotation
  from master_join master_join_mapjrq
  join notes.note_view notes_note_lat_mkuoyk on master_join_mapjrq.target_id = notes_note_lat_mkuoyk.id
  where master_join_mapjrq.source_id = procedure.finalleg_ts.id
) as notes_note_view_smzubt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_qorukj.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_qorukj.annotation) as condition_annotation  from master_join master_join_idwrdv
  join procedure.approachcondition_view procedure_approachcondition_lat_qorukj on master_join_idwrdv.target_id = procedure_approachcondition_lat_qorukj.id
  where master_join_idwrdv.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_qevucd on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_qghvtd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qghvtd.longitude AS location_longitude,
    geometry_elevatedpoint_view_qghvtd.latitude AS location_latitude,
    geometry_elevatedpoint_view_qghvtd.elevation AS location_elevation,
    geometry_elevatedpoint_view_qghvtd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qghvtd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qghvtd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qghvtd.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qjwsxq.title as varchar), '(' || organisation_unit_pt_qjwsxq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_qjwsxq.href::text AS serviceprovider_href,
    service_callsigndetail_view_qjtmyz.callsign::jsonb as callsign,
    service_callsigndetail_view_qjtmyz.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_amhkdo.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xzzwue.availability::jsonb as availability,
    service_serviceoperationalstatus_view_xzzwue.availability_annotation::jsonb as availability_annotation,
    notes_note_view_xeikts.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_nenwaj.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qghvtd on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_qghvtd.id
left join organisation.unit_pt organisation_unit_pt_qjwsxq on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_qjwsxq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_xsixzr.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_xsixzr.annotation) as callsign_annotation  from master_join master_join_gskfci
  join service.callsigndetail_view service_callsigndetail_lat_xsixzr on master_join_gskfci.target_id = service_callsigndetail_lat_xsixzr.id
  where master_join_gskfci.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_qjtmyz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_cfgxmd.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_cfgxmd.title AS varchar), '(' || service_radiocommunicationchannel_lat_cfgxmd.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_cfgxmd.href
  )) as radiocommunication  from master_join master_join_bsnofk
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_cfgxmd on master_join_bsnofk.target_id = service_radiocommunicationchannel_lat_cfgxmd.id
  where master_join_bsnofk.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_amhkdo on TRUE
left join lateral(
  select
  from master_join master_join_nmzyys
  join shared.contactinformation_view shared_contactinformation_lat_qrzebv on master_join_nmzyys.target_id = shared_contactinformation_lat_qrzebv.id
  where master_join_nmzyys.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_utdjmg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_fxrejp.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_fxrejp.annotation) as availability_annotation  from master_join master_join_jkojgk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_fxrejp on master_join_jkojgk.target_id = service_serviceoperationalstatus_lat_fxrejp.id
  where master_join_jkojgk.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_xzzwue on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jfxlzw.*) AS annotation
  from master_join master_join_hfmazs
  join notes.note_view notes_note_lat_jfxlzw on master_join_hfmazs.target_id = notes_note_lat_jfxlzw.id
  where master_join_hfmazs.source_id = service.firefightingservice_ts.id
) as notes_note_view_xeikts on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ggvboq.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ggvboq.title AS varchar), '(' || airport_heliport_airportheliport_lat_ggvboq.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ggvboq.href
  )) as airportheliport  from master_join master_join_yaafor
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ggvboq on master_join_yaafor.target_id = airport_heliport_airportheliport_lat_ggvboq.id
  where master_join_yaafor.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_nenwaj on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionType
-- ['routes.flightconditioncombination_view', 'routes.flightrestrictionroute_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_xkvihy.*)::jsonb AS flight,
    routes_flightconditioncombination_view_xkvihy.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_xqrwxb.regulatedroute::jsonb as regulatedroute,
    routes_flightrestrictionroute_view_xqrwxb.regulatedroute_annotation::jsonb as regulatedroute_annotation,
    notes_note_view_omlkwl.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_xkvihy on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_xkvihy.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_csrvee.*) as regulatedroute,
      jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_csrvee.annotation) as regulatedroute_annotation  from master_join master_join_fptqct
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_csrvee on master_join_fptqct.target_id = routes_flightrestrictionroute_lat_csrvee.id
  where master_join_fptqct.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_xqrwxb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mevtkn.*) AS annotation
  from master_join master_join_svepko
  join notes.note_view notes_note_lat_mevtkn on master_join_svepko.target_id = notes_note_lat_mevtkn.id
  where master_join_svepko.source_id = routes.flightrestriction_ts.id
) as notes_note_view_omlkwl on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_lhbqtl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_lhbqtl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_lhbqtl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_lhbqtl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_lhbqtl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_lhbqtl.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_qbojxj.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lhbqtl on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_lhbqtl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xhodat.*) AS annotation
  from master_join master_join_dvuvyp
  join notes.note_view notes_note_lat_xhodat on master_join_dvuvyp.target_id = notes_note_lat_xhodat.id
  where master_join_dvuvyp.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_qbojxj on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_olgejm.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_olgejm.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_vsvbst.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_olgejm on airspace.geoborder_ts.border_id = geometry_curve_view_olgejm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qrbnht.*) AS annotation
  from master_join master_join_bmkhlu
  join notes.note_view notes_note_lat_qrbnht on master_join_bmkhlu.target_id = notes_note_lat_qrbnht.id
  where master_join_bmkhlu.source_id = airspace.geoborder_ts.id
) as notes_note_view_vsvbst on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_uqufko.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_uqufko.longitude AS location_longitude,
    geometry_elevatedpoint_view_uqufko.latitude AS location_latitude,
    geometry_elevatedpoint_view_uqufko.elevation AS location_elevation,
    geometry_elevatedpoint_view_uqufko.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uqufko.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uqufko.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uqufko.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_nhhzgj.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_nhhzgj.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_bkiiuw.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_bkiiuw.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_izpvrq.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_izpvrq.availability_annotation::jsonb as availability_annotation,
    notes_note_view_gluytk.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uqufko on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_uqufko.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vceqhq.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vceqhq.annotation) as authority_annotation  from master_join master_join_zcdgrk
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_vceqhq on master_join_zcdgrk.target_id = navaids_points_authorityfornavaidequipment_lat_vceqhq.id
  where master_join_zcdgrk.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_nhhzgj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_gyfflv.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_gyfflv.annotation) as monitoring_annotation  from master_join master_join_ytbvtt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_gyfflv on master_join_ytbvtt.target_id = navaids_points_navaidequipmentmonitoring_lat_gyfflv.id
  where master_join_ytbvtt.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bkiiuw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zalubi.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zalubi.annotation) as availability_annotation  from master_join master_join_lbipjz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zalubi on master_join_lbipjz.target_id = navaids_points_navaidoperationalstatus_lat_zalubi.id
  where master_join_lbipjz.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_izpvrq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kbdgfy.*) AS annotation
  from master_join master_join_owyufu
  join notes.note_view notes_note_lat_kbdgfy on master_join_owyufu.target_id = notes_note_lat_kbdgfy.id
  where master_join_owyufu.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_gluytk on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ledkyx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ledkyx.longitude AS location_longitude,
    geometry_elevatedpoint_view_ledkyx.latitude AS location_latitude,
    geometry_elevatedpoint_view_ledkyx.elevation AS location_elevation,
    geometry_elevatedpoint_view_ledkyx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ledkyx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ledkyx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ledkyx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_lyconq.title as varchar), '(' || organisation_unit_pt_lyconq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_lyconq.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gqsbpm.title as varchar), '(' || airport_heliport_airportheliport_pt_gqsbpm.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_gqsbpm.href::text AS clientairport_href,
    service_callsigndetail_view_weeehc.callsign::jsonb as callsign,
    service_callsigndetail_view_weeehc.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_fqsclr.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ksqmno.availability::jsonb as availability,
    service_serviceoperationalstatus_view_ksqmno.availability_annotation::jsonb as availability_annotation,
    notes_note_view_xkqchs.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ledkyx on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ledkyx.id
left join organisation.unit_pt organisation_unit_pt_lyconq on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_lyconq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gqsbpm on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_gqsbpm.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tnjcey.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_tnjcey.annotation) as callsign_annotation  from master_join master_join_mhocxt
  join service.callsigndetail_view service_callsigndetail_lat_tnjcey on master_join_mhocxt.target_id = service_callsigndetail_lat_tnjcey.id
  where master_join_mhocxt.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_weeehc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_wuryqv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_wuryqv.title AS varchar), '(' || service_radiocommunicationchannel_lat_wuryqv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_wuryqv.href
  )) as radiocommunication  from master_join master_join_wqtoux
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_wuryqv on master_join_wqtoux.target_id = service_radiocommunicationchannel_lat_wuryqv.id
  where master_join_wqtoux.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_fqsclr on TRUE
left join lateral(
  select
  from master_join master_join_askqbh
  join shared.contactinformation_view shared_contactinformation_lat_vfnejv on master_join_askqbh.target_id = shared_contactinformation_lat_vfnejv.id
  where master_join_askqbh.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_mriklb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_szuien.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_szuien.annotation) as availability_annotation  from master_join master_join_gcizhn
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_szuien on master_join_gcizhn.target_id = service_serviceoperationalstatus_lat_szuien.id
  where master_join_gcizhn.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_ksqmno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mxwbnw.*) AS annotation
  from master_join master_join_svdrom
  join notes.note_view notes_note_lat_mxwbnw on master_join_svdrom.target_id = notes_note_lat_mxwbnw.id
  where master_join_svdrom.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_xkqchs on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_jvbaqe.title as varchar), '(' || airport_heliport_guidanceline_pt_jvbaqe.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_jvbaqe.href::text AS lightedguidanceline_href,
    shared_lightelement_view_gcasww.element::jsonb as element,
    shared_lightelement_view_gcasww.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_epiubx.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_epiubx.availability_annotation::jsonb as availability_annotation,
    notes_note_view_dfzdve.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jvbaqe on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_jvbaqe.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_uxyogk.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_uxyogk.annotation) as element_annotation  from master_join master_join_wycwns
  join shared.lightelement_view shared_lightelement_lat_uxyogk on master_join_wycwns.target_id = shared_lightelement_lat_uxyogk.id
  where master_join_wycwns.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_gcasww on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qnnhbg.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qnnhbg.annotation) as availability_annotation  from master_join master_join_lytsnj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qnnhbg on master_join_lytsnj.target_id = airport_heliport_groundlightingavailability_lat_qnnhbg.id
  where master_join_lytsnj.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_epiubx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tnlzut.*) AS annotation
  from master_join master_join_osvqjc
  join notes.note_view notes_note_lat_tnlzut on master_join_osvqjc.target_id = notes_note_lat_tnlzut.id
  where master_join_osvqjc.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_dfzdve on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_pifeqz.title as varchar), '(' || airport_heliport_guidanceline_pt_pifeqz.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_pifeqz.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_xbngfo.element::jsonb as element,
    airport_heliport_markingelement_view_xbngfo.element_annotation::jsonb as element_annotation,
    notes_note_view_oqwjwv.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_pifeqz on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_pifeqz.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_jjtkjp.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_jjtkjp.annotation) as element_annotation  from master_join master_join_vttldj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_jjtkjp on master_join_vttldj.target_id = airport_heliport_markingelement_lat_jjtkjp.id
  where master_join_vttldj.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_xbngfo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_asmoou.*) AS annotation
  from master_join master_join_hjbuaq
  join notes.note_view notes_note_lat_asmoou on master_join_hjbuaq.target_id = notes_note_lat_asmoou.id
  where master_join_hjbuaq.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_oqwjwv on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_odktoe.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_odktoe.elevation AS extent_elevation,
    geometry_elevatedcurve_view_odktoe.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_odktoe.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_odktoe.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_odktoe.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_ryrbby.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_boldvo.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_qljsvp.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_onukej.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_pkbbyb.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_zsoile.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_odktoe on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_odktoe.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_ijtfad.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_ijtfad.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_ijtfad.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_ijtfad.href
  )) as connectedtouchdownliftoff  from master_join master_join_graspm
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_ijtfad on master_join_graspm.target_id = airport_heliport_touchdownliftoff_lat_ijtfad.id
  where master_join_graspm.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_ryrbby on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_mqvdjl.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_mqvdjl.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_mqvdjl.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_mqvdjl.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_uzklmj
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_mqvdjl on master_join_uzklmj.target_id = airport_heliport_runwaycentrelinepoint_lat_mqvdjl.id
  where master_join_uzklmj.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_boldvo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_uqoxpt.id,
      'title', coalesce(cast(airport_heliport_apron_lat_uqoxpt.title AS varchar), '(' || airport_heliport_apron_lat_uqoxpt.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_uqoxpt.href
  )) as connectedapron  from master_join master_join_mciddw
  join airport_heliport.apron_pt airport_heliport_apron_lat_uqoxpt on master_join_mciddw.target_id = airport_heliport_apron_lat_uqoxpt.id
  where master_join_mciddw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_qljsvp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_akxyfl.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_akxyfl.title AS varchar), '(' || airport_heliport_aircraftstand_lat_akxyfl.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_akxyfl.href
  )) as connectedstand  from master_join master_join_qpzbwc
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_akxyfl on master_join_qpzbwc.target_id = airport_heliport_aircraftstand_lat_akxyfl.id
  where master_join_qpzbwc.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_onukej on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_iqgblu.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_iqgblu.title AS varchar), '(' || airport_heliport_taxiway_lat_iqgblu.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_iqgblu.href
  )) as connectedtaxiway  from master_join master_join_dgwkfc
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_iqgblu on master_join_dgwkfc.target_id = airport_heliport_taxiway_lat_iqgblu.id
  where master_join_dgwkfc.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_pkbbyb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xaopcz.*) AS annotation
  from master_join master_join_zgxmvz
  join notes.note_view notes_note_lat_xaopcz on master_join_zgxmvz.target_id = notes_note_lat_xaopcz.id
  where master_join_zgxmvz.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_zsoile on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_vqlnbw.title as varchar), '(' || holding_unplannedholding_pt_vqlnbw.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_vqlnbw.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_dodtcp.title as varchar), '(' || holding_holdingpattern_pt_dodtcp.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_dodtcp.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_nvxkyq.obstacleassessment::jsonb as obstacleassessment,
    shared_obstacleassessmentarea_view_nvxkyq.obstacleassessment_annotation::jsonb as obstacleassessment_annotation,
    notes_note_view_qaawgh.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_vqlnbw on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_vqlnbw.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_dodtcp on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_dodtcp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_uilxro.*) as obstacleassessment,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_uilxro.annotation) as obstacleassessment_annotation  from master_join master_join_qhohog
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_uilxro on master_join_qhohog.target_id = shared_obstacleassessmentarea_lat_uilxro.id
  where master_join_qhohog.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_nvxkyq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qpktea.*) AS annotation
  from master_join master_join_cnxymc
  join notes.note_view notes_note_lat_qpktea on master_join_cnxymc.target_id = notes_note_lat_qpktea.id
  where master_join_cnxymc.source_id = shared.holdingassessment_ts.id
) as notes_note_view_qaawgh on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternType
-- ['geometry.curve_view', 'holding.holdingpatternduration_view', 'holding.holdingpatterndistance_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_kqszly.*)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_kqszly.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_cnnwhs.*)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_cnnwhs.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_qhmuvy.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_qhmuvy.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_crzjpb.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_kqszly on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_kqszly.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_cnnwhs on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_cnnwhs.id
left join geometry.curve_view geometry_curve_view_qhmuvy on holding.holdingpattern_ts.extent_id = geometry_curve_view_qhmuvy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qutolq.*) AS annotation
  from master_join master_join_iorbkz
  join notes.note_view notes_note_lat_qutolq on master_join_iorbkz.target_id = notes_note_lat_qutolq.id
  where master_join_iorbkz.source_id = holding.holdingpattern_ts.id
) as notes_note_view_crzjpb on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_lurqzs.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lurqzs.longitude AS location_longitude,
    geometry_elevatedpoint_view_lurqzs.latitude AS location_latitude,
    geometry_elevatedpoint_view_lurqzs.elevation AS location_elevation,
    geometry_elevatedpoint_view_lurqzs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lurqzs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lurqzs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lurqzs.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jtltio.title as varchar), '(' || organisation_unit_pt_jtltio.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_jtltio.href::text AS serviceprovider_href,
    service_callsigndetail_view_daixbg.callsign::jsonb as callsign,
    service_callsigndetail_view_daixbg.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_dhscoe.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_qthfom.availability::jsonb as availability,
    service_serviceoperationalstatus_view_qthfom.availability_annotation::jsonb as availability_annotation,
    notes_note_view_balfdv.annotation::jsonb as annotation,
    navaids_points_vor_pt_hefehr.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_cwpbof.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_pmqlun.clientairport::jsonb as clientairport,
    routes_routeportion_view_szugmm.clientroute::jsonb as clientroute,
    routes_routeportion_view_szugmm.clientroute_annotation::jsonb as clientroute_annotation,
    procedure_procedure_pt_cphamw.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_jalmbw.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_bncwzm.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lurqzs on service.informationservice_ts.location_id = geometry_elevatedpoint_view_lurqzs.id
left join organisation.unit_pt organisation_unit_pt_jtltio on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_jtltio.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_aqntkg.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_aqntkg.annotation) as callsign_annotation  from master_join master_join_nwfqkq
  join service.callsigndetail_view service_callsigndetail_lat_aqntkg on master_join_nwfqkq.target_id = service_callsigndetail_lat_aqntkg.id
  where master_join_nwfqkq.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_daixbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_glhvzf.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_glhvzf.title AS varchar), '(' || service_radiocommunicationchannel_lat_glhvzf.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_glhvzf.href
  )) as radiocommunication  from master_join master_join_vajqgr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_glhvzf on master_join_vajqgr.target_id = service_radiocommunicationchannel_lat_glhvzf.id
  where master_join_vajqgr.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_dhscoe on TRUE
left join lateral(
  select
  from master_join master_join_xiobsf
  join shared.contactinformation_view shared_contactinformation_lat_ekotnz on master_join_xiobsf.target_id = shared_contactinformation_lat_ekotnz.id
  where master_join_xiobsf.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_cssacl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_uulaka.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_uulaka.annotation) as availability_annotation  from master_join master_join_gpxixp
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_uulaka on master_join_gpxixp.target_id = service_serviceoperationalstatus_lat_uulaka.id
  where master_join_gpxixp.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_qthfom on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gnfxtc.*) AS annotation
  from master_join master_join_yliboq
  join notes.note_view notes_note_lat_gnfxtc on master_join_yliboq.target_id = notes_note_lat_gnfxtc.id
  where master_join_yliboq.source_id = service.informationservice_ts.id
) as notes_note_view_balfdv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_ekqkju.id,
      'title', coalesce(cast(navaids_points_vor_lat_ekqkju.title AS varchar), '(' || navaids_points_vor_lat_ekqkju.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_ekqkju.href
  )) as navaidbroadcast  from master_join master_join_zggwfc
  join navaids_points.vor_pt navaids_points_vor_lat_ekqkju on master_join_zggwfc.target_id = navaids_points_vor_lat_ekqkju.id
  where master_join_zggwfc.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_hefehr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_cakjlq.id,
      'title', coalesce(cast(airspace_airspace_lat_cakjlq.title AS varchar), '(' || airspace_airspace_lat_cakjlq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_cakjlq.href
  )) as clientairspace  from master_join master_join_azqkuw
  join airspace.airspace_pt airspace_airspace_lat_cakjlq on master_join_azqkuw.target_id = airspace_airspace_lat_cakjlq.id
  where master_join_azqkuw.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_cwpbof on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ngjlrl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ngjlrl.title AS varchar), '(' || airport_heliport_airportheliport_lat_ngjlrl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ngjlrl.href
  )) as clientairport  from master_join master_join_otkwrj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ngjlrl on master_join_otkwrj.target_id = airport_heliport_airportheliport_lat_ngjlrl.id
  where master_join_otkwrj.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_pmqlun on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_filgiu.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_filgiu.annotation) as clientroute_annotation  from master_join master_join_rrqqba
  join routes.routeportion_view routes_routeportion_lat_filgiu on master_join_rrqqba.target_id = routes_routeportion_lat_filgiu.id
  where master_join_rrqqba.source_id = service.informationservice_ts.id
) as routes_routeportion_view_szugmm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_hirqke.id,
      'title', coalesce(cast(procedure_procedure_lat_hirqke.title AS varchar), '(' || procedure_procedure_lat_hirqke.nilreason[1] || ')'),
      'href', procedure_procedure_lat_hirqke.href
  )) as clientprocedure  from master_join master_join_bgtlbu
  join procedure.procedure_pt procedure_procedure_lat_hirqke on master_join_bgtlbu.target_id = procedure_procedure_lat_hirqke.id
  where master_join_bgtlbu.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_cphamw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_atlnmu.id,
      'title', coalesce(cast(holding_holdingpattern_lat_atlnmu.title AS varchar), '(' || holding_holdingpattern_lat_atlnmu.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_atlnmu.href
  )) as clientholding  from master_join master_join_nnamwf
  join holding.holdingpattern_pt holding_holdingpattern_lat_atlnmu on master_join_nnamwf.target_id = holding_holdingpattern_lat_atlnmu.id
  where master_join_nnamwf.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_jalmbw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_pxmdsq.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_pxmdsq.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_pxmdsq.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_pxmdsq.href
  )) as clientaerialrefuelling  from master_join master_join_kecyjq
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_pxmdsq on master_join_kecyjq.target_id = aerial_refuelling_aerialrefuelling_lat_pxmdsq.id
  where master_join_kecyjq.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_bncwzm on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lmydhf.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_lmydhf.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wcylit.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_wcylit.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_aafsqa.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_aafsqa.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_ojodem.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ojodem.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_wwdwjs.title as varchar), '(' || navaids_points_angleindication_pt_wwdwjs.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_wwdwjs.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_mxhzel.title as varchar), '(' || navaids_points_distanceindication_pt_mxhzel.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_mxhzel.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_sfbiks.*)::jsonb AS holding,
    procedure_holdinguse_view_sfbiks.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ohtcdh.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ohtcdh.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_ohtcdh.href::text AS approach_href,
    shared_aircraftcharacteristic_view_qivwfr.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_qivwfr.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_wrqsny.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_wrqsny.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_ucjija.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lmydhf on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_lmydhf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wcylit on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_wcylit.id
left join geometry.curve_view geometry_curve_view_ojodem on procedure.initialleg_ts.trajectory_id = geometry_curve_view_ojodem.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_aafsqa on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_aafsqa.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_wwdwjs on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_wwdwjs.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_mxhzel on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_mxhzel.id
left join procedure.holdinguse_view procedure_holdinguse_view_sfbiks on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_sfbiks.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ohtcdh on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ohtcdh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_crcstd.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_crcstd.annotation) as aircraftcategory_annotation  from master_join master_join_qxwbew
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_crcstd on master_join_qxwbew.target_id = shared_aircraftcharacteristic_lat_crcstd.id
  where master_join_qxwbew.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_qivwfr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ksdicg.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ksdicg.annotation) as designsurface_annotation  from master_join master_join_gteuqy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ksdicg on master_join_gteuqy.target_id = shared_obstacleassessmentarea_lat_ksdicg.id
  where master_join_gteuqy.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_wrqsny on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jrlzje.*) AS annotation
  from master_join master_join_waqipa
  join notes.note_view notes_note_lat_jrlzje on master_join_waqipa.target_id = notes_note_lat_jrlzje.id
  where master_join_waqipa.source_id = procedure.initialleg_ts.id
) as notes_note_view_ucjija on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureType
-- ['notes.note_view', 'procedure.missedapproachgroup_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'procedure.finalprofile_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_cknphe.title as varchar), '(' || navaids_points_navaid_pt_cknphe.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_cknphe.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ndgbrp.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ndgbrp.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ndgbrp.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_kiiamn.title as varchar), '(' || surveillance_radarsystem_pt_kiiamn.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_kiiamn.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_pluyvq.title as varchar), '(' || procedure_safealtitudearea_pt_pluyvq.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_pluyvq.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ycumkl.*)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_ycumkl.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_fwldaq.*)::jsonb AS finalprofile,
    procedure_finalprofile_view_fwldaq.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_zxfvbw.availability::jsonb as availability,
    procedure_procedureavailability_view_zxfvbw.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_bnbreu.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_tdxkdy.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_tdxkdy.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_tjatvx.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_tjatvx.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_pivlkf.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_rvywvn.missedinstruction::jsonb as missedinstruction,
    procedure_missedapproachgroup_view_rvywvn.missedinstruction_annotation::jsonb as missedinstruction_annotation
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cknphe on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_cknphe.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ndgbrp on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ndgbrp.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_kiiamn on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_kiiamn.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_pluyvq on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_pluyvq.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ycumkl on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_ycumkl.id
left join procedure.finalprofile_view procedure_finalprofile_view_fwldaq on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_fwldaq.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_riclsq.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_riclsq.annotation) as availability_annotation  from master_join master_join_bxiuiw
  join procedure.procedureavailability_view procedure_procedureavailability_lat_riclsq on master_join_bxiuiw.target_id = procedure_procedureavailability_lat_riclsq.id
  where master_join_bxiuiw.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_zxfvbw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ympuoi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ympuoi.title AS varchar), '(' || airport_heliport_airportheliport_lat_ympuoi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ympuoi.href
  )) as airportheliport  from master_join master_join_dkykrt
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ympuoi on master_join_dkykrt.target_id = airport_heliport_airportheliport_lat_ympuoi.id
  where master_join_dkykrt.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_bnbreu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_gkmtlq.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_gkmtlq.annotation) as aircraftcharacteristic_annotation  from master_join master_join_euwfny
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_gkmtlq on master_join_euwfny.target_id = shared_aircraftcharacteristic_lat_gkmtlq.id
  where master_join_euwfny.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_tdxkdy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_pnvlcg.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_pnvlcg.annotation) as flighttransition_annotation  from master_join master_join_hssceo
  join procedure.proceduretransition_view procedure_proceduretransition_lat_pnvlcg on master_join_hssceo.target_id = procedure_proceduretransition_lat_pnvlcg.id
  where master_join_hssceo.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_tjatvx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dqzxhf.*) AS annotation
  from master_join master_join_yzsfkd
  join notes.note_view notes_note_lat_dqzxhf on master_join_yzsfkd.target_id = notes_note_lat_dqzxhf.id
  where master_join_yzsfkd.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_pivlkf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_qhcauw.*) as missedinstruction,
      jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_qhcauw.annotation) as missedinstruction_annotation  from master_join master_join_tyleba
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_qhcauw on master_join_tyleba.target_id = procedure_missedapproachgroup_lat_qhcauw.id
  where master_join_tyleba.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_rvywvn on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_iygwdl.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_iygwdl.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vhrvje.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_vhrvje.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_guzrge.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_guzrge.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_ucxdde.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ucxdde.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_uzuuyl.title as varchar), '(' || navaids_points_angleindication_pt_uzuuyl.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_uzuuyl.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ocibqj.title as varchar), '(' || navaids_points_distanceindication_pt_ocibqj.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ocibqj.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_yewdep.*)::jsonb AS holding,
    procedure_holdinguse_view_yewdep.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_gbovjw.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_gbovjw.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_gbovjw.href::text AS approach_href,
    shared_aircraftcharacteristic_view_sywewz.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_sywewz.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_btrumr.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_btrumr.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_hvrncr.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_iygwdl on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_iygwdl.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vhrvje on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_vhrvje.id
left join geometry.curve_view geometry_curve_view_ucxdde on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_ucxdde.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_guzrge on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_guzrge.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_uzuuyl on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_uzuuyl.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ocibqj on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_ocibqj.id
left join procedure.holdinguse_view procedure_holdinguse_view_yewdep on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_yewdep.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_gbovjw on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_gbovjw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ncjclg.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ncjclg.annotation) as aircraftcategory_annotation  from master_join master_join_xxzzfb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ncjclg on master_join_xxzzfb.target_id = shared_aircraftcharacteristic_lat_ncjclg.id
  where master_join_xxzzfb.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_sywewz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xylcuc.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_xylcuc.annotation) as designsurface_annotation  from master_join master_join_ymnyxy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_xylcuc on master_join_ymnyxy.target_id = shared_obstacleassessmentarea_lat_xylcuc.id
  where master_join_ymnyxy.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_btrumr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sfzwiv.*) AS annotation
  from master_join master_join_tfqwue
  join notes.note_view notes_note_lat_sfzwiv on master_join_tfqwue.target_id = notes_note_lat_sfzwiv.id
  where master_join_tfqwue.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_hvrncr on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ckodrr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ckodrr.longitude AS location_longitude,
    geometry_elevatedpoint_view_ckodrr.latitude AS location_latitude,
    geometry_elevatedpoint_view_ckodrr.elevation AS location_elevation,
    geometry_elevatedpoint_view_ckodrr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ckodrr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ckodrr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ckodrr.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ueyost.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_ueyost.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_aheldh.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_aheldh.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_fpeqgu.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_fpeqgu.availability_annotation::jsonb as availability_annotation,
    notes_note_view_uanedz.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ckodrr on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_ckodrr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aoxhqu.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_aoxhqu.annotation) as authority_annotation  from master_join master_join_purplx
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_aoxhqu on master_join_purplx.target_id = navaids_points_authorityfornavaidequipment_lat_aoxhqu.id
  where master_join_purplx.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_ueyost on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lwfqhy.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lwfqhy.annotation) as monitoring_annotation  from master_join master_join_ngqgen
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lwfqhy on master_join_ngqgen.target_id = navaids_points_navaidequipmentmonitoring_lat_lwfqhy.id
  where master_join_ngqgen.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_aheldh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_thcqfp.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_thcqfp.annotation) as availability_annotation  from master_join master_join_zdguvg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_thcqfp on master_join_zdguvg.target_id = navaids_points_navaidoperationalstatus_lat_thcqfp.id
  where master_join_zdguvg.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_fpeqgu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jaqxeb.*) AS annotation
  from master_join master_join_xgloij
  join notes.note_view notes_note_lat_jaqxeb on master_join_xgloij.target_id = notes_note_lat_jaqxeb.id
  where master_join_xgloij.source_id = navaids_points.localizer_ts.id
) as notes_note_view_uanedz on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_oxpcut.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_oxpcut.longitude AS location_longitude,
    geometry_elevatedpoint_view_oxpcut.latitude AS location_latitude,
    geometry_elevatedpoint_view_oxpcut.elevation AS location_elevation,
    geometry_elevatedpoint_view_oxpcut.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_oxpcut.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_oxpcut.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_oxpcut.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_gnypev.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_gnypev.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_bvouyg.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_bvouyg.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_ivmcnt.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_ivmcnt.availability_annotation::jsonb as availability_annotation,
    notes_note_view_drxqyl.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oxpcut on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_oxpcut.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_grryox.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_grryox.annotation) as authority_annotation  from master_join master_join_txaexs
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_grryox on master_join_txaexs.target_id = navaids_points_authorityfornavaidequipment_lat_grryox.id
  where master_join_txaexs.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_gnypev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_rkhvjz.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_rkhvjz.annotation) as monitoring_annotation  from master_join master_join_dpepfx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_rkhvjz on master_join_dpepfx.target_id = navaids_points_navaidequipmentmonitoring_lat_rkhvjz.id
  where master_join_dpepfx.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bvouyg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_tpvzst.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_tpvzst.annotation) as availability_annotation  from master_join master_join_vyware
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_tpvzst on master_join_vyware.target_id = navaids_points_navaidoperationalstatus_lat_tpvzst.id
  where master_join_vyware.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_ivmcnt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_stjgnw.*) AS annotation
  from master_join master_join_vnpzcu
  join notes.note_view notes_note_lat_stjgnw on master_join_vnpzcu.target_id = notes_note_lat_stjgnw.id
  where master_join_vnpzcu.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_drxqyl on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_jreilq.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_jreilq.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_jreilq.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_utneyy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_utneyy.longitude AS location_longitude,
    geometry_elevatedpoint_view_utneyy.latitude AS location_latitude,
    geometry_elevatedpoint_view_utneyy.elevation AS location_elevation,
    geometry_elevatedpoint_view_utneyy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_utneyy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_utneyy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_utneyy.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_mcpllg.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_jreilq on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_jreilq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_utneyy on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_utneyy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sttidb.*) AS annotation
  from master_join master_join_psylre
  join notes.note_view notes_note_lat_sttidb on master_join_psylre.target_id = notes_note_lat_sttidb.id
  where master_join_psylre.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_mcpllg on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegType
-- ['notes.note_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jfygwf.*)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_jfygwf.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ecqdze.*)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_ecqdze.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lluvhb.*)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_lluvhb.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_adegko.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_adegko.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_peeacf.title as varchar), '(' || navaids_points_angleindication_pt_peeacf.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_peeacf.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_exttri.title as varchar), '(' || navaids_points_distanceindication_pt_exttri.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_exttri.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ugoulw.*)::jsonb AS holding,
    procedure_holdinguse_view_ugoulw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_cpuvqp.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_cpuvqp.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_cpuvqp.href::text AS approach_href,
    shared_aircraftcharacteristic_view_hkathr.aircraftcategory::jsonb as aircraftcategory,
    shared_aircraftcharacteristic_view_hkathr.aircraftcategory_annotation::jsonb as aircraftcategory_annotation,
    shared_obstacleassessmentarea_view_ufaqnm.designsurface::jsonb as designsurface,
    shared_obstacleassessmentarea_view_ufaqnm.designsurface_annotation::jsonb as designsurface_annotation,
    notes_note_view_bxcddp.annotation::jsonb as annotation,
    procedure_approachcondition_view_mttgsr.condition::jsonb as condition,
    procedure_approachcondition_view_mttgsr.condition_annotation::jsonb as condition_annotation
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jfygwf on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_jfygwf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ecqdze on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ecqdze.id
left join geometry.curve_view geometry_curve_view_adegko on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_adegko.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lluvhb on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_lluvhb.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_peeacf on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_peeacf.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_exttri on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_exttri.id
left join procedure.holdinguse_view procedure_holdinguse_view_ugoulw on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_ugoulw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_cpuvqp on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_cpuvqp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sikkpt.*) as aircraftcategory,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sikkpt.annotation) as aircraftcategory_annotation  from master_join master_join_kegotb
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_sikkpt on master_join_kegotb.target_id = shared_aircraftcharacteristic_lat_sikkpt.id
  where master_join_kegotb.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_hkathr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hkqqiu.*) as designsurface,
      jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hkqqiu.annotation) as designsurface_annotation  from master_join master_join_jfiknl
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hkqqiu on master_join_jfiknl.target_id = shared_obstacleassessmentarea_lat_hkqqiu.id
  where master_join_jfiknl.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_ufaqnm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hqaqhc.*) AS annotation
  from master_join master_join_gtztse
  join notes.note_view notes_note_lat_hqaqhc on master_join_gtztse.target_id = notes_note_lat_hqaqhc.id
  where master_join_gtztse.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_bxcddp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_kwiupm.*) as condition,
      jsonb_agg(DISTINCT procedure_approachcondition_lat_kwiupm.annotation) as condition_annotation  from master_join master_join_jqmiqw
  join procedure.approachcondition_view procedure_approachcondition_lat_kwiupm on master_join_jqmiqw.target_id = procedure_approachcondition_lat_kwiupm.id
  where master_join_jqmiqw.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_mttgsr on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidType
-- ['navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidcomponent_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_dkvbza.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_dkvbza.longitude AS location_longitude,
    geometry_elevatedpoint_view_dkvbza.latitude AS location_latitude,
    geometry_elevatedpoint_view_dkvbza.elevation AS location_elevation,
    geometry_elevatedpoint_view_dkvbza.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dkvbza.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dkvbza.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dkvbza.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_fywvqk.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_fzxbgy.navaidequipment::jsonb as navaidequipment,
    navaids_points_navaidcomponent_view_fzxbgy.navaidequipment_annotation::jsonb as navaidequipment_annotation,
    airport_heliport_runwaydirection_pt_bpgocr.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_tzqnld.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_udfurj.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_udfurj.availability_annotation::jsonb as availability_annotation,
    notes_note_view_wkbjbt.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dkvbza on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_dkvbza.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_ljcrdh.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_ljcrdh.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_ljcrdh.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_ljcrdh.href
  )) as touchdownliftoff  from master_join master_join_narels
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_ljcrdh on master_join_narels.target_id = airport_heliport_touchdownliftoff_lat_ljcrdh.id
  where master_join_narels.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_fywvqk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_muaujd.*) as navaidequipment,
      jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_muaujd.annotation) as navaidequipment_annotation  from master_join master_join_edljwn
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_muaujd on master_join_edljwn.target_id = navaids_points_navaidcomponent_lat_muaujd.id
  where master_join_edljwn.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_fzxbgy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_drgibx.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_drgibx.title AS varchar), '(' || airport_heliport_runwaydirection_lat_drgibx.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_drgibx.href
  )) as runwaydirection  from master_join master_join_uxoyzz
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_drgibx on master_join_uxoyzz.target_id = airport_heliport_runwaydirection_lat_drgibx.id
  where master_join_uxoyzz.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_bpgocr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fwmlhy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fwmlhy.title AS varchar), '(' || airport_heliport_airportheliport_lat_fwmlhy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fwmlhy.href
  )) as servedairport  from master_join master_join_trljxk
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fwmlhy on master_join_trljxk.target_id = airport_heliport_airportheliport_lat_fwmlhy.id
  where master_join_trljxk.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_tzqnld on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qzljvk.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qzljvk.annotation) as availability_annotation  from master_join master_join_eiphvz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qzljvk on master_join_eiphvz.target_id = navaids_points_navaidoperationalstatus_lat_qzljvk.id
  where master_join_eiphvz.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_udfurj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_giczlt.*) AS annotation
  from master_join master_join_icmezu
  join notes.note_view notes_note_lat_giczlt on master_join_icmezu.target_id = notes_note_lat_giczlt.id
  where master_join_icmezu.source_id = navaids_points.navaid_ts.id
) as notes_note_view_wkbjbt on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_jftuon.*)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_jftuon.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_sxojod.*)::jsonb AS sectordefinition,
    shared_circlesector_view_sxojod.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_brovte.procedure::jsonb as procedure,
    notes_note_view_ltzpxm.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_jftuon on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_jftuon.id
left join shared.circlesector_view shared_circlesector_view_sxojod on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_sxojod.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_uuyjpu.id,
      'title', coalesce(cast(procedure_procedure_lat_uuyjpu.title AS varchar), '(' || procedure_procedure_lat_uuyjpu.nilreason[1] || ')'),
      'href', procedure_procedure_lat_uuyjpu.href
  )) as procedure  from master_join master_join_ptuink
  join procedure.procedure_pt procedure_procedure_lat_uuyjpu on master_join_ptuink.target_id = procedure_procedure_lat_uuyjpu.id
  where master_join_ptuink.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_brovte on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfksru.*) AS annotation
  from master_join master_join_kzdmin
  join notes.note_view notes_note_lat_lfksru on master_join_kzdmin.target_id = notes_note_lat_lfksru.id
  where master_join_kzdmin.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_ltzpxm on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaType
-- ['geometry.point_view', 'procedure.navigationareasector_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_fxhvve.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_fxhvve.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_fxhvve.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ajclqr.title as varchar), '(' || navaids_points_designatedpoint_pt_ajclqr.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ajclqr.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zkyitk.title as varchar), '(' || navaids_points_navaid_pt_zkyitk.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_zkyitk.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_weoipi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_weoipi.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_weoipi.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_iydxle.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_iydxle.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_iydxle.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ibzknu.title as varchar), '(' || airport_heliport_airportheliport_pt_ibzknu.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_ibzknu.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_sypicy.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_sypicy.longitude AS centrepointposition_longitude,
    geometry_point_view_sypicy.latitude AS centrepointposition_latitude,
    geometry_point_view_sypicy.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_jonquw.sector::jsonb as sector,
    procedure_navigationareasector_view_jonquw.sector_annotation::jsonb as sector_annotation,
    notes_note_view_bllfxo.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_fxhvve on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_fxhvve.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ajclqr on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ajclqr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zkyitk on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_zkyitk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_weoipi on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_weoipi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_iydxle on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_iydxle.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ibzknu on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ibzknu.id
left join geometry.point_view geometry_point_view_sypicy on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_sypicy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_bksgjg.*) as sector,
      jsonb_agg(DISTINCT procedure_navigationareasector_lat_bksgjg.annotation) as sector_annotation  from master_join master_join_pghwrl
  join procedure.navigationareasector_view procedure_navigationareasector_lat_bksgjg on master_join_pghwrl.target_id = procedure_navigationareasector_lat_bksgjg.id
  where master_join_pghwrl.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_jonquw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mjtrzz.*) AS annotation
  from master_join master_join_zwyitq
  join notes.note_view notes_note_lat_mjtrzz on master_join_zwyitq.target_id = notes_note_lat_mjtrzz.id
  where master_join_zwyitq.source_id = procedure.navigationarea_ts.id
) as notes_note_view_bllfxo on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_mlnhht.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mlnhht.longitude AS location_longitude,
    geometry_elevatedpoint_view_mlnhht.latitude AS location_latitude,
    geometry_elevatedpoint_view_mlnhht.elevation AS location_elevation,
    geometry_elevatedpoint_view_mlnhht.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mlnhht.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mlnhht.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mlnhht.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_uzhduz.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_uzhduz.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_eaddqr.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_eaddqr.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_sroqdl.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_sroqdl.availability_annotation::jsonb as availability_annotation,
    notes_note_view_fzmhoy.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mlnhht on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_mlnhht.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_wgfqvt.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_wgfqvt.annotation) as authority_annotation  from master_join master_join_fsersh
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_wgfqvt on master_join_fsersh.target_id = navaids_points_authorityfornavaidequipment_lat_wgfqvt.id
  where master_join_fsersh.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_uzhduz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_uktlrz.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_uktlrz.annotation) as monitoring_annotation  from master_join master_join_ciwnhm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_uktlrz on master_join_ciwnhm.target_id = navaids_points_navaidequipmentmonitoring_lat_uktlrz.id
  where master_join_ciwnhm.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_eaddqr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mjguqj.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mjguqj.annotation) as availability_annotation  from master_join master_join_zidtrj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_mjguqj on master_join_zidtrj.target_id = navaids_points_navaidoperationalstatus_lat_mjguqj.id
  where master_join_zidtrj.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_sroqdl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_btskhx.*) AS annotation
  from master_join master_join_nnqpzt
  join notes.note_view notes_note_lat_btskhx on master_join_nnqpzt.target_id = notes_note_lat_btskhx.id
  where master_join_nnqpzt.source_id = navaids_points.ndb_ts.id
) as notes_note_view_fzmhoy on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_djoonm.title as varchar), '(' || airport_heliport_airportheliport_pt_djoonm.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_djoonm.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_tjpxjq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_tjpxjq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tjpxjq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tjpxjq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tjpxjq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tjpxjq.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_tmfwif.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_djoonm on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_djoonm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tjpxjq on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_tjpxjq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_owzcyl.*) AS annotation
  from master_join master_join_qlaicz
  join notes.note_view notes_note_lat_owzcyl on master_join_qlaicz.target_id = notes_note_lat_owzcyl.id
  where master_join_qlaicz.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_tmfwif on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_bjslnc.title as varchar), '(' || airport_heliport_airportheliport_pt_bjslnc.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_bjslnc.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_qcpctz.title as varchar), '(' || airport_heliport_runwaydirection_pt_qcpctz.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_qcpctz.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_jyqbtt.title as varchar), '(' || organisation_organisationauthority_pt_jyqbtt.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_jyqbtt.href::text AS referenceownerorganisation_href,
    geometry_surface_view_jbuzug.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_jbuzug.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_naivei.obstacle::jsonb as obstacle,
    notes_note_view_fearmg.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bjslnc on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_bjslnc.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_qcpctz on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_qcpctz.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jyqbtt on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_jyqbtt.id
left join geometry.surface_view geometry_surface_view_jbuzug on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_jbuzug.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_bdjtya.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_bdjtya.title AS varchar), '(' || obstacles_verticalstructure_lat_bdjtya.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_bdjtya.href
  )) as obstacle  from master_join master_join_tkoglq
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_bdjtya on master_join_tkoglq.target_id = obstacles_verticalstructure_lat_bdjtya.id
  where master_join_tkoglq.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_naivei on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_npffzj.*) AS annotation
  from master_join master_join_epqfql
  join notes.note_view notes_note_lat_npffzj on master_join_epqfql.target_id = notes_note_lat_npffzj.id
  where master_join_epqfql.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_fearmg on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityType
-- ['notes.note_view', 'organisation.organisationauthorityassociation_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_xcbwas.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    organisation_organisationauthorityassociation_view_xcbwas.relatedorganisationauthority_annotation::jsonb as relatedorganisationauthority_annotation,
    notes_note_view_nrcmrn.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_pqujgv
  join shared.contactinformation_view shared_contactinformation_lat_egdnjy on master_join_pqujgv.target_id = shared_contactinformation_lat_egdnjy.id
  where master_join_pqujgv.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_cffdzv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_hydrvx.*) as relatedorganisationauthority,
      jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_hydrvx.annotation) as relatedorganisationauthority_annotation  from master_join master_join_hesios
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_hydrvx on master_join_hesios.target_id = organisation_organisationauthorityassociation_lat_hydrvx.id
  where master_join_hesios.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_xcbwas on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bhmriq.*) AS annotation
  from master_join master_join_wlykum
  join notes.note_view notes_note_lat_bhmriq on master_join_wlykum.target_id = notes_note_lat_bhmriq.id
  where master_join_wlykum.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_nrcmrn on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_szjmfs.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_szjmfs.elevation AS extent_elevation,
    geometry_elevatedsurface_view_szjmfs.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_szjmfs.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_szjmfs.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_szjmfs.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_jxfewq.associatedstand::jsonb as associatedstand,
    notes_note_view_gkqhon.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_szjmfs on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_szjmfs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_avezxb.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_avezxb.title AS varchar), '(' || airport_heliport_aircraftstand_lat_avezxb.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_avezxb.href
  )) as associatedstand  from master_join master_join_oqunoz
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_avezxb on master_join_oqunoz.target_id = airport_heliport_aircraftstand_lat_avezxb.id
  where master_join_oqunoz.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_jxfewq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrurhr.*) AS annotation
  from master_join master_join_psrxmj
  join notes.note_view notes_note_lat_hrurhr on master_join_psrxmj.target_id = notes_note_lat_hrurhr.id
  where master_join_psrxmj.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_gkqhon on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_xuavdf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xuavdf.longitude AS location_longitude,
    geometry_elevatedpoint_view_xuavdf.latitude AS location_latitude,
    geometry_elevatedpoint_view_xuavdf.elevation AS location_elevation,
    geometry_elevatedpoint_view_xuavdf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xuavdf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xuavdf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xuavdf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_usuvef.title as varchar), '(' || organisation_unit_pt_usuvef.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_usuvef.href::text AS serviceprovider_href,
    service_callsigndetail_view_uwvkih.callsign::jsonb as callsign,
    service_callsigndetail_view_uwvkih.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_mghala.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_rglnry.availability::jsonb as availability,
    service_serviceoperationalstatus_view_rglnry.availability_annotation::jsonb as availability_annotation,
    notes_note_view_flsmlt.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_uupesy.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xuavdf on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_xuavdf.id
left join organisation.unit_pt organisation_unit_pt_usuvef on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_usuvef.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_bfcxif.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_bfcxif.annotation) as callsign_annotation  from master_join master_join_jerpmg
  join service.callsigndetail_view service_callsigndetail_lat_bfcxif on master_join_jerpmg.target_id = service_callsigndetail_lat_bfcxif.id
  where master_join_jerpmg.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_uwvkih on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_icxxcm.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_icxxcm.title AS varchar), '(' || service_radiocommunicationchannel_lat_icxxcm.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_icxxcm.href
  )) as radiocommunication  from master_join master_join_hdpvcg
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_icxxcm on master_join_hdpvcg.target_id = service_radiocommunicationchannel_lat_icxxcm.id
  where master_join_hdpvcg.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_mghala on TRUE
left join lateral(
  select
  from master_join master_join_cgnbcx
  join shared.contactinformation_view shared_contactinformation_lat_maxkgg on master_join_cgnbcx.target_id = shared_contactinformation_lat_maxkgg.id
  where master_join_cgnbcx.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_dlhvmr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_dhnbjb.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_dhnbjb.annotation) as availability_annotation  from master_join master_join_lymgdm
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_dhnbjb on master_join_lymgdm.target_id = service_serviceoperationalstatus_lat_dhnbjb.id
  where master_join_lymgdm.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_rglnry on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzrnfu.*) AS annotation
  from master_join master_join_wlvywj
  join notes.note_view notes_note_lat_wzrnfu on master_join_wlvywj.target_id = notes_note_lat_wzrnfu.id
  where master_join_wlvywj.source_id = service.passengerservice_ts.id
) as notes_note_view_flsmlt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ezwrem.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ezwrem.title AS varchar), '(' || airport_heliport_airportheliport_lat_ezwrem.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ezwrem.href
  )) as airportheliport  from master_join master_join_grbqiv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ezwrem on master_join_grbqiv.target_id = airport_heliport_airportheliport_lat_ezwrem.id
  where master_join_grbqiv.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_uupesy on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_dzbgxu.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_lightactivation_view_dzbgxu.controlledlightintensity_annotation::jsonb as controlledlightintensity_annotation,
    airport_heliport_groundlightsystem_pt_afyrjt.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_xznvbx.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_auzjkz.*) as controlledlightintensity,
      jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_auzjkz.annotation) as controlledlightintensity_annotation  from master_join master_join_ghcuet
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_auzjkz on master_join_ghcuet.target_id = airport_heliport_lightactivation_lat_auzjkz.id
  where master_join_ghcuet.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_dzbgxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_knqnxd.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_knqnxd.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_knqnxd.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_knqnxd.href
  )) as activatedgroundlighting  from master_join master_join_qfmxcc
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_knqnxd on master_join_qfmxcc.target_id = airport_heliport_groundlightsystem_lat_knqnxd.id
  where master_join_qfmxcc.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_afyrjt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_stubiu.*) AS annotation
  from master_join master_join_xwhdxn
  join notes.note_view notes_note_lat_stubiu on master_join_xwhdxn.target_id = notes_note_lat_stubiu.id
  where master_join_xwhdxn.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_xznvbx on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarType
-- ['surveillance.reflector_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_slvbyt.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_slvbyt.longitude AS location_longitude,
    geometry_elevatedpoint_view_slvbyt.latitude AS location_latitude,
    geometry_elevatedpoint_view_slvbyt.elevation AS location_elevation,
    geometry_elevatedpoint_view_slvbyt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_slvbyt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_slvbyt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_slvbyt.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xczqwv.annotation::jsonb as annotation,
    surveillance_reflector_view_jwmgoq.reflector::jsonb as reflector,
    surveillance_reflector_view_jwmgoq.reflector_annotation::jsonb as reflector_annotation
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_slvbyt on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_slvbyt.id
left join lateral(
  select
  from master_join master_join_jfbbfl
  join shared.contactinformation_view shared_contactinformation_lat_zseoev on master_join_jfbbfl.target_id = shared_contactinformation_lat_zseoev.id
  where master_join_jfbbfl.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_pinyol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_exfshu.*) AS annotation
  from master_join master_join_pvrcbv
  join notes.note_view notes_note_lat_exfshu on master_join_pvrcbv.target_id = notes_note_lat_exfshu.id
  where master_join_pvrcbv.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_xczqwv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_nhvmkc.*) as reflector,
      jsonb_agg(DISTINCT surveillance_reflector_lat_nhvmkc.annotation) as reflector_annotation  from master_join master_join_rcxaqx
  join surveillance.reflector_view surveillance_reflector_lat_nhvmkc on master_join_rcxaqx.target_id = surveillance_reflector_lat_nhvmkc.id
  where master_join_rcxaqx.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_jwmgoq on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_mbqywm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mbqywm.longitude AS location_longitude,
    geometry_elevatedpoint_view_mbqywm.latitude AS location_latitude,
    geometry_elevatedpoint_view_mbqywm.elevation AS location_elevation,
    geometry_elevatedpoint_view_mbqywm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mbqywm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mbqywm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mbqywm.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_fgcoak.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_yjuude.groundstation::jsonb as groundstation,
    surveillance_surveillancegroundstation_view_yjuude.groundstation_annotation::jsonb as groundstation_annotation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mbqywm on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_mbqywm.id
left join lateral(
  select
  from master_join master_join_dqultc
  join shared.contactinformation_view shared_contactinformation_lat_bunfiw on master_join_dqultc.target_id = shared_contactinformation_lat_bunfiw.id
  where master_join_dqultc.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_yjajhm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_muwlov.*) AS annotation
  from master_join master_join_eunmky
  join notes.note_view notes_note_lat_muwlov on master_join_eunmky.target_id = notes_note_lat_muwlov.id
  where master_join_eunmky.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_fgcoak on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_fwudyk.*) as groundstation,
      jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_fwudyk.annotation) as groundstation_annotation  from master_join master_join_jjshzi
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_fwudyk on master_join_jjshzi.target_id = surveillance_surveillancegroundstation_lat_fwudyk.id
  where master_join_jjshzi.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_yjuude on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_qwiiys.title as varchar), '(' || navaids_points_dme_pt_qwiiys.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_qwiiys.href::text AS dme_href,
    procedure_segmentleg_pt_ksgfin.segmentleg::jsonb as segmentleg,
    notes_note_view_ndphrx.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_qwiiys on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_qwiiys.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_segmentleg_lat_bpaeuy.id,
      'title', coalesce(cast(procedure_segmentleg_lat_bpaeuy.title AS varchar), '(' || procedure_segmentleg_lat_bpaeuy.nilreason[1] || ')'),
      'href', procedure_segmentleg_lat_bpaeuy.href
  )) as segmentleg  from master_join master_join_ryeqzn
  join procedure.segmentleg_pt procedure_segmentleg_lat_bpaeuy on master_join_ryeqzn.target_id = procedure_segmentleg_lat_bpaeuy.id
  where master_join_ryeqzn.source_id = procedure.proceduredme_ts.id
) as procedure_segmentleg_pt_ksgfin on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lenemk.*) AS annotation
  from master_join master_join_gidfug
  join notes.note_view notes_note_lat_lenemk on master_join_gidfug.target_id = notes_note_lat_lenemk.id
  where master_join_gidfug.source_id = procedure.proceduredme_ts.id
) as notes_note_view_ndphrx on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemType
-- ['geometry.elevatedpoint_view', 'surveillance.radarcomponent_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_kumfen.title as varchar), '(' || airport_heliport_airportheliport_pt_kumfen.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_kumfen.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_wkjbuq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wkjbuq.longitude AS location_longitude,
    geometry_elevatedpoint_view_wkjbuq.latitude AS location_latitude,
    geometry_elevatedpoint_view_wkjbuq.elevation AS location_elevation,
    geometry_elevatedpoint_view_wkjbuq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wkjbuq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wkjbuq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wkjbuq.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_arfurp.radarequipment::jsonb as radarequipment,
    surveillance_radarcomponent_view_arfurp.radarequipment_annotation::jsonb as radarequipment_annotation,
    organisation_organisationauthority_pt_pwzkee.office::jsonb as office,
    airport_heliport_runway_pt_sptlkp.parrunway::jsonb as parrunway,
    notes_note_view_tbtvuj.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kumfen on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_kumfen.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wkjbuq on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_wkjbuq.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_soopqv.*) as radarequipment,
      jsonb_agg(DISTINCT surveillance_radarcomponent_lat_soopqv.annotation) as radarequipment_annotation  from master_join master_join_hyrqwb
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_soopqv on master_join_hyrqwb.target_id = surveillance_radarcomponent_lat_soopqv.id
  where master_join_hyrqwb.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_arfurp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lilztv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lilztv.title AS varchar), '(' || organisation_organisationauthority_lat_lilztv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lilztv.href
  )) as office  from master_join master_join_gscrvo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lilztv on master_join_gscrvo.target_id = organisation_organisationauthority_lat_lilztv.id
  where master_join_gscrvo.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_pwzkee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_isgiqe.id,
      'title', coalesce(cast(airport_heliport_runway_lat_isgiqe.title AS varchar), '(' || airport_heliport_runway_lat_isgiqe.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_isgiqe.href
  )) as parrunway  from master_join master_join_kfdxyp
  join airport_heliport.runway_pt airport_heliport_runway_lat_isgiqe on master_join_kfdxyp.target_id = airport_heliport_runway_lat_isgiqe.id
  where master_join_kfdxyp.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_sptlkp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bzwskd.*) AS annotation
  from master_join master_join_quqpkg
  join notes.note_view notes_note_lat_bzwskd on master_join_quqpkg.target_id = notes_note_lat_bzwskd.id
  where master_join_quqpkg.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_tbtvuj on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelType
-- ['geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_rawvpw.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_rawvpw.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_mlznjm.availability::jsonb as availability,
    service_radiocommunicationoperationalstatus_view_mlznjm.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ksseyp.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_ontenz.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_ontenz.id,
      'longitude', geometry_elevatedpoint_lat_ontenz.longitude,
      'latitude', geometry_elevatedpoint_lat_ontenz.latitude,
      'elevation', geometry_elevatedpoint_lat_ontenz.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_ontenz.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_ontenz.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_ontenz.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_ontenz.horizontalAccuracy
    )) AS attr
  from master_join master_join_cbcain
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_ontenz on master_join_cbcain.target_id = geometry_elevatedpoint_lat_ontenz.id
  where master_join_cbcain.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_rawvpw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_kswhdk.*) as availability,
      jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_kswhdk.annotation) as availability_annotation  from master_join master_join_znnoyj
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_kswhdk on master_join_znnoyj.target_id = service_radiocommunicationoperationalstatus_lat_kswhdk.id
  where master_join_znnoyj.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_mlznjm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cdsolu.*) AS annotation
  from master_join master_join_nnpdym
  join notes.note_view notes_note_lat_cdsolu on master_join_nnpdym.target_id = notes_note_lat_cdsolu.id
  where master_join_nnpdym.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_ksseyp on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaType
-- ['geometry.surface_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    navaids_points_navaidequipment_pt_sdzvos.equipmentnavaidequipment::jsonb as equipmentnavaidequipment,
    coalesce(cast(service_radiocommunicationchannel_pt_zblcuz.title as varchar), '(' || service_radiocommunicationchannel_pt_zblcuz.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_zblcuz.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_qrlpyq.title as varchar), '(' || navaids_points_specialnavigationstation_pt_qrlpyq.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_qrlpyq.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_ounpph.title as varchar), '(' || surveillance_precisionapproachradar_pt_ounpph.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_ounpph.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_daxhtv.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_daxhtv.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_daxhtv.href::text AS equipmentradar_href,
    shared_circlesector_view_tvlddb.sector::jsonb as sector,
    shared_circlesector_view_tvlddb.sector_annotation::jsonb as sector_annotation,
    geometry_surface_view_vehjah.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_vehjah.attr::jsonb as extent,
    notes_note_view_gntbpl.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_zblcuz on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_zblcuz.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_qrlpyq on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_qrlpyq.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_ounpph on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_ounpph.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_daxhtv on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_daxhtv.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_ecjzfu.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_ecjzfu.title AS varchar), '(' || navaids_points_navaidequipment_lat_ecjzfu.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_ecjzfu.href
  )) as equipmentnavaidequipment  from master_join master_join_kwwrgb
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_ecjzfu on master_join_kwwrgb.target_id = navaids_points_navaidequipment_lat_ecjzfu.id
  where master_join_kwwrgb.source_id = shared.radiofrequencyarea_ts.id
) as navaids_points_navaidequipment_pt_sdzvos on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_lfvtrg.*) as sector,
      jsonb_agg(DISTINCT shared_circlesector_lat_lfvtrg.annotation) as sector_annotation  from master_join master_join_tzmfjk
  join shared.circlesector_view shared_circlesector_lat_lfvtrg on master_join_tzmfjk.target_id = shared_circlesector_lat_lfvtrg.id
  where master_join_tzmfjk.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_tvlddb on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_ulwypd.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_ulwypd.id,
      'horizontalAccuracy', geometry_surface_lat_ulwypd.horizontalAccuracy
    )) AS attr
  from master_join master_join_ffnkvx
  join geometry.surface_view geometry_surface_lat_ulwypd on master_join_ffnkvx.target_id = geometry_surface_lat_ulwypd.id
  where master_join_ffnkvx.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_vehjah on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fxnznb.*) AS annotation
  from master_join master_join_lzznzo
  join notes.note_view notes_note_lat_fxnznb on master_join_lzznzo.target_id = notes_note_lat_fxnznb.id
  where master_join_lzznzo.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_gntbpl on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_ggookh.title as varchar), '(' || airport_heliport_airportheliport_pt_ggookh.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_ggookh.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kykvor.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_kykvor.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_gsloqk.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_gsloqk.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_gsloqk.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_gsloqk.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_gsloqk.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_gsloqk.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_jhudqm.accessiblestand::jsonb as accessiblestand,
    notes_note_view_gkfbol.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ggookh on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_ggookh.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kykvor on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kykvor.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gsloqk on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_gsloqk.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_teiuqj.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_teiuqj.title AS varchar), '(' || airport_heliport_aircraftstand_lat_teiuqj.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_teiuqj.href
  )) as accessiblestand  from master_join master_join_nbkxee
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_teiuqj on master_join_nbkxee.target_id = airport_heliport_aircraftstand_lat_teiuqj.id
  where master_join_nbkxee.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_jhudqm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_untzou.*) AS annotation
  from master_join master_join_hgzcke
  join notes.note_view notes_note_lat_untzou on master_join_hgzcke.target_id = notes_note_lat_untzou.id
  where master_join_hgzcke.source_id = airport_heliport.road_ts.id
) as notes_note_view_gkfbol on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMEType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_rbsbmv.title as varchar), '(' || navaids_points_dme_pt_rbsbmv.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_rbsbmv.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_ydbwiu.*)::jsonb AS applicablerouteportion,
    routes_routeportion_view_ydbwiu.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_htfecu.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_rbsbmv on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_rbsbmv.id
left join routes.routeportion_view routes_routeportion_view_ydbwiu on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_ydbwiu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wmqjjw.*) AS annotation
  from master_join master_join_effghh
  join notes.note_view notes_note_lat_wmqjjw on master_join_effghh.target_id = notes_note_lat_wmqjjw.id
  where master_join_effghh.source_id = routes.routedme_ts.id
) as notes_note_view_htfecu on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentType
-- ['navaids_points.enroutesegmentpoint_view', 'notes.note_view', 'routes.routeavailability_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_gdlgjz.*)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_gdlgjz.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_ckoywk.*)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_ckoywk.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_zriean.title as varchar), '(' || routes_route_pt_zriean.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_zriean.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_wbgaxl.*)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_wbgaxl.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_xjdenz.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_xjdenz.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_gvmxvq.availability::jsonb as availability,
    routes_routeavailability_view_gvmxvq.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ibyaxo.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_gdlgjz on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_gdlgjz.id
left join routes.route_pt routes_route_pt_zriean on routes.routesegment_ts.routeformed_id = routes_route_pt_zriean.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_wbgaxl on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_wbgaxl.id
left join geometry.curve_view geometry_curve_view_xjdenz on routes.routesegment_ts.curveextent_id = geometry_curve_view_xjdenz.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_ckoywk on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_ckoywk.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_klnfjq.*) as availability,
      jsonb_agg(DISTINCT routes_routeavailability_lat_klnfjq.annotation) as availability_annotation  from master_join master_join_ypkwib
  join routes.routeavailability_view routes_routeavailability_lat_klnfjq on master_join_ypkwib.target_id = routes_routeavailability_lat_klnfjq.id
  where master_join_ypkwib.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_gvmxvq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vnfzbs.*) AS annotation
  from master_join master_join_pvxxns
  join notes.note_view notes_note_lat_vnfzbs on master_join_pvxxns.target_id = notes_note_lat_vnfzbs.id
  where master_join_pvxxns.source_id = routes.routesegment_ts.id
) as notes_note_view_ibyaxo on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_bdbchc.title as varchar), '(' || organisation_organisationauthority_pt_bdbchc.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_bdbchc.href::text AS userorganisation_href,
    notes_note_view_yolpmy.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_bdbchc on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_bdbchc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjqxil.*) AS annotation
  from master_join master_join_wryfta
  join notes.note_view notes_note_lat_yjqxil on master_join_wryfta.target_id = notes_note_lat_yjqxil.id
  where master_join_wryfta.source_id = routes.route_ts.id
) as notes_note_view_yolpmy on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_djssxo.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_uylirt.affectedarea::jsonb as affectedarea,
    notes_note_view_lxzfzt.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ulpebz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ulpebz.title AS varchar), '(' || airport_heliport_airportheliport_lat_ulpebz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ulpebz.href
  )) as affectedlocation  from master_join master_join_nkmzsp
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ulpebz on master_join_nkmzsp.target_id = airport_heliport_airportheliport_lat_ulpebz.id
  where master_join_nkmzsp.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_djssxo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_lsxqcd.id,
      'title', coalesce(cast(airspace_airspace_lat_lsxqcd.title AS varchar), '(' || airspace_airspace_lat_lsxqcd.nilreason[1] || ')'),
      'href', airspace_airspace_lat_lsxqcd.href
  )) as affectedarea  from master_join master_join_slitdw
  join airspace.airspace_pt airspace_airspace_lat_lsxqcd on master_join_slitdw.target_id = airspace_airspace_lat_lsxqcd.id
  where master_join_slitdw.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_uylirt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rodwql.*) AS annotation
  from master_join master_join_waixsb
  join notes.note_view notes_note_lat_rodwql on master_join_waixsb.target_id = notes_note_lat_rodwql.id
  where master_join_waixsb.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_lxzfzt on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_dectrs.title as varchar), '(' || airport_heliport_runwaydirection_pt_dectrs.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_dectrs.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_rlicxh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rlicxh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rlicxh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rlicxh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rlicxh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rlicxh.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mxshja.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_mxshja.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_ckwmnz.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dectrs on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_dectrs.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rlicxh on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_rlicxh.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mxshja on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mxshja.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kxmnsx.*) AS annotation
  from master_join master_join_rasyaq
  join notes.note_view notes_note_lat_kxmnsx on master_join_rasyaq.target_id = notes_note_lat_kxmnsx.id
  where master_join_rasyaq.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_ckwmnz on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointType
-- ['airport_heliport.runwaydeclareddistance_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.navaidequipmentdistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_offbpz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_offbpz.longitude AS location_longitude,
    geometry_elevatedpoint_view_offbpz.latitude AS location_latitude,
    geometry_elevatedpoint_view_offbpz.elevation AS location_elevation,
    geometry_elevatedpoint_view_offbpz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_offbpz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_offbpz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_offbpz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_xdsmec.title as varchar), '(' || airport_heliport_runwaydirection_pt_xdsmec.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_xdsmec.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_qzhbzu.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_runwaydeclareddistance_view_qzhbzu.associateddeclareddistance_annotation::jsonb as associateddeclareddistance_annotation,
    airport_heliport_navaidequipmentdistance_view_ybidvo.navaidequipment::jsonb as navaidequipment,
    airport_heliport_navaidequipmentdistance_view_ybidvo.navaidequipment_annotation::jsonb as navaidequipment_annotation,
    notes_note_view_crjmhc.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_offbpz on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_offbpz.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_xdsmec on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_xdsmec.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_aiygjl.*) as associateddeclareddistance,
      jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_aiygjl.annotation) as associateddeclareddistance_annotation  from master_join master_join_eqgbgr
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_aiygjl on master_join_eqgbgr.target_id = airport_heliport_runwaydeclareddistance_lat_aiygjl.id
  where master_join_eqgbgr.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_qzhbzu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_fvsmdo.*) as navaidequipment,
      jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_fvsmdo.annotation) as navaidequipment_annotation  from master_join master_join_uvxvgm
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_fvsmdo on master_join_uvxvgm.target_id = airport_heliport_navaidequipmentdistance_lat_fvsmdo.id
  where master_join_uvxvgm.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_ybidvo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygmrnj.*) AS annotation
  from master_join master_join_zdlkqn
  join notes.note_view notes_note_lat_ygmrnj on master_join_zdlkqn.target_id = notes_note_lat_ygmrnj.id
  where master_join_zdlkqn.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_crjmhc on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_sxzmvr.title as varchar), '(' || airport_heliport_runwaydirection_pt_sxzmvr.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_sxzmvr.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_ezlisx.element::jsonb as element,
    shared_lightelement_view_ezlisx.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_xciwxf.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_xciwxf.availability_annotation::jsonb as availability_annotation,
    notes_note_view_monido.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_sxzmvr on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_sxzmvr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_doyjxf.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_doyjxf.annotation) as element_annotation  from master_join master_join_btipki
  join shared.lightelement_view shared_lightelement_lat_doyjxf on master_join_btipki.target_id = shared_lightelement_lat_doyjxf.id
  where master_join_btipki.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_ezlisx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_abksxv.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_abksxv.annotation) as availability_annotation  from master_join master_join_xmcuzj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_abksxv on master_join_xmcuzj.target_id = airport_heliport_groundlightingavailability_lat_abksxv.id
  where master_join_xmcuzj.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_xciwxf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bhyrug.*) AS annotation
  from master_join master_join_xiorzx
  join notes.note_view notes_note_lat_bhyrug on master_join_xiorzx.target_id = notes_note_lat_bhyrug.id
  where master_join_xiorzx.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_monido on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_hbqlwh.title as varchar), '(' || airport_heliport_runway_pt_hbqlwh.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_hbqlwh.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_jpruxa.title as varchar), '(' || airport_heliport_runwayelement_pt_jpruxa.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_jpruxa.href::text AS startingelement_href,
    notes_note_view_iochku.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_ziuayy.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_ziuayy.availability_annotation::jsonb as availability_annotation
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_hbqlwh on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_hbqlwh.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_jpruxa on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_jpruxa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xgtbov.*) AS annotation
  from master_join master_join_tattky
  join notes.note_view notes_note_lat_xgtbov on master_join_tattky.target_id = notes_note_lat_xgtbov.id
  where master_join_tattky.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_iochku on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_aahnzb.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_aahnzb.annotation) as availability_annotation  from master_join master_join_afdacj
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_aahnzb on master_join_afdacj.target_id = airport_heliport_manoeuvringareaavailability_lat_aahnzb.id
  where master_join_afdacj.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_ziuayy on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_irlmlk.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_irlmlk.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_haiywb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_haiywb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_haiywb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_haiywb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_haiywb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_haiywb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_lwxpcx.associatedrunway::jsonb as associatedrunway,
    notes_note_view_ujoyjz.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_tkxdpg.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_tkxdpg.availability_annotation::jsonb as availability_annotation
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_irlmlk on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_irlmlk.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_haiywb on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_haiywb.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_ojaobj.id,
      'title', coalesce(cast(airport_heliport_runway_lat_ojaobj.title AS varchar), '(' || airport_heliport_runway_lat_ojaobj.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_ojaobj.href
  )) as associatedrunway  from master_join master_join_vnqyml
  join airport_heliport.runway_pt airport_heliport_runway_lat_ojaobj on master_join_vnqyml.target_id = airport_heliport_runway_lat_ojaobj.id
  where master_join_vnqyml.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_lwxpcx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pbjdln.*) AS annotation
  from master_join master_join_tnhfor
  join notes.note_view notes_note_lat_pbjdln on master_join_tnhfor.target_id = notes_note_lat_pbjdln.id
  where master_join_tnhfor.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_ujoyjz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_aophhs.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_aophhs.annotation) as availability_annotation  from master_join master_join_twcjxo
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_aophhs on master_join_twcjxo.target_id = airport_heliport_manoeuvringareaavailability_lat_aophhs.id
  where master_join_twcjxo.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_tkxdpg on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_zqmtdw.title as varchar), '(' || airport_heliport_runway_pt_zqmtdw.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_zqmtdw.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_djfisi.element::jsonb as element,
    airport_heliport_markingelement_view_djfisi.element_annotation::jsonb as element_annotation,
    notes_note_view_kqyqxl.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_zqmtdw on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_zqmtdw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pbylxd.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pbylxd.annotation) as element_annotation  from master_join master_join_rpqtfi
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_pbylxd on master_join_rpqtfi.target_id = airport_heliport_markingelement_lat_pbylxd.id
  where master_join_rpqtfi.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_djfisi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ynjdpm.*) AS annotation
  from master_join master_join_kdzdwk
  join notes.note_view notes_note_lat_ynjdpm on master_join_kdzdwk.target_id = notes_note_lat_ynjdpm.id
  where master_join_kdzdwk.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_kqyqxl on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_yrtzpl.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_yrtzpl.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_yrtzpl.href::text AS lightedarea_href,
    shared_lightelement_view_arryun.element::jsonb as element,
    shared_lightelement_view_arryun.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_magvly.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_magvly.availability_annotation::jsonb as availability_annotation,
    notes_note_view_stkfyz.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_yrtzpl on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_yrtzpl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_zjmvvi.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_zjmvvi.annotation) as element_annotation  from master_join master_join_bjbqrg
  join shared.lightelement_view shared_lightelement_lat_zjmvvi on master_join_bjbqrg.target_id = shared_lightelement_lat_zjmvvi.id
  where master_join_bjbqrg.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_arryun on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hoferw.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hoferw.annotation) as availability_annotation  from master_join master_join_muiafv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hoferw on master_join_muiafv.target_id = airport_heliport_groundlightingavailability_lat_hoferw.id
  where master_join_muiafv.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_magvly on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydijah.*) AS annotation
  from master_join master_join_tfsoaw
  join notes.note_view notes_note_lat_ydijah on master_join_tfsoaw.target_id = notes_note_lat_ydijah.id
  where master_join_tfsoaw.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_stkfyz on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_srrtac.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_srrtac.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_cegfmy.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cegfmy.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cegfmy.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cegfmy.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cegfmy.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cegfmy.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_mvralm.title as varchar), '(' || airport_heliport_runwaydirection_pt_mvralm.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_mvralm.href::text AS protectedrunwaydirection_href,
    notes_note_view_rrgbjs.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_srrtac on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_srrtac.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cegfmy on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_cegfmy.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_mvralm on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_mvralm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lcafbr.*) AS annotation
  from master_join master_join_ervigk
  join notes.note_view notes_note_lat_lcafbr on master_join_ervigk.target_id = notes_note_lat_lcafbr.id
  where master_join_ervigk.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_rrgbjs on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaycontamination_view', 'notes.note_view', 'airport_heliport.runwaysectioncontamination_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ervfdc.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ervfdc.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_yiokbg.title as varchar), '(' || airport_heliport_airportheliport_pt_yiokbg.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_yiokbg.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_xlsivd.overallcontaminant::jsonb as overallcontaminant,
    airport_heliport_runwaycontamination_view_xlsivd.overallcontaminant_annotation::jsonb as overallcontaminant_annotation,
    notes_note_view_louuqj.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_msopwu.areacontaminant::jsonb as areacontaminant,
    airport_heliport_runwaysectioncontamination_view_msopwu.areacontaminant_annotation::jsonb as areacontaminant_annotation
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ervfdc on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ervfdc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yiokbg on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_yiokbg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_axkwfl.*) as overallcontaminant,
      jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_axkwfl.annotation) as overallcontaminant_annotation  from master_join master_join_oozjmc
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_axkwfl on master_join_oozjmc.target_id = airport_heliport_runwaycontamination_lat_axkwfl.id
  where master_join_oozjmc.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_xlsivd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdwihc.*) AS annotation
  from master_join master_join_hwjqij
  join notes.note_view notes_note_lat_hdwihc on master_join_hwjqij.target_id = notes_note_lat_hdwihc.id
  where master_join_hwjqij.source_id = airport_heliport.runway_ts.id
) as notes_note_view_louuqj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_zviycy.*) as areacontaminant,
      jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_zviycy.annotation) as areacontaminant_annotation  from master_join master_join_ykdzdl
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_zviycy on master_join_ykdzdl.target_id = airport_heliport_runwaysectioncontamination_lat_zviycy.id
  where master_join_ykdzdl.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_msopwu on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_bwsrjc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bwsrjc.longitude AS location_longitude,
    geometry_elevatedpoint_view_bwsrjc.latitude AS location_latitude,
    geometry_elevatedpoint_view_bwsrjc.elevation AS location_elevation,
    geometry_elevatedpoint_view_bwsrjc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bwsrjc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bwsrjc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bwsrjc.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_uqytwo.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_kqjtbr.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bwsrjc on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_bwsrjc.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_yvprmd.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_yvprmd.title AS varchar), '(' || airport_heliport_runwaydirection_lat_yvprmd.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_yvprmd.href
  )) as associatedrunwaydirection  from master_join master_join_yenehj
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_yvprmd on master_join_yenehj.target_id = airport_heliport_runwaydirection_lat_yvprmd.id
  where master_join_yenehj.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_uqytwo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nlhxfa.*) AS annotation
  from master_join master_join_xahaou
  join notes.note_view notes_note_lat_nlhxfa on master_join_xahaou.target_id = notes_note_lat_nlhxfa.id
  where master_join_xahaou.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_kqjtbr on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaType
-- ['procedure.safealtitudeareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_xtiepq.title as varchar), '(' || navaids_points_designatedpoint_pt_xtiepq.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_xtiepq.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wsopju.title as varchar), '(' || navaids_points_navaid_pt_wsopju.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_wsopju.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_eicfpv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_eicfpv.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_eicfpv.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tvvhjy.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tvvhjy.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tvvhjy.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rjjsrd.title as varchar), '(' || airport_heliport_airportheliport_pt_rjjsrd.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_rjjsrd.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_sspqmg.location::jsonb as location,
    geometry_point_view_cmnakb.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_cmnakb.longitude AS centrepointposition_longitude,
    geometry_point_view_cmnakb.latitude AS centrepointposition_latitude,
    geometry_point_view_cmnakb.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_yirdpg.sector::jsonb as sector,
    procedure_safealtitudeareasector_view_yirdpg.sector_annotation::jsonb as sector_annotation,
    notes_note_view_osppjl.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xtiepq on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xtiepq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wsopju on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_wsopju.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_eicfpv on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_eicfpv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tvvhjy on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tvvhjy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rjjsrd on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_rjjsrd.id
left join geometry.point_view geometry_point_view_cmnakb on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_cmnakb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_udjfwd.*) as sector,
      jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_udjfwd.annotation) as sector_annotation  from master_join master_join_xtenbp
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_udjfwd on master_join_xtenbp.target_id = procedure_safealtitudeareasector_lat_udjfwd.id
  where master_join_xtenbp.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_yirdpg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lkcgqz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lkcgqz.title AS varchar), '(' || airport_heliport_airportheliport_lat_lkcgqz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lkcgqz.href
  )) as location  from master_join master_join_omyrwo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lkcgqz on master_join_omyrwo.target_id = airport_heliport_airportheliport_lat_lkcgqz.id
  where master_join_omyrwo.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_sspqmg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_homawi.*) AS annotation
  from master_join master_join_rlqoxq
  join notes.note_view notes_note_lat_homawi on master_join_rlqoxq.target_id = notes_note_lat_homawi.id
  where master_join_rlqoxq.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_osppjl on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_mylwei.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mylwei.longitude AS location_longitude,
    geometry_elevatedpoint_view_mylwei.latitude AS location_latitude,
    geometry_elevatedpoint_view_mylwei.elevation AS location_elevation,
    geometry_elevatedpoint_view_mylwei.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mylwei.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mylwei.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mylwei.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_cteath.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_cteath.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_rzmyeq.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_rzmyeq.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_mlcmhh.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_mlcmhh.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ntaikq.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mylwei on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_mylwei.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ggmqgj.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ggmqgj.annotation) as authority_annotation  from master_join master_join_ajksme
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ggmqgj on master_join_ajksme.target_id = navaids_points_authorityfornavaidequipment_lat_ggmqgj.id
  where master_join_ajksme.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_cteath on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pisufg.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pisufg.annotation) as monitoring_annotation  from master_join master_join_vakjkm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pisufg on master_join_vakjkm.target_id = navaids_points_navaidequipmentmonitoring_lat_pisufg.id
  where master_join_vakjkm.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_rzmyeq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zhkcqg.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zhkcqg.annotation) as availability_annotation  from master_join master_join_sgndsw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zhkcqg on master_join_sgndsw.target_id = navaids_points_navaidoperationalstatus_lat_zhkcqg.id
  where master_join_sgndsw.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_mlcmhh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hyajcu.*) AS annotation
  from master_join master_join_zawlvt
  join notes.note_view notes_note_lat_hyajcu on master_join_zawlvt.target_id = notes_note_lat_hyajcu.id
  where master_join_zawlvt.source_id = navaids_points.sdf_ts.id
) as notes_note_view_ntaikq on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_ityfar.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ityfar.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ityfar.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ityfar.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ityfar.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ityfar.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_evgyei.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_hozgvk.docksite::jsonb as docksite,
    notes_note_view_uzlopk.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_ktcsqs.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_ktcsqs.availability_annotation::jsonb as availability_annotation
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ityfar on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_ityfar.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_cupiad.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_cupiad.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_cupiad.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_cupiad.href
  )) as rampsite  from master_join master_join_vbvimv
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_cupiad on master_join_vbvimv.target_id = airport_heliport_seaplanerampsite_lat_cupiad.id
  where master_join_vbvimv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_evgyei on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_dshood.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_dshood.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_dshood.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_dshood.href
  )) as docksite  from master_join master_join_rjggez
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_dshood on master_join_rjggez.target_id = airport_heliport_floatingdocksite_lat_dshood.id
  where master_join_rjggez.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_hozgvk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmhygv.*) AS annotation
  from master_join master_join_wkeksr
  join notes.note_view notes_note_lat_pmhygv on master_join_wkeksr.target_id = notes_note_lat_pmhygv.id
  where master_join_wkeksr.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_uzlopk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xsgogl.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xsgogl.annotation) as availability_annotation  from master_join master_join_gxghfr
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xsgogl on master_join_gxghfr.target_id = airport_heliport_manoeuvringareaavailability_lat_xsgogl.id
  where master_join_gxghfr.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_ktcsqs on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_rfnalh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rfnalh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rfnalh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rfnalh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rfnalh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rfnalh.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_xmdyxe.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_xmdyxe.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_xmdyxe.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_xmdyxe.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_xmdyxe.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_xmdyxe.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_rxmvvr.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rfnalh on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_rfnalh.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_xmdyxe on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_xmdyxe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hwpqtk.*) AS annotation
  from master_join master_join_htmnzc
  join notes.note_view notes_note_lat_hwpqtk on master_join_htmnzc.target_id = notes_note_lat_hwpqtk.id
  where master_join_htmnzc.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_rxmvvr on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceType
-- ['notes.note_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lmmbsl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lmmbsl.longitude AS location_longitude,
    geometry_elevatedpoint_view_lmmbsl.latitude AS location_latitude,
    geometry_elevatedpoint_view_lmmbsl.elevation AS location_elevation,
    geometry_elevatedpoint_view_lmmbsl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lmmbsl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lmmbsl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lmmbsl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_akymnh.title as varchar), '(' || organisation_unit_pt_akymnh.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_akymnh.href::text AS serviceprovider_href,
    service_callsigndetail_view_hbwgar.callsign::jsonb as callsign,
    service_callsigndetail_view_hbwgar.callsign_annotation::jsonb as callsign_annotation,
    service_radiocommunicationchannel_pt_craaqa.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_lkbriu.availability::jsonb as availability,
    service_serviceoperationalstatus_view_lkbriu.availability_annotation::jsonb as availability_annotation,
    notes_note_view_itohrk.annotation::jsonb as annotation,
    airspace_airspace_pt_coshvm.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_xkycit.clientroute::jsonb as clientroute,
    routes_routeportion_view_xkycit.clientroute_annotation::jsonb as clientroute_annotation
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lmmbsl on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_lmmbsl.id
left join organisation.unit_pt organisation_unit_pt_akymnh on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_akymnh.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_htrqty.*) as callsign,
      jsonb_agg(DISTINCT service_callsigndetail_lat_htrqty.annotation) as callsign_annotation  from master_join master_join_bptsqr
  join service.callsigndetail_view service_callsigndetail_lat_htrqty on master_join_bptsqr.target_id = service_callsigndetail_lat_htrqty.id
  where master_join_bptsqr.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_hbwgar on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_docttt.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_docttt.title AS varchar), '(' || service_radiocommunicationchannel_lat_docttt.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_docttt.href
  )) as radiocommunication  from master_join master_join_zducsm
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_docttt on master_join_zducsm.target_id = service_radiocommunicationchannel_lat_docttt.id
  where master_join_zducsm.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_craaqa on TRUE
left join lateral(
  select
  from master_join master_join_unreun
  join shared.contactinformation_view shared_contactinformation_lat_mhexxt on master_join_unreun.target_id = shared_contactinformation_lat_mhexxt.id
  where master_join_unreun.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_dkfepp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_gyxuaq.*) as availability,
      jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_gyxuaq.annotation) as availability_annotation  from master_join master_join_ywcvek
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_gyxuaq on master_join_ywcvek.target_id = service_serviceoperationalstatus_lat_gyxuaq.id
  where master_join_ywcvek.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_lkbriu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbfcbz.*) AS annotation
  from master_join master_join_blbzlo
  join notes.note_view notes_note_lat_cbfcbz on master_join_blbzlo.target_id = notes_note_lat_cbfcbz.id
  where master_join_blbzlo.source_id = service.searchrescueservice_ts.id
) as notes_note_view_itohrk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ukdbmq.id,
      'title', coalesce(cast(airspace_airspace_lat_ukdbmq.title AS varchar), '(' || airspace_airspace_lat_ukdbmq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ukdbmq.href
  )) as clientairspace  from master_join master_join_vcicet
  join airspace.airspace_pt airspace_airspace_lat_ukdbmq on master_join_vcicet.target_id = airspace_airspace_lat_ukdbmq.id
  where master_join_vcicet.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_coshvm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_xtatzg.*) as clientroute,
      jsonb_agg(DISTINCT routes_routeportion_lat_xtatzg.annotation) as clientroute_annotation  from master_join master_join_xqajre
  join routes.routeportion_view routes_routeportion_lat_xtatzg on master_join_xqajre.target_id = routes_routeportion_lat_xtatzg.id
  where master_join_xqajre.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_xkycit on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_ckucwy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ckucwy.longitude AS location_longitude,
    geometry_elevatedpoint_view_ckucwy.latitude AS location_latitude,
    geometry_elevatedpoint_view_ckucwy.elevation AS location_elevation,
    geometry_elevatedpoint_view_ckucwy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ckucwy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ckucwy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ckucwy.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_iczmkt.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_vqxute.groundstation::jsonb as groundstation,
    surveillance_surveillancegroundstation_view_vqxute.groundstation_annotation::jsonb as groundstation_annotation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ckucwy on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ckucwy.id
left join lateral(
  select
  from master_join master_join_vysvcd
  join shared.contactinformation_view shared_contactinformation_lat_zwbskc on master_join_vysvcd.target_id = shared_contactinformation_lat_zwbskc.id
  where master_join_vysvcd.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_skfffv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_diuviw.*) AS annotation
  from master_join master_join_dfgkiy
  join notes.note_view notes_note_lat_diuviw on master_join_dfgkiy.target_id = notes_note_lat_diuviw.id
  where master_join_dfgkiy.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_iczmkt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_cxrdbr.*) as groundstation,
      jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_cxrdbr.annotation) as groundstation_annotation  from master_join master_join_xwnxzy
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_cxrdbr on master_join_xwnxzy.target_id = surveillance_surveillancegroundstation_lat_cxrdbr.id
  where master_join_xwnxzy.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_vqxute on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_jenlpg.title as varchar), '(' || airspace_airspace_pt_jenlpg.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_jenlpg.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ljzaal.title as varchar), '(' || navaids_points_designatedpoint_pt_ljzaal.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ljzaal.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_kblbjq.title as varchar), '(' || navaids_points_navaid_pt_kblbjq.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_kblbjq.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_asjnnj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_asjnnj.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_asjnnj.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_umojam.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_umojam.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_umojam.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rdrvyy.title as varchar), '(' || airport_heliport_airportheliport_pt_rdrvyy.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_rdrvyy.href::text AS locationairportreferencepoint_href,
    geometry_point_view_ybaekf.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_ybaekf.longitude AS locationposition_longitude,
    geometry_point_view_ybaekf.latitude AS locationposition_latitude,
    geometry_point_view_ybaekf.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_qrvnsa.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_jenlpg on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_jenlpg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ljzaal on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ljzaal.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_kblbjq on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_kblbjq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_asjnnj on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_asjnnj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_umojam on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_umojam.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rdrvyy on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_rdrvyy.id
left join geometry.point_view geometry_point_view_ybaekf on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_ybaekf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qzfuqd.*) AS annotation
  from master_join master_join_egmjnn
  join notes.note_view notes_note_lat_qzfuqd on master_join_egmjnn.target_id = notes_note_lat_qzfuqd.id
  where master_join_egmjnn.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_qrvnsa on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_dkghtn.title as varchar), '(' || organisation_organisationauthority_pt_dkghtn.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_dkghtn.href::text AS authority_href,
    notes_note_view_skzvfu.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_dkghtn on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_dkghtn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ugdzdi.*) AS annotation
  from master_join master_join_uazakh
  join notes.note_view notes_note_lat_ugdzdi on master_join_uazakh.target_id = notes_note_lat_ugdzdi.id
  where master_join_uazakh.source_id = shared.specialdate_ts.id
) as notes_note_view_skzvfu on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationType
-- ['navaids_points.authorityforspecialnavigationstation_view', 'geometry.elevatedpoint_view', 'navaids_points.specialnavigationstationstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_tcmfmm.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_tcmfmm.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_tcmfmm.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_fayxet.*)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_fayxet.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_xteatr.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_xteatr.longitude AS position_longitude,
    geometry_elevatedpoint_view_xteatr.latitude AS position_latitude,
    geometry_elevatedpoint_view_xteatr.elevation AS position_elevation,
    geometry_elevatedpoint_view_xteatr.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_xteatr.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_xteatr.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_xteatr.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_jiwtna.availability::jsonb as availability,
    navaids_points_specialnavigationstationstatus_view_jiwtna.availability_annotation::jsonb as availability_annotation,
    notes_note_view_nmtgfk.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_tcmfmm on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_tcmfmm.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_fayxet on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_fayxet.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xteatr on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_xteatr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_evfqwi.*) as availability,
      jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_evfqwi.annotation) as availability_annotation  from master_join master_join_eqtiti
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_evfqwi on master_join_eqtiti.target_id = navaids_points_specialnavigationstationstatus_lat_evfqwi.id
  where master_join_eqtiti.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_jiwtna on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zqidej.*) AS annotation
  from master_join master_join_dftjdf
  join notes.note_view notes_note_lat_zqidej on master_join_dftjdf.target_id = notes_note_lat_zqidej.id
  where master_join_dftjdf.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_nmtgfk on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_acflui.*)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_acflui.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_hkbsjk.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_acflui on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_acflui.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xkowdf.*) AS annotation
  from master_join master_join_itsooq
  join notes.note_view notes_note_lat_xkowdf on master_join_itsooq.target_id = notes_note_lat_xkowdf.id
  where master_join_itsooq.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_hkbsjk on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalType
-- ['notes.note_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_mmyjhn.title as varchar), '(' || navaids_points_navaid_pt_mmyjhn.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_mmyjhn.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_bioubi.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_bioubi.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_bioubi.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_rgcbai.title as varchar), '(' || surveillance_radarsystem_pt_rgcbai.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_rgcbai.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_sygljc.title as varchar), '(' || procedure_safealtitudearea_pt_sygljc.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_sygljc.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_vxbwmg.*)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_vxbwmg.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_qzujkq.availability::jsonb as availability,
    procedure_procedureavailability_view_qzujkq.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_hilkeq.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_rbyszb.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_rbyszb.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_qaszwg.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_qaszwg.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_runtim.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mmyjhn on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_mmyjhn.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_bioubi on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_bioubi.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_rgcbai on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_rgcbai.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_sygljc on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_sygljc.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_vxbwmg on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_vxbwmg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_llrsxn.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_llrsxn.annotation) as availability_annotation  from master_join master_join_zpqoek
  join procedure.procedureavailability_view procedure_procedureavailability_lat_llrsxn on master_join_zpqoek.target_id = procedure_procedureavailability_lat_llrsxn.id
  where master_join_zpqoek.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_qzujkq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lepagg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lepagg.title AS varchar), '(' || airport_heliport_airportheliport_lat_lepagg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lepagg.href
  )) as airportheliport  from master_join master_join_pnffij
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lepagg on master_join_pnffij.target_id = airport_heliport_airportheliport_lat_lepagg.id
  where master_join_pnffij.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_hilkeq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bjbsbm.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_bjbsbm.annotation) as aircraftcharacteristic_annotation  from master_join master_join_utpciq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_bjbsbm on master_join_utpciq.target_id = shared_aircraftcharacteristic_lat_bjbsbm.id
  where master_join_utpciq.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_rbyszb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_fzmbhj.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_fzmbhj.annotation) as flighttransition_annotation  from master_join master_join_vpuekg
  join procedure.proceduretransition_view procedure_proceduretransition_lat_fzmbhj on master_join_vpuekg.target_id = procedure_proceduretransition_lat_fzmbhj.id
  where master_join_vpuekg.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_qaszwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bfqzqz.*) AS annotation
  from master_join master_join_ulzpxp
  join notes.note_view notes_note_lat_bfqzqz on master_join_ulzpxp.target_id = notes_note_lat_bfqzqz.id
  where master_join_ulzpxp.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_runtim on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureType
-- ['notes.note_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_yydrav.title as varchar), '(' || navaids_points_navaid_pt_yydrav.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_yydrav.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_lymgbg.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_lymgbg.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_lymgbg.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_yfszlh.title as varchar), '(' || surveillance_radarsystem_pt_yfszlh.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_yfszlh.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_nqutzc.title as varchar), '(' || procedure_safealtitudearea_pt_nqutzc.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_nqutzc.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ijtwmn.*)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_ijtwmn.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_dlbfth.availability::jsonb as availability,
    procedure_procedureavailability_view_dlbfth.availability_annotation::jsonb as availability_annotation,
    airport_heliport_airportheliport_pt_vmezmc.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_cvmpqd.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    shared_aircraftcharacteristic_view_cvmpqd.aircraftcharacteristic_annotation::jsonb as aircraftcharacteristic_annotation,
    procedure_proceduretransition_view_wuvzfw.flighttransition::jsonb as flighttransition,
    procedure_proceduretransition_view_wuvzfw.flighttransition_annotation::jsonb as flighttransition_annotation,
    notes_note_view_ghkmhd.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yydrav on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_yydrav.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_lymgbg on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_lymgbg.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_yfszlh on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_yfszlh.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_nqutzc on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_nqutzc.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ijtwmn on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_ijtwmn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_nuykfw.*) as availability,
      jsonb_agg(DISTINCT procedure_procedureavailability_lat_nuykfw.annotation) as availability_annotation  from master_join master_join_ifrbbt
  join procedure.procedureavailability_view procedure_procedureavailability_lat_nuykfw on master_join_ifrbbt.target_id = procedure_procedureavailability_lat_nuykfw.id
  where master_join_ifrbbt.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_dlbfth on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ifbzdu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ifbzdu.title AS varchar), '(' || airport_heliport_airportheliport_lat_ifbzdu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ifbzdu.href
  )) as airportheliport  from master_join master_join_geyrul
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ifbzdu on master_join_geyrul.target_id = airport_heliport_airportheliport_lat_ifbzdu.id
  where master_join_geyrul.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_vmezmc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zrgyfk.*) as aircraftcharacteristic,
      jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zrgyfk.annotation) as aircraftcharacteristic_annotation  from master_join master_join_diolxu
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_zrgyfk on master_join_diolxu.target_id = shared_aircraftcharacteristic_lat_zrgyfk.id
  where master_join_diolxu.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_cvmpqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_nkmppx.*) as flighttransition,
      jsonb_agg(DISTINCT procedure_proceduretransition_lat_nkmppx.annotation) as flighttransition_annotation  from master_join master_join_cbgxqz
  join procedure.proceduretransition_view procedure_proceduretransition_lat_nkmppx on master_join_cbgxqz.target_id = procedure_proceduretransition_lat_nkmppx.id
  where master_join_cbgxqz.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_wuvzfw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gyrybu.*) AS annotation
  from master_join master_join_sncuxt
  join notes.note_view notes_note_lat_gyrybu on master_join_sncuxt.target_id = notes_note_lat_gyrybu.id
  where master_join_sncuxt.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_ghkmhd on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_iihnia.title as varchar), '(' || shared_standardleveltable_pt_iihnia.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_iihnia.href::text AS leveltable_href,
    shared_standardlevel_view_eooukj.level::jsonb as level,
    shared_standardlevel_view_eooukj.level_annotation::jsonb as level_annotation,
    notes_note_view_sbuyhb.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_iihnia on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_iihnia.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_pgbcrn.*) as level,
      jsonb_agg(DISTINCT shared_standardlevel_lat_pgbcrn.annotation) as level_annotation  from master_join master_join_gwjssk
  join shared.standardlevel_view shared_standardlevel_lat_pgbcrn on master_join_gwjssk.target_id = shared_standardlevel_lat_pgbcrn.id
  where master_join_gwjssk.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_eooukj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygezfj.*) AS annotation
  from master_join master_join_qkmato
  join notes.note_view notes_note_lat_ygezfj on master_join_qkmato.target_id = notes_note_lat_ygezfj.id
  where master_join_qkmato.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_sbuyhb on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_itmspr.title as varchar), '(' || shared_standardlevelcolumn_pt_itmspr.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_itmspr.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_vupzhr.applicableairspace::jsonb as applicableairspace,
    notes_note_view_yrjbfs.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_itmspr on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_itmspr.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_miurtu.id,
      'title', coalesce(cast(airspace_airspace_lat_miurtu.title AS varchar), '(' || airspace_airspace_lat_miurtu.nilreason[1] || ')'),
      'href', airspace_airspace_lat_miurtu.href
  )) as applicableairspace  from master_join master_join_dsedmx
  join airspace.airspace_pt airspace_airspace_lat_miurtu on master_join_dsedmx.target_id = airspace_airspace_lat_miurtu.id
  where master_join_dsedmx.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_vupzhr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kuuodk.*) AS annotation
  from master_join master_join_ciyeoe
  join notes.note_view notes_note_lat_kuuodk on master_join_ciyeoe.target_id = notes_note_lat_kuuodk.id
  where master_join_ciyeoe.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_yrjbfs on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_fvsfwh.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hvyfpm.*) AS annotation
  from master_join master_join_nuemwo
  join notes.note_view notes_note_lat_hvyfpm on master_join_nuemwo.target_id = notes_note_lat_hvyfpm.id
  where master_join_nuemwo.source_id = shared.standardleveltable_ts.id
) as notes_note_view_fvsfwh on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_fmdzum.title as varchar), '(' || airport_heliport_aircraftstand_pt_fmdzum.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_fmdzum.href::text AS markedstand_href,
    airport_heliport_markingelement_view_uhdptd.element::jsonb as element,
    airport_heliport_markingelement_view_uhdptd.element_annotation::jsonb as element_annotation,
    notes_note_view_zifqqi.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_fmdzum on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_fmdzum.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rpgqpw.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rpgqpw.annotation) as element_annotation  from master_join master_join_lyyrih
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rpgqpw on master_join_lyyrih.target_id = airport_heliport_markingelement_lat_rpgqpw.id
  where master_join_lyyrih.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_uhdptd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqdaam.*) AS annotation
  from master_join master_join_szeira
  join notes.note_view notes_note_lat_kqdaam on master_join_szeira.target_id = notes_note_lat_kqdaam.id
  where master_join_szeira.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_zifqqi on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_pmozkx.title as varchar), '(' || airport_heliport_airportheliport_pt_pmozkx.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_pmozkx.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_luaacg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_luaacg.longitude AS location_longitude,
    geometry_elevatedpoint_view_luaacg.latitude AS location_latitude,
    geometry_elevatedpoint_view_luaacg.elevation AS location_elevation,
    geometry_elevatedpoint_view_luaacg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_luaacg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_luaacg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_luaacg.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_pwzmfl.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pmozkx on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_pmozkx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_luaacg on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_luaacg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqiewc.*) AS annotation
  from master_join master_join_jbfkds
  join notes.note_view notes_note_lat_gqiewc on master_join_jbfkds.target_id = notes_note_lat_gqiewc.id
  where master_join_jbfkds.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_pwzmfl on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_jzykwf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jzykwf.longitude AS location_longitude,
    geometry_elevatedpoint_view_jzykwf.latitude AS location_latitude,
    geometry_elevatedpoint_view_jzykwf.elevation AS location_elevation,
    geometry_elevatedpoint_view_jzykwf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jzykwf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jzykwf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jzykwf.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rqrybz.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_rqrybz.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_prbjyj.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_prbjyj.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_gxpgpn.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_gxpgpn.availability_annotation::jsonb as availability_annotation,
    notes_note_view_xekypq.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jzykwf on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_jzykwf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_eiqdnf.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_eiqdnf.annotation) as authority_annotation  from master_join master_join_gdsmfc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_eiqdnf on master_join_gdsmfc.target_id = navaids_points_authorityfornavaidequipment_lat_eiqdnf.id
  where master_join_gdsmfc.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_rqrybz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_istvuf.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_istvuf.annotation) as monitoring_annotation  from master_join master_join_govpbt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_istvuf on master_join_govpbt.target_id = navaids_points_navaidequipmentmonitoring_lat_istvuf.id
  where master_join_govpbt.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_prbjyj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vmkhbm.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vmkhbm.annotation) as availability_annotation  from master_join master_join_zyyglq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vmkhbm on master_join_zyyglq.target_id = navaids_points_navaidoperationalstatus_lat_vmkhbm.id
  where master_join_zyyglq.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_gxpgpn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqnczr.*) AS annotation
  from master_join master_join_slpqwp
  join notes.note_view notes_note_lat_lqnczr on master_join_slpqwp.target_id = notes_note_lat_lqnczr.id
  where master_join_slpqwp.source_id = navaids_points.tacan_ts.id
) as notes_note_view_xekypq on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_wbmkso.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_wbmkso.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_wbmkso.href::text AS taxiholding_href,
    shared_lightelement_view_rjgixt.element::jsonb as element,
    shared_lightelement_view_rjgixt.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_nobxxa.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_nobxxa.availability_annotation::jsonb as availability_annotation,
    notes_note_view_zsaqhz.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_wbmkso on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_wbmkso.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_utsxig.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_utsxig.annotation) as element_annotation  from master_join master_join_vxxkfi
  join shared.lightelement_view shared_lightelement_lat_utsxig on master_join_vxxkfi.target_id = shared_lightelement_lat_utsxig.id
  where master_join_vxxkfi.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_rjgixt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_xhhkzy.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_xhhkzy.annotation) as availability_annotation  from master_join master_join_stgmat
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_xhhkzy on master_join_stgmat.target_id = airport_heliport_groundlightingavailability_lat_xhhkzy.id
  where master_join_stgmat.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_nobxxa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_simpnp.*) AS annotation
  from master_join master_join_ridmcp
  join notes.note_view notes_note_lat_simpnp on master_join_ridmcp.target_id = notes_note_lat_simpnp.id
  where master_join_ridmcp.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_zsaqhz on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_dozfqr.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_dozfqr.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_dozfqr.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_mebqkg.element::jsonb as element,
    airport_heliport_markingelement_view_mebqkg.element_annotation::jsonb as element_annotation,
    notes_note_view_nswvqp.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_dozfqr on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_dozfqr.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dsbsqd.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dsbsqd.annotation) as element_annotation  from master_join master_join_bvzuxr
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_dsbsqd on master_join_bvzuxr.target_id = airport_heliport_markingelement_lat_dsbsqd.id
  where master_join_bvzuxr.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_mebqkg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fvldsh.*) AS annotation
  from master_join master_join_psjwae
  join notes.note_view notes_note_lat_fvldsh on master_join_psjwae.target_id = notes_note_lat_fvldsh.id
  where master_join_psjwae.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_nswvqp on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_myftvk.title as varchar), '(' || airport_heliport_guidanceline_pt_myftvk.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_myftvk.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_soitsj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_soitsj.longitude AS location_longitude,
    geometry_elevatedpoint_view_soitsj.latitude AS location_latitude,
    geometry_elevatedpoint_view_soitsj.elevation AS location_elevation,
    geometry_elevatedpoint_view_soitsj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_soitsj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_soitsj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_soitsj.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_ezgmwh.protectedrunway::jsonb as protectedrunway,
    notes_note_view_ghkgxv.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_myftvk on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_myftvk.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_soitsj on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_soitsj.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_wmaotb.id,
      'title', coalesce(cast(airport_heliport_runway_lat_wmaotb.title AS varchar), '(' || airport_heliport_runway_lat_wmaotb.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_wmaotb.href
  )) as protectedrunway  from master_join master_join_subyhx
  join airport_heliport.runway_pt airport_heliport_runway_lat_wmaotb on master_join_subyhx.target_id = airport_heliport_runway_lat_wmaotb.id
  where master_join_subyhx.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_ezgmwh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jhnpwn.*) AS annotation
  from master_join master_join_vesjly
  join notes.note_view notes_note_lat_jhnpwn on master_join_vesjly.target_id = notes_note_lat_jhnpwn.id
  where master_join_vesjly.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_ghkgxv on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_vdrwxi.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_vdrwxi.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_wgrkhl.title as varchar), '(' || airport_heliport_taxiway_pt_wgrkhl.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_wgrkhl.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_zmgyjg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_zmgyjg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_zmgyjg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_zmgyjg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_zmgyjg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_zmgyjg.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_xnlbwj.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_witqai.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_witqai.availability_annotation::jsonb as availability_annotation
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_vdrwxi on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_vdrwxi.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_wgrkhl on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_wgrkhl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_zmgyjg on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_zmgyjg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjzmon.*) AS annotation
  from master_join master_join_hgftvu
  join notes.note_view notes_note_lat_bjzmon on master_join_hgftvu.target_id = notes_note_lat_bjzmon.id
  where master_join_hgftvu.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_xnlbwj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_uxxwty.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_uxxwty.annotation) as availability_annotation  from master_join master_join_dsbquk
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_uxxwty on master_join_dsbquk.target_id = airport_heliport_manoeuvringareaavailability_lat_uxxwty.id
  where master_join_dsbquk.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_witqai on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_ekwjdv.title as varchar), '(' || airport_heliport_taxiway_pt_ekwjdv.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_ekwjdv.href::text AS lightedtaxiway_href,
    shared_lightelement_view_zahmjf.element::jsonb as element,
    shared_lightelement_view_zahmjf.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_oukkjj.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_oukkjj.availability_annotation::jsonb as availability_annotation,
    notes_note_view_amerhs.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_ekwjdv on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_ekwjdv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_nwlsuk.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_nwlsuk.annotation) as element_annotation  from master_join master_join_fvklpb
  join shared.lightelement_view shared_lightelement_lat_nwlsuk on master_join_fvklpb.target_id = shared_lightelement_lat_nwlsuk.id
  where master_join_fvklpb.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_zahmjf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qesuqh.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qesuqh.annotation) as availability_annotation  from master_join master_join_ytlavx
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qesuqh on master_join_ytlavx.target_id = airport_heliport_groundlightingavailability_lat_qesuqh.id
  where master_join_ytlavx.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_oukkjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eaanwi.*) AS annotation
  from master_join master_join_eiabks
  join notes.note_view notes_note_lat_eaanwi on master_join_eiabks.target_id = notes_note_lat_eaanwi.id
  where master_join_eiabks.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_amerhs on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_fhtoat.title as varchar), '(' || airport_heliport_taxiway_pt_fhtoat.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_fhtoat.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_oixxkk.title as varchar), '(' || airport_heliport_taxiwayelement_pt_oixxkk.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_oixxkk.href::text AS markedelement_href,
    airport_heliport_markingelement_view_ugyere.element::jsonb as element,
    airport_heliport_markingelement_view_ugyere.element_annotation::jsonb as element_annotation,
    notes_note_view_jicuhq.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_fhtoat on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_fhtoat.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_oixxkk on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_oixxkk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_eekoxf.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_eekoxf.annotation) as element_annotation  from master_join master_join_ktlinx
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_eekoxf on master_join_ktlinx.target_id = airport_heliport_markingelement_lat_eekoxf.id
  where master_join_ktlinx.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_ugyere on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntflnf.*) AS annotation
  from master_join master_join_wmzaqz
  join notes.note_view notes_note_lat_ntflnf on master_join_wmzaqz.target_id = notes_note_lat_ntflnf.id
  where master_join_wmzaqz.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_jicuhq on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_abqubw.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_abqubw.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_mfzpgs.title as varchar), '(' || airport_heliport_airportheliport_pt_mfzpgs.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mfzpgs.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_yubecw.contaminant::jsonb as contaminant,
    airport_heliport_taxiwaycontamination_view_yubecw.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_cjtsya.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_jbfpcc.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_jbfpcc.availability_annotation::jsonb as availability_annotation
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_abqubw on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_abqubw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mfzpgs on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mfzpgs.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_tapeky.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_tapeky.annotation) as contaminant_annotation  from master_join master_join_txukdy
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_tapeky on master_join_txukdy.target_id = airport_heliport_taxiwaycontamination_lat_tapeky.id
  where master_join_txukdy.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_yubecw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yatelw.*) AS annotation
  from master_join master_join_fbyjmb
  join notes.note_view notes_note_lat_yatelw on master_join_fbyjmb.target_id = notes_note_lat_yatelw.id
  where master_join_fbyjmb.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_cjtsya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rxrfkt.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rxrfkt.annotation) as availability_annotation  from master_join master_join_molbcp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rxrfkt on master_join_molbcp.target_id = airport_heliport_manoeuvringareaavailability_lat_rxrfkt.id
  where master_join_molbcp.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_jbfpcc on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaType
-- ['procedure.terminalarrivalareasector_view', 'geometry.point_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_pfcerb.title as varchar), '(' || navaids_points_designatedpoint_pt_pfcerb.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_pfcerb.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_xxyupo.title as varchar), '(' || navaids_points_designatedpoint_pt_xxyupo.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_xxyupo.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_waouri.title as varchar), '(' || navaids_points_navaid_pt_waouri.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_waouri.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_uskwtg.title as varchar), '(' || navaids_points_navaid_pt_uskwtg.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_uskwtg.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_amheru.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_amheru.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_amheru.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_irrrww.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_irrrww.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_irrrww.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_apbumu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_apbumu.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_apbumu.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_yjyvzc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_yjyvzc.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_yjyvzc.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gygxve.title as varchar), '(' || airport_heliport_airportheliport_pt_gygxve.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_gygxve.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pelnxc.title as varchar), '(' || airport_heliport_airportheliport_pt_pelnxc.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_pelnxc.href::text AS iafairportreferencepoint_href,
    geometry_point_view_kjdtjx.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_kjdtjx.longitude AS ifposition_longitude,
    geometry_point_view_kjdtjx.latitude AS ifposition_latitude,
    geometry_point_view_kjdtjx.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_njitvx.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_njitvx.longitude AS iafposition_longitude,
    geometry_point_view_njitvx.latitude AS iafposition_latitude,
    geometry_point_view_njitvx.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_gicrek.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_gicrek.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_arcvaf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_arcvaf.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_arcvaf.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_omfsah.sector::jsonb as sector,
    procedure_terminalarrivalareasector_view_omfsah.sector_annotation::jsonb as sector_annotation,
    notes_note_view_qbrpxl.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pfcerb on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pfcerb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_waouri on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_waouri.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_amheru on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_amheru.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_apbumu on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_apbumu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gygxve on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_gygxve.id
left join geometry.point_view geometry_point_view_kjdtjx on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_kjdtjx.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xxyupo on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xxyupo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uskwtg on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_uskwtg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_irrrww on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_irrrww.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_yjyvzc on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_yjyvzc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pelnxc on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_pelnxc.id
left join geometry.point_view geometry_point_view_njitvx on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_njitvx.id
left join geometry.surface_view geometry_surface_view_gicrek on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_gicrek.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_arcvaf on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_arcvaf.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_jiimur.*) as sector,
      jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_jiimur.annotation) as sector_annotation  from master_join master_join_bhanmf
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_jiimur on master_join_bhanmf.target_id = procedure_terminalarrivalareasector_lat_jiimur.id
  where master_join_bhanmf.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_omfsah on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fcvuin.*) AS annotation
  from master_join master_join_vqsuqv
  join notes.note_view notes_note_lat_fcvuin on master_join_vqsuqv.target_id = notes_note_lat_fcvuin.id
  where master_join_vqsuqv.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_qbrpxl on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vtozxa.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vtozxa.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_vtozxa.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_loxaqk.element::jsonb as element,
    shared_lightelement_view_loxaqk.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_svpcoe.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_svpcoe.availability_annotation::jsonb as availability_annotation,
    notes_note_view_ieikvu.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vtozxa on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_vtozxa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_nvcray.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_nvcray.annotation) as element_annotation  from master_join master_join_muqaru
  join shared.lightelement_view shared_lightelement_lat_nvcray on master_join_muqaru.target_id = shared_lightelement_lat_nvcray.id
  where master_join_muqaru.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_loxaqk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_kwbgyt.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_kwbgyt.annotation) as availability_annotation  from master_join master_join_czycfq
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_kwbgyt on master_join_czycfq.target_id = airport_heliport_groundlightingavailability_lat_kwbgyt.id
  where master_join_czycfq.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_svpcoe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfcjgs.*) AS annotation
  from master_join master_join_pnlcdi
  join notes.note_view notes_note_lat_nfcjgs on master_join_pnlcdi.target_id = notes_note_lat_nfcjgs.id
  where master_join_pnlcdi.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_ieikvu on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fowgze.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fowgze.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_fowgze.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_kglgyj.element::jsonb as element,
    airport_heliport_markingelement_view_kglgyj.element_annotation::jsonb as element_annotation,
    notes_note_view_uosmfn.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fowgze on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_fowgze.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_bdobdr.*) as element,
      jsonb_agg(DISTINCT airport_heliport_markingelement_lat_bdobdr.annotation) as element_annotation  from master_join master_join_ealoww
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_bdobdr on master_join_ealoww.target_id = airport_heliport_markingelement_lat_bdobdr.id
  where master_join_ealoww.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_kglgyj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_omkkon.*) AS annotation
  from master_join master_join_iswxam
  join notes.note_view notes_note_lat_omkkon on master_join_iswxam.target_id = notes_note_lat_omkkon.id
  where master_join_iswxam.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_uosmfn on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qzrcjd.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_qzrcjd.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_xytawk.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xytawk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xytawk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xytawk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xytawk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xytawk.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sbeolp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sbeolp.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_sbeolp.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_fidjtb.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qzrcjd on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qzrcjd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xytawk on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_xytawk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sbeolp on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_sbeolp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tbhpwh.*) AS annotation
  from master_join master_join_bjutlg
  join notes.note_view notes_note_lat_tbhpwh on master_join_bjutlg.target_id = notes_note_lat_tbhpwh.id
  where master_join_bjutlg.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_fidjtb on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffType
-- ['notes.note_view', 'airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_nattho.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_nattho.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_nattho.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_nattho.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_nattho.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_nattho.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_nattho.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_nattho.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_yqqxee.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_yqqxee.elevation AS extent_elevation,
    geometry_elevatedsurface_view_yqqxee.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_yqqxee.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_yqqxee.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_yqqxee.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ccvzbg.*)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ccvzbg.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_osoliy.title as varchar), '(' || airport_heliport_airportheliport_pt_osoliy.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_osoliy.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_jiuhne.title as varchar), '(' || airport_heliport_runway_pt_jiuhne.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_jiuhne.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_nslqbq.contaminant::jsonb as contaminant,
    airport_heliport_touchdownliftoffcontamination_view_nslqbq.contaminant_annotation::jsonb as contaminant_annotation,
    notes_note_view_xocpnh.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_nrozkc.availability::jsonb as availability,
    airport_heliport_manoeuvringareaavailability_view_nrozkc.availability_annotation::jsonb as availability_annotation
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nattho on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_nattho.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yqqxee on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_yqqxee.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ccvzbg on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ccvzbg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_osoliy on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_osoliy.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_jiuhne on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_jiuhne.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_qtlhei.*) as contaminant,
      jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_qtlhei.annotation) as contaminant_annotation  from master_join master_join_bpbosi
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_qtlhei on master_join_bpbosi.target_id = airport_heliport_touchdownliftoffcontamination_lat_qtlhei.id
  where master_join_bpbosi.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_nslqbq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_txnzag.*) AS annotation
  from master_join master_join_dustov
  join notes.note_view notes_note_lat_txnzag on master_join_dustov.target_id = notes_note_lat_txnzag.id
  where master_join_dustov.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_xocpnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_iposgs.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_iposgs.annotation) as availability_annotation  from master_join master_join_wjtyhg
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_iposgs on master_join_wjtyhg.target_id = airport_heliport_manoeuvringareaavailability_lat_iposgs.id
  where master_join_wjtyhg.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_nrozkc on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.unitdependency_view', 'organisation.unitavailability_view', 'geometry.elevatedpoint_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_ajeehr.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_ajeehr.longitude AS position_longitude,
    geometry_elevatedpoint_view_ajeehr.latitude AS position_latitude,
    geometry_elevatedpoint_view_ajeehr.elevation AS position_elevation,
    geometry_elevatedpoint_view_ajeehr.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ajeehr.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ajeehr.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ajeehr.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_dnkrml.title as varchar), '(' || airport_heliport_airportheliport_pt_dnkrml.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_dnkrml.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_qddmcc.title as varchar), '(' || organisation_organisationauthority_pt_qddmcc.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_qddmcc.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_dguwae.relatedunit::jsonb as relatedunit,
    organisation_unitdependency_view_dguwae.relatedunit_annotation::jsonb as relatedunit_annotation,
    organisation_unitavailability_view_htodpz.availability::jsonb as availability,
    organisation_unitavailability_view_htodpz.availability_annotation::jsonb as availability_annotation,
    notes_note_view_zcmyte.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ajeehr on organisation.unit_ts.position_id = geometry_elevatedpoint_view_ajeehr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dnkrml on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_dnkrml.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_qddmcc on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_qddmcc.id
left join lateral(
  select
  from master_join master_join_rulnzs
  join shared.contactinformation_view shared_contactinformation_lat_hyliew on master_join_rulnzs.target_id = shared_contactinformation_lat_hyliew.id
  where master_join_rulnzs.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_fgndmb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_jwszya.*) as relatedunit,
      jsonb_agg(DISTINCT organisation_unitdependency_lat_jwszya.annotation) as relatedunit_annotation  from master_join master_join_oenyny
  join organisation.unitdependency_view organisation_unitdependency_lat_jwszya on master_join_oenyny.target_id = organisation_unitdependency_lat_jwszya.id
  where master_join_oenyny.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_dguwae on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_yqacts.*) as availability,
      jsonb_agg(DISTINCT organisation_unitavailability_lat_yqacts.annotation) as availability_annotation  from master_join master_join_kqkxct
  join organisation.unitavailability_view organisation_unitavailability_lat_yqacts on master_join_kqkxct.target_id = organisation_unitavailability_lat_yqacts.id
  where master_join_kqkxct.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_htodpz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_djardr.*) AS annotation
  from master_join master_join_aztemn
  join notes.note_view notes_note_lat_djardr on master_join_aztemn.target_id = notes_note_lat_djardr.id
  where master_join_aztemn.source_id = organisation.unit_ts.id
) as notes_note_view_zcmyte on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_bsccse.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ruyumu.*) AS annotation
  from master_join master_join_jywmls
  join notes.note_view notes_note_lat_ruyumu on master_join_jywmls.target_id = notes_note_lat_ruyumu.id
  where master_join_jywmls.source_id = holding.unplannedholding_ts.id
) as notes_note_view_bsccse on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureType
-- ['obstacles.verticalstructurepart_view', 'obstacles.verticalstructurelightingstatus_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_hixodp.title as varchar), '(' || navaids_points_markerbeacon_pt_hixodp.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_hixodp.href::text AS marker_href,
    obstacles_verticalstructurepart_view_hxljhs.part::jsonb as part,
    obstacles_verticalstructurepart_view_hxljhs.part_annotation::jsonb as part_annotation,
    service_passengerservice_pt_nqezee.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_pqflzg.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_ykkgue.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_byvqng.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_jprskc.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_fqhokk.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_kzfzgo.supportedservice::jsonb as supportedservice,
    notes_note_view_upwgzw.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_cjnegr.lightingavailability::jsonb as lightingavailability,
    obstacles_verticalstructurelightingstatus_view_cjnegr.lightingavailability_annotation::jsonb as lightingavailability_annotation
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_hixodp on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_hixodp.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_wctgcv.*) as part,
      jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_wctgcv.annotation) as part_annotation  from master_join master_join_unelua
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_wctgcv on master_join_unelua.target_id = obstacles_verticalstructurepart_lat_wctgcv.id
  where master_join_unelua.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_hxljhs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_xgyava.id,
      'title', coalesce(cast(service_passengerservice_lat_xgyava.title AS varchar), '(' || service_passengerservice_lat_xgyava.nilreason[1] || ')'),
      'href', service_passengerservice_lat_xgyava.href
  )) as hostedpassengerservice  from master_join master_join_kaobkc
  join service.passengerservice_pt service_passengerservice_lat_xgyava on master_join_kaobkc.target_id = service_passengerservice_lat_xgyava.id
  where master_join_kaobkc.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_nqezee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_idrpim.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_idrpim.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_idrpim.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_idrpim.href
  )) as supportedgroundlight  from master_join master_join_bxvsrx
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_idrpim on master_join_bxvsrx.target_id = airport_heliport_groundlightsystem_lat_idrpim.id
  where master_join_bxvsrx.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_pqflzg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_exetdt.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_exetdt.title AS varchar), '(' || navaids_points_navaidequipment_lat_exetdt.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_exetdt.href
  )) as hostednavaidequipment  from master_join master_join_hfbwui
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_exetdt on master_join_hfbwui.target_id = navaids_points_navaidequipment_lat_exetdt.id
  where master_join_hfbwui.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_ykkgue on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_vhgycl.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_vhgycl.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_vhgycl.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_vhgycl.href
  )) as hostedspecialnavstation  from master_join master_join_xyuxxl
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_vhgycl on master_join_xyuxxl.target_id = navaids_points_specialnavigationstation_lat_vhgycl.id
  where master_join_xyuxxl.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_byvqng on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_yhrdus.id,
      'title', coalesce(cast(organisation_unit_lat_yhrdus.title AS varchar), '(' || organisation_unit_lat_yhrdus.nilreason[1] || ')'),
      'href', organisation_unit_lat_yhrdus.href
  )) as hostedunit  from master_join master_join_nkbsts
  join organisation.unit_pt organisation_unit_lat_yhrdus on master_join_nkbsts.target_id = organisation_unit_lat_yhrdus.id
  where master_join_nkbsts.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_jprskc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_cpdyji.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_cpdyji.title AS varchar), '(' || organisation_organisationauthority_lat_cpdyji.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_cpdyji.href
  )) as hostedorganisation  from master_join master_join_zsujra
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_cpdyji on master_join_zsujra.target_id = organisation_organisationauthority_lat_cpdyji.id
  where master_join_zsujra.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_fqhokk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_yymfqu.id,
      'title', coalesce(cast(service_service_lat_yymfqu.title AS varchar), '(' || service_service_lat_yymfqu.nilreason[1] || ')'),
      'href', service_service_lat_yymfqu.href
  )) as supportedservice  from master_join master_join_xfnaaq
  join service.service_pt service_service_lat_yymfqu on master_join_xfnaaq.target_id = service_service_lat_yymfqu.id
  where master_join_xfnaaq.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_kzfzgo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kykjms.*) AS annotation
  from master_join master_join_uqszto
  join notes.note_view notes_note_lat_kykjms on master_join_uqszto.target_id = notes_note_lat_kykjms.id
  where master_join_uqszto.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_upwgzw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_fopbmo.*) as lightingavailability,
      jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_fopbmo.annotation) as lightingavailability_annotation  from master_join master_join_hruvvn
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_fopbmo on master_join_hruvvn.target_id = obstacles_verticalstructurelightingstatus_lat_fopbmo.id
  where master_join_hruvvn.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_cjnegr on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_ywdmlz.title as varchar), '(' || airport_heliport_runwaydirection_pt_ywdmlz.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_ywdmlz.href::text AS runwaydirection_href,
    shared_lightelement_view_ugzcsc.element::jsonb as element,
    shared_lightelement_view_ugzcsc.element_annotation::jsonb as element_annotation,
    airport_heliport_groundlightingavailability_view_rwxreo.availability::jsonb as availability,
    airport_heliport_groundlightingavailability_view_rwxreo.availability_annotation::jsonb as availability_annotation,
    notes_note_view_hgujqq.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ywdmlz on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_ywdmlz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vfcdhq.*) as element,
      jsonb_agg(DISTINCT shared_lightelement_lat_vfcdhq.annotation) as element_annotation  from master_join master_join_rxtkuq
  join shared.lightelement_view shared_lightelement_lat_vfcdhq on master_join_rxtkuq.target_id = shared_lightelement_lat_vfcdhq.id
  where master_join_rxtkuq.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_ugzcsc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_yeldjw.*) as availability,
      jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_yeldjw.annotation) as availability_annotation  from master_join master_join_ajgbiv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_yeldjw on master_join_ajgbiv.target_id = airport_heliport_groundlightingavailability_lat_yeldjw.id
  where master_join_ajgbiv.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_rwxreo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vdfyau.*) AS annotation
  from master_join master_join_ovsjsh
  join notes.note_view notes_note_lat_vdfyau on master_join_ovsjsh.target_id = notes_note_lat_vdfyau.id
  where master_join_ovsjsh.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_hgujqq on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORType
-- ['notes.note_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ydqgtw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ydqgtw.longitude AS location_longitude,
    geometry_elevatedpoint_view_ydqgtw.latitude AS location_latitude,
    geometry_elevatedpoint_view_ydqgtw.elevation AS location_elevation,
    geometry_elevatedpoint_view_ydqgtw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ydqgtw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ydqgtw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ydqgtw.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ybgvgm.authority::jsonb as authority,
    navaids_points_authorityfornavaidequipment_view_ybgvgm.authority_annotation::jsonb as authority_annotation,
    navaids_points_navaidequipmentmonitoring_view_inmjzk.monitoring::jsonb as monitoring,
    navaids_points_navaidequipmentmonitoring_view_inmjzk.monitoring_annotation::jsonb as monitoring_annotation,
    navaids_points_navaidoperationalstatus_view_qthkhw.availability::jsonb as availability,
    navaids_points_navaidoperationalstatus_view_qthkhw.availability_annotation::jsonb as availability_annotation,
    notes_note_view_yajcsv.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ydqgtw on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_ydqgtw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zohubu.*) as authority,
      jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zohubu.annotation) as authority_annotation  from master_join master_join_schkkv
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zohubu on master_join_schkkv.target_id = navaids_points_authorityfornavaidequipment_lat_zohubu.id
  where master_join_schkkv.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_ybgvgm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mvbohj.*) as monitoring,
      jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mvbohj.annotation) as monitoring_annotation  from master_join master_join_xzvuig
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mvbohj on master_join_xzvuig.target_id = navaids_points_navaidequipmentmonitoring_lat_mvbohj.id
  where master_join_xzvuig.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_inmjzk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_sxjoxb.*) as availability,
      jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_sxjoxb.annotation) as availability_annotation  from master_join master_join_fmfglu
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_sxjoxb on master_join_fmfglu.target_id = navaids_points_navaidoperationalstatus_lat_sxjoxb.id
  where master_join_fmfglu.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_qthkhw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_igqzud.*) AS annotation
  from master_join master_join_sapmny
  join notes.note_view notes_note_lat_igqzud on master_join_sapmny.target_id = notes_note_lat_igqzud.id
  where master_join_sapmny.source_id = navaids_points.vor_ts.id
) as notes_note_view_yajcsv on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaType
-- ['airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_ocwzpb.title as varchar), '(' || airport_heliport_airportheliport_pt_ocwzpb.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ocwzpb.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_vkgymg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vkgymg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vkgymg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vkgymg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vkgymg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vkgymg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_mkcntr.activation::jsonb as activation,
    airport_heliport_workareaactivity_view_mkcntr.activation_annotation::jsonb as activation_annotation,
    notes_note_view_xhcqsb.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ocwzpb on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ocwzpb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vkgymg on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_vkgymg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_kguwuu.*) as activation,
      jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_kguwuu.annotation) as activation_annotation  from master_join master_join_lgcqzw
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_kguwuu on master_join_lgcqzw.target_id = airport_heliport_workareaactivity_lat_kguwuu.id
  where master_join_lgcqzw.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_mkcntr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oiwftn.*) AS annotation
  from master_join master_join_gimjvu
  join notes.note_view notes_note_lat_oiwftn on master_join_gimjvu.target_id = notes_note_lat_oiwftn.id
  where master_join_gimjvu.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_xhcqsb on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
