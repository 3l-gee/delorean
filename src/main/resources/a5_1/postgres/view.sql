-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_pwoaeb.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwepqb.*) AS annotation
  from master_join master_join_avkpkg
  join notes.note_view notes_note_lat_pwepqb on master_join_avkpkg.target_id = notes_note_lat_pwepqb.id
  where master_join_avkpkg.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_pwoaeb on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_yccjph.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_yqzyqw.layer::jsonb as layer,
    notes_note_view_uvhrij.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_qeoqea.id) as criticalridge
  from master_join master_join_hvkqab
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_qeoqea on master_join_hvkqab.target_id = airport_heliport_ridge_lat_qeoqea.id
  where master_join_hvkqab.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_yccjph on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_vgfibq.id) as layer
  from master_join master_join_zxmexz
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_vgfibq on master_join_zxmexz.target_id = airport_heliport_surfacecontaminationlayer_lat_vgfibq.id
  where master_join_zxmexz.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_yqzyqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gefqvj.*) AS annotation
  from master_join master_join_yjeote
  join notes.note_view notes_note_lat_gefqvj on master_join_yjeote.target_id = notes_note_lat_gefqvj.id
  where master_join_yjeote.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_uvhrij on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_jpduqn.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_rpeulk.layer::jsonb as layer,
    notes_note_view_penwuk.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_pbrzun.id) as criticalridge
  from master_join master_join_teiknp
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_pbrzun on master_join_teiknp.target_id = airport_heliport_ridge_lat_pbrzun.id
  where master_join_teiknp.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_jpduqn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_rncbcr.id) as layer
  from master_join master_join_hlabeb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_rncbcr on master_join_hlabeb.target_id = airport_heliport_surfacecontaminationlayer_lat_rncbcr.id
  where master_join_hlabeb.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_rpeulk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sdrytb.*) AS annotation
  from master_join master_join_txrujf
  join notes.note_view notes_note_lat_sdrytb on master_join_txrujf.target_id = notes_note_lat_sdrytb.id
  where master_join_txrujf.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_penwuk on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_qtxwuv.id)::jsonb AS theairspacevolume,
    notes_note_view_lfqzkr.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_qtxwuv on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_qtxwuv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrncww.*) AS annotation
  from master_join master_join_mscpdn
  join notes.note_view notes_note_lat_vrncww on master_join_mscpdn.target_id = notes_note_lat_vrncww.id
  where master_join_mscpdn.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_lfqzkr on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_vpskvi.title as varchar), '(' || shared_standardlevelcolumn_pt_vpskvi.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_vpskvi.href::text AS discretelevelseries_href,
    notes_note_view_foldyb.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_vpskvi on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_vpskvi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_befenq.*) AS annotation
  from master_join master_join_xtajxh
  join notes.note_view notes_note_lat_befenq on master_join_xtajxh.target_id = notes_note_lat_befenq.id
  where master_join_xtajxh.source_id = shared.airspacelayer.id
) as notes_note_view_foldyb on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_cnncxt.title as varchar), '(' || airspace_airspace_pt_cnncxt.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_cnncxt.href::text AS theairspace_href,
    notes_note_view_nehiub.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_cnncxt on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_cnncxt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mnukul.*) AS annotation
  from master_join master_join_bwqjgl
  join notes.note_view notes_note_lat_mnukul on master_join_bwqjgl.target_id = notes_note_lat_mnukul.id
  where master_join_bwqjgl.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_nehiub on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_oruaxp.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srgrjh.*) AS annotation
  from master_join master_join_tvzppq
  join notes.note_view notes_note_lat_srgrjh on master_join_tvzppq.target_id = notes_note_lat_srgrjh.id
  where master_join_tvzppq.source_id = shared.altitudeadjustment.id
) as notes_note_view_oruaxp on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_sbrjjz.title as varchar), '(' || navaids_points_angleindication_pt_sbrjjz.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_sbrjjz.href::text AS theangleindication_href,
    notes_note_view_xfartf.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_sbrjjz on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_sbrjjz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ysndhx.*) AS annotation
  from master_join master_join_zwprnv
  join notes.note_view notes_note_lat_ysndhx on master_join_zwprnv.target_id = notes_note_lat_ysndhx.id
  where master_join_zwprnv.source_id = navaids_points.angleuse.id
) as notes_note_view_xfartf on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_mcgvyx.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hvcnbt.*) AS annotation
  from master_join master_join_sumbcx
  join notes.note_view notes_note_lat_hvcnbt on master_join_sumbcx.target_id = notes_note_lat_hvcnbt.id
  where master_join_sumbcx.source_id = procedure.approachaltitudetable.id
) as notes_note_view_mcgvyx on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_dmmapf.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_aakbet.title as varchar), '(' || airport_heliport_altimetersource_pt_aakbet.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_aakbet.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_dktqxj.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_gnhild.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_qfaimx.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_fpdyrx.designsurface::jsonb as designsurface,
    notes_note_view_xfjblv.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_dmmapf on procedure.approachcondition.minimumset_id = procedure_minima_pt_dmmapf.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_aakbet on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_aakbet.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_unamva.id) as circlingrestriction
  from master_join master_join_dkngye
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_unamva on master_join_dkngye.target_id = procedure_circlingrestriction_lat_unamva.id
  where master_join_dkngye.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_dktqxj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_mhtqge.id) as aircraftcategory
  from master_join master_join_kbinwm
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_mhtqge on master_join_kbinwm.target_id = shared_aircraftcharacteristic_lat_mhtqge.id
  where master_join_kbinwm.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_gnhild on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_mrexoi.id) as landingarea
  from master_join master_join_qbrfij
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_mrexoi on master_join_qbrfij.target_id = procedure_landingtakeoffareacollection_lat_mrexoi.id
  where master_join_qbrfij.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_qfaimx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_kteawj.id) as designsurface
  from master_join master_join_hdzckp
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_kteawj on master_join_hdzckp.target_id = shared_obstacleassessmentarea_lat_kteawj.id
  where master_join_hdzckp.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_fpdyrx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zmdbky.*) AS annotation
  from master_join master_join_oazgfu
  join notes.note_view notes_note_lat_zmdbky on master_join_oazgfu.target_id = notes_note_lat_zmdbky.id
  where master_join_oazgfu.source_id = procedure.approachcondition.id
) as notes_note_view_xfjblv on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_swfwie.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_javqeh.*) AS annotation
  from master_join master_join_fshuqc
  join notes.note_view notes_note_lat_javqeh on master_join_fshuqc.target_id = notes_note_lat_javqeh.id
  where master_join_fshuqc.source_id = procedure.approachdistancetable.id
) as notes_note_view_swfwie on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_lhhumk.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pcfwnb.*) AS annotation
  from master_join master_join_tllzuy
  join notes.note_view notes_note_lat_pcfwnb on master_join_tllzuy.target_id = notes_note_lat_pcfwnb.id
  where master_join_tllzuy.source_id = procedure.approachtimingtable.id
) as notes_note_view_lhhumk on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_srjqeh.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_cjqrdb.layer::jsonb as layer,
    notes_note_view_pvisyc.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_oyiebt.id) as criticalridge
  from master_join master_join_bemwwh
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_oyiebt on master_join_bemwwh.target_id = airport_heliport_ridge_lat_oyiebt.id
  where master_join_bemwwh.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_srjqeh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_mwzlwt.id) as layer
  from master_join master_join_qisbvm
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_mwzlwt on master_join_qisbvm.target_id = airport_heliport_surfacecontaminationlayer_lat_mwzlwt.id
  where master_join_qisbvm.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_cjqrdb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lppizw.*) AS annotation
  from master_join master_join_biftej
  join notes.note_view notes_note_lat_lppizw on master_join_biftej.target_id = notes_note_lat_lppizw.id
  where master_join_biftej.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_pvisyc on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_iogznb.title as varchar), '(' || organisation_organisationauthority_pt_iogznb.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_iogznb.href::text AS theorganisationauthority_href,
    notes_note_view_ofznbm.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_iogznb on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_iogznb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fcqcro.*) AS annotation
  from master_join master_join_rgxcbw
  join notes.note_view notes_note_lat_fcqcro on master_join_rgxcbw.target_id = notes_note_lat_fcqcro.id
  where master_join_rgxcbw.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_ofznbm on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ucxwex.title as varchar), '(' || organisation_organisationauthority_pt_ucxwex.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ucxwex.href::text AS theorganisationauthority_href,
    notes_note_view_aympln.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ucxwex on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_ucxwex.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsyssr.*) AS annotation
  from master_join master_join_ulvuzo
  join notes.note_view notes_note_lat_rsyssr on master_join_ulvuzo.target_id = notes_note_lat_rsyssr.id
  where master_join_ulvuzo.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_aympln on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_hfvoqt.title as varchar), '(' || organisation_organisationauthority_pt_hfvoqt.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_hfvoqt.href::text AS theorganisationauthority_href,
    notes_note_view_fnfror.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hfvoqt on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_hfvoqt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmlhqc.*) AS annotation
  from master_join master_join_xxbukm
  join notes.note_view notes_note_lat_pmlhqc on master_join_xxbukm.target_id = notes_note_lat_pmlhqc.id
  where master_join_xxbukm.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_fnfror on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_zpnxar.title as varchar), '(' || organisation_organisationauthority_pt_zpnxar.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_zpnxar.href::text AS theorganisationauthority_href,
    notes_note_view_vshrob.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zpnxar on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_zpnxar.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rasdgs.*) AS annotation
  from master_join master_join_tlsdtc
  join notes.note_view notes_note_lat_rasdgs on master_join_tlsdtc.target_id = notes_note_lat_rasdgs.id
  where master_join_tlsdtc.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_vshrob on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_sheklx.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ilnzjf.*) AS annotation
  from master_join master_join_fcxtur
  join notes.note_view notes_note_lat_ilnzjf on master_join_fcxtur.target_id = notes_note_lat_ilnzjf.id
  where master_join_fcxtur.source_id = service.callsigndetail.id
) as notes_note_view_sheklx on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_btvvuv.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wxqogb.*) AS annotation
  from master_join master_join_wrsxte
  join notes.note_view notes_note_lat_wxqogb on master_join_wrsxte.target_id = notes_note_lat_wxqogb.id
  where master_join_wrsxte.source_id = shared.circlesector.id
) as notes_note_view_btvvuv on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_fvvjyi.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dwoctu.*) AS annotation
  from master_join master_join_yyorze
  join notes.note_view notes_note_lat_dwoctu on master_join_yyorze.target_id = notes_note_lat_dwoctu.id
  where master_join_yyorze.source_id = airport_heliport.city.id
) as notes_note_view_fvvjyi on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_rbttrx.id)::jsonb AS enginetype,
    notes_note_view_mrndgo.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_rbttrx on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_rbttrx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jotafm.*) AS annotation
  from master_join master_join_sxkoau
  join notes.note_view notes_note_lat_jotafm on master_join_sxkoau.target_id = notes_note_lat_jotafm.id
  where master_join_sxkoau.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_mrndgo on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_hrileh.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tpjggv.*) AS annotation
  from master_join master_join_wozrtz
  join notes.note_view notes_note_lat_tpjggv on master_join_wozrtz.target_id = notes_note_lat_tpjggv.id
  where master_join_wozrtz.source_id = routes.directflightclass.id
) as notes_note_view_hrileh on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_rvqapc.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eftzhr.*) AS annotation
  from master_join master_join_ithmaq
  join notes.note_view notes_note_lat_eftzhr on master_join_ithmaq.target_id = notes_note_lat_eftzhr.id
  where master_join_ithmaq.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_rvqapc on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_wtkcji.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_fonfkf.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_gvfjkc.id) as adjustmentinopcol
  from master_join master_join_ypmcgt
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_gvfjkc on master_join_ypmcgt.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_gvfjkc.id
  where master_join_ypmcgt.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_wtkcji on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_slxdwp.*) AS annotation
  from master_join master_join_sekovu
  join notes.note_view notes_note_lat_slxdwp on master_join_sekovu.target_id = notes_note_lat_slxdwp.id
  where master_join_sekovu.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_fonfkf on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_zlhayt.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kccran.*) AS annotation
  from master_join master_join_uforey
  join notes.note_view notes_note_lat_kccran on master_join_uforey.target_id = notes_note_lat_kccran.id
  where master_join_uforey.source_id = public.fasdatablock.id
) as notes_note_view_zlhayt on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_vqvkzy.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_fizvqf.distance::jsonb as distance,
    procedure_approachtimingtable_pt_xljzse.timing::jsonb as timing,
    notes_note_view_iwsmvd.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_mnxgbe.id) as altitude
  from master_join master_join_nevfxx
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_mnxgbe on master_join_nevfxx.target_id = procedure_approachaltitudetable_lat_mnxgbe.id
  where master_join_nevfxx.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_vqvkzy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_afmjha.id) as distance
  from master_join master_join_flgvjc
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_afmjha on master_join_flgvjc.target_id = procedure_approachdistancetable_lat_afmjha.id
  where master_join_flgvjc.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_fizvqf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_wcnaxt.id) as timing
  from master_join master_join_raxvne
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_wcnaxt on master_join_raxvne.target_id = procedure_approachtimingtable_lat_wcnaxt.id
  where master_join_raxvne.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_xljzse on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_axyaeb.*) AS annotation
  from master_join master_join_htxxco
  join notes.note_view notes_note_lat_axyaeb on master_join_htxxco.target_id = notes_note_lat_axyaeb.id
  where master_join_htxxco.source_id = procedure.finalprofile.id
) as notes_note_view_iwsmvd on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_ryigps.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yclcxh.*) AS annotation
  from master_join master_join_rpdrbp
  join notes.note_view notes_note_lat_yclcxh on master_join_rpdrbp.target_id = notes_note_lat_yclcxh.id
  where master_join_rpdrbp.source_id = shared.flightcharacteristic.id
) as notes_note_view_ryigps on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_bvoeby.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pfnguj.*) AS annotation
  from master_join master_join_oyrueb
  join notes.note_view notes_note_lat_pfnguj on master_join_oyrueb.target_id = notes_note_lat_pfnguj.id
  where master_join_oyrueb.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_bvoeby on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_eslgau.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nubmtf.*) AS annotation
  from master_join master_join_nbnfna
  join notes.note_view notes_note_lat_nubmtf on master_join_nbnfna.target_id = notes_note_lat_nubmtf.id
  where master_join_nbnfna.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_eslgau on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_yxsbht.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fewpok.*) AS annotation
  from master_join master_join_qagnje
  join notes.note_view notes_note_lat_fewpok on master_join_qagnje.target_id = notes_note_lat_fewpok.id
  where master_join_qagnje.source_id = service.fuel.id
) as notes_note_view_yxsbht on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_zeapfv.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dqpwcj.*) AS annotation
  from master_join master_join_nglylw
  join notes.note_view notes_note_lat_dqpwcj on master_join_nglylw.target_id = notes_note_lat_dqpwcj.id
  where master_join_nglylw.source_id = holding.holdingpatterndistance.id
) as notes_note_view_zeapfv on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_cprmjv.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nhrxiv.*) AS annotation
  from master_join master_join_olaztn
  join notes.note_view notes_note_lat_nhrxiv on master_join_olaztn.target_id = notes_note_lat_nhrxiv.id
  where master_join_olaztn.source_id = holding.holdingpatternduration.id
) as notes_note_view_cprmjv on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_coifbm.title as varchar), '(' || holding_holdingpattern_pt_coifbm.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_coifbm.href::text AS theholdingpattern_href,
    notes_note_view_ieckqh.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_coifbm on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_coifbm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jypgsi.*) AS annotation
  from master_join master_join_ooldxo
  join notes.note_view notes_note_lat_jypgsi on master_join_ooldxo.target_id = notes_note_lat_jypgsi.id
  where master_join_ooldxo.source_id = procedure.holdinguse.id
) as notes_note_view_ieckqh on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_svtxfi.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_vywpza.tlof::jsonb as tlof,
    notes_note_view_mvnacl.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_obcior.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_obcior.title AS varchar), '(' || airport_heliport_runwaydirection_lat_obcior.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_obcior.href
  )) as runway  from master_join master_join_qmznux
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_obcior on master_join_qmznux.target_id = airport_heliport_runwaydirection_lat_obcior.id
  where master_join_qmznux.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_svtxfi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_yggcop.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_yggcop.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_yggcop.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_yggcop.href
  )) as tlof  from master_join master_join_fglxux
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_yggcop on master_join_fglxux.target_id = airport_heliport_touchdownliftoff_lat_yggcop.id
  where master_join_fglxux.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_vywpza on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bwubem.*) AS annotation
  from master_join master_join_vaftiy
  join notes.note_view notes_note_lat_bwubem on master_join_vaftiy.target_id = notes_note_lat_bwubem.id
  where master_join_vaftiy.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_mvnacl on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_ahdwqh.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etaztj.*) AS annotation
  from master_join master_join_ipxygn
  join notes.note_view notes_note_lat_etaztj on master_join_ipxygn.target_id = notes_note_lat_etaztj.id
  where master_join_ipxygn.source_id = airport_heliport.lightactivation.id
) as notes_note_view_ahdwqh on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_wjuity.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldgtov.*) AS annotation
  from master_join master_join_fwztqr
  join notes.note_view notes_note_lat_ldgtov on master_join_fwztqr.target_id = notes_note_lat_ldgtov.id
  where master_join_fwztqr.source_id = shared.meteorology.id
) as notes_note_view_wjuity on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_apmfhf.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_fivsxy.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_pbqejr.id) as adjustmentinop
  from master_join master_join_sdhguh
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_pbqejr on master_join_sdhguh.target_id = procedure_equipmentunavailableadjustment_lat_pbqejr.id
  where master_join_sdhguh.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_apmfhf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rumipd.*) AS annotation
  from master_join master_join_idaewo
  join notes.note_view notes_note_lat_rumipd on master_join_idaewo.target_id = notes_note_lat_rumipd.id
  where master_join_idaewo.source_id = procedure.minima.id
) as notes_note_view_fivsxy on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_ngfnjx.altimeter::jsonb as altimeter,
    notes_note_view_ctjidt.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_zvtnbt.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_zvtnbt.title AS varchar), '(' || airport_heliport_altimetersource_lat_zvtnbt.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_zvtnbt.href
  )) as altimeter  from master_join master_join_swzqsn
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_zvtnbt on master_join_swzqsn.target_id = airport_heliport_altimetersource_lat_zvtnbt.id
  where master_join_swzqsn.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_ngfnjx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_duigkl.*) AS annotation
  from master_join master_join_tndsoe
  join notes.note_view notes_note_lat_duigkl on master_join_tndsoe.target_id = notes_note_lat_duigkl.id
  where master_join_tndsoe.source_id = procedure.missedapproachgroup.id
) as notes_note_view_ctjidt on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    coalesce(cast(navaids_points_navaidequipment_pt_ryfoux.title as varchar), '(' || navaids_points_navaidequipment_pt_ryfoux.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_ryfoux.href::text AS thenavaidequipment_href,
    notes_note_view_ybtihw.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_ryfoux on navaids_points.navaidcomponent.thenavaidequipment_id = navaids_points_navaidequipment_pt_ryfoux.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tkqwup.*) AS annotation
  from master_join master_join_vhendx
  join notes.note_view notes_note_lat_tkqwup on master_join_vhendx.target_id = notes_note_lat_tkqwup.id
  where master_join_vhendx.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_ybtihw on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    coalesce(cast(navaids_points_navaidequipment_pt_vhjmko.title as varchar), '(' || navaids_points_navaidequipment_pt_vhjmko.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_vhjmko.href::text AS thenavaidequipment_href,
    notes_note_view_fqaaqt.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_vhjmko on airport_heliport.navaidequipmentdistance.thenavaidequipment_id = navaids_points_navaidequipment_pt_vhjmko.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sispkh.*) AS annotation
  from master_join master_join_tmkbxx
  join notes.note_view notes_note_lat_sispkh on master_join_tmkbxx.target_id = notes_note_lat_sispkh.id
  where master_join_tmkbxx.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_fqaaqt on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_ihokkw.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kurjoe.*) AS annotation
  from master_join master_join_bblfxl
  join notes.note_view notes_note_lat_kurjoe on master_join_bblfxl.target_id = notes_note_lat_kurjoe.id
  where master_join_bblfxl.source_id = service.nitrogen.id
) as notes_note_view_ihokkw on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_sksfwo.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dyeyrr.*) AS annotation
  from master_join master_join_wymhtw
  join notes.note_view notes_note_lat_dyeyrr on master_join_wymhtw.target_id = notes_note_lat_dyeyrr.id
  where master_join_wymhtw.source_id = shared.obstacleplacement.id
) as notes_note_view_sksfwo on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_zpcsck.title as varchar), '(' || obstacles_verticalstructure_pt_zpcsck.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_zpcsck.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_rmvdtn.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_ahrsft.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_ctkgse.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_zpcsck on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_zpcsck.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_yovbgi.id) as adjustment
  from master_join master_join_vnljeg
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_yovbgi on master_join_vnljeg.target_id = shared_altitudeadjustment_lat_yovbgi.id
  where master_join_vnljeg.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_rmvdtn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_wqtovd.id) as obstacleplacement
  from master_join master_join_nybjbn
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_wqtovd on master_join_nybjbn.target_id = shared_obstacleplacement_lat_wqtovd.id
  where master_join_nybjbn.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_ahrsft on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nyineo.*) AS annotation
  from master_join master_join_ypksrc
  join notes.note_view notes_note_lat_nyineo on master_join_ypksrc.target_id = notes_note_lat_nyineo.id
  where master_join_ypksrc.source_id = shared.obstruction.id
) as notes_note_view_ctkgse on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_ktuxgr.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jypbou.*) AS annotation
  from master_join master_join_qoxrah
  join notes.note_view notes_note_lat_jypbou on master_join_qoxrah.target_id = notes_note_lat_jypbou.id
  where master_join_qoxrah.source_id = service.oil.id
) as notes_note_view_ktuxgr on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_zjrkak.title as varchar), '(' || organisation_organisationauthority_pt_zjrkak.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_zjrkak.href::text AS theorganisationauthority_href,
    notes_note_view_rejzou.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zjrkak on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_zjrkak.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwmyft.*) AS annotation
  from master_join master_join_jupvls
  join notes.note_view notes_note_lat_pwmyft on master_join_jupvls.target_id = notes_note_lat_pwmyft.id
  where master_join_jupvls.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_rejzou on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_jfbqtb.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nxmrhw.*) AS annotation
  from master_join master_join_whztoj
  join notes.note_view notes_note_lat_nxmrhw on master_join_whztoj.target_id = notes_note_lat_nxmrhw.id
  where master_join_whztoj.source_id = service.oxygen.id
) as notes_note_view_jfbqtb on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    coalesce(cast(procedure_segmentleg_pt_dawrtd.title as varchar), '(' || procedure_segmentleg_pt_dawrtd.nilreason[1] || ')')::text AS thesegmentleg,
    procedure_segmentleg_pt_dawrtd.href::text AS thesegmentleg_href,
    notes_note_view_yfpvhb.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_dawrtd on procedure.proceduretransitionleg.thesegmentleg_id = procedure_segmentleg_pt_dawrtd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gajhdd.*) AS annotation
  from master_join master_join_tdjbew
  join notes.note_view notes_note_lat_gajhdd on master_join_tdjbew.target_id = notes_note_lat_gajhdd.id
  where master_join_tdjbew.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_yfpvhb on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(surveillance_radarequipment_pt_mtjeik.title as varchar), '(' || surveillance_radarequipment_pt_mtjeik.nilreason[1] || ')')::text AS theradarequipment,
    surveillance_radarequipment_pt_mtjeik.href::text AS theradarequipment_href,
    notes_note_view_aozpuy.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join surveillance.radarequipment_pt surveillance_radarequipment_pt_mtjeik on surveillance.radarcomponent.theradarequipment_id = surveillance_radarequipment_pt_mtjeik.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gzokmi.*) AS annotation
  from master_join master_join_imjohq
  join notes.note_view notes_note_lat_gzokmi on master_join_imjohq.target_id = notes_note_lat_gzokmi.id
  where master_join_imjohq.source_id = surveillance.radarcomponent.id
) as notes_note_view_aozpuy on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_uydahi.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_davbrv.*) AS annotation
  from master_join master_join_qgxtsj
  join notes.note_view notes_note_lat_davbrv on master_join_qgxtsj.target_id = notes_note_lat_davbrv.id
  where master_join_qgxtsj.source_id = airport_heliport.ridge.id
) as notes_note_view_uydahi on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_knqnsi.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_qwcily.layer::jsonb as layer,
    notes_note_view_yruxqo.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_rzibga.id) as criticalridge
  from master_join master_join_shebwx
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_rzibga on master_join_shebwx.target_id = airport_heliport_ridge_lat_rzibga.id
  where master_join_shebwx.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_knqnsi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_xblrcr.id) as layer
  from master_join master_join_rtbzoi
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_xblrcr on master_join_rtbzoi.target_id = airport_heliport_surfacecontaminationlayer_lat_xblrcr.id
  where master_join_rtbzoi.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_qwcily on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vblmmh.*) AS annotation
  from master_join master_join_sufyxh
  join notes.note_view notes_note_lat_vblmmh on master_join_sufyxh.target_id = notes_note_lat_vblmmh.id
  where master_join_sufyxh.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_yruxqo on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_gygoov.declaredvalue::jsonb as declaredvalue,
    notes_note_view_uekbgp.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_zenfrs.id) as declaredvalue
  from master_join master_join_qbfsii
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_zenfrs on master_join_qbfsii.target_id = airport_heliport_runwaydeclareddistancevalue_lat_zenfrs.id
  where master_join_qbfsii.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_gygoov on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ynbhtk.*) AS annotation
  from master_join master_join_iseohq
  join notes.note_view notes_note_lat_ynbhtk on master_join_iseohq.target_id = notes_note_lat_ynbhtk.id
  where master_join_iseohq.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_uekbgp on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_scpmcr.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_zsmkvt.layer::jsonb as layer,
    notes_note_view_cupads.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_mlsbhi.id) as criticalridge
  from master_join master_join_flnasm
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_mlsbhi on master_join_flnasm.target_id = airport_heliport_ridge_lat_mlsbhi.id
  where master_join_flnasm.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_scpmcr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_gjbgna.id) as layer
  from master_join master_join_oihayc
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_gjbgna on master_join_oihayc.target_id = airport_heliport_surfacecontaminationlayer_lat_gjbgna.id
  where master_join_oihayc.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_zsmkvt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rztsjx.*) AS annotation
  from master_join master_join_aemnsm
  join notes.note_view notes_note_lat_rztsjx on master_join_aemnsm.target_id = notes_note_lat_rztsjx.id
  where master_join_aemnsm.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_cupads on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_nerfen.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ptywcy.*) AS annotation
  from master_join master_join_ibvmgt
  join notes.note_view notes_note_lat_ptywcy on master_join_ibvmgt.target_id = notes_note_lat_ptywcy.id
  where master_join_ibvmgt.source_id = procedure.sectordesign.id
) as notes_note_view_nerfen on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_hetirc.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkymwp.*) AS annotation
  from master_join master_join_osbsqt
  join notes.note_view notes_note_lat_rkymwp on master_join_osbsqt.target_id = notes_note_lat_rkymwp.id
  where master_join_osbsqt.source_id = shared.standardlevel.id
) as notes_note_view_hetirc on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_mbiuyq.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfvwxb.*) AS annotation
  from master_join master_join_fbzcgr
  join notes.note_view notes_note_lat_rfvwxb on master_join_fbzcgr.target_id = notes_note_lat_rfvwxb.id
  where master_join_fbzcgr.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_mbiuyq on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_rsljos.title as varchar), '(' || organisation_unit_pt_rsljos.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_rsljos.href::text AS theunit_href,
    notes_note_view_mhvzkx.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_rsljos on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_rsljos.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pquviu.*) AS annotation
  from master_join master_join_reqxoz
  join notes.note_view notes_note_lat_pquviu on master_join_reqxoz.target_id = notes_note_lat_pquviu.id
  where master_join_reqxoz.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_mhvzkx on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_ptskyc.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_mfxixf.layer::jsonb as layer,
    notes_note_view_atjnxa.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_myqadj.id) as criticalridge
  from master_join master_join_jubhnu
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_myqadj on master_join_jubhnu.target_id = airport_heliport_ridge_lat_myqadj.id
  where master_join_jubhnu.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_ptskyc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_mbcizt.id) as layer
  from master_join master_join_ssjmrb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_mbcizt on master_join_ssjmrb.target_id = airport_heliport_surfacecontaminationlayer_lat_mbcizt.id
  where master_join_ssjmrb.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_mfxixf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thdatq.*) AS annotation
  from master_join master_join_ihqydl
  join notes.note_view notes_note_lat_thdatq on master_join_ihqydl.target_id = notes_note_lat_thdatq.id
  where master_join_ihqydl.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_atjnxa on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_wiviwm.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_tmdohk.layer::jsonb as layer,
    notes_note_view_zgwtzs.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_pfhoin.id) as criticalridge
  from master_join master_join_lqukyx
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_pfhoin on master_join_lqukyx.target_id = airport_heliport_ridge_lat_pfhoin.id
  where master_join_lqukyx.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_wiviwm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_demzuv.id) as layer
  from master_join master_join_xlhknv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_demzuv on master_join_xlhknv.target_id = airport_heliport_surfacecontaminationlayer_lat_demzuv.id
  where master_join_xlhknv.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_tmdohk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jmcybe.*) AS annotation
  from master_join master_join_elzigb
  join notes.note_view notes_note_lat_jmcybe on master_join_elzigb.target_id = notes_note_lat_jmcybe.id
  where master_join_elzigb.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_zgwtzs on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_ohcdcy.title as varchar), '(' || organisation_unit_pt_ohcdcy.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_ohcdcy.href::text AS theunit_href,
    notes_note_view_keosrz.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_ohcdcy on organisation.unitdependency.theunit_id = organisation_unit_pt_ohcdcy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibxnow.*) AS annotation
  from master_join master_join_dfxdxq
  join notes.note_view notes_note_lat_ibxnow on master_join_dfxdxq.target_id = notes_note_lat_ibxnow.id
  where master_join_dfxdxq.source_id = organisation.unitdependency.id
) as notes_note_view_keosrz on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_kmglzb.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_kmglzb.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_subahq.point::jsonb as point,
    shared_airspacelayer_pt_oeqnex.verticalextent::jsonb as verticalextent,
    notes_note_view_wxiudp.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_kmglzb on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_kmglzb.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_vfobcn.id) as point
  from master_join master_join_jfoagg
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_vfobcn on master_join_jfoagg.target_id = aerial_refuelling_aerialrefuellingpoint_lat_vfobcn.id
  where master_join_jfoagg.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_subahq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_bnnljf.id) as verticalextent
  from master_join master_join_tpiaya
  join shared.airspacelayer_pt shared_airspacelayer_lat_bnnljf on master_join_tpiaya.target_id = shared_airspacelayer_lat_bnnljf.id
  where master_join_tpiaya.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_oeqnex on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_skngxu.*) AS annotation
  from master_join master_join_tfdlci
  join notes.note_view notes_note_lat_skngxu on master_join_tfdlci.target_id = notes_note_lat_skngxu.id
  where master_join_tfdlci.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_wxiudp on TRUE;
-- ProcedureTransitionPropertyType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_adequo.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_ottzbq.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ottzbq.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_uylnco.transitionleg::jsonb as transitionleg,
    notes_note_view_vpikzx.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_adequo on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_adequo.id
left join geometry.curve_view geometry_curve_view_ottzbq on procedure.proceduretransition.trajectory_id = geometry_curve_view_ottzbq.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_lzalzm.id) as transitionleg
  from master_join master_join_zylxin
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_lzalzm on master_join_zylxin.target_id = procedure_proceduretransitionleg_lat_lzalzm.id
  where master_join_zylxin.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_uylnco on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vusiha.*) AS annotation
  from master_join master_join_excxdp
  join notes.note_view notes_note_lat_vusiha on master_join_excxdp.target_id = notes_note_lat_vusiha.id
  where master_join_excxdp.source_id = procedure.proceduretransition.id
) as notes_note_view_vpikzx on TRUE;
-- LightElementPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_pprydf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pprydf.longitude AS location_longitude,
    geometry_elevatedpoint_view_pprydf.latitude AS location_latitude,
    geometry_elevatedpoint_view_pprydf.elevation AS location_elevation,
    geometry_elevatedpoint_view_pprydf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pprydf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pprydf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pprydf.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ithgry.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_jydynv.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pprydf on shared.lightelement.location_id = geometry_elevatedpoint_view_pprydf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkhyqh.*) AS annotation
  from master_join master_join_aqlmmk
  join notes.note_view notes_note_lat_lkhyqh on master_join_aqlmmk.target_id = notes_note_lat_lkhyqh.id
  where master_join_aqlmmk.source_id = shared.lightelement.id
) as notes_note_view_ithgry on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_ggchyg.id) as availability
  from master_join master_join_htprpf
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_ggchyg on master_join_htprpf.target_id = shared_lightelementstatus_lat_ggchyg.id
  where master_join_htprpf.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_jydynv on TRUE;
-- ReflectorPropertyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_kvxxxb.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_kvxxxb.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_kvxxxb.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_kvxxxb.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_kvxxxb.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_kvxxxb.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_kvxxxb.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_kvxxxb.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_thojff.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kvxxxb on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_kvxxxb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_miqjqn.*) AS annotation
  from master_join master_join_qpizwq
  join notes.note_view notes_note_lat_miqjqn on master_join_qpizwq.target_id = notes_note_lat_miqjqn.id
  where master_join_qpizwq.source_id = surveillance.reflector.id
) as notes_note_view_thojff on TRUE;
-- MarkingElementPropertyType
-- ['notes.note_view', 'geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_fkptoz.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_fkptoz.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_fkptoz.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_fkptoz.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_fkptoz.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_fkptoz.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_qwqctj.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_qwqctj.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_qwqctj.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_qwqctj.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_qwqctj.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_qwqctj.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_cvlqjn.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_cvlqjn.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_cvlqjn.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_cvlqjn.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_cvlqjn.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_cvlqjn.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_cvlqjn.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_cvlqjn.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_ebiwad.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fkptoz on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_fkptoz.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_qwqctj on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_qwqctj.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cvlqjn on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_cvlqjn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlhfam.*) AS annotation
  from master_join master_join_zosuai
  join notes.note_view notes_note_lat_vlhfam on master_join_zosuai.target_id = notes_note_lat_vlhfam.id
  where master_join_zosuai.source_id = airport_heliport.markingelement.id
) as notes_note_view_ebiwad on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_sdumoo.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_sdumoo.attr::jsonb  as extent,
    notes_note_view_bencmh.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_eofhmu.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_eofhmu.id,
      'elevation', geometry_elevatedsurface_lat_eofhmu.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_eofhmu.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_eofhmu.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_eofhmu.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_eofhmu.horizontalAccuracy
    )) AS attr
  from master_join master_join_vsydif
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_eofhmu on master_join_vsydif.target_id = geometry_elevatedsurface_lat_eofhmu.id
  where master_join_vsydif.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_sdumoo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xkdacd.*) AS annotation
  from master_join master_join_rbbkdw
  join notes.note_view notes_note_lat_xkdacd on master_join_rbbkdw.target_id = notes_note_lat_xkdacd.id
  where master_join_rbbkdw.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_bencmh on TRUE;
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_hptkhy.title as varchar), '(' || navaids_points_designatedpoint_pt_hptkhy.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_hptkhy.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_drpmyo.title as varchar), '(' || navaids_points_navaid_pt_drpmyo.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_drpmyo.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_abvzal.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_abvzal.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_abvzal.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rrpkhv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rrpkhv.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rrpkhv.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ndexbd.title as varchar), '(' || airport_heliport_airportheliport_pt_ndexbd.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ndexbd.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_gwsdag.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_gwsdag.longitude AS pointchoiceposition_longitude,
    geometry_point_view_gwsdag.latitude AS pointchoiceposition_latitude,
    geometry_point_view_gwsdag.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_mymlcp.title as varchar), '(' || shared_radiofrequencyarea_pt_mymlcp.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_mymlcp.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_hbekui.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_xftxti.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hptkhy on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hptkhy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_drpmyo on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_drpmyo.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_abvzal on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_abvzal.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rrpkhv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rrpkhv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ndexbd on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ndexbd.id
left join geometry.point_view geometry_point_view_gwsdag on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_gwsdag.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_mymlcp on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_mymlcp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_dzdubj.id) as facilitymakeup
  from master_join master_join_yrzads
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_dzdubj on master_join_yrzads.target_id = navaids_points_pointreference_lat_dzdubj.id
  where master_join_yrzads.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_hbekui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ccdhit.*) AS annotation
  from master_join master_join_giqcmw
  join notes.note_view notes_note_lat_ccdhit on master_join_giqcmw.target_id = notes_note_lat_ccdhit.id
  where master_join_giqcmw.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_xftxti on TRUE;
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_qxlcow.title as varchar), '(' || navaids_points_designatedpoint_pt_qxlcow.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_qxlcow.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_vazscd.title as varchar), '(' || navaids_points_designatedpoint_pt_vazscd.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vazscd.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nrklll.title as varchar), '(' || navaids_points_navaid_pt_nrklll.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_nrklll.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_symuhd.title as varchar), '(' || navaids_points_navaid_pt_symuhd.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_symuhd.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fvkgkh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fvkgkh.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_fvkgkh.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ubtioo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ubtioo.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_ubtioo.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zgvffs.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zgvffs.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zgvffs.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_sqpnpm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_sqpnpm.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_sqpnpm.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_khqlbi.title as varchar), '(' || airport_heliport_airportheliport_pt_khqlbi.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_khqlbi.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_deompr.title as varchar), '(' || airport_heliport_airportheliport_pt_deompr.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_deompr.href::text AS startairportreferencepoint_href,
    geometry_point_view_etrpai.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_etrpai.longitude AS endposition_longitude,
    geometry_point_view_etrpai.latitude AS endposition_latitude,
    geometry_point_view_etrpai.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_oznlhy.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_oznlhy.longitude AS startposition_longitude,
    geometry_point_view_oznlhy.latitude AS startposition_latitude,
    geometry_point_view_oznlhy.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_otbtdv.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qxlcow on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qxlcow.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nrklll on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_nrklll.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fvkgkh on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fvkgkh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zgvffs on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zgvffs.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_khqlbi on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_khqlbi.id
left join geometry.point_view geometry_point_view_etrpai on routes.directflightsegment.end_position_id = geometry_point_view_etrpai.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vazscd on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vazscd.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_symuhd on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_symuhd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ubtioo on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ubtioo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_sqpnpm on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_sqpnpm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_deompr on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_deompr.id
left join geometry.point_view geometry_point_view_oznlhy on routes.directflightsegment.start_position_id = geometry_point_view_oznlhy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dwrrrd.*) AS annotation
  from master_join master_join_kznaby
  join notes.note_view notes_note_lat_dwrrrd on master_join_kznaby.target_id = notes_note_lat_dwrrrd.id
  where master_join_kznaby.source_id = routes.directflightsegment.id
) as notes_note_view_otbtdv on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_wulnsl.title as varchar), '(' || navaids_points_designatedpoint_pt_wulnsl.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_wulnsl.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_bdazbq.title as varchar), '(' || navaids_points_navaid_pt_bdazbq.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_bdazbq.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hzsvhk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hzsvhk.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_hzsvhk.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_sajidr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_sajidr.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_sajidr.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ptrcot.title as varchar), '(' || airport_heliport_airportheliport_pt_ptrcot.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ptrcot.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_rglxad.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_rglxad.longitude AS pointchoiceposition_longitude,
    geometry_point_view_rglxad.latitude AS pointchoiceposition_latitude,
    geometry_point_view_rglxad.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_czjgyy.title as varchar), '(' || shared_radiofrequencyarea_pt_czjgyy.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_czjgyy.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_seeuhj.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_rhivpp.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wulnsl on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_wulnsl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bdazbq on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_bdazbq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hzsvhk on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hzsvhk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_sajidr on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_sajidr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ptrcot on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ptrcot.id
left join geometry.point_view geometry_point_view_rglxad on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_rglxad.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_czjgyy on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_czjgyy.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_wkdvsk.id) as facilitymakeup
  from master_join master_join_rqvtwl
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_wkdvsk on master_join_rqvtwl.target_id = navaids_points_pointreference_lat_wkdvsk.id
  where master_join_rqvtwl.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_seeuhj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wvbjbk.*) AS annotation
  from master_join master_join_njwelk
  join notes.note_view notes_note_lat_wvbjbk on master_join_njwelk.target_id = notes_note_lat_wvbjbk.id
  where master_join_njwelk.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_rhivpp on TRUE;
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_xxworj.title as varchar), '(' || airport_heliport_airportheliport_pt_xxworj.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_xxworj.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ttiezf.title as varchar), '(' || airport_heliport_airportheliport_pt_ttiezf.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_ttiezf.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_tbcfai.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_tbcfai.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_tbcfai.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_simxgl.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_lfxcns.title as varchar), '(' || organisation_organisationauthority_pt_lfxcns.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_lfxcns.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pzqskr.title as varchar), '(' || navaids_points_designatedpoint_pt_pzqskr.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pzqskr.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zuarwk.title as varchar), '(' || navaids_points_navaid_pt_zuarwk.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_zuarwk.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wzfxbo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wzfxbo.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_wzfxbo.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oufmuf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oufmuf.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oufmuf.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_tylbsz.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_tylbsz.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_tylbsz.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_tylbsz.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_wcfcbk.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_vzfiey.title as varchar), '(' || routes_airspacebordercrossing_pt_vzfiey.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_vzfiey.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_tpryjk.title as varchar), '(' || airspace_airspace_pt_tpryjk.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_tpryjk.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_nzpbdg.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ptzlcc.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ptzlcc.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ptzlcc.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_ntcxsc.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_fukwnc.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_jeyttt.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_jeyttt.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_jeyttt.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_fgxthf.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_szqczb.flightlevel::jsonb as flightlevel,
    notes_note_view_uvznli.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xxworj on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_xxworj.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_tbcfai on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_tbcfai.id
left join routes.routeportion_pt routes_routeportion_pt_simxgl on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_simxgl.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_lfxcns on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_lfxcns.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pzqskr on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pzqskr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zuarwk on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_zuarwk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wzfxbo on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wzfxbo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oufmuf on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oufmuf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ttiezf on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_ttiezf.id
left join geometry.point_view geometry_point_view_tylbsz on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_tylbsz.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_wcfcbk on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_wcfcbk.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_vzfiey on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_vzfiey.id
left join airspace.airspace_pt airspace_airspace_pt_tpryjk on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_tpryjk.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_nzpbdg on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_nzpbdg.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ptzlcc on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ptzlcc.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_ntcxsc on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_ntcxsc.id
left join shared.meteorology_pt shared_meteorology_pt_fukwnc on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_fukwnc.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_jeyttt on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_jeyttt.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_fgxthf on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_fgxthf.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_yhqcrs.id) as flightlevel
  from master_join master_join_ljsnno
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_yhqcrs on master_join_ljsnno.target_id = routes_flightrestrictionlevel_lat_yhqcrs.id
  where master_join_ljsnno.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_szqczb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bhfang.*) AS annotation
  from master_join master_join_cfniiy
  join notes.note_view notes_note_lat_bhfang on master_join_cfniiy.target_id = notes_note_lat_bhfang.id
  where master_join_cfniiy.source_id = routes.flightconditionelement.id
) as notes_note_view_uvznli on TRUE;
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_gtxzsz.title as varchar), '(' || procedure_standardinstrumentarrival_pt_gtxzsz.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_gtxzsz.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_xeuitk.title as varchar), '(' || airspace_airspace_pt_xeuitk.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_xeuitk.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pjyiyg.title as varchar), '(' || navaids_points_designatedpoint_pt_pjyiyg.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pjyiyg.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_qfunkg.title as varchar), '(' || navaids_points_navaid_pt_qfunkg.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_qfunkg.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hhvcpg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hhvcpg.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_hhvcpg.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dwcqcj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dwcqcj.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dwcqcj.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xbnvdl.title as varchar), '(' || airport_heliport_airportheliport_pt_xbnvdl.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_xbnvdl.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_uikxzf.title as varchar), '(' || airport_heliport_airportheliport_pt_uikxzf.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_uikxzf.href::text AS elementairportheliportelement_href,
    geometry_point_view_zpjoqm.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_zpjoqm.longitude AS pointelementposition_longitude,
    geometry_point_view_zpjoqm.latitude AS pointelementposition_latitude,
    geometry_point_view_zpjoqm.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_tkykmk.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_bvddzi.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_bvddzi.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_bvddzi.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_dxgnyv.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_mpyywp.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_mpyywp.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_mpyywp.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_vtxpjf.flightlevel::jsonb as flightlevel,
    notes_note_view_zrycxu.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_gtxzsz on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_gtxzsz.id
left join airspace.airspace_pt airspace_airspace_pt_xeuitk on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_xeuitk.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pjyiyg on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pjyiyg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_qfunkg on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_qfunkg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hhvcpg on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hhvcpg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dwcqcj on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dwcqcj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xbnvdl on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_xbnvdl.id
left join geometry.point_view geometry_point_view_zpjoqm on routes.flightroutingelement.pointelement_position_id = geometry_point_view_zpjoqm.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_tkykmk on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_tkykmk.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_bvddzi on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_bvddzi.id
left join routes.routeportion_pt routes_routeportion_pt_dxgnyv on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_dxgnyv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uikxzf on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_uikxzf.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_mpyywp on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_mpyywp.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_ntcsva.id) as flightlevel
  from master_join master_join_vdapdb
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_ntcsva on master_join_vdapdb.target_id = routes_flightrestrictionlevel_lat_ntcsva.id
  where master_join_vdapdb.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_vtxpjf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrmifv.*) AS annotation
  from master_join master_join_rpfxpt
  join notes.note_view notes_note_lat_wrmifv on master_join_rpfxpt.target_id = notes_note_lat_wrmifv.id
  where master_join_rpfxpt.source_id = routes.flightroutingelement.id
) as notes_note_view_zrycxu on TRUE;
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_qotfqg.title as varchar), '(' || navaids_points_designatedpoint_pt_qotfqg.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_qotfqg.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_hcwvez.title as varchar), '(' || navaids_points_designatedpoint_pt_hcwvez.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_hcwvez.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_yqebqm.title as varchar), '(' || navaids_points_designatedpoint_pt_yqebqm.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_yqebqm.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_rvcrfr.title as varchar), '(' || navaids_points_navaid_pt_rvcrfr.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_rvcrfr.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_itjktk.title as varchar), '(' || navaids_points_navaid_pt_itjktk.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_itjktk.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_plhjab.title as varchar), '(' || navaids_points_navaid_pt_plhjab.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_plhjab.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mtwdys.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mtwdys.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_mtwdys.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bxcikj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bxcikj.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_bxcikj.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lrpbdf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lrpbdf.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_lrpbdf.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zicrzl.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zicrzl.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zicrzl.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_caamkv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_caamkv.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_caamkv.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lmlwnc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lmlwnc.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lmlwnc.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vyyegk.title as varchar), '(' || airport_heliport_airportheliport_pt_vyyegk.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_vyyegk.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sndvao.title as varchar), '(' || airport_heliport_airportheliport_pt_sndvao.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_sndvao.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zjztir.title as varchar), '(' || airport_heliport_airportheliport_pt_zjztir.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_zjztir.href::text AS endairportreferencepoint_href,
    geometry_point_view_mubfou.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_mubfou.longitude AS startposition_longitude,
    geometry_point_view_mubfou.latitude AS startposition_latitude,
    geometry_point_view_mubfou.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_pbtugv.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_pbtugv.longitude AS intermediatepointposition_longitude,
    geometry_point_view_pbtugv.latitude AS intermediatepointposition_latitude,
    geometry_point_view_pbtugv.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_qtzlpj.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_qtzlpj.longitude AS endposition_longitude,
    geometry_point_view_qtzlpj.latitude AS endposition_latitude,
    geometry_point_view_qtzlpj.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_elsbzy.title as varchar), '(' || routes_route_pt_elsbzy.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_elsbzy.href::text AS referencedroute_href,
    notes_note_view_losrmm.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qotfqg on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qotfqg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_rvcrfr on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_rvcrfr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mtwdys on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mtwdys.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zicrzl on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zicrzl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vyyegk on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_vyyegk.id
left join geometry.point_view geometry_point_view_mubfou on routes.routeportion.start_position_id = geometry_point_view_mubfou.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hcwvez on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hcwvez.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_itjktk on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_itjktk.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bxcikj on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bxcikj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_caamkv on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_caamkv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sndvao on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_sndvao.id
left join geometry.point_view geometry_point_view_pbtugv on routes.routeportion.intermediatepoint_position_id = geometry_point_view_pbtugv.id
left join routes.route_pt routes_route_pt_elsbzy on routes.routeportion.referencedroute_id = routes_route_pt_elsbzy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_yqebqm on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_yqebqm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_plhjab on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_plhjab.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lrpbdf on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lrpbdf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lmlwnc on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lmlwnc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zjztir on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_zjztir.id
left join geometry.point_view geometry_point_view_qtzlpj on routes.routeportion.end_position_id = geometry_point_view_qtzlpj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ogauts.*) AS annotation
  from master_join master_join_idhwmh
  join notes.note_view notes_note_lat_ogauts on master_join_idhwmh.target_id = notes_note_lat_ogauts.id
  where master_join_idhwmh.source_id = routes.routeportion.id
) as notes_note_view_losrmm on TRUE;
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_ipgxok.title as varchar), '(' || navaids_points_designatedpoint_pt_ipgxok.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ipgxok.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ghvmcd.title as varchar), '(' || navaids_points_navaid_pt_ghvmcd.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ghvmcd.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wipdgg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wipdgg.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_wipdgg.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wrqyjj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wrqyjj.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wrqyjj.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rmqisv.title as varchar), '(' || airport_heliport_airportheliport_pt_rmqisv.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_rmqisv.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_tawhmx.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_tawhmx.longitude AS pointchoiceposition_longitude,
    geometry_point_view_tawhmx.latitude AS pointchoiceposition_latitude,
    geometry_point_view_tawhmx.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_lcrbva.title as varchar), '(' || shared_radiofrequencyarea_pt_lcrbva.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_lcrbva.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_ckzybt.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_oqkxuk.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ipgxok on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ipgxok.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ghvmcd on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ghvmcd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wipdgg on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wipdgg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wrqyjj on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wrqyjj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rmqisv on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_rmqisv.id
left join geometry.point_view geometry_point_view_tawhmx on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_tawhmx.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_lcrbva on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_lcrbva.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_vbmrvs.id) as facilitymakeup
  from master_join master_join_vjluat
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_vbmrvs on master_join_vjluat.target_id = navaids_points_pointreference_lat_vbmrvs.id
  where master_join_vjluat.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_ckzybt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqrxhx.*) AS annotation
  from master_join master_join_nmujby
  join notes.note_view notes_note_lat_gqrxhx on master_join_nmujby.target_id = notes_note_lat_gqrxhx.id
  where master_join_nmujby.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_oqkxuk on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_uzvtpk.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_uzvtpk.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_dynexi.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_knfjpn.point::jsonb as point,
    notes_note_view_ivflcc.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_uzvtpk on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_uzvtpk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_qbwxnf.id) as verticalextent
  from master_join master_join_qshxut
  join shared.airspacelayer_pt shared_airspacelayer_lat_qbwxnf on master_join_qshxut.target_id = shared_airspacelayer_lat_qbwxnf.id
  where master_join_qshxut.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_dynexi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_cxpcea.id) as point
  from master_join master_join_paynhs
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_cxpcea on master_join_paynhs.target_id = aerial_refuelling_aerialrefuellingpoint_lat_cxpcea.id
  where master_join_paynhs.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_knfjpn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fzkxrp.*) AS annotation
  from master_join master_join_gypxyo
  join notes.note_view notes_note_lat_fzkxrp on master_join_gypxyo.target_id = notes_note_lat_fzkxrp.id
  where master_join_gypxyo.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_ivflcc on TRUE;
-- AirspaceVolumePropertyType
-- ['notes.note_view', 'geometry.curve_view', 'geometry.surface_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_puhoqv.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_puhoqv.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_nnabom.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_nnabom.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_gaktzm.id)::jsonb AS contributorairspace,
    notes_note_view_oxqthi.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_puhoqv on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_puhoqv.id
left join geometry.curve_view geometry_curve_view_nnabom on airspace.airspacevolume.centreline_id = geometry_curve_view_nnabom.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_gaktzm on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_gaktzm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fzcghh.*) AS annotation
  from master_join master_join_pitsbe
  join notes.note_view notes_note_lat_fzcghh on master_join_pitsbe.target_id = notes_note_lat_fzcghh.id
  where master_join_pitsbe.source_id = airspace.airspacevolume.id
) as notes_note_view_oxqthi on TRUE;
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_iqinbv.id)::jsonb AS sectordefinition,
    geometry_surface_view_wqtlqg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_wqtlqg.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_uafdpg.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_nzldyl.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_wtdutq.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_iqinbv on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_iqinbv.id
left join geometry.surface_view geometry_surface_view_wqtlqg on procedure.navigationareasector.extent_id = geometry_surface_view_wqtlqg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_bemqfa.id) as significantobstacle
  from master_join master_join_predmn
  join shared.obstruction_pt shared_obstruction_lat_bemqfa on master_join_predmn.target_id = shared_obstruction_lat_bemqfa.id
  where master_join_predmn.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_uafdpg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_fxqijz.id) as sectorcriteria
  from master_join master_join_jjkpvm
  join procedure.sectordesign_pt procedure_sectordesign_lat_fxqijz on master_join_jjkpvm.target_id = procedure_sectordesign_lat_fxqijz.id
  where master_join_jjkpvm.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_nzldyl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wefcxa.*) AS annotation
  from master_join master_join_aiwgkr
  join notes.note_view notes_note_lat_wefcxa on master_join_aiwgkr.target_id = notes_note_lat_wefcxa.id
  where master_join_aiwgkr.source_id = procedure.navigationareasector.id
) as notes_note_view_wtdutq on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['notes.note_view', 'geometry.curve_view', 'geometry.surface_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_madsov.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_madsov.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_peowke.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_peowke.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_ydjhpb.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_wawnsc.significantobstacle::jsonb as significantobstacle,
    notes_note_view_zrtzij.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_madsov on shared.obstacleassessmentarea.surface_id = geometry_surface_view_madsov.id
left join geometry.curve_view geometry_curve_view_peowke on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_peowke.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jedorc.id) as aircraftcategory
  from master_join master_join_phgboe
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_jedorc on master_join_phgboe.target_id = shared_aircraftcharacteristic_lat_jedorc.id
  where master_join_phgboe.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_ydjhpb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_jnsodg.id) as significantobstacle
  from master_join master_join_obqnel
  join shared.obstruction_pt shared_obstruction_lat_jnsodg on master_join_obqnel.target_id = shared_obstruction_lat_jnsodg.id
  where master_join_obqnel.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_wawnsc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lkttvp.*) AS annotation
  from master_join master_join_xpnrku
  join notes.note_view notes_note_lat_lkttvp on master_join_xpnrku.target_id = notes_note_lat_lkttvp.id
  where master_join_xpnrku.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_zrtzij on TRUE;
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_grtjoc.title as varchar), '(' || navaids_points_designatedpoint_pt_grtjoc.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_grtjoc.href::text AS point_href,
    geometry_surface_view_qwfcal.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_qwfcal.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_sypxep.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_bgtclo.facilitydistance::jsonb as facilitydistance,
    notes_note_view_bsxmej.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_grtjoc on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_grtjoc.id
left join geometry.surface_view geometry_surface_view_qwfcal on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_qwfcal.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_ihehkv.id) as facilityangle
  from master_join master_join_vsczte
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_ihehkv on master_join_vsczte.target_id = navaids_points_angleuse_lat_ihehkv.id
  where master_join_vsczte.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_sypxep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_tpgwzg.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_tpgwzg.title AS varchar), '(' || navaids_points_distanceindication_lat_tpgwzg.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_tpgwzg.href
  )) as facilitydistance  from master_join master_join_hzyqsg
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_tpgwzg on master_join_hzyqsg.target_id = navaids_points_distanceindication_lat_tpgwzg.id
  where master_join_hzyqsg.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_bgtclo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ifpplw.*) AS annotation
  from master_join master_join_vezadg
  join notes.note_view notes_note_lat_ifpplw on master_join_vezadg.target_id = notes_note_lat_ifpplw.id
  where master_join_vezadg.source_id = navaids_points.pointreference.id
) as notes_note_view_bsxmej on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_tibqji.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_tibqji.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_iurrif.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_pvxdtg.significantobstacle::jsonb as significantobstacle,
    notes_note_view_eoysul.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_tibqji on procedure.safealtitudeareasector.extent_id = geometry_surface_view_tibqji.id
left join shared.circlesector_pt shared_circlesector_pt_iurrif on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_iurrif.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_prsvwc.id) as significantobstacle
  from master_join master_join_jnztuy
  join shared.obstruction_pt shared_obstruction_lat_prsvwc on master_join_jnztuy.target_id = shared_obstruction_lat_prsvwc.id
  where master_join_jnztuy.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_pvxdtg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wcnuxw.*) AS annotation
  from master_join master_join_lhklbp
  join notes.note_view notes_note_lat_wcnuxw on master_join_lhklbp.target_id = notes_note_lat_wcnuxw.id
  where master_join_lhklbp.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_eoysul on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_fjzdik.id)::jsonb AS sectordefinition,
    geometry_surface_view_yfnkhp.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_yfnkhp.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_zpyshk.significantobstacle::jsonb as significantobstacle,
    notes_note_view_hyuxwc.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_fjzdik on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_fjzdik.id
left join geometry.surface_view geometry_surface_view_yfnkhp on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_yfnkhp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_drfhxb.id) as significantobstacle
  from master_join master_join_ecskpz
  join shared.obstruction_pt shared_obstruction_lat_drfhxb on master_join_ecskpz.target_id = shared_obstruction_lat_drfhxb.id
  where master_join_ecskpz.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_zpyshk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mweevy.*) AS annotation
  from master_join master_join_cumwod
  join notes.note_view notes_note_lat_mweevy on master_join_cumwod.target_id = notes_note_lat_mweevy.id
  where master_join_cumwod.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_hyuxwc on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_gfnebg.timeinterval::jsonb as timeinterval,
    notes_note_view_teqvoi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xpggtp.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_heiint.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_keruzo.*) AS timeinterval
  from master_join master_join_lqdamw
  join shared.timesheet_view shared_timesheet_lat_keruzo on master_join_lqdamw.target_id = shared_timesheet_lat_keruzo.id
  where master_join_lqdamw.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_gfnebg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhlvmx.*) AS annotation
  from master_join master_join_xegjtb
  join notes.note_view notes_note_lat_dhlvmx on master_join_xegjtb.target_id = notes_note_lat_dhlvmx.id
  where master_join_xegjtb.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_teqvoi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vvoavs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vvoavs.title AS varchar), '(' || organisation_organisationauthority_lat_vvoavs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vvoavs.href
  )) as specialdateauthority  from master_join master_join_iuvnaa
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vvoavs on master_join_iuvnaa.target_id = organisation_organisationauthority_lat_vvoavs.id
  where master_join_iuvnaa.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_xpggtp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_yqonax.id) as usage
  from master_join master_join_qkdpuh
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_yqonax on master_join_qkdpuh.target_id = airport_heliport_airportheliportusage_lat_yqonax.id
  where master_join_qkdpuh.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_heiint on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_ysiqlu.title as varchar), '(' || organisation_organisationauthority_pt_ysiqlu.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ysiqlu.href::text AS theorganisationauthority_href,
    shared_timesheet_view_lkfmua.timeinterval::jsonb as timeinterval,
    notes_note_view_dvhvuf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xghyuw.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ysiqlu on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_ysiqlu.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yysmlw.*) AS timeinterval
  from master_join master_join_uipdiq
  join shared.timesheet_view shared_timesheet_lat_yysmlw on master_join_uipdiq.target_id = shared_timesheet_lat_yysmlw.id
  where master_join_uipdiq.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_lkfmua on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lphdnh.*) AS annotation
  from master_join master_join_tbbohl
  join notes.note_view notes_note_lat_lphdnh on master_join_tbbohl.target_id = notes_note_lat_lphdnh.id
  where master_join_tbbohl.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_dvhvuf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zcikxm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zcikxm.title AS varchar), '(' || organisation_organisationauthority_lat_zcikxm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zcikxm.href
  )) as specialdateauthority  from master_join master_join_yudttc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zcikxm on master_join_yudttc.target_id = organisation_organisationauthority_lat_zcikxm.id
  where master_join_yudttc.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_xghyuw on TRUE;
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_chxaoa.timeinterval::jsonb as timeinterval,
    notes_note_view_udivyu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hdolbj.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_jalexc.user::jsonb as user,
    shared_airspacelayer_pt_vovqhj.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_atciso.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_thbgar.*) AS timeinterval
  from master_join master_join_htmiwt
  join shared.timesheet_view shared_timesheet_lat_thbgar on master_join_htmiwt.target_id = shared_timesheet_lat_thbgar.id
  where master_join_htmiwt.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_chxaoa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mvpnjd.*) AS annotation
  from master_join master_join_swcljo
  join notes.note_view notes_note_lat_mvpnjd on master_join_swcljo.target_id = notes_note_lat_mvpnjd.id
  where master_join_swcljo.source_id = airspace.airspaceactivation.id
) as notes_note_view_udivyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dikpdz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dikpdz.title AS varchar), '(' || organisation_organisationauthority_lat_dikpdz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dikpdz.href
  )) as specialdateauthority  from master_join master_join_oblyxh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dikpdz on master_join_oblyxh.target_id = organisation_organisationauthority_lat_dikpdz.id
  where master_join_oblyxh.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_hdolbj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_esxqrc.id) as levels
  from master_join master_join_ejjjsq
  join shared.airspacelayer_pt shared_airspacelayer_lat_esxqrc on master_join_ejjjsq.target_id = shared_airspacelayer_lat_esxqrc.id
  where master_join_ejjjsq.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_vovqhj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_baqain.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_baqain.title AS varchar), '(' || organisation_organisationauthority_lat_baqain.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_baqain.href
  )) as user  from master_join master_join_xfngga
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_baqain on master_join_xfngga.target_id = organisation_organisationauthority_lat_baqain.id
  where master_join_xfngga.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_jalexc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_buhaom.id) as aircraft
  from master_join master_join_bsfhms
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_buhaom on master_join_bsfhms.target_id = shared_aircraftcharacteristic_lat_buhaom.id
  where master_join_bsfhms.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_atciso on TRUE;
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_sskkuq.timeinterval::jsonb as timeinterval,
    notes_note_view_bfbxvk.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_cjzuik.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_tbfaon.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_odtcaj.*) AS timeinterval
  from master_join master_join_daysbe
  join shared.timesheet_view shared_timesheet_lat_odtcaj on master_join_daysbe.target_id = shared_timesheet_lat_odtcaj.id
  where master_join_daysbe.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_sskkuq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfqbao.*) AS annotation
  from master_join master_join_sjjkap
  join notes.note_view notes_note_lat_lfqbao on master_join_sjjkap.target_id = notes_note_lat_lfqbao.id
  where master_join_sjjkap.source_id = airspace.airspacelayerclass.id
) as notes_note_view_bfbxvk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yqcfeb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yqcfeb.title AS varchar), '(' || organisation_organisationauthority_lat_yqcfeb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yqcfeb.href
  )) as specialdateauthority  from master_join master_join_elcxls
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yqcfeb on master_join_elcxls.target_id = organisation_organisationauthority_lat_yqcfeb.id
  where master_join_elcxls.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_cjzuik on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xojaix.id) as associatedlevels
  from master_join master_join_zwuzwv
  join shared.airspacelayer_pt shared_airspacelayer_lat_xojaix on master_join_zwuzwv.target_id = shared_airspacelayer_lat_xojaix.id
  where master_join_zwuzwv.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_tbfaon on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ezlpzy.timeinterval::jsonb as timeinterval,
    notes_note_view_ktcujn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_grkqmp.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wbvejr.*) AS timeinterval
  from master_join master_join_lwfkxy
  join shared.timesheet_view shared_timesheet_lat_wbvejr on master_join_lwfkxy.target_id = shared_timesheet_lat_wbvejr.id
  where master_join_lwfkxy.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_ezlpzy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dijuxm.*) AS annotation
  from master_join master_join_uuiinr
  join notes.note_view notes_note_lat_dijuxm on master_join_uuiinr.target_id = notes_note_lat_dijuxm.id
  where master_join_uuiinr.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_ktcujn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nynngd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nynngd.title AS varchar), '(' || organisation_organisationauthority_lat_nynngd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nynngd.href
  )) as specialdateauthority  from master_join master_join_fmivuy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nynngd on master_join_fmivuy.target_id = organisation_organisationauthority_lat_nynngd.id
  where master_join_fmivuy.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_grkqmp on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_cizflj.timeinterval::jsonb as timeinterval,
    notes_note_view_sudcae.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zpliey.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_mczskq.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vlacki.*) AS timeinterval
  from master_join master_join_hontvj
  join shared.timesheet_view shared_timesheet_lat_vlacki on master_join_hontvj.target_id = shared_timesheet_lat_vlacki.id
  where master_join_hontvj.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_cizflj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_erzjgz.*) AS annotation
  from master_join master_join_irikkn
  join notes.note_view notes_note_lat_erzjgz on master_join_irikkn.target_id = notes_note_lat_erzjgz.id
  where master_join_irikkn.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_sudcae on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_psddhk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_psddhk.title AS varchar), '(' || organisation_organisationauthority_lat_psddhk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_psddhk.href
  )) as specialdateauthority  from master_join master_join_havujg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_psddhk on master_join_havujg.target_id = organisation_organisationauthority_lat_psddhk.id
  where master_join_havujg.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_zpliey on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_dctkyu.id) as usage
  from master_join master_join_usykjo
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_dctkyu on master_join_usykjo.target_id = airport_heliport_apronareausage_lat_dctkyu.id
  where master_join_usykjo.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_mczskq on TRUE;
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_gikvtv.id)::jsonb AS sectordescription,
    geometry_surface_view_cepfjt.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_cepfjt.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_viogjg.timeinterval::jsonb as timeinterval,
    notes_note_view_frwtij.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gzlnsp.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_gikvtv on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_gikvtv.id
left join geometry.surface_view geometry_surface_view_cepfjt on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_cepfjt.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qqgkji.*) AS timeinterval
  from master_join master_join_gxkpiw
  join shared.timesheet_view shared_timesheet_lat_qqgkji on master_join_gxkpiw.target_id = shared_timesheet_lat_qqgkji.id
  where master_join_gxkpiw.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_viogjg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pcvtas.*) AS annotation
  from master_join master_join_nsfbnb
  join notes.note_view notes_note_lat_pcvtas on master_join_nsfbnb.target_id = notes_note_lat_pcvtas.id
  where master_join_nsfbnb.source_id = procedure.circlingrestriction.id
) as notes_note_view_frwtij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ildoja.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ildoja.title AS varchar), '(' || organisation_organisationauthority_lat_ildoja.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ildoja.href
  )) as specialdateauthority  from master_join master_join_egvdsu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ildoja on master_join_egvdsu.target_id = organisation_organisationauthority_lat_ildoja.id
  where master_join_egvdsu.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_gzlnsp on TRUE;
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_kdlnky.timeinterval::jsonb as timeinterval,
    notes_note_view_eqhmej.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_alvomi.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_sbnhhe.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_fkwqds.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_jqgxom.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_ndckio.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zseagv.*) AS timeinterval
  from master_join master_join_sgfhuo
  join shared.timesheet_view shared_timesheet_lat_zseagv on master_join_sgfhuo.target_id = shared_timesheet_lat_zseagv.id
  where master_join_sgfhuo.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_kdlnky on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsgsfe.*) AS annotation
  from master_join master_join_xahoyb
  join notes.note_view notes_note_lat_tsgsfe on master_join_xahoyb.target_id = notes_note_lat_tsgsfe.id
  where master_join_xahoyb.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_eqhmej on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kqrrrg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kqrrrg.title AS varchar), '(' || organisation_organisationauthority_lat_kqrrrg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kqrrrg.href
  )) as specialdateauthority  from master_join master_join_rlsown
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kqrrrg on master_join_rlsown.target_id = organisation_organisationauthority_lat_kqrrrg.id
  where master_join_rlsown.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_alvomi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_iexnph.id) as weather
  from master_join master_join_jiakik
  join shared.meteorology_pt shared_meteorology_lat_iexnph on master_join_jiakik.target_id = shared_meteorology_lat_iexnph.id
  where master_join_jiakik.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_sbnhhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_gunqsp.id) as aircraft
  from master_join master_join_rhjnsn
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_gunqsp on master_join_rhjnsn.target_id = shared_aircraftcharacteristic_lat_gunqsp.id
  where master_join_rhjnsn.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_fkwqds on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_iylvpj.id) as flight
  from master_join master_join_bkbsbf
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_iylvpj on master_join_bkbsbf.target_id = shared_flightcharacteristic_lat_iylvpj.id
  where master_join_bkbsbf.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_jqgxom on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_vfemup.id) as subcondition
  from master_join master_join_rdcbdq
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_vfemup on master_join_rdcbdq.target_id = airport_heliport_conditioncombination_lat_vfemup.id
  where master_join_rdcbdq.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_ndckio on TRUE;
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_iwzmyt.timeinterval::jsonb as timeinterval,
    notes_note_view_vbnjrf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yfdkeu.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_mogrvp.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_izhldb.*) AS timeinterval
  from master_join master_join_ubkgyu
  join shared.timesheet_view shared_timesheet_lat_izhldb on master_join_ubkgyu.target_id = shared_timesheet_lat_izhldb.id
  where master_join_ubkgyu.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_iwzmyt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhlbuk.*) AS annotation
  from master_join master_join_doxgwq
  join notes.note_view notes_note_lat_qhlbuk on master_join_doxgwq.target_id = notes_note_lat_qhlbuk.id
  where master_join_doxgwq.source_id = routes.flightconditioncombination.id
) as notes_note_view_vbnjrf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kukjfy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kukjfy.title AS varchar), '(' || organisation_organisationauthority_lat_kukjfy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kukjfy.href
  )) as specialdateauthority  from master_join master_join_kklleg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kukjfy on master_join_kklleg.target_id = organisation_organisationauthority_lat_kukjfy.id
  where master_join_kklleg.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_yfdkeu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_ahabuz.id) as element
  from master_join master_join_zvuekt
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_ahabuz on master_join_zvuekt.target_id = routes_flightconditionelement_lat_ahabuz.id
  where master_join_zvuekt.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_mogrvp on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_cgvgcl.timeinterval::jsonb as timeinterval,
    notes_note_view_ahdeqc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vulguz.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_suusez.*) AS timeinterval
  from master_join master_join_bhbehj
  join shared.timesheet_view shared_timesheet_lat_suusez on master_join_bhbehj.target_id = shared_timesheet_lat_suusez.id
  where master_join_bhbehj.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_cgvgcl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_khgyfo.*) AS annotation
  from master_join master_join_lqercm
  join notes.note_view notes_note_lat_khgyfo on master_join_lqercm.target_id = notes_note_lat_khgyfo.id
  where master_join_lqercm.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_ahdeqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xcynyo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xcynyo.title AS varchar), '(' || organisation_organisationauthority_lat_xcynyo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xcynyo.href
  )) as specialdateauthority  from master_join master_join_rqkvnv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xcynyo on master_join_rqkvnv.target_id = organisation_organisationauthority_lat_xcynyo.id
  where master_join_rqkvnv.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_vulguz on TRUE;
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_uukzdd.timeinterval::jsonb as timeinterval,
    notes_note_view_plumml.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rexctq.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qcewmq.*) AS timeinterval
  from master_join master_join_qxnaez
  join shared.timesheet_view shared_timesheet_lat_qcewmq on master_join_qxnaez.target_id = shared_timesheet_lat_qcewmq.id
  where master_join_qxnaez.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_uukzdd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytcyqb.*) AS annotation
  from master_join master_join_hjchei
  join notes.note_view notes_note_lat_ytcyqb on master_join_hjchei.target_id = notes_note_lat_ytcyqb.id
  where master_join_hjchei.source_id = shared.lightelementstatus.id
) as notes_note_view_plumml on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_amdgyr.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_amdgyr.title AS varchar), '(' || organisation_organisationauthority_lat_amdgyr.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_amdgyr.href
  )) as specialdateauthority  from master_join master_join_ujpfdy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_amdgyr on master_join_ujpfdy.target_id = organisation_organisationauthority_lat_amdgyr.id
  where master_join_ujpfdy.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_rexctq on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_etpnnl.timeinterval::jsonb as timeinterval,
    notes_note_view_raluvf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qbmpnz.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_zjbrbh.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kjnwfv.*) AS timeinterval
  from master_join master_join_mrmnlr
  join shared.timesheet_view shared_timesheet_lat_kjnwfv on master_join_mrmnlr.target_id = shared_timesheet_lat_kjnwfv.id
  where master_join_mrmnlr.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_etpnnl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zoerxr.*) AS annotation
  from master_join master_join_ijzgap
  join notes.note_view notes_note_lat_zoerxr on master_join_ijzgap.target_id = notes_note_lat_zoerxr.id
  where master_join_ijzgap.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_raluvf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_cuvyeg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_cuvyeg.title AS varchar), '(' || organisation_organisationauthority_lat_cuvyeg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_cuvyeg.href
  )) as specialdateauthority  from master_join master_join_icnokv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_cuvyeg on master_join_icnokv.target_id = organisation_organisationauthority_lat_cuvyeg.id
  where master_join_icnokv.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_qbmpnz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_tzgict.id) as usage
  from master_join master_join_hcunzg
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_tzgict on master_join_hcunzg.target_id = airport_heliport_manoeuvringareausage_lat_tzgict.id
  where master_join_hcunzg.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_zjbrbh on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_zrwmsv.timeinterval::jsonb as timeinterval,
    notes_note_view_vnpalr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lqlqde.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xpyxgs.*) AS timeinterval
  from master_join master_join_eiuwlp
  join shared.timesheet_view shared_timesheet_lat_xpyxgs on master_join_eiuwlp.target_id = shared_timesheet_lat_xpyxgs.id
  where master_join_eiuwlp.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_zrwmsv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ksundd.*) AS annotation
  from master_join master_join_yqmqyw
  join notes.note_view notes_note_lat_ksundd on master_join_yqmqyw.target_id = notes_note_lat_ksundd.id
  where master_join_yqmqyw.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_vnpalr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fxmmoy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fxmmoy.title AS varchar), '(' || organisation_organisationauthority_lat_fxmmoy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fxmmoy.href
  )) as specialdateauthority  from master_join master_join_ovedrl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fxmmoy on master_join_ovedrl.target_id = organisation_organisationauthority_lat_fxmmoy.id
  where master_join_ovedrl.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_lqlqde on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_zkknpd.timeinterval::jsonb as timeinterval,
    notes_note_view_wwxeso.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dyvpls.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kdrukf.*) AS timeinterval
  from master_join master_join_obildi
  join shared.timesheet_view shared_timesheet_lat_kdrukf on master_join_obildi.target_id = shared_timesheet_lat_kdrukf.id
  where master_join_obildi.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_zkknpd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ouzvrh.*) AS annotation
  from master_join master_join_tosklc
  join notes.note_view notes_note_lat_ouzvrh on master_join_tosklc.target_id = notes_note_lat_ouzvrh.id
  where master_join_tosklc.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_wwxeso on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sgutxg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sgutxg.title AS varchar), '(' || organisation_organisationauthority_lat_sgutxg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sgutxg.href
  )) as specialdateauthority  from master_join master_join_rakhpv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sgutxg on master_join_rakhpv.target_id = organisation_organisationauthority_lat_sgutxg.id
  where master_join_rakhpv.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_dyvpls on TRUE;
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_zqiydb.timeinterval::jsonb as timeinterval,
    notes_note_view_ukfdmj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bapdig.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zrtwwz.*) AS timeinterval
  from master_join master_join_mscfcp
  join shared.timesheet_view shared_timesheet_lat_zrtwwz on master_join_mscfcp.target_id = shared_timesheet_lat_zrtwwz.id
  where master_join_mscfcp.source_id = shared.onlinecontact.id
) as shared_timesheet_view_zqiydb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wblfut.*) AS annotation
  from master_join master_join_smggwo
  join notes.note_view notes_note_lat_wblfut on master_join_smggwo.target_id = notes_note_lat_wblfut.id
  where master_join_smggwo.source_id = shared.onlinecontact.id
) as notes_note_view_ukfdmj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hskctc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hskctc.title AS varchar), '(' || organisation_organisationauthority_lat_hskctc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hskctc.href
  )) as specialdateauthority  from master_join master_join_nwafwc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hskctc on master_join_nwafwc.target_id = organisation_organisationauthority_lat_hskctc.id
  where master_join_nwafwc.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_bapdig on TRUE;
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_ytapgz.timeinterval::jsonb as timeinterval,
    notes_note_view_tujmpx.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ndjwvp.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ckqmzu.*) AS timeinterval
  from master_join master_join_bnijgi
  join shared.timesheet_view shared_timesheet_lat_ckqmzu on master_join_bnijgi.target_id = shared_timesheet_lat_ckqmzu.id
  where master_join_bnijgi.source_id = shared.postaladdress.id
) as shared_timesheet_view_ytapgz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dihuch.*) AS annotation
  from master_join master_join_zkwyif
  join notes.note_view notes_note_lat_dihuch on master_join_zkwyif.target_id = notes_note_lat_dihuch.id
  where master_join_zkwyif.source_id = shared.postaladdress.id
) as notes_note_view_tujmpx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_loygtg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_loygtg.title AS varchar), '(' || organisation_organisationauthority_lat_loygtg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_loygtg.href
  )) as specialdateauthority  from master_join master_join_uexjql
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_loygtg on master_join_uexjql.target_id = organisation_organisationauthority_lat_loygtg.id
  where master_join_uexjql.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_ndjwvp on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_usleax.timeinterval::jsonb as timeinterval,
    notes_note_view_fbihoo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bxrfbr.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cwpush.*) AS timeinterval
  from master_join master_join_rlwbwe
  join shared.timesheet_view shared_timesheet_lat_cwpush on master_join_rlwbwe.target_id = shared_timesheet_lat_cwpush.id
  where master_join_rlwbwe.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_usleax on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klkwzn.*) AS annotation
  from master_join master_join_gldbpl
  join notes.note_view notes_note_lat_klkwzn on master_join_gldbpl.target_id = notes_note_lat_klkwzn.id
  where master_join_gldbpl.source_id = procedure.procedureavailability.id
) as notes_note_view_fbihoo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xwztpk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xwztpk.title AS varchar), '(' || organisation_organisationauthority_lat_xwztpk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xwztpk.href
  )) as specialdateauthority  from master_join master_join_yatmzx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xwztpk on master_join_yatmzx.target_id = organisation_organisationauthority_lat_xwztpk.id
  where master_join_yatmzx.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_bxrfbr on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qcykbb.timeinterval::jsonb as timeinterval,
    notes_note_view_tgdzti.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_triryh.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_scgzyy.*) AS timeinterval
  from master_join master_join_zvzgth
  join shared.timesheet_view shared_timesheet_lat_scgzyy on master_join_zvzgth.target_id = shared_timesheet_lat_scgzyy.id
  where master_join_zvzgth.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_qcykbb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikltcu.*) AS annotation
  from master_join master_join_artraj
  join notes.note_view notes_note_lat_ikltcu on master_join_artraj.target_id = notes_note_lat_ikltcu.id
  where master_join_artraj.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_tgdzti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jyqyle.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jyqyle.title AS varchar), '(' || organisation_organisationauthority_lat_jyqyle.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jyqyle.href
  )) as specialdateauthority  from master_join master_join_flyjea
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jyqyle on master_join_flyjea.target_id = organisation_organisationauthority_lat_jyqyle.id
  where master_join_flyjea.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_triryh on TRUE;
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_aycwuc.timeinterval::jsonb as timeinterval,
    notes_note_view_tbtbmp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yakjux.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_avyuoo.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jsqqfv.*) AS timeinterval
  from master_join master_join_ciqpia
  join shared.timesheet_view shared_timesheet_lat_jsqqfv on master_join_ciqpia.target_id = shared_timesheet_lat_jsqqfv.id
  where master_join_ciqpia.source_id = routes.routeavailability.id
) as shared_timesheet_view_aycwuc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fvbisw.*) AS annotation
  from master_join master_join_golacm
  join notes.note_view notes_note_lat_fvbisw on master_join_golacm.target_id = notes_note_lat_fvbisw.id
  where master_join_golacm.source_id = routes.routeavailability.id
) as notes_note_view_tbtbmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_txpbdl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_txpbdl.title AS varchar), '(' || organisation_organisationauthority_lat_txpbdl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_txpbdl.href
  )) as specialdateauthority  from master_join master_join_fwvbwb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_txpbdl on master_join_fwvbwb.target_id = organisation_organisationauthority_lat_txpbdl.id
  where master_join_fwvbwb.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_yakjux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_zdefgy.id) as levels
  from master_join master_join_heoply
  join shared.airspacelayer_pt shared_airspacelayer_lat_zdefgy on master_join_heoply.target_id = shared_airspacelayer_lat_zdefgy.id
  where master_join_heoply.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_avyuoo on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_vfffoe.timeinterval::jsonb as timeinterval,
    notes_note_view_tejboe.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pgpqrv.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xtgphf.*) AS timeinterval
  from master_join master_join_ftbpvg
  join shared.timesheet_view shared_timesheet_lat_xtgphf on master_join_ftbpvg.target_id = shared_timesheet_lat_xtgphf.id
  where master_join_ftbpvg.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_vfffoe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vmkzms.*) AS annotation
  from master_join master_join_zlgbdv
  join notes.note_view notes_note_lat_vmkzms on master_join_zlgbdv.target_id = notes_note_lat_vmkzms.id
  where master_join_zlgbdv.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_tejboe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_opuvwz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_opuvwz.title AS varchar), '(' || organisation_organisationauthority_lat_opuvwz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_opuvwz.href
  )) as specialdateauthority  from master_join master_join_vyumwa
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_opuvwz on master_join_vyumwa.target_id = organisation_organisationauthority_lat_opuvwz.id
  where master_join_vyumwa.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_pgpqrv on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ceqokx.timeinterval::jsonb as timeinterval,
    notes_note_view_cupsgr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_arpxhu.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_buhnma.*) AS timeinterval
  from master_join master_join_ntcaiz
  join shared.timesheet_view shared_timesheet_lat_buhnma on master_join_ntcaiz.target_id = shared_timesheet_lat_buhnma.id
  where master_join_ntcaiz.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_ceqokx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqnvxv.*) AS annotation
  from master_join master_join_gmjljd
  join notes.note_view notes_note_lat_sqnvxv on master_join_gmjljd.target_id = notes_note_lat_sqnvxv.id
  where master_join_gmjljd.source_id = service.serviceoperationalstatus.id
) as notes_note_view_cupsgr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rvmxdu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rvmxdu.title AS varchar), '(' || organisation_organisationauthority_lat_rvmxdu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rvmxdu.href
  )) as specialdateauthority  from master_join master_join_cqrdho
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rvmxdu on master_join_cqrdho.target_id = organisation_organisationauthority_lat_rvmxdu.id
  where master_join_cqrdho.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_arpxhu on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_dwwxrc.timeinterval::jsonb as timeinterval,
    notes_note_view_dxzjkh.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qxcpcb.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hndghi.*) AS timeinterval
  from master_join master_join_livixk
  join shared.timesheet_view shared_timesheet_lat_hndghi on master_join_livixk.target_id = shared_timesheet_lat_hndghi.id
  where master_join_livixk.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_dwwxrc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ouvahx.*) AS annotation
  from master_join master_join_dpmgdh
  join notes.note_view notes_note_lat_ouvahx on master_join_dpmgdh.target_id = notes_note_lat_ouvahx.id
  where master_join_dpmgdh.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_dxzjkh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jnnrxu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jnnrxu.title AS varchar), '(' || organisation_organisationauthority_lat_jnnrxu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jnnrxu.href
  )) as specialdateauthority  from master_join master_join_hmsdjb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jnnrxu on master_join_hmsdjb.target_id = organisation_organisationauthority_lat_jnnrxu.id
  where master_join_hmsdjb.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_qxcpcb on TRUE;
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_opsdwq.timeinterval::jsonb as timeinterval,
    notes_note_view_qtgujv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gkdlfn.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hygbdt.*) AS timeinterval
  from master_join master_join_gdklno
  join shared.timesheet_view shared_timesheet_lat_hygbdt on master_join_gdklno.target_id = shared_timesheet_lat_hygbdt.id
  where master_join_gdklno.source_id = shared.telephonecontact.id
) as shared_timesheet_view_opsdwq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sithcl.*) AS annotation
  from master_join master_join_nvyarg
  join notes.note_view notes_note_lat_sithcl on master_join_nvyarg.target_id = notes_note_lat_sithcl.id
  where master_join_nvyarg.source_id = shared.telephonecontact.id
) as notes_note_view_qtgujv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_cuwnba.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_cuwnba.title AS varchar), '(' || organisation_organisationauthority_lat_cuwnba.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_cuwnba.href
  )) as specialdateauthority  from master_join master_join_dcmxxc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_cuwnba on master_join_dcmxxc.target_id = organisation_organisationauthority_lat_cuwnba.id
  where master_join_dcmxxc.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_gkdlfn on TRUE;
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_whvlox.timeinterval::jsonb as timeinterval,
    notes_note_view_xzkrrn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_shhrwh.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gntxff.*) AS timeinterval
  from master_join master_join_rdzyvj
  join shared.timesheet_view shared_timesheet_lat_gntxff on master_join_rdzyvj.target_id = shared_timesheet_lat_gntxff.id
  where master_join_rdzyvj.source_id = organisation.unitavailability.id
) as shared_timesheet_view_whvlox on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nciegk.*) AS annotation
  from master_join master_join_lodoxe
  join notes.note_view notes_note_lat_nciegk on master_join_lodoxe.target_id = notes_note_lat_nciegk.id
  where master_join_lodoxe.source_id = organisation.unitavailability.id
) as notes_note_view_xzkrrn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sbhcsl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sbhcsl.title AS varchar), '(' || organisation_organisationauthority_lat_sbhcsl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sbhcsl.href
  )) as specialdateauthority  from master_join master_join_rfitrn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sbhcsl on master_join_rfitrn.target_id = organisation_organisationauthority_lat_sbhcsl.id
  where master_join_rfitrn.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_shhrwh on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_atmeff.timeinterval::jsonb as timeinterval,
    notes_note_view_mayatq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xsknkx.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cxxbry.*) AS timeinterval
  from master_join master_join_smlpgr
  join shared.timesheet_view shared_timesheet_lat_cxxbry on master_join_smlpgr.target_id = shared_timesheet_lat_cxxbry.id
  where master_join_smlpgr.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_atmeff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bihumb.*) AS annotation
  from master_join master_join_sxywxx
  join notes.note_view notes_note_lat_bihumb on master_join_sxywxx.target_id = notes_note_lat_bihumb.id
  where master_join_sxywxx.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_mayatq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ztepvq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ztepvq.title AS varchar), '(' || organisation_organisationauthority_lat_ztepvq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ztepvq.href
  )) as specialdateauthority  from master_join master_join_wrlpdm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ztepvq on master_join_wrlpdm.target_id = organisation_organisationauthority_lat_ztepvq.id
  where master_join_wrlpdm.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_xsknkx on TRUE;
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'notes.note_view', 'geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_yicbon.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_yicbon.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_yicbon.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_yicbon.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_yicbon.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_yicbon.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_yicbon.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_yicbon.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_pbwsfp.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_pbwsfp.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_pbwsfp.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_pbwsfp.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_pbwsfp.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_pbwsfp.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_yjfhcn.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_yjfhcn.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_yjfhcn.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_yjfhcn.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_yjfhcn.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_yjfhcn.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_cximac.timeinterval::jsonb as timeinterval,
    notes_note_view_exhced.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_uokiqc.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_yvvzqx.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yicbon on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_yicbon.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_pbwsfp on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_pbwsfp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yjfhcn on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_yjfhcn.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uzyfnq.*) AS timeinterval
  from master_join master_join_eseykz
  join shared.timesheet_view shared_timesheet_lat_uzyfnq on master_join_eseykz.target_id = shared_timesheet_lat_uzyfnq.id
  where master_join_eseykz.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_cximac on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_djqmit.*) AS annotation
  from master_join master_join_jauvmv
  join notes.note_view notes_note_lat_djqmit on master_join_jauvmv.target_id = notes_note_lat_djqmit.id
  where master_join_jauvmv.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_exhced on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vrlkbb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vrlkbb.title AS varchar), '(' || organisation_organisationauthority_lat_vrlkbb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vrlkbb.href
  )) as specialdateauthority  from master_join master_join_lrraiw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vrlkbb on master_join_lrraiw.target_id = organisation_organisationauthority_lat_vrlkbb.id
  where master_join_lrraiw.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_uokiqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_qfnmzi.id) as lighting
  from master_join master_join_opufro
  join shared.lightelement_pt shared_lightelement_lat_qfnmzi on master_join_opufro.target_id = shared_lightelement_lat_qfnmzi.id
  where master_join_opufro.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_yvvzqx on TRUE;
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_vbyqpq.timeinterval::jsonb as timeinterval,
    notes_note_view_smdpra.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rmtpka.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bhtjij.*) AS timeinterval
  from master_join master_join_deajvz
  join shared.timesheet_view shared_timesheet_lat_bhtjij on master_join_deajvz.target_id = shared_timesheet_lat_bhtjij.id
  where master_join_deajvz.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_vbyqpq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yeguzr.*) AS annotation
  from master_join master_join_nwyctq
  join notes.note_view notes_note_lat_yeguzr on master_join_nwyctq.target_id = notes_note_lat_yeguzr.id
  where master_join_nwyctq.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_smdpra on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nmkkoq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nmkkoq.title AS varchar), '(' || organisation_organisationauthority_lat_nmkkoq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nmkkoq.href
  )) as specialdateauthority  from master_join master_join_yduldq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nmkkoq on master_join_yduldq.target_id = organisation_organisationauthority_lat_nmkkoq.id
  where master_join_yduldq.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_rmtpka on TRUE;
-- ContactInformationPropertyType
-- ['notes.note_view', 'shared.onlinecontact_view', 'shared.postaladdress_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_cskyva.id)::jsonb AS selection,
    notes_note_view_utclkr.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_cskyva on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_cskyva.id
left join lateral(
  select
  from master_join master_join_tucsqk
  join shared.contactinformation_view shared_contactinformation_lat_vmhonc on master_join_tucsqk.target_id = shared_contactinformation_lat_vmhonc.id
  where master_join_tucsqk.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_ncrkuh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pwtuqu.*) AS annotation
  from master_join master_join_eprdcd
  join notes.note_view notes_note_lat_pwtuqu on master_join_eprdcd.target_id = notes_note_lat_pwtuqu.id
  where master_join_eprdcd.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_utclkr on TRUE;
-- ApronAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_qkiffo.id)::jsonb AS selection,
    notes_note_view_hubuwp.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_qkiffo on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_qkiffo.id
left join lateral(
  select
  from master_join master_join_mzeucq
  join shared.contactinformation_view shared_contactinformation_lat_kpdrng on master_join_mzeucq.target_id = shared_contactinformation_lat_kpdrng.id
  where master_join_mzeucq.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_xmkjpb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lhiszw.*) AS annotation
  from master_join master_join_iiaunv
  join notes.note_view notes_note_lat_lhiszw on master_join_iiaunv.target_id = notes_note_lat_lhiszw.id
  where master_join_iiaunv.source_id = airport_heliport.apronareausage.id
) as notes_note_view_hubuwp on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_azhtux.routeelement::jsonb as routeelement,
    notes_note_view_sdjsrc.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_byozsn.id) as routeelement
  from master_join master_join_pqijum
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_byozsn on master_join_pqijum.target_id = routes_flightroutingelement_lat_byozsn.id
  where master_join_pqijum.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_azhtux on TRUE
left join lateral(
  select
  from master_join master_join_jxfohe
  join shared.contactinformation_view shared_contactinformation_lat_gqczvf on master_join_jxfohe.target_id = shared_contactinformation_lat_gqczvf.id
  where master_join_jxfohe.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_dmmydx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_imlqov.*) AS annotation
  from master_join master_join_ypwslq
  join notes.note_view notes_note_lat_imlqov on master_join_ypwslq.target_id = notes_note_lat_imlqov.id
  where master_join_ypwslq.source_id = routes.flightrestrictionroute.id
) as notes_note_view_sdjsrc on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['notes.note_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_lfchvb.id)::jsonb AS selection,
    notes_note_view_skayrd.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_lfchvb on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_lfchvb.id
left join lateral(
  select
  from master_join master_join_oupwzi
  join shared.contactinformation_view shared_contactinformation_lat_feczjb on master_join_oupwzi.target_id = shared_contactinformation_lat_feczjb.id
  where master_join_oupwzi.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_boqvla on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fkntwk.*) AS annotation
  from master_join master_join_sdanhh
  join notes.note_view notes_note_lat_fkntwk on master_join_sdanhh.target_id = notes_note_lat_fkntwk.id
  where master_join_sdanhh.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_skayrd on TRUE;
-- AerialRefuellingType
-- ['notes.note_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'routes.routeavailability_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.aerialrefuellingtrack_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_xwhbjg.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_xwhbjg.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_xwhbjg.href::text AS oppositetrack_href,
    routes_routeavailability_view_dkaogs.availability::jsonb as availability,
    airspace_airspace_pt_quqfco.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_efuulx.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_htjnza.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_yrdiuc.managingorganisation::jsonb as managingorganisation,
    notes_note_view_gespcq.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_xwhbjg on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_xwhbjg.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_dodhto.id) as availability
  from master_join master_join_mcoyte
  join routes.routeavailability_view routes_routeavailability_lat_dodhto on master_join_mcoyte.target_id = routes_routeavailability_lat_dodhto.id
  where master_join_mcoyte.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_dkaogs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_pwdryi.id,
      'title', coalesce(cast(airspace_airspace_lat_pwdryi.title AS varchar), '(' || airspace_airspace_lat_pwdryi.nilreason[1] || ')'),
      'href', airspace_airspace_lat_pwdryi.href
  )) as protectingairspace  from master_join master_join_asclbf
  join airspace.airspace_pt airspace_airspace_lat_pwdryi on master_join_asclbf.target_id = airspace_airspace_lat_pwdryi.id
  where master_join_asclbf.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_quqfco on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_gciulh.id) as track
  from master_join master_join_jqvwlf
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_gciulh on master_join_jqvwlf.target_id = aerial_refuelling_aerialrefuellingtrack_lat_gciulh.id
  where master_join_jqvwlf.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_efuulx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_sxoimz.id) as anchor
  from master_join master_join_qfnmcz
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_sxoimz on master_join_qfnmcz.target_id = aerial_refuelling_aerialrefuellinganchor_lat_sxoimz.id
  where master_join_qfnmcz.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_htjnza on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_istfyd.id) as managingorganisation
  from master_join master_join_wxibvs
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_istfyd on master_join_wxibvs.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_istfyd.id
  where master_join_wxibvs.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_yrdiuc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ucbsdc.*) AS annotation
  from master_join master_join_wlntig
  join notes.note_view notes_note_lat_ucbsdc on master_join_wlntig.target_id = notes_note_lat_ucbsdc.id
  where master_join_wlntig.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_gespcq on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_plouqy.title as varchar), '(' || obstacles_verticalstructure_pt_plouqy.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_plouqy.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vqyhwf.title as varchar), '(' || airport_heliport_airportheliport_pt_vqyhwf.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_vqyhwf.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_zbirzg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zbirzg.longitude AS location_longitude,
    geometry_elevatedpoint_view_zbirzg.latitude AS location_latitude,
    geometry_elevatedpoint_view_zbirzg.elevation AS location_elevation,
    geometry_elevatedpoint_view_zbirzg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zbirzg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zbirzg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zbirzg.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_styluy.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_plouqy on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_plouqy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vqyhwf on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_vqyhwf.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zbirzg on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_zbirzg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cuhgbb.*) AS annotation
  from master_join master_join_rgfxtq
  join notes.note_view notes_note_lat_cuhgbb on master_join_rgfxtq.target_id = notes_note_lat_cuhgbb.id
  where master_join_rgfxtq.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_styluy on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ltkpdy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ltkpdy.longitude AS location_longitude,
    geometry_elevatedpoint_view_ltkpdy.latitude AS location_latitude,
    geometry_elevatedpoint_view_ltkpdy.elevation AS location_elevation,
    geometry_elevatedpoint_view_ltkpdy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ltkpdy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ltkpdy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ltkpdy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_srkaxo.title as varchar), '(' || organisation_unit_pt_srkaxo.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_srkaxo.href::text AS serviceprovider_href,
    service_callsigndetail_view_jcfvkn.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_nteubb.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_txphtn.availability::jsonb as availability,
    notes_note_view_lcthsg.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_axgrph.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ltkpdy on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_ltkpdy.id
left join organisation.unit_pt organisation_unit_pt_srkaxo on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_srkaxo.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_cyrvyf.id) as callsign
  from master_join master_join_pjqzei
  join service.callsigndetail_view service_callsigndetail_lat_cyrvyf on master_join_pjqzei.target_id = service_callsigndetail_lat_cyrvyf.id
  where master_join_pjqzei.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_jcfvkn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_cocqvb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_cocqvb.title AS varchar), '(' || service_radiocommunicationchannel_lat_cocqvb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_cocqvb.href
  )) as radiocommunication  from master_join master_join_oqzgvf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_cocqvb on master_join_oqzgvf.target_id = service_radiocommunicationchannel_lat_cocqvb.id
  where master_join_oqzgvf.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_nteubb on TRUE
left join lateral(
  select
  from master_join master_join_enxesw
  join shared.contactinformation_view shared_contactinformation_lat_peluzz on master_join_enxesw.target_id = shared_contactinformation_lat_peluzz.id
  where master_join_enxesw.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_kmyogu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_qdifeq.id) as availability
  from master_join master_join_pqlskw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_qdifeq on master_join_pqlskw.target_id = service_serviceoperationalstatus_lat_qdifeq.id
  where master_join_pqlskw.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_txphtn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fhqwfh.*) AS annotation
  from master_join master_join_cxngpd
  join notes.note_view notes_note_lat_fhqwfh on master_join_cxngpd.target_id = notes_note_lat_fhqwfh.id
  where master_join_cxngpd.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_lcthsg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_qcqoif.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_qcqoif.title AS varchar), '(' || airport_heliport_airportheliport_lat_qcqoif.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_qcqoif.href
  )) as airportheliport  from master_join master_join_czaqjs
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_qcqoif on master_join_czaqjs.target_id = airport_heliport_airportheliport_lat_qcqoif.id
  where master_join_czaqjs.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_axgrph on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandType
-- ['notes.note_view', 'airport_heliport.aircraftstandcontamination_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_vlwrlq.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_vlwrlq.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_vdlhsp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vdlhsp.longitude AS location_longitude,
    geometry_elevatedpoint_view_vdlhsp.latitude AS location_latitude,
    geometry_elevatedpoint_view_vdlhsp.elevation AS location_elevation,
    geometry_elevatedpoint_view_vdlhsp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vdlhsp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vdlhsp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vdlhsp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_njxnfk.title as varchar), '(' || airport_heliport_apronelement_pt_njxnfk.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_njxnfk.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_isfpsg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_isfpsg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_isfpsg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_isfpsg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_isfpsg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_isfpsg.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_byktwr.contaminant::jsonb as contaminant,
    notes_note_view_idcaqx.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_tardaz.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_vlwrlq on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_vlwrlq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vdlhsp on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_vdlhsp.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_njxnfk on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_njxnfk.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_isfpsg on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_isfpsg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_tdghac.id) as contaminant
  from master_join master_join_olfbgb
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_tdghac on master_join_olfbgb.target_id = airport_heliport_aircraftstandcontamination_lat_tdghac.id
  where master_join_olfbgb.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_byktwr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_agbbfk.*) AS annotation
  from master_join master_join_qcdyqo
  join notes.note_view notes_note_lat_agbbfk on master_join_qcdyqo.target_id = notes_note_lat_agbbfk.id
  where master_join_qcdyqo.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_idcaqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_kvquvm.id) as availability
  from master_join master_join_uikazn
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_kvquvm on master_join_uikazn.target_id = airport_heliport_apronareaavailability_lat_kvquvm.id
  where master_join_uikazn.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_tardaz on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_ickibp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ickibp.longitude AS location_longitude,
    geometry_elevatedpoint_view_ickibp.latitude AS location_latitude,
    geometry_elevatedpoint_view_ickibp.elevation AS location_elevation,
    geometry_elevatedpoint_view_ickibp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ickibp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ickibp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ickibp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kdmjpi.title as varchar), '(' || organisation_unit_pt_kdmjpi.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_kdmjpi.href::text AS serviceprovider_href,
    service_callsigndetail_view_nowqqg.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ewbape.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xejgpc.availability::jsonb as availability,
    notes_note_view_xhjrnr.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_vqrpar.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ickibp on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_ickibp.id
left join organisation.unit_pt organisation_unit_pt_kdmjpi on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_kdmjpi.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_epiaji.id) as callsign
  from master_join master_join_ckkpnk
  join service.callsigndetail_view service_callsigndetail_lat_epiaji on master_join_ckkpnk.target_id = service_callsigndetail_lat_epiaji.id
  where master_join_ckkpnk.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_nowqqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_daeiml.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_daeiml.title AS varchar), '(' || service_radiocommunicationchannel_lat_daeiml.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_daeiml.href
  )) as radiocommunication  from master_join master_join_ofkmud
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_daeiml on master_join_ofkmud.target_id = service_radiocommunicationchannel_lat_daeiml.id
  where master_join_ofkmud.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_ewbape on TRUE
left join lateral(
  select
  from master_join master_join_qszluq
  join shared.contactinformation_view shared_contactinformation_lat_svbnbp on master_join_qszluq.target_id = shared_contactinformation_lat_svbnbp.id
  where master_join_qszluq.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_ayadbu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_uejpzz.id) as availability
  from master_join master_join_xgvakx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_uejpzz on master_join_xgvakx.target_id = service_serviceoperationalstatus_lat_uejpzz.id
  where master_join_xgvakx.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_xejgpc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ewqhro.*) AS annotation
  from master_join master_join_vlzumj
  join notes.note_view notes_note_lat_ewqhro on master_join_vlzumj.target_id = notes_note_lat_ewqhro.id
  where master_join_vlzumj.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_xhjrnr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pikpoi.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pikpoi.title AS varchar), '(' || airport_heliport_airportheliport_lat_pikpoi.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pikpoi.href
  )) as airportheliport  from master_join master_join_wabunw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pikpoi on master_join_wabunw.target_id = airport_heliport_airportheliport_lat_pikpoi.id
  where master_join_wabunw.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_vqrpar on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_rpbksw.title as varchar), '(' || airport_heliport_airportheliport_pt_rpbksw.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_rpbksw.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xpltfq.title as varchar), '(' || airport_heliport_airportheliport_pt_xpltfq.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_xpltfq.href::text AS dependentairport_href,
    notes_note_view_uhrmjo.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rpbksw on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_rpbksw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xpltfq on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_xpltfq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drfwvb.*) AS annotation
  from master_join master_join_uznzwr
  join notes.note_view notes_note_lat_drfwvb on master_join_uznzwr.target_id = notes_note_lat_drfwvb.id
  where master_join_uznzwr.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_uhrmjo on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportType
-- ['notes.note_view', 'shared.contactinformation_view', 'airport_heliport.airportheliportavailability_view', 'geometry.elevatedpoint_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.airportheliportresponsibilityorganisation_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_yeknqx.id)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_yeknqx.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_yjwolm.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_yjwolm.longitude AS arp_longitude,
    geometry_elevatedpoint_view_yjwolm.latitude AS arp_latitude,
    geometry_elevatedpoint_view_yjwolm.elevation AS arp_elevation,
    geometry_elevatedpoint_view_yjwolm.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_yjwolm.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_yjwolm.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_yjwolm.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_bpxvfy.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_bpxvfy.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_bpxvfy.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_bpxvfy.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_bpxvfy.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_bpxvfy.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_xjuvdj.contaminant::jsonb as contaminant,
    airport_heliport_city_view_kmedgq.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_pyskdj.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_goekrd.availability::jsonb as availability,
    notes_note_view_aywxgr.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_yeknqx on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_yeknqx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yjwolm on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_yjwolm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bpxvfy on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_bpxvfy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_owmqmc.id) as contaminant
  from master_join master_join_btnnsp
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_owmqmc on master_join_btnnsp.target_id = airport_heliport_airportheliportcontamination_lat_owmqmc.id
  where master_join_btnnsp.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_xjuvdj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_ohqusc.id) as servedcity
  from master_join master_join_wzjvwd
  join airport_heliport.city_view airport_heliport_city_lat_ohqusc on master_join_wzjvwd.target_id = airport_heliport_city_lat_ohqusc.id
  where master_join_wzjvwd.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_kmedgq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_znivzw.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_znivzw.title AS varchar), '(' || airport_heliport_altimetersource_lat_znivzw.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_znivzw.href
  )) as altimetersource  from master_join master_join_uszlhe
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_znivzw on master_join_uszlhe.target_id = airport_heliport_altimetersource_lat_znivzw.id
  where master_join_uszlhe.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_pyskdj on TRUE
left join lateral(
  select
  from master_join master_join_bxklsb
  join shared.contactinformation_view shared_contactinformation_lat_dkmtcq on master_join_bxklsb.target_id = shared_contactinformation_lat_dkmtcq.id
  where master_join_bxklsb.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_irjxqk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_koeioh.id) as availability
  from master_join master_join_ocrhnd
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_koeioh on master_join_ocrhnd.target_id = airport_heliport_airportheliportavailability_lat_koeioh.id
  where master_join_ocrhnd.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_goekrd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_euzbsi.*) AS annotation
  from master_join master_join_kafwzn
  join notes.note_view notes_note_lat_euzbsi on master_join_kafwzn.target_id = notes_note_lat_euzbsi.id
  where master_join_kafwzn.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_aywxgr on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_fovkoh.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_fovkoh.elevation AS area_elevation,
    geometry_elevatedsurface_view_fovkoh.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_fovkoh.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_fovkoh.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_fovkoh.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_vaoaau.title as varchar), '(' || airport_heliport_airportheliport_pt_vaoaau.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_vaoaau.href::text AS affectedairport_href,
    notes_note_view_padyog.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fovkoh on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_fovkoh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vaoaau on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_vaoaau.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vasqmk.*) AS annotation
  from master_join master_join_soharm
  join notes.note_view notes_note_lat_vasqmk on master_join_soharm.target_id = notes_note_lat_vasqmk.id
  where master_join_soharm.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_padyog on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_airportheliportprotectionarea_pt_fausff.title as varchar), '(' || airport_heliport_airportheliportprotectionarea_pt_fausff.nilreason[1] || ')')::text AS markedprotectionarea,
    airport_heliport_airportheliportprotectionarea_pt_fausff.href::text AS markedprotectionarea_href,
    airport_heliport_markingelement_view_ussboc.element::jsonb as element,
    notes_note_view_zpmhbv.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_pt_fausff on airport_heliport.airportprotectionareamarking_ts.markedprotectionarea_id = airport_heliport_airportheliportprotectionarea_pt_fausff.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_mbwhor.id) as element
  from master_join master_join_mzftjj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_mbwhor on master_join_mzftjj.target_id = airport_heliport_markingelement_lat_mbwhor.id
  where master_join_mzftjj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_ussboc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjkvnf.*) AS annotation
  from master_join master_join_kvepxj
  join notes.note_view notes_note_lat_qjkvnf on master_join_kvepxj.target_id = notes_note_lat_qjkvnf.id
  where master_join_kvepxj.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_zpmhbv on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceType
-- ['notes.note_view', 'service.nitrogen_view', 'service.fuel_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.oxygen_view', 'geometry.elevatedpoint_view', 'service.oil_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_phfnpu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_phfnpu.longitude AS location_longitude,
    geometry_elevatedpoint_view_phfnpu.latitude AS location_latitude,
    geometry_elevatedpoint_view_phfnpu.elevation AS location_elevation,
    geometry_elevatedpoint_view_phfnpu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_phfnpu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_phfnpu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_phfnpu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qwxeqq.title as varchar), '(' || organisation_unit_pt_qwxeqq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_qwxeqq.href::text AS serviceprovider_href,
    service_callsigndetail_view_elniib.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_aurdyr.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_iaifdx.availability::jsonb as availability,
    notes_note_view_neysah.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_svwhuj.airportheliport::jsonb as airportheliport,
    service_fuel_view_vfmybx.fuelsupply::jsonb as fuelsupply,
    service_oil_view_lvimea.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_hgefav.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_tlhvut.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_phfnpu on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_phfnpu.id
left join organisation.unit_pt organisation_unit_pt_qwxeqq on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_qwxeqq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_ofoqlt.id) as callsign
  from master_join master_join_vgnhxs
  join service.callsigndetail_view service_callsigndetail_lat_ofoqlt on master_join_vgnhxs.target_id = service_callsigndetail_lat_ofoqlt.id
  where master_join_vgnhxs.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_elniib on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_eawnmj.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_eawnmj.title AS varchar), '(' || service_radiocommunicationchannel_lat_eawnmj.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_eawnmj.href
  )) as radiocommunication  from master_join master_join_fdcgya
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_eawnmj on master_join_fdcgya.target_id = service_radiocommunicationchannel_lat_eawnmj.id
  where master_join_fdcgya.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_aurdyr on TRUE
left join lateral(
  select
  from master_join master_join_ghtxxw
  join shared.contactinformation_view shared_contactinformation_lat_crqonv on master_join_ghtxxw.target_id = shared_contactinformation_lat_crqonv.id
  where master_join_ghtxxw.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_rzbfrn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_vkqpqa.id) as availability
  from master_join master_join_bgholu
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_vkqpqa on master_join_bgholu.target_id = service_serviceoperationalstatus_lat_vkqpqa.id
  where master_join_bgholu.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_iaifdx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpmfbl.*) AS annotation
  from master_join master_join_zyiivp
  join notes.note_view notes_note_lat_gpmfbl on master_join_zyiivp.target_id = notes_note_lat_gpmfbl.id
  where master_join_zyiivp.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_neysah on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wjwuuy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wjwuuy.title AS varchar), '(' || airport_heliport_airportheliport_lat_wjwuuy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wjwuuy.href
  )) as airportheliport  from master_join master_join_kuqeqe
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wjwuuy on master_join_kuqeqe.target_id = airport_heliport_airportheliport_lat_wjwuuy.id
  where master_join_kuqeqe.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_svwhuj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_qikvhb.id) as fuelsupply
  from master_join master_join_znmold
  join service.fuel_view service_fuel_lat_qikvhb on master_join_znmold.target_id = service_fuel_lat_qikvhb.id
  where master_join_znmold.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_vfmybx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_sllptz.id) as oilsupply
  from master_join master_join_agusgn
  join service.oil_view service_oil_lat_sllptz on master_join_agusgn.target_id = service_oil_lat_sllptz.id
  where master_join_agusgn.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_lvimea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_vhxvgo.id) as nitrogensupply
  from master_join master_join_txaqyx
  join service.nitrogen_view service_nitrogen_lat_vhxvgo on master_join_txaqyx.target_id = service_nitrogen_lat_vhxvgo.id
  where master_join_txaqyx.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_hgefav on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_rlmspu.id) as oxygensupply
  from master_join master_join_atmwai
  join service.oxygen_view service_oxygen_lat_rlmspu on master_join_atmwai.target_id = service_oxygen_lat_rlmspu.id
  where master_join_atmwai.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_tlhvut on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_prreib.title as varchar), '(' || airspace_airspace_pt_prreib.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_prreib.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_fkfyhy.title as varchar), '(' || airspace_airspace_pt_fkfyhy.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_fkfyhy.href::text AS enteredairspace_href,
    notes_note_view_hsnuzi.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_prreib on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_prreib.id
left join airspace.airspace_pt airspace_airspace_pt_fkfyhy on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_fkfyhy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjawgu.*) AS annotation
  from master_join master_join_jtysda
  join notes.note_view notes_note_lat_yjawgu on master_join_jtysda.target_id = notes_note_lat_yjawgu.id
  where master_join_jtysda.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_hsnuzi on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceType
-- ['notes.note_view', 'airspace.airspaceactivation_view', 'airspace.airspacegeometrycomponent_view', 'airspace.airspacelayerclass_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_powhgv.title as varchar), '(' || routes_route_pt_powhgv.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_powhgv.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_xycjvx.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_djkiap.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_obdbau.activation::jsonb as activation,
    notes_note_view_erpxuc.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_powhgv on airspace.airspace_ts.protectedroute_id = routes_route_pt_powhgv.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_ugufug.id) as clazz
  from master_join master_join_pkzept
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_ugufug on master_join_pkzept.target_id = airspace_airspacelayerclass_lat_ugufug.id
  where master_join_pkzept.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_xycjvx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_mvyyfg.id) as geometrycomponent
  from master_join master_join_vbfbvx
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_mvyyfg on master_join_vbfbvx.target_id = airspace_airspacegeometrycomponent_lat_mvyyfg.id
  where master_join_vbfbvx.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_djkiap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_olxlnp.id) as activation
  from master_join master_join_ggufoj
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_olxlnp on master_join_ggufoj.target_id = airspace_airspaceactivation_lat_olxlnp.id
  where master_join_ggufoj.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_obdbau on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qgimui.*) AS annotation
  from master_join master_join_gxzrqg
  join notes.note_view notes_note_lat_qgimui on master_join_gxzrqg.target_id = notes_note_lat_qgimui.id
  where master_join_gxzrqg.source_id = airspace.airspace_ts.id
) as notes_note_view_erpxuc on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ryzngl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ryzngl.longitude AS location_longitude,
    geometry_elevatedpoint_view_ryzngl.latitude AS location_latitude,
    geometry_elevatedpoint_view_ryzngl.elevation AS location_elevation,
    geometry_elevatedpoint_view_ryzngl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ryzngl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ryzngl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ryzngl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zftzap.title as varchar), '(' || organisation_unit_pt_zftzap.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_zftzap.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_vfbnvt.title as varchar), '(' || navaids_points_directionfinder_pt_vfbnvt.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_vfbnvt.href::text AS aircraftlocator_href,
    service_callsigndetail_view_aeflua.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ttwnpe.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_axetdq.availability::jsonb as availability,
    notes_note_view_gsdelh.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_jjpmba.clientairport::jsonb as clientairport,
    airspace_airspace_pt_cpbxkm.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_wkojhb.clientroute::jsonb as clientroute,
    procedure_procedure_pt_cmfwwv.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_vnwmti.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_koxsas.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ryzngl on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ryzngl.id
left join organisation.unit_pt organisation_unit_pt_zftzap on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_zftzap.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_vfbnvt on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_vfbnvt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_pdlvgg.id) as callsign
  from master_join master_join_fpnapz
  join service.callsigndetail_view service_callsigndetail_lat_pdlvgg on master_join_fpnapz.target_id = service_callsigndetail_lat_pdlvgg.id
  where master_join_fpnapz.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_aeflua on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_jwmhgh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_jwmhgh.title AS varchar), '(' || service_radiocommunicationchannel_lat_jwmhgh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_jwmhgh.href
  )) as radiocommunication  from master_join master_join_emimfq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_jwmhgh on master_join_emimfq.target_id = service_radiocommunicationchannel_lat_jwmhgh.id
  where master_join_emimfq.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_ttwnpe on TRUE
left join lateral(
  select
  from master_join master_join_pofhmr
  join shared.contactinformation_view shared_contactinformation_lat_uzfgav on master_join_pofhmr.target_id = shared_contactinformation_lat_uzfgav.id
  where master_join_pofhmr.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_nyuoat on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bdxbkd.id) as availability
  from master_join master_join_qgfuvr
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bdxbkd on master_join_qgfuvr.target_id = service_serviceoperationalstatus_lat_bdxbkd.id
  where master_join_qgfuvr.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_axetdq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vepkzu.*) AS annotation
  from master_join master_join_lxgalz
  join notes.note_view notes_note_lat_vepkzu on master_join_lxgalz.target_id = notes_note_lat_vepkzu.id
  where master_join_lxgalz.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_gsdelh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_llybxr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_llybxr.title AS varchar), '(' || airport_heliport_airportheliport_lat_llybxr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_llybxr.href
  )) as clientairport  from master_join master_join_zbxngm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_llybxr on master_join_zbxngm.target_id = airport_heliport_airportheliport_lat_llybxr.id
  where master_join_zbxngm.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_jjpmba on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_desclt.id,
      'title', coalesce(cast(airspace_airspace_lat_desclt.title AS varchar), '(' || airspace_airspace_lat_desclt.nilreason[1] || ')'),
      'href', airspace_airspace_lat_desclt.href
  )) as clientairspace  from master_join master_join_shxbzb
  join airspace.airspace_pt airspace_airspace_lat_desclt on master_join_shxbzb.target_id = airspace_airspace_lat_desclt.id
  where master_join_shxbzb.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_cpbxkm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_tncnvp.id) as clientroute
  from master_join master_join_etjmvj
  join routes.routeportion_view routes_routeportion_lat_tncnvp on master_join_etjmvj.target_id = routes_routeportion_lat_tncnvp.id
  where master_join_etjmvj.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_wkojhb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_eudsyk.id,
      'title', coalesce(cast(procedure_procedure_lat_eudsyk.title AS varchar), '(' || procedure_procedure_lat_eudsyk.nilreason[1] || ')'),
      'href', procedure_procedure_lat_eudsyk.href
  )) as clientprocedure  from master_join master_join_awqsqs
  join procedure.procedure_pt procedure_procedure_lat_eudsyk on master_join_awqsqs.target_id = procedure_procedure_lat_eudsyk.id
  where master_join_awqsqs.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_cmfwwv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_nundih.id,
      'title', coalesce(cast(holding_holdingpattern_lat_nundih.title AS varchar), '(' || holding_holdingpattern_lat_nundih.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_nundih.href
  )) as clientholding  from master_join master_join_rfaxlv
  join holding.holdingpattern_pt holding_holdingpattern_lat_nundih on master_join_rfaxlv.target_id = holding_holdingpattern_lat_nundih.id
  where master_join_rfaxlv.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_vnwmti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_pxivdn.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_pxivdn.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_pxivdn.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_pxivdn.href
  )) as clientaerialrefuelling  from master_join master_join_zcqihb
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_pxivdn on master_join_zcqihb.target_id = aerial_refuelling_aerialrefuelling_lat_pxivdn.id
  where master_join_zcqihb.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_koxsas on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_skauak.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_skauak.longitude AS location_longitude,
    geometry_elevatedpoint_view_skauak.latitude AS location_latitude,
    geometry_elevatedpoint_view_skauak.elevation AS location_elevation,
    geometry_elevatedpoint_view_skauak.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_skauak.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_skauak.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_skauak.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_llojky.title as varchar), '(' || organisation_unit_pt_llojky.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_llojky.href::text AS serviceprovider_href,
    service_callsigndetail_view_dmbjtr.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_mcvcdd.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ddljkn.availability::jsonb as availability,
    notes_note_view_kpnfdd.annotation::jsonb as annotation,
    airspace_airspace_pt_palsef.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_upwigg.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_xctrtf.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_skauak on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_skauak.id
left join organisation.unit_pt organisation_unit_pt_llojky on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_llojky.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_impvlu.id) as callsign
  from master_join master_join_kvnpzz
  join service.callsigndetail_view service_callsigndetail_lat_impvlu on master_join_kvnpzz.target_id = service_callsigndetail_lat_impvlu.id
  where master_join_kvnpzz.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_dmbjtr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_vunntv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_vunntv.title AS varchar), '(' || service_radiocommunicationchannel_lat_vunntv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_vunntv.href
  )) as radiocommunication  from master_join master_join_fmilzv
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_vunntv on master_join_fmilzv.target_id = service_radiocommunicationchannel_lat_vunntv.id
  where master_join_fmilzv.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_mcvcdd on TRUE
left join lateral(
  select
  from master_join master_join_wjvmbt
  join shared.contactinformation_view shared_contactinformation_lat_bujsdn on master_join_wjvmbt.target_id = shared_contactinformation_lat_bujsdn.id
  where master_join_wjvmbt.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_udwyoz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ujexvx.id) as availability
  from master_join master_join_mcbqfs
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ujexvx on master_join_mcbqfs.target_id = service_serviceoperationalstatus_lat_ujexvx.id
  where master_join_mcbqfs.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_ddljkn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jkcsym.*) AS annotation
  from master_join master_join_hhywoe
  join notes.note_view notes_note_lat_jkcsym on master_join_hhywoe.target_id = notes_note_lat_jkcsym.id
  where master_join_hhywoe.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_kpnfdd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_dsaqae.id,
      'title', coalesce(cast(airspace_airspace_lat_dsaqae.title AS varchar), '(' || airspace_airspace_lat_dsaqae.nilreason[1] || ')'),
      'href', airspace_airspace_lat_dsaqae.href
  )) as clientairspace  from master_join master_join_ccbvtq
  join airspace.airspace_pt airspace_airspace_lat_dsaqae on master_join_ccbvtq.target_id = airspace_airspace_lat_dsaqae.id
  where master_join_ccbvtq.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_palsef on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_mgxlhv.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_mgxlhv.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_mgxlhv.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_mgxlhv.href
  )) as clientaerialrefuelling  from master_join master_join_igehbd
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_mgxlhv on master_join_igehbd.target_id = aerial_refuelling_aerialrefuelling_lat_mgxlhv.id
  where master_join_igehbd.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_upwigg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_enhfrk.id) as clientroute
  from master_join master_join_pchvbp
  join routes.routeportion_view routes_routeportion_lat_enhfrk on master_join_pchvbp.target_id = routes_routeportion_lat_enhfrk.id
  where master_join_pchvbp.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_xctrtf on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_jjvibz.availability::jsonb as availability,
    notes_note_view_kkzcth.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_qtrrxd.id) as availability
  from master_join master_join_mmvgqk
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_qtrrxd on master_join_mmvgqk.target_id = airport_heliport_altimetersourcestatus_lat_qtrrxd.id
  where master_join_mmvgqk.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_jjvibz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vwygtv.*) AS annotation
  from master_join master_join_fxnnix
  join notes.note_view notes_note_lat_vwygtv on master_join_fxnnix.target_id = notes_note_lat_vwygtv.id
  where master_join_fxnnix.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_kkzcth on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_fjhpjp.title as varchar), '(' || navaids_points_designatedpoint_pt_fjhpjp.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_fjhpjp.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ukrzgi.title as varchar), '(' || navaids_points_designatedpoint_pt_ukrzgi.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ukrzgi.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ahbdnt.title as varchar), '(' || navaids_points_navaid_pt_ahbdnt.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ahbdnt.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ywuphk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ywuphk.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ywuphk.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hubzdb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hubzdb.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hubzdb.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dutezf.title as varchar), '(' || airport_heliport_airportheliport_pt_dutezf.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_dutezf.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_zfkarh.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_zfkarh.longitude AS pointchoiceposition_longitude,
    geometry_point_view_zfkarh.latitude AS pointchoiceposition_latitude,
    geometry_point_view_zfkarh.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_pzpjdu.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_fjhpjp on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_fjhpjp.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ukrzgi on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ukrzgi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ahbdnt on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_ahbdnt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ywuphk on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ywuphk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hubzdb on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hubzdb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dutezf on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_dutezf.id
left join geometry.point_view geometry_point_view_zfkarh on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_zfkarh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_znabiy.*) AS annotation
  from master_join master_join_oqqtvs
  join notes.note_view notes_note_lat_znabiy on master_join_oqqtvs.target_id = notes_note_lat_znabiy.id
  where master_join_oqqtvs.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_pzpjdu on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_aizdsb.title as varchar), '(' || airport_heliport_runwaydirection_pt_aizdsb.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_aizdsb.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_ohljqc.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_veeyjn.availability::jsonb as availability,
    notes_note_view_awfmyi.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_aizdsb on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_aizdsb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_iibvad.id) as element
  from master_join master_join_pfgnnw
  join shared.lightelement_view shared_lightelement_lat_iibvad on master_join_pfgnnw.target_id = shared_lightelement_lat_iibvad.id
  where master_join_pfgnnw.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_ohljqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_fftexy.id) as availability
  from master_join master_join_ujxsgz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_fftexy on master_join_ujxsgz.target_id = airport_heliport_groundlightingavailability_lat_fftexy.id
  where master_join_ujxsgz.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_veeyjn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hbqqth.*) AS annotation
  from master_join master_join_bpvpog
  join notes.note_view notes_note_lat_hbqqth on master_join_bpvpog.target_id = notes_note_lat_hbqqth.id
  where master_join_bpvpog.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_awfmyi on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_hbygvo.title as varchar), '(' || airport_heliport_apron_pt_hbygvo.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_hbygvo.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_oadmtq.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_oadmtq.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_bmdfjl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_bmdfjl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bmdfjl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bmdfjl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bmdfjl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bmdfjl.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_xrrcym.supplyservice::jsonb as supplyservice,
    notes_note_view_tpdibe.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_xaxvad.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_hbygvo on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_hbygvo.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_oadmtq on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_oadmtq.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bmdfjl on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_bmdfjl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_pnczwr.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_pnczwr.title AS varchar), '(' || service_airportsuppliesservice_lat_pnczwr.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_pnczwr.href
  )) as supplyservice  from master_join master_join_kzkyem
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_pnczwr on master_join_kzkyem.target_id = service_airportsuppliesservice_lat_pnczwr.id
  where master_join_kzkyem.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_xrrcym on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgnzvt.*) AS annotation
  from master_join master_join_orbkmb
  join notes.note_view notes_note_lat_vgnzvt on master_join_orbkmb.target_id = notes_note_lat_vgnzvt.id
  where master_join_orbkmb.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_tpdibe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_bkzlbf.id) as availability
  from master_join master_join_hzdovp
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_bkzlbf on master_join_hzdovp.target_id = airport_heliport_apronareaavailability_lat_bkzlbf.id
  where master_join_hzdovp.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_xaxvad on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_gqnstz.title as varchar), '(' || airport_heliport_apron_pt_gqnstz.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_gqnstz.href::text AS lightedapron_href,
    shared_lightelement_view_pbhxqi.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_wlbkoq.availability::jsonb as availability,
    notes_note_view_wsfdlo.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_gqnstz on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_gqnstz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_zmzgfk.id) as element
  from master_join master_join_tglnwc
  join shared.lightelement_view shared_lightelement_lat_zmzgfk on master_join_tglnwc.target_id = shared_lightelement_lat_zmzgfk.id
  where master_join_tglnwc.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_pbhxqi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_glrewq.id) as availability
  from master_join master_join_ebpkrp
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_glrewq on master_join_ebpkrp.target_id = airport_heliport_groundlightingavailability_lat_glrewq.id
  where master_join_ebpkrp.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_wlbkoq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_reemvf.*) AS annotation
  from master_join master_join_skqnvp
  join notes.note_view notes_note_lat_reemvf on master_join_skqnvp.target_id = notes_note_lat_reemvf.id
  where master_join_skqnvp.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_wsfdlo on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_ogfzie.title as varchar), '(' || airport_heliport_apron_pt_ogfzie.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_ogfzie.href::text AS markedapron_href,
    airport_heliport_markingelement_view_zmarjj.element::jsonb as element,
    notes_note_view_jokyss.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ogfzie on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_ogfzie.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pbyvyf.id) as element
  from master_join master_join_lpnhvc
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_pbyvyf on master_join_lpnhvc.target_id = airport_heliport_markingelement_lat_pbyvyf.id
  where master_join_lpnhvc.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_zmarjj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ncghxk.*) AS annotation
  from master_join master_join_tfdyqy
  join notes.note_view notes_note_lat_ncghxk on master_join_tfdyqy.target_id = notes_note_lat_ncghxk.id
  where master_join_tfdyqy.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_jokyss on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronType
-- ['notes.note_view', 'airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mlpimg.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_mlpimg.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_ejqozf.title as varchar), '(' || airport_heliport_airportheliport_pt_ejqozf.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ejqozf.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_awbhqp.contaminant::jsonb as contaminant,
    notes_note_view_fetlak.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_mxhnet.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mlpimg on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mlpimg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ejqozf on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ejqozf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_ogjozh.id) as contaminant
  from master_join master_join_mcmxyh
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_ogjozh on master_join_mcmxyh.target_id = airport_heliport_aproncontamination_lat_ogjozh.id
  where master_join_mcmxyh.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_awbhqp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fddxqz.*) AS annotation
  from master_join master_join_jardaa
  join notes.note_view notes_note_lat_fddxqz on master_join_jardaa.target_id = notes_note_lat_fddxqz.id
  where master_join_jardaa.source_id = airport_heliport.apron_ts.id
) as notes_note_view_fetlak on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_sghzjs.id) as availability
  from master_join master_join_qzrrca
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_sghzjs on master_join_qzrrca.target_id = airport_heliport_apronareaavailability_lat_sghzjs.id
  where master_join_qzrrca.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_mxhnet on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nhbwzr.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_nhbwzr.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_nqtack.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_nqtack.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_nqtack.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_nqtack.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_nqtack.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_nqtack.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_sjrjko.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_sjrjko.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_sjrjko.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_sjrjko.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_sjrjko.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_sjrjko.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_webnhm.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_webnhm.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_webnhm.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_webnhm.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_webnhm.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_webnhm.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_webnhm.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_webnhm.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_ybmffp.runwaydirection::jsonb as runwaydirection,
    notes_note_view_enuzyn.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nhbwzr on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nhbwzr.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_nqtack on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_nqtack.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_sjrjko on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_sjrjko.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_webnhm on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_webnhm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_wguswn.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_wguswn.title AS varchar), '(' || airport_heliport_runwaydirection_lat_wguswn.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_wguswn.href
  )) as runwaydirection  from master_join master_join_zrkiot
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_wguswn on master_join_zrkiot.target_id = airport_heliport_runwaydirection_lat_wguswn.id
  where master_join_zrkiot.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_ybmffp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqsmlw.*) AS annotation
  from master_join master_join_bbghmj
  join notes.note_view notes_note_lat_lqsmlw on master_join_bbghmj.target_id = notes_note_lat_lqsmlw.id
  where master_join_bbghmj.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_enuzyn on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_twvwwi.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_twvwwi.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_debopi.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_debopi.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cyleko.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_cyleko.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_hhinzh.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_hhinzh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qkjvdy.title as varchar), '(' || navaids_points_angleindication_pt_qkjvdy.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qkjvdy.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_fsgdav.title as varchar), '(' || navaids_points_distanceindication_pt_fsgdav.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_fsgdav.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qbryli.id)::jsonb AS holding,
    procedure_holdinguse_view_qbryli.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_vhnwgd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_vhnwgd.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_vhnwgd.href::text AS approach_href,
    shared_aircraftcharacteristic_view_fgfvsi.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_yrlvjb.designsurface::jsonb as designsurface,
    notes_note_view_tmxlgc.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_twvwwi on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_twvwwi.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_debopi on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_debopi.id
left join geometry.curve_view geometry_curve_view_hhinzh on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_hhinzh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cyleko on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_cyleko.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qkjvdy on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_qkjvdy.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_fsgdav on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_fsgdav.id
left join procedure.holdinguse_view procedure_holdinguse_view_qbryli on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_qbryli.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_vhnwgd on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_vhnwgd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_woezkx.id) as aircraftcategory
  from master_join master_join_lyecqq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_woezkx on master_join_lyecqq.target_id = shared_aircraftcharacteristic_lat_woezkx.id
  where master_join_lyecqq.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_fgfvsi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_nggfpm.id) as designsurface
  from master_join master_join_hxzpkj
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_nggfpm on master_join_hxzpkj.target_id = shared_obstacleassessmentarea_lat_nggfpm.id
  where master_join_hxzpkj.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_yrlvjb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cjoyrt.*) AS annotation
  from master_join master_join_cinfck
  join notes.note_view notes_note_lat_cjoyrt on master_join_cinfck.target_id = notes_note_lat_cjoyrt.id
  where master_join_cinfck.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_tmxlgc on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jztmvo.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_jztmvo.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ncoeho.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_ncoeho.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qevzjz.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_qevzjz.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_neceaw.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_neceaw.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_anuqhi.title as varchar), '(' || navaids_points_angleindication_pt_anuqhi.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_anuqhi.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_czcpkj.title as varchar), '(' || navaids_points_distanceindication_pt_czcpkj.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_czcpkj.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_jfdhgw.id)::jsonb AS holding,
    procedure_holdinguse_view_jfdhgw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_afulqe.title as varchar), '(' || procedure_standardinstrumentarrival_pt_afulqe.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_afulqe.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_snhcnp.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_ozxjeq.designsurface::jsonb as designsurface,
    notes_note_view_ybfigd.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jztmvo on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_jztmvo.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ncoeho on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ncoeho.id
left join geometry.curve_view geometry_curve_view_neceaw on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_neceaw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qevzjz on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_qevzjz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_anuqhi on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_anuqhi.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_czcpkj on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_czcpkj.id
left join procedure.holdinguse_view procedure_holdinguse_view_jfdhgw on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_jfdhgw.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_afulqe on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_afulqe.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_imddkk.id) as aircraftcategory
  from master_join master_join_battzd
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_imddkk on master_join_battzd.target_id = shared_aircraftcharacteristic_lat_imddkk.id
  where master_join_battzd.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_snhcnp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_wmknfs.id) as designsurface
  from master_join master_join_sfbcnr
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_wmknfs on master_join_sfbcnr.target_id = shared_obstacleassessmentarea_lat_wmknfs.id
  where master_join_sfbcnr.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_ozxjeq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gjqgjd.*) AS annotation
  from master_join master_join_yyojwz
  join notes.note_view notes_note_lat_gjqgjd on master_join_yyojwz.target_id = notes_note_lat_gjqgjd.id
  where master_join_yyojwz.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_ybfigd on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_vrfxht.title as varchar), '(' || organisation_organisationauthority_pt_vrfxht.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_vrfxht.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_sgrauw.title as varchar), '(' || airspace_airspace_pt_sgrauw.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_sgrauw.href::text AS assignedairspace_href,
    notes_note_view_frlsuc.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vrfxht on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_vrfxht.id
left join airspace.airspace_pt airspace_airspace_pt_sgrauw on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_sgrauw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wfpjlq.*) AS annotation
  from master_join master_join_xiujge
  join notes.note_view notes_note_lat_wfpjlq on master_join_xiujge.target_id = notes_note_lat_wfpjlq.id
  where master_join_xiujge.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_frlsuc on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_kegeiu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kegeiu.longitude AS location_longitude,
    geometry_elevatedpoint_view_kegeiu.latitude AS location_latitude,
    geometry_elevatedpoint_view_kegeiu.elevation AS location_elevation,
    geometry_elevatedpoint_view_kegeiu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kegeiu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kegeiu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kegeiu.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ervgre.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mroppr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_kljeky.availability::jsonb as availability,
    notes_note_view_hhdzpp.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kegeiu on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_kegeiu.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zuizuj.id) as authority
  from master_join master_join_ddczkn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zuizuj on master_join_ddczkn.target_id = navaids_points_authorityfornavaidequipment_lat_zuizuj.id
  where master_join_ddczkn.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_ervgre on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ahqmzm.id) as monitoring
  from master_join master_join_ufagvz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ahqmzm on master_join_ufagvz.target_id = navaids_points_navaidequipmentmonitoring_lat_ahqmzm.id
  where master_join_ufagvz.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mroppr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_cyixli.id) as availability
  from master_join master_join_chsxrf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_cyixli on master_join_chsxrf.target_id = navaids_points_navaidoperationalstatus_lat_cyixli.id
  where master_join_chsxrf.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_kljeky on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qqqenb.*) AS annotation
  from master_join master_join_gezpne
  join notes.note_view notes_note_lat_qqqenb on master_join_gezpne.target_id = notes_note_lat_qqqenb.id
  where master_join_gezpne.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_hhdzpp on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointType
-- ['notes.note_view', 'routes.routeportion_view', 'geometry.point_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_abharo.title as varchar), '(' || navaids_points_designatedpoint_pt_abharo.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_abharo.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ekpmrr.title as varchar), '(' || navaids_points_navaid_pt_ekpmrr.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_ekpmrr.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rltxnp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rltxnp.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_rltxnp.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_wkbehq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_wkbehq.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_wkbehq.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cwhiwu.title as varchar), '(' || airport_heliport_airportheliport_pt_cwhiwu.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_cwhiwu.href::text AS locationairportreferencepoint_href,
    geometry_point_view_xywxmh.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_xywxmh.longitude AS locationposition_longitude,
    geometry_point_view_xywxmh.latitude AS locationposition_latitude,
    geometry_point_view_xywxmh.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_soimnn.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_soimnn.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_qelubu.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_abharo on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_abharo.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ekpmrr on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_ekpmrr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rltxnp on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rltxnp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_wkbehq on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_wkbehq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cwhiwu on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_cwhiwu.id
left join geometry.point_view geometry_point_view_xywxmh on routes.changeoverpoint_ts.location_position_id = geometry_point_view_xywxmh.id
left join routes.routeportion_view routes_routeportion_view_soimnn on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_soimnn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dpenkt.*) AS annotation
  from master_join master_join_qqniir
  join notes.note_view notes_note_lat_dpenkt on master_join_qqniir.target_id = notes_note_lat_dpenkt.id
  where master_join_qqniir.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_qelubu on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_lpgvwh.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_lpgvwh.longitude AS position_longitude,
    geometry_elevatedpoint_view_lpgvwh.latitude AS position_latitude,
    geometry_elevatedpoint_view_lpgvwh.elevation AS position_elevation,
    geometry_elevatedpoint_view_lpgvwh.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_lpgvwh.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_lpgvwh.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_lpgvwh.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_lfagnb.title as varchar), '(' || airport_heliport_airportheliport_pt_lfagnb.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_lfagnb.href::text AS airportheliport_href,
    notes_note_view_oawzkq.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lpgvwh on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_lpgvwh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lfagnb on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_lfagnb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bkjybe.*) AS annotation
  from master_join master_join_fmkudt
  join notes.note_view notes_note_lat_bkjybe on master_join_fmkudt.target_id = notes_note_lat_bkjybe.id
  where master_join_fmkudt.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_oawzkq on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_cjhwbd.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_cjhwbd.longitude AS position_longitude,
    geometry_elevatedpoint_view_cjhwbd.latitude AS position_latitude,
    geometry_elevatedpoint_view_cjhwbd.elevation AS position_elevation,
    geometry_elevatedpoint_view_cjhwbd.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_cjhwbd.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_cjhwbd.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_cjhwbd.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_jsoeir.title as varchar), '(' || airport_heliport_airportheliport_pt_jsoeir.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_jsoeir.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_yadvom.title as varchar), '(' || navaids_points_vor_pt_yadvom.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_yadvom.href::text AS checkpointfacility_href,
    notes_note_view_oukwfk.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cjhwbd on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_cjhwbd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jsoeir on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_jsoeir.id
left join navaids_points.vor_pt navaids_points_vor_pt_yadvom on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_yadvom.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_blkvvl.*) AS annotation
  from master_join master_join_fjxrvg
  join notes.note_view notes_note_lat_blkvvl on master_join_fjxrvg.target_id = notes_note_lat_blkvvl.id
  where master_join_fjxrvg.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_oukwfk on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.surface_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_esruwl.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_esruwl.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_vjovew.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_vjovew.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_vjovew.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_uetwxm.id)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_uetwxm.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_fikxjq.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_kfzqio.designsurface::jsonb as designsurface,
    notes_note_view_eorkui.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_esruwl on public.circlingarea_ts.extent_id = geometry_surface_view_esruwl.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_vjovew on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_vjovew.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_uetwxm on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_uetwxm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_khfvtp.id) as condition
  from master_join master_join_rtljfe
  join procedure.approachcondition_view procedure_approachcondition_lat_khfvtp on master_join_rtljfe.target_id = procedure_approachcondition_lat_khfvtp.id
  where master_join_rtljfe.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_fikxjq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ksjquo.id) as designsurface
  from master_join master_join_whoojb
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ksjquo on master_join_whoojb.target_id = shared_obstacleassessmentarea_lat_ksjquo.id
  where master_join_whoojb.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_kfzqio on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gskwsm.*) AS annotation
  from master_join master_join_jypjuq
  join notes.note_view notes_note_lat_gskwsm on master_join_jypjuq.target_id = notes_note_lat_gskwsm.id
  where master_join_jypjuq.source_id = public.circlingarea_ts.id
) as notes_note_view_eorkui on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_rqvtyr.title as varchar), '(' || airport_heliport_deicingarea_pt_rqvtyr.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_rqvtyr.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_dbwhvv.element::jsonb as element,
    notes_note_view_cdcuji.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_rqvtyr on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_rqvtyr.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_qqrieb.id) as element
  from master_join master_join_hsecoj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_qqrieb on master_join_hsecoj.target_id = airport_heliport_markingelement_lat_qqrieb.id
  where master_join_hsecoj.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_dbwhvv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uhyfjb.*) AS annotation
  from master_join master_join_imlnxv
  join notes.note_view notes_note_lat_uhyfjb on master_join_imlnxv.target_id = notes_note_lat_uhyfjb.id
  where master_join_imlnxv.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_cdcuji on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_hrvixv.title as varchar), '(' || airport_heliport_apron_pt_hrvixv.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_hrvixv.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_qrnzpf.title as varchar), '(' || airport_heliport_taxiway_pt_qrnzpf.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_qrnzpf.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_pqrylg.title as varchar), '(' || airport_heliport_aircraftstand_pt_pqrylg.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_pqrylg.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_oeuzwc.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_oeuzwc.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_xvtcqe.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xvtcqe.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xvtcqe.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xvtcqe.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xvtcqe.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xvtcqe.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_bdmhnc.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_vwlgbz.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_hrvixv on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_hrvixv.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_qrnzpf on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_qrnzpf.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_pqrylg on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_pqrylg.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_oeuzwc on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_oeuzwc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xvtcqe on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_xvtcqe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jbfmxp.*) AS annotation
  from master_join master_join_mupxac
  join notes.note_view notes_note_lat_jbfmxp on master_join_mupxac.target_id = notes_note_lat_jbfmxp.id
  where master_join_mupxac.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_bdmhnc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_ceuujf.id) as availability
  from master_join master_join_vnnizq
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_ceuujf on master_join_vnnizq.target_id = airport_heliport_apronareaavailability_lat_ceuujf.id
  where master_join_vnnizq.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_vwlgbz on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'procedure.departurearrivalcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kqbawx.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_kqbawx.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rdevyv.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rdevyv.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sqnrhd.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_sqnrhd.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_gbgiwh.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_gbgiwh.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_uqosnz.title as varchar), '(' || navaids_points_angleindication_pt_uqosnz.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_uqosnz.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_cwelfq.title as varchar), '(' || navaids_points_distanceindication_pt_cwelfq.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_cwelfq.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_jydece.id)::jsonb AS holding,
    procedure_holdinguse_view_jydece.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_cwzlts.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_cwzlts.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_cwzlts.href::text AS departure_href,
    shared_aircraftcharacteristic_view_wyrwtn.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_gsequa.designsurface::jsonb as designsurface,
    notes_note_view_tybnta.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_bwdpyu.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kqbawx on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_kqbawx.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rdevyv on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rdevyv.id
left join geometry.curve_view geometry_curve_view_gbgiwh on procedure.departureleg_ts.trajectory_id = geometry_curve_view_gbgiwh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sqnrhd on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_sqnrhd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_uqosnz on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_uqosnz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_cwelfq on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_cwelfq.id
left join procedure.holdinguse_view procedure_holdinguse_view_jydece on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_jydece.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_cwzlts on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_cwzlts.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ufqbhu.id) as aircraftcategory
  from master_join master_join_dptxrf
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ufqbhu on master_join_dptxrf.target_id = shared_aircraftcharacteristic_lat_ufqbhu.id
  where master_join_dptxrf.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_wyrwtn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_npsbgi.id) as designsurface
  from master_join master_join_mdqnxg
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_npsbgi on master_join_mdqnxg.target_id = shared_obstacleassessmentarea_lat_npsbgi.id
  where master_join_mdqnxg.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_gsequa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_padfem.*) AS annotation
  from master_join master_join_stxoma
  join notes.note_view notes_note_lat_padfem on master_join_stxoma.target_id = notes_note_lat_padfem.id
  where master_join_stxoma.source_id = procedure.departureleg_ts.id
) as notes_note_view_tybnta on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_jisdxi.id) as condition
  from master_join master_join_yehrab
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_jisdxi on master_join_yehrab.target_id = procedure_departurearrivalcondition_lat_jisdxi.id
  where master_join_yehrab.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_bwdpyu on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_rzhyym.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_rzhyym.longitude AS location_longitude,
    geometry_point_view_rzhyym.latitude AS location_latitude,
    geometry_point_view_rzhyym.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_oghfln.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_oghfln.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_oghfln.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cvdqcw.title as varchar), '(' || airport_heliport_airportheliport_pt_cvdqcw.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_cvdqcw.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ejmfrd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ejmfrd.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ejmfrd.href::text AS runwaypoint_href,
    notes_note_view_wfklbf.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_rzhyym on navaids_points.designatedpoint_ts.location_id = geometry_point_view_rzhyym.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_oghfln on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_oghfln.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cvdqcw on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_cvdqcw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ejmfrd on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ejmfrd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgtieu.*) AS annotation
  from master_join master_join_osybqh
  join notes.note_view notes_note_lat_wgtieu on master_join_osybqh.target_id = notes_note_lat_wgtieu.id
  where master_join_osybqh.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_wfklbf on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_yfwfqg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yfwfqg.longitude AS location_longitude,
    geometry_elevatedpoint_view_yfwfqg.latitude AS location_latitude,
    geometry_elevatedpoint_view_yfwfqg.elevation AS location_elevation,
    geometry_elevatedpoint_view_yfwfqg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yfwfqg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yfwfqg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yfwfqg.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_zsscdq.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_klvtfh.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_bnhabo.availability::jsonb as availability,
    notes_note_view_izulbn.annotation::jsonb as annotation,
    service_informationservice_pt_kcbqgc.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yfwfqg on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_yfwfqg.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ghjrxu.id) as authority
  from master_join master_join_myglbz
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ghjrxu on master_join_myglbz.target_id = navaids_points_authorityfornavaidequipment_lat_ghjrxu.id
  where master_join_myglbz.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_zsscdq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_aoybxn.id) as monitoring
  from master_join master_join_tbjegx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_aoybxn on master_join_tbjegx.target_id = navaids_points_navaidequipmentmonitoring_lat_aoybxn.id
  where master_join_tbjegx.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_klvtfh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qzwbqz.id) as availability
  from master_join master_join_grpkuj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qzwbqz on master_join_grpkuj.target_id = navaids_points_navaidoperationalstatus_lat_qzwbqz.id
  where master_join_grpkuj.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_bnhabo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cixkwd.*) AS annotation
  from master_join master_join_zkjcuo
  join notes.note_view notes_note_lat_cixkwd on master_join_zkjcuo.target_id = notes_note_lat_cixkwd.id
  where master_join_zkjcuo.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_izulbn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_zumszd.id,
      'title', coalesce(cast(service_informationservice_lat_zumszd.title AS varchar), '(' || service_informationservice_lat_zumszd.nilreason[1] || ')'),
      'href', service_informationservice_lat_zumszd.href
  )) as informationprovision  from master_join master_join_yukhxm
  join service.informationservice_pt service_informationservice_lat_zumszd on master_join_yukhxm.target_id = service_informationservice_lat_zumszd.id
  where master_join_yukhxm.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_kcbqgc on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_uprukg.title as varchar), '(' || navaids_points_designatedpoint_pt_uprukg.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_uprukg.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_zfqggh.title as varchar), '(' || navaids_points_designatedpoint_pt_zfqggh.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_zfqggh.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_geklgq.title as varchar), '(' || navaids_points_navaid_pt_geklgq.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_geklgq.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_cukqem.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_cukqem.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_cukqem.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nnkkzo.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nnkkzo.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nnkkzo.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zwjmqb.title as varchar), '(' || airport_heliport_airportheliport_pt_zwjmqb.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zwjmqb.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_yykyqc.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_yykyqc.longitude AS pointchoiceposition_longitude,
    geometry_point_view_yykyqc.latitude AS pointchoiceposition_latitude,
    geometry_point_view_yykyqc.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_qqujvs.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uprukg on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_uprukg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zfqggh on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zfqggh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_geklgq on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_geklgq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_cukqem on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_cukqem.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nnkkzo on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nnkkzo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zwjmqb on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_zwjmqb.id
left join geometry.point_view geometry_point_view_yykyqc on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_yykyqc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqtwyl.*) AS annotation
  from master_join master_join_qlovpp
  join notes.note_view notes_note_lat_oqtwyl on master_join_qlovpp.target_id = notes_note_lat_oqtwyl.id
  where master_join_qlovpp.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_qqujvs on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMEType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_xgiozr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xgiozr.longitude AS location_longitude,
    geometry_elevatedpoint_view_xgiozr.latitude AS location_latitude,
    geometry_elevatedpoint_view_xgiozr.elevation AS location_elevation,
    geometry_elevatedpoint_view_xgiozr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xgiozr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xgiozr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xgiozr.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rijneu.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_wfnlsv.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_oozkpd.availability::jsonb as availability,
    notes_note_view_gwisei.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xgiozr on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_xgiozr.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lbzvfe.id) as authority
  from master_join master_join_zfpcdm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lbzvfe on master_join_zfpcdm.target_id = navaids_points_authorityfornavaidequipment_lat_lbzvfe.id
  where master_join_zfpcdm.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_rijneu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lfnvue.id) as monitoring
  from master_join master_join_poyyxm
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lfnvue on master_join_poyyxm.target_id = navaids_points_navaidequipmentmonitoring_lat_lfnvue.id
  where master_join_poyyxm.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_wfnlsv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_khofjx.id) as availability
  from master_join master_join_rgqmjc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_khofjx on master_join_rgqmjc.target_id = navaids_points_navaidoperationalstatus_lat_khofjx.id
  where master_join_rgqmjc.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_oozkpd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbrdrj.*) AS annotation
  from master_join master_join_yxnasp
  join notes.note_view notes_note_lat_rbrdrj on master_join_yxnasp.target_id = notes_note_lat_rbrdrj.id
  where master_join_yxnasp.source_id = navaids_points.dme_ts.id
) as notes_note_view_gwisei on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_tplxro.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tplxro.longitude AS location_longitude,
    geometry_elevatedpoint_view_tplxro.latitude AS location_latitude,
    geometry_elevatedpoint_view_tplxro.elevation AS location_elevation,
    geometry_elevatedpoint_view_tplxro.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tplxro.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tplxro.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tplxro.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lsjuig.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_ueiclk.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_berwwp.availability::jsonb as availability,
    notes_note_view_kmpwaq.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tplxro on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_tplxro.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_yjzoxs.id) as authority
  from master_join master_join_pwzxkx
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_yjzoxs on master_join_pwzxkx.target_id = navaids_points_authorityfornavaidequipment_lat_yjzoxs.id
  where master_join_pwzxkx.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_lsjuig on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qfbocv.id) as monitoring
  from master_join master_join_yxbxcd
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qfbocv on master_join_yxbxcd.target_id = navaids_points_navaidequipmentmonitoring_lat_qfbocv.id
  where master_join_yxbxcd.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ueiclk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yihtqn.id) as availability
  from master_join master_join_empbfc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yihtqn on master_join_empbfc.target_id = navaids_points_navaidoperationalstatus_lat_yihtqn.id
  where master_join_empbfc.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_berwwp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ojpxgo.*) AS annotation
  from master_join master_join_leybra
  join notes.note_view notes_note_lat_ojpxgo on master_join_leybra.target_id = notes_note_lat_ojpxgo.id
  where master_join_leybra.source_id = navaids_points.elevation_ts.id
) as notes_note_view_kmpwaq on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'public.fasdatablock_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'geometry.point_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ntiptt.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ntiptt.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mscphn.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_mscphn.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zqrcxd.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_zqrcxd.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tglwzx.id)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_tglwzx.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_ihsfra.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ihsfra.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nhuhic.title as varchar), '(' || navaids_points_angleindication_pt_nhuhic.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_nhuhic.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zohzyg.title as varchar), '(' || navaids_points_distanceindication_pt_zohzyg.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_zohzyg.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_eywroj.id)::jsonb AS holding,
    procedure_holdinguse_view_eywroj.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_iljuma.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_iljuma.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_iljuma.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_tqezmp.title as varchar), '(' || navaids_points_designatedpoint_pt_tqezmp.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_tqezmp.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fvoosi.title as varchar), '(' || navaids_points_navaid_pt_fvoosi.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_fvoosi.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_duoibi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_duoibi.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_duoibi.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dqcpvu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dqcpvu.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dqcpvu.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dbxpyr.title as varchar), '(' || airport_heliport_airportheliport_pt_dbxpyr.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_dbxpyr.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_hmgqtk.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_hmgqtk.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_hmgqtk.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_hmgqtk.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_rlrbny.id)::jsonb AS fasdata,
    public_fasdatablock_view_rlrbny.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_sqpnix.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_muofcz.designsurface::jsonb as designsurface,
    notes_note_view_fvoijy.annotation::jsonb as annotation,
    procedure_approachcondition_view_nnzlad.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ntiptt on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ntiptt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mscphn on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_mscphn.id
left join geometry.curve_view geometry_curve_view_ihsfra on procedure.finalleg_ts.trajectory_id = geometry_curve_view_ihsfra.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zqrcxd on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zqrcxd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nhuhic on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_nhuhic.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zohzyg on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_zohzyg.id
left join procedure.holdinguse_view procedure_holdinguse_view_eywroj on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_eywroj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_iljuma on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_iljuma.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_tqezmp on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_tqezmp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fvoosi on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_fvoosi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_duoibi on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_duoibi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dqcpvu on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dqcpvu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dbxpyr on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_dbxpyr.id
left join geometry.point_view geometry_point_view_hmgqtk on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_hmgqtk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tglwzx on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_tglwzx.id
left join public.fasdatablock_view public_fasdatablock_view_rlrbny on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_rlrbny.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ksaxlx.id) as aircraftcategory
  from master_join master_join_wdoibj
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ksaxlx on master_join_wdoibj.target_id = shared_aircraftcharacteristic_lat_ksaxlx.id
  where master_join_wdoibj.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_sqpnix on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_tyggog.id) as designsurface
  from master_join master_join_zjhtjq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_tyggog on master_join_zjhtjq.target_id = shared_obstacleassessmentarea_lat_tyggog.id
  where master_join_zjhtjq.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_muofcz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yjsbly.*) AS annotation
  from master_join master_join_dwtyxj
  join notes.note_view notes_note_lat_yjsbly on master_join_dwtyxj.target_id = notes_note_lat_yjsbly.id
  where master_join_dwtyxj.source_id = procedure.finalleg_ts.id
) as notes_note_view_fvoijy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_rqoxbt.id) as condition
  from master_join master_join_kijmjg
  join procedure.approachcondition_view procedure_approachcondition_lat_rqoxbt on master_join_kijmjg.target_id = procedure_approachcondition_lat_rqoxbt.id
  where master_join_kijmjg.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_nnzlad on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_rehohp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rehohp.longitude AS location_longitude,
    geometry_elevatedpoint_view_rehohp.latitude AS location_latitude,
    geometry_elevatedpoint_view_rehohp.elevation AS location_elevation,
    geometry_elevatedpoint_view_rehohp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rehohp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rehohp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rehohp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qquopq.title as varchar), '(' || organisation_unit_pt_qquopq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_qquopq.href::text AS serviceprovider_href,
    service_callsigndetail_view_zpzkpz.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_uqgeem.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_zmfbdb.availability::jsonb as availability,
    notes_note_view_sjomxd.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_hplotb.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rehohp on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_rehohp.id
left join organisation.unit_pt organisation_unit_pt_qquopq on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_qquopq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_cspyxz.id) as callsign
  from master_join master_join_jdhwpa
  join service.callsigndetail_view service_callsigndetail_lat_cspyxz on master_join_jdhwpa.target_id = service_callsigndetail_lat_cspyxz.id
  where master_join_jdhwpa.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_zpzkpz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_pbjuip.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_pbjuip.title AS varchar), '(' || service_radiocommunicationchannel_lat_pbjuip.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_pbjuip.href
  )) as radiocommunication  from master_join master_join_dqneas
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_pbjuip on master_join_dqneas.target_id = service_radiocommunicationchannel_lat_pbjuip.id
  where master_join_dqneas.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_uqgeem on TRUE
left join lateral(
  select
  from master_join master_join_ydxqbs
  join shared.contactinformation_view shared_contactinformation_lat_vkmxku on master_join_ydxqbs.target_id = shared_contactinformation_lat_vkmxku.id
  where master_join_ydxqbs.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_ddnuep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_kjbadf.id) as availability
  from master_join master_join_armvdq
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_kjbadf on master_join_armvdq.target_id = service_serviceoperationalstatus_lat_kjbadf.id
  where master_join_armvdq.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_zmfbdb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldklko.*) AS annotation
  from master_join master_join_mlurhx
  join notes.note_view notes_note_lat_ldklko on master_join_mlurhx.target_id = notes_note_lat_ldklko.id
  where master_join_mlurhx.source_id = service.firefightingservice_ts.id
) as notes_note_view_sjomxd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_rbhpxk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_rbhpxk.title AS varchar), '(' || airport_heliport_airportheliport_lat_rbhpxk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_rbhpxk.href
  )) as airportheliport  from master_join master_join_cpmobx
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_rbhpxk on master_join_cpmobx.target_id = airport_heliport_airportheliport_lat_rbhpxk.id
  where master_join_cpmobx.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_hplotb on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionType
-- ['routes.flightconditioncombination_view', 'routes.flightrestrictionroute_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_gnkbsa.id)::jsonb AS flight,
    routes_flightconditioncombination_view_gnkbsa.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_leoeej.regulatedroute::jsonb as regulatedroute,
    notes_note_view_vjhhqo.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_gnkbsa on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_gnkbsa.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_djwewj.id) as regulatedroute
  from master_join master_join_lrewnn
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_djwewj on master_join_lrewnn.target_id = routes_flightrestrictionroute_lat_djwewj.id
  where master_join_lrewnn.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_leoeej on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hpgkgr.*) AS annotation
  from master_join master_join_xletpp
  join notes.note_view notes_note_lat_hpgkgr on master_join_xletpp.target_id = notes_note_lat_hpgkgr.id
  where master_join_xletpp.source_id = routes.flightrestriction_ts.id
) as notes_note_view_vjhhqo on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_mbsqrk.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mbsqrk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mbsqrk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mbsqrk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mbsqrk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mbsqrk.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_pampip.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mbsqrk on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_mbsqrk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lzuvkm.*) AS annotation
  from master_join master_join_shovey
  join notes.note_view notes_note_lat_lzuvkm on master_join_shovey.target_id = notes_note_lat_lzuvkm.id
  where master_join_shovey.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_pampip on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderType
-- ['notes.note_view', 'geometry.curve_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_leigop.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_leigop.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_svadid.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_leigop on airspace.geoborder_ts.border_id = geometry_curve_view_leigop.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hqlhrc.*) AS annotation
  from master_join master_join_nmjwwp
  join notes.note_view notes_note_lat_hqlhrc on master_join_nmjwwp.target_id = notes_note_lat_hqlhrc.id
  where master_join_nmjwwp.source_id = airspace.geoborder_ts.id
) as notes_note_view_svadid on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_zisawi.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zisawi.longitude AS location_longitude,
    geometry_elevatedpoint_view_zisawi.latitude AS location_latitude,
    geometry_elevatedpoint_view_zisawi.elevation AS location_elevation,
    geometry_elevatedpoint_view_zisawi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zisawi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zisawi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zisawi.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_qedeiv.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_sbjdus.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qxsbhb.availability::jsonb as availability,
    notes_note_view_cemmeb.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zisawi on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_zisawi.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jkgahz.id) as authority
  from master_join master_join_oollwa
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jkgahz on master_join_oollwa.target_id = navaids_points_authorityfornavaidequipment_lat_jkgahz.id
  where master_join_oollwa.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_qedeiv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_uzvvha.id) as monitoring
  from master_join master_join_hugzwt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_uzvvha on master_join_hugzwt.target_id = navaids_points_navaidequipmentmonitoring_lat_uzvvha.id
  where master_join_hugzwt.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_sbjdus on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vndnse.id) as availability
  from master_join master_join_njpvfr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vndnse on master_join_njpvfr.target_id = navaids_points_navaidoperationalstatus_lat_vndnse.id
  where master_join_njpvfr.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_qxsbhb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bekvxa.*) AS annotation
  from master_join master_join_yaipfr
  join notes.note_view notes_note_lat_bekvxa on master_join_yaipfr.target_id = notes_note_lat_bekvxa.id
  where master_join_yaipfr.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_cemmeb on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_vsyldh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vsyldh.longitude AS location_longitude,
    geometry_elevatedpoint_view_vsyldh.latitude AS location_latitude,
    geometry_elevatedpoint_view_vsyldh.elevation AS location_elevation,
    geometry_elevatedpoint_view_vsyldh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vsyldh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vsyldh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vsyldh.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ltzhyl.title as varchar), '(' || organisation_unit_pt_ltzhyl.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ltzhyl.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_knbpel.title as varchar), '(' || airport_heliport_airportheliport_pt_knbpel.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_knbpel.href::text AS clientairport_href,
    service_callsigndetail_view_sctqoj.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_utfjlh.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_jypcca.availability::jsonb as availability,
    notes_note_view_zwzdfx.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vsyldh on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_vsyldh.id
left join organisation.unit_pt organisation_unit_pt_ltzhyl on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ltzhyl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_knbpel on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_knbpel.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_bmqmko.id) as callsign
  from master_join master_join_bkdsgu
  join service.callsigndetail_view service_callsigndetail_lat_bmqmko on master_join_bkdsgu.target_id = service_callsigndetail_lat_bmqmko.id
  where master_join_bkdsgu.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_sctqoj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_psqpgv.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_psqpgv.title AS varchar), '(' || service_radiocommunicationchannel_lat_psqpgv.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_psqpgv.href
  )) as radiocommunication  from master_join master_join_ihxdza
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_psqpgv on master_join_ihxdza.target_id = service_radiocommunicationchannel_lat_psqpgv.id
  where master_join_ihxdza.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_utfjlh on TRUE
left join lateral(
  select
  from master_join master_join_xlwadq
  join shared.contactinformation_view shared_contactinformation_lat_oedulv on master_join_xlwadq.target_id = shared_contactinformation_lat_oedulv.id
  where master_join_xlwadq.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_ypsibu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bdrqhx.id) as availability
  from master_join master_join_xsyjil
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bdrqhx on master_join_xsyjil.target_id = service_serviceoperationalstatus_lat_bdrqhx.id
  where master_join_xsyjil.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_jypcca on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jomvxi.*) AS annotation
  from master_join master_join_barefj
  join notes.note_view notes_note_lat_jomvxi on master_join_barefj.target_id = notes_note_lat_jomvxi.id
  where master_join_barefj.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_zwzdfx on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_frzvxj.title as varchar), '(' || airport_heliport_guidanceline_pt_frzvxj.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_frzvxj.href::text AS lightedguidanceline_href,
    shared_lightelement_view_kziyip.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_wucojk.availability::jsonb as availability,
    notes_note_view_susnse.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_frzvxj on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_frzvxj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_kgzxyv.id) as element
  from master_join master_join_dkdizb
  join shared.lightelement_view shared_lightelement_lat_kgzxyv on master_join_dkdizb.target_id = shared_lightelement_lat_kgzxyv.id
  where master_join_dkdizb.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_kziyip on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_fhycce.id) as availability
  from master_join master_join_okurrz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_fhycce on master_join_okurrz.target_id = airport_heliport_groundlightingavailability_lat_fhycce.id
  where master_join_okurrz.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_wucojk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etskvq.*) AS annotation
  from master_join master_join_midwal
  join notes.note_view notes_note_lat_etskvq on master_join_midwal.target_id = notes_note_lat_etskvq.id
  where master_join_midwal.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_susnse on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_zmqeme.title as varchar), '(' || airport_heliport_guidanceline_pt_zmqeme.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_zmqeme.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_knryhm.element::jsonb as element,
    notes_note_view_fujost.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_zmqeme on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_zmqeme.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_qzpkbj.id) as element
  from master_join master_join_olwlud
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_qzpkbj on master_join_olwlud.target_id = airport_heliport_markingelement_lat_qzpkbj.id
  where master_join_olwlud.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_knryhm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ubxowy.*) AS annotation
  from master_join master_join_gjsedi
  join notes.note_view notes_note_lat_ubxowy on master_join_gjsedi.target_id = notes_note_lat_ubxowy.id
  where master_join_gjsedi.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_fujost on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_mcxwrm.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_mcxwrm.elevation AS extent_elevation,
    geometry_elevatedcurve_view_mcxwrm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_mcxwrm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_mcxwrm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_mcxwrm.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_gffunl.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_uxmyiz.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_lumbeh.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_bhclon.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_urfwdk.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_efqhpi.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_mcxwrm on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_mcxwrm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_khfosj.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_khfosj.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_khfosj.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_khfosj.href
  )) as connectedtouchdownliftoff  from master_join master_join_ujzxjz
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_khfosj on master_join_ujzxjz.target_id = airport_heliport_touchdownliftoff_lat_khfosj.id
  where master_join_ujzxjz.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_gffunl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_glavoh.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_glavoh.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_glavoh.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_glavoh.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_qbwkwu
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_glavoh on master_join_qbwkwu.target_id = airport_heliport_runwaycentrelinepoint_lat_glavoh.id
  where master_join_qbwkwu.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_uxmyiz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_fgezjb.id,
      'title', coalesce(cast(airport_heliport_apron_lat_fgezjb.title AS varchar), '(' || airport_heliport_apron_lat_fgezjb.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_fgezjb.href
  )) as connectedapron  from master_join master_join_mhbhxa
  join airport_heliport.apron_pt airport_heliport_apron_lat_fgezjb on master_join_mhbhxa.target_id = airport_heliport_apron_lat_fgezjb.id
  where master_join_mhbhxa.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_lumbeh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_olnonp.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_olnonp.title AS varchar), '(' || airport_heliport_aircraftstand_lat_olnonp.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_olnonp.href
  )) as connectedstand  from master_join master_join_bmlayb
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_olnonp on master_join_bmlayb.target_id = airport_heliport_aircraftstand_lat_olnonp.id
  where master_join_bmlayb.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_bhclon on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_rblfxg.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_rblfxg.title AS varchar), '(' || airport_heliport_taxiway_lat_rblfxg.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_rblfxg.href
  )) as connectedtaxiway  from master_join master_join_lxrojm
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_rblfxg on master_join_lxrojm.target_id = airport_heliport_taxiway_lat_rblfxg.id
  where master_join_lxrojm.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_urfwdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_grejka.*) AS annotation
  from master_join master_join_pnrckt
  join notes.note_view notes_note_lat_grejka on master_join_pnrckt.target_id = notes_note_lat_grejka.id
  where master_join_pnrckt.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_efqhpi on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_ofvkul.title as varchar), '(' || holding_unplannedholding_pt_ofvkul.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_ofvkul.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_mblprs.title as varchar), '(' || holding_holdingpattern_pt_mblprs.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_mblprs.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_jzrion.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_dizdcx.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_ofvkul on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_ofvkul.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_mblprs on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_mblprs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_rrqtua.id) as obstacleassessment
  from master_join master_join_qenqmq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_rrqtua on master_join_qenqmq.target_id = shared_obstacleassessmentarea_lat_rrqtua.id
  where master_join_qenqmq.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_jzrion on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bqgipt.*) AS annotation
  from master_join master_join_joetgo
  join notes.note_view notes_note_lat_bqgipt on master_join_joetgo.target_id = notes_note_lat_bqgipt.id
  where master_join_joetgo.source_id = shared.holdingassessment_ts.id
) as notes_note_view_dizdcx on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternType
-- ['notes.note_view', 'geometry.curve_view', 'holding.holdingpatterndistance_view', 'holding.holdingpatternduration_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_khinsh.id)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_khinsh.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_kzzixo.id)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_kzzixo.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_xotdkw.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_xotdkw.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_sqggpd.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_khinsh on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_khinsh.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_kzzixo on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_kzzixo.id
left join geometry.curve_view geometry_curve_view_xotdkw on holding.holdingpattern_ts.extent_id = geometry_curve_view_xotdkw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sntpea.*) AS annotation
  from master_join master_join_kczycj
  join notes.note_view notes_note_lat_sntpea on master_join_kczycj.target_id = notes_note_lat_sntpea.id
  where master_join_kczycj.source_id = holding.holdingpattern_ts.id
) as notes_note_view_sqggpd on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_eefhoe.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_eefhoe.longitude AS location_longitude,
    geometry_elevatedpoint_view_eefhoe.latitude AS location_latitude,
    geometry_elevatedpoint_view_eefhoe.elevation AS location_elevation,
    geometry_elevatedpoint_view_eefhoe.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_eefhoe.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_eefhoe.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_eefhoe.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_clouto.title as varchar), '(' || organisation_unit_pt_clouto.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_clouto.href::text AS serviceprovider_href,
    service_callsigndetail_view_qgdxuc.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_mrpmtq.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_uncgdh.availability::jsonb as availability,
    notes_note_view_horujf.annotation::jsonb as annotation,
    navaids_points_vor_pt_rkyxut.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_ghqwqb.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_jgqsin.clientairport::jsonb as clientairport,
    routes_routeportion_view_arwxxx.clientroute::jsonb as clientroute,
    procedure_procedure_pt_lszgfz.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_jaltpg.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_dscsnv.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_eefhoe on service.informationservice_ts.location_id = geometry_elevatedpoint_view_eefhoe.id
left join organisation.unit_pt organisation_unit_pt_clouto on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_clouto.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_askwfg.id) as callsign
  from master_join master_join_yqmruu
  join service.callsigndetail_view service_callsigndetail_lat_askwfg on master_join_yqmruu.target_id = service_callsigndetail_lat_askwfg.id
  where master_join_yqmruu.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_qgdxuc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_jchyge.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_jchyge.title AS varchar), '(' || service_radiocommunicationchannel_lat_jchyge.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_jchyge.href
  )) as radiocommunication  from master_join master_join_frxpbo
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_jchyge on master_join_frxpbo.target_id = service_radiocommunicationchannel_lat_jchyge.id
  where master_join_frxpbo.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_mrpmtq on TRUE
left join lateral(
  select
  from master_join master_join_kpwlkx
  join shared.contactinformation_view shared_contactinformation_lat_nfeqdi on master_join_kpwlkx.target_id = shared_contactinformation_lat_nfeqdi.id
  where master_join_kpwlkx.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_gamxbx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_agdumu.id) as availability
  from master_join master_join_yuxknp
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_agdumu on master_join_yuxknp.target_id = service_serviceoperationalstatus_lat_agdumu.id
  where master_join_yuxknp.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_uncgdh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rlwhph.*) AS annotation
  from master_join master_join_xujvte
  join notes.note_view notes_note_lat_rlwhph on master_join_xujvte.target_id = notes_note_lat_rlwhph.id
  where master_join_xujvte.source_id = service.informationservice_ts.id
) as notes_note_view_horujf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_mzkike.id,
      'title', coalesce(cast(navaids_points_vor_lat_mzkike.title AS varchar), '(' || navaids_points_vor_lat_mzkike.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_mzkike.href
  )) as navaidbroadcast  from master_join master_join_frtbsu
  join navaids_points.vor_pt navaids_points_vor_lat_mzkike on master_join_frtbsu.target_id = navaids_points_vor_lat_mzkike.id
  where master_join_frtbsu.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_rkyxut on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_jqzshp.id,
      'title', coalesce(cast(airspace_airspace_lat_jqzshp.title AS varchar), '(' || airspace_airspace_lat_jqzshp.nilreason[1] || ')'),
      'href', airspace_airspace_lat_jqzshp.href
  )) as clientairspace  from master_join master_join_fvhtkw
  join airspace.airspace_pt airspace_airspace_lat_jqzshp on master_join_fvhtkw.target_id = airspace_airspace_lat_jqzshp.id
  where master_join_fvhtkw.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_ghqwqb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pwibgr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pwibgr.title AS varchar), '(' || airport_heliport_airportheliport_lat_pwibgr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pwibgr.href
  )) as clientairport  from master_join master_join_dnyfxz
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pwibgr on master_join_dnyfxz.target_id = airport_heliport_airportheliport_lat_pwibgr.id
  where master_join_dnyfxz.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_jgqsin on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_ydxlmb.id) as clientroute
  from master_join master_join_bnlcbt
  join routes.routeportion_view routes_routeportion_lat_ydxlmb on master_join_bnlcbt.target_id = routes_routeportion_lat_ydxlmb.id
  where master_join_bnlcbt.source_id = service.informationservice_ts.id
) as routes_routeportion_view_arwxxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_cakgub.id,
      'title', coalesce(cast(procedure_procedure_lat_cakgub.title AS varchar), '(' || procedure_procedure_lat_cakgub.nilreason[1] || ')'),
      'href', procedure_procedure_lat_cakgub.href
  )) as clientprocedure  from master_join master_join_jsxyip
  join procedure.procedure_pt procedure_procedure_lat_cakgub on master_join_jsxyip.target_id = procedure_procedure_lat_cakgub.id
  where master_join_jsxyip.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_lszgfz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ghtvex.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ghtvex.title AS varchar), '(' || holding_holdingpattern_lat_ghtvex.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ghtvex.href
  )) as clientholding  from master_join master_join_zlsflh
  join holding.holdingpattern_pt holding_holdingpattern_lat_ghtvex on master_join_zlsflh.target_id = holding_holdingpattern_lat_ghtvex.id
  where master_join_zlsflh.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_jaltpg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_ihoovz.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_ihoovz.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_ihoovz.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_ihoovz.href
  )) as clientaerialrefuelling  from master_join master_join_excvdy
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_ihoovz on master_join_excvdy.target_id = aerial_refuelling_aerialrefuelling_lat_ihoovz.id
  where master_join_excvdy.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_dscsnv on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_selajw.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_selajw.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eebhdh.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_eebhdh.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hrykkj.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_hrykkj.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_pjhwjt.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_pjhwjt.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_mxbnfz.title as varchar), '(' || navaids_points_angleindication_pt_mxbnfz.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_mxbnfz.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_lncikd.title as varchar), '(' || navaids_points_distanceindication_pt_lncikd.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_lncikd.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_qihtez.id)::jsonb AS holding,
    procedure_holdinguse_view_qihtez.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_obtvjd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_obtvjd.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_obtvjd.href::text AS approach_href,
    shared_aircraftcharacteristic_view_bjpphc.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_rjtgti.designsurface::jsonb as designsurface,
    notes_note_view_rzkjmd.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_selajw on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_selajw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eebhdh on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_eebhdh.id
left join geometry.curve_view geometry_curve_view_pjhwjt on procedure.initialleg_ts.trajectory_id = geometry_curve_view_pjhwjt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hrykkj on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_hrykkj.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mxbnfz on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_mxbnfz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_lncikd on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_lncikd.id
left join procedure.holdinguse_view procedure_holdinguse_view_qihtez on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_qihtez.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_obtvjd on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_obtvjd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_eicxhx.id) as aircraftcategory
  from master_join master_join_ilqpda
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_eicxhx on master_join_ilqpda.target_id = shared_aircraftcharacteristic_lat_eicxhx.id
  where master_join_ilqpda.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_bjpphc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ytldid.id) as designsurface
  from master_join master_join_xvbyph
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ytldid on master_join_xvbyph.target_id = shared_obstacleassessmentarea_lat_ytldid.id
  where master_join_xvbyph.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_rjtgti on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zieobi.*) AS annotation
  from master_join master_join_hfjzav
  join notes.note_view notes_note_lat_zieobi on master_join_hfjzav.target_id = notes_note_lat_zieobi.id
  where master_join_hfjzav.source_id = procedure.initialleg_ts.id
) as notes_note_view_rzkjmd on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureType
-- ['notes.note_view', 'procedure.missedapproachgroup_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'procedure.finalprofile_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_csnyig.title as varchar), '(' || navaids_points_navaid_pt_csnyig.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_csnyig.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_norlbh.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_norlbh.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_norlbh.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_nkybqf.title as varchar), '(' || surveillance_radarsystem_pt_nkybqf.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_nkybqf.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_nqmjbx.title as varchar), '(' || procedure_safealtitudearea_pt_nqmjbx.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_nqmjbx.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_mxevqn.id)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_mxevqn.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_anfrhg.id)::jsonb AS finalprofile,
    procedure_finalprofile_view_anfrhg.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_mpfunf.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_osfrwr.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_ztmsjm.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_ifmcco.flighttransition::jsonb as flighttransition,
    notes_note_view_giulqm.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_vzwdhn.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_csnyig on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_csnyig.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_norlbh on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_norlbh.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_nkybqf on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_nkybqf.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_nqmjbx on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_nqmjbx.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_mxevqn on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_mxevqn.id
left join procedure.finalprofile_view procedure_finalprofile_view_anfrhg on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_anfrhg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_wcaygh.id) as availability
  from master_join master_join_ekytbt
  join procedure.procedureavailability_view procedure_procedureavailability_lat_wcaygh on master_join_ekytbt.target_id = procedure_procedureavailability_lat_wcaygh.id
  where master_join_ekytbt.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_mpfunf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_qipsri.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_qipsri.title AS varchar), '(' || airport_heliport_airportheliport_lat_qipsri.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_qipsri.href
  )) as airportheliport  from master_join master_join_nnzaly
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_qipsri on master_join_nnzaly.target_id = airport_heliport_airportheliport_lat_qipsri.id
  where master_join_nnzaly.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_osfrwr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zyxxiw.id) as aircraftcharacteristic
  from master_join master_join_snqnkf
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_zyxxiw on master_join_snqnkf.target_id = shared_aircraftcharacteristic_lat_zyxxiw.id
  where master_join_snqnkf.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_ztmsjm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_wuxbmv.id) as flighttransition
  from master_join master_join_bweuvw
  join procedure.proceduretransition_view procedure_proceduretransition_lat_wuxbmv on master_join_bweuvw.target_id = procedure_proceduretransition_lat_wuxbmv.id
  where master_join_bweuvw.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_ifmcco on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrdfmw.*) AS annotation
  from master_join master_join_kidaaa
  join notes.note_view notes_note_lat_yrdfmw on master_join_kidaaa.target_id = notes_note_lat_yrdfmw.id
  where master_join_kidaaa.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_giulqm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_uvfllp.id) as missedinstruction
  from master_join master_join_zvecyv
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_uvfllp on master_join_zvecyv.target_id = procedure_missedapproachgroup_lat_uvfllp.id
  where master_join_zvecyv.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_vzwdhn on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_woiqou.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_woiqou.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hmygwq.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_hmygwq.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ywwlez.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_ywwlez.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_pssnrn.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_pssnrn.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_isoija.title as varchar), '(' || navaids_points_angleindication_pt_isoija.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_isoija.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_hcntkx.title as varchar), '(' || navaids_points_distanceindication_pt_hcntkx.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_hcntkx.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_bhvlbw.id)::jsonb AS holding,
    procedure_holdinguse_view_bhvlbw.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ithprd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ithprd.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_ithprd.href::text AS approach_href,
    shared_aircraftcharacteristic_view_qnlfbp.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_sopjqp.designsurface::jsonb as designsurface,
    notes_note_view_zcsply.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_woiqou on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_woiqou.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hmygwq on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_hmygwq.id
left join geometry.curve_view geometry_curve_view_pssnrn on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_pssnrn.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ywwlez on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ywwlez.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_isoija on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_isoija.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_hcntkx on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_hcntkx.id
left join procedure.holdinguse_view procedure_holdinguse_view_bhvlbw on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_bhvlbw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ithprd on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ithprd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_lnezba.id) as aircraftcategory
  from master_join master_join_eackwv
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_lnezba on master_join_eackwv.target_id = shared_aircraftcharacteristic_lat_lnezba.id
  where master_join_eackwv.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_qnlfbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dugwun.id) as designsurface
  from master_join master_join_rwbphr
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_dugwun on master_join_rwbphr.target_id = shared_obstacleassessmentarea_lat_dugwun.id
  where master_join_rwbphr.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_sopjqp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_irxloz.*) AS annotation
  from master_join master_join_xtadyb
  join notes.note_view notes_note_lat_irxloz on master_join_xtadyb.target_id = notes_note_lat_irxloz.id
  where master_join_xtadyb.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_zcsply on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_wddwba.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wddwba.longitude AS location_longitude,
    geometry_elevatedpoint_view_wddwba.latitude AS location_latitude,
    geometry_elevatedpoint_view_wddwba.elevation AS location_elevation,
    geometry_elevatedpoint_view_wddwba.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wddwba.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wddwba.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wddwba.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rukwul.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jzhafx.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_vdqldv.availability::jsonb as availability,
    notes_note_view_wdnshg.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wddwba on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_wddwba.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dawvlr.id) as authority
  from master_join master_join_jwcxns
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dawvlr on master_join_jwcxns.target_id = navaids_points_authorityfornavaidequipment_lat_dawvlr.id
  where master_join_jwcxns.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_rukwul on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kgwlqm.id) as monitoring
  from master_join master_join_umocvl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kgwlqm on master_join_umocvl.target_id = navaids_points_navaidequipmentmonitoring_lat_kgwlqm.id
  where master_join_umocvl.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jzhafx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_noncnk.id) as availability
  from master_join master_join_qxdqcm
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_noncnk on master_join_qxdqcm.target_id = navaids_points_navaidoperationalstatus_lat_noncnk.id
  where master_join_qxdqcm.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_vdqldv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_monyck.*) AS annotation
  from master_join master_join_rjbwkm
  join notes.note_view notes_note_lat_monyck on master_join_rjbwkm.target_id = notes_note_lat_monyck.id
  where master_join_rjbwkm.source_id = navaids_points.localizer_ts.id
) as notes_note_view_wdnshg on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_qcgosj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qcgosj.longitude AS location_longitude,
    geometry_elevatedpoint_view_qcgosj.latitude AS location_latitude,
    geometry_elevatedpoint_view_qcgosj.elevation AS location_elevation,
    geometry_elevatedpoint_view_qcgosj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qcgosj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qcgosj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qcgosj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rrcydz.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tgxyxc.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_cwatsq.availability::jsonb as availability,
    notes_note_view_jkoicd.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qcgosj on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_qcgosj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_uuvctu.id) as authority
  from master_join master_join_ujnpxu
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_uuvctu on master_join_ujnpxu.target_id = navaids_points_authorityfornavaidequipment_lat_uuvctu.id
  where master_join_ujnpxu.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_rrcydz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bucrup.id) as monitoring
  from master_join master_join_rgdgxn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bucrup on master_join_rgdgxn.target_id = navaids_points_navaidequipmentmonitoring_lat_bucrup.id
  where master_join_rgdgxn.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tgxyxc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_kzxvqk.id) as availability
  from master_join master_join_wqqkid
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_kzxvqk on master_join_wqqkid.target_id = navaids_points_navaidoperationalstatus_lat_kzxvqk.id
  where master_join_wqqkid.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_cwatsq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytisem.*) AS annotation
  from master_join master_join_snzurb
  join notes.note_view notes_note_lat_ytisem on master_join_snzurb.target_id = notes_note_lat_ytisem.id
  where master_join_snzurb.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_jkoicd on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_xexuvo.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_xexuvo.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_xexuvo.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_lckuqa.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lckuqa.longitude AS location_longitude,
    geometry_elevatedpoint_view_lckuqa.latitude AS location_latitude,
    geometry_elevatedpoint_view_lckuqa.elevation AS location_elevation,
    geometry_elevatedpoint_view_lckuqa.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lckuqa.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lckuqa.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lckuqa.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_dwfbhl.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_xexuvo on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_xexuvo.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lckuqa on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_lckuqa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlwlae.*) AS annotation
  from master_join master_join_fngovz
  join notes.note_view notes_note_lat_vlwlae on master_join_fngovz.target_id = notes_note_lat_vlwlae.id
  where master_join_fngovz.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_dwfbhl on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegType
-- ['notes.note_view', 'procedure.holdinguse_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'procedure.approachcondition_view', 'shared.aircraftcharacteristic_view', 'navaids_points.terminalsegmentpoint_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ogodfj.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ogodfj.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_aieotq.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_aieotq.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zajphy.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_zajphy.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_vncxgm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_vncxgm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qdlhfc.title as varchar), '(' || navaids_points_angleindication_pt_qdlhfc.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qdlhfc.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_fptxyp.title as varchar), '(' || navaids_points_distanceindication_pt_fptxyp.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_fptxyp.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_grgmng.id)::jsonb AS holding,
    procedure_holdinguse_view_grgmng.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_cpxjkv.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_cpxjkv.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_cpxjkv.href::text AS approach_href,
    shared_aircraftcharacteristic_view_ksdqjg.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_hbobyl.designsurface::jsonb as designsurface,
    notes_note_view_inqddq.annotation::jsonb as annotation,
    procedure_approachcondition_view_xidczy.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ogodfj on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ogodfj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_aieotq on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_aieotq.id
left join geometry.curve_view geometry_curve_view_vncxgm on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_vncxgm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zajphy on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zajphy.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qdlhfc on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_qdlhfc.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_fptxyp on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_fptxyp.id
left join procedure.holdinguse_view procedure_holdinguse_view_grgmng on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_grgmng.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_cpxjkv on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_cpxjkv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ayisjm.id) as aircraftcategory
  from master_join master_join_jrfebs
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ayisjm on master_join_jrfebs.target_id = shared_aircraftcharacteristic_lat_ayisjm.id
  where master_join_jrfebs.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_ksdqjg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dleook.id) as designsurface
  from master_join master_join_bninad
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_dleook on master_join_bninad.target_id = shared_obstacleassessmentarea_lat_dleook.id
  where master_join_bninad.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_hbobyl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pbprgz.*) AS annotation
  from master_join master_join_tsdblr
  join notes.note_view notes_note_lat_pbprgz on master_join_tsdblr.target_id = notes_note_lat_pbprgz.id
  where master_join_tsdblr.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_inqddq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_xdbkqa.id) as condition
  from master_join master_join_gcqjuh
  join procedure.approachcondition_view procedure_approachcondition_lat_xdbkqa on master_join_gcqjuh.target_id = procedure_approachcondition_lat_xdbkqa.id
  where master_join_gcqjuh.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_xidczy on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidType
-- ['notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_jyvfok.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jyvfok.longitude AS location_longitude,
    geometry_elevatedpoint_view_jyvfok.latitude AS location_latitude,
    geometry_elevatedpoint_view_jyvfok.elevation AS location_elevation,
    geometry_elevatedpoint_view_jyvfok.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jyvfok.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jyvfok.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jyvfok.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_vshhub.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_bmqksg.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_xcmhrw.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_jygkmn.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_nizfgo.availability::jsonb as availability,
    notes_note_view_kzwomq.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jyvfok on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_jyvfok.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_cyzlgn.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_cyzlgn.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_cyzlgn.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_cyzlgn.href
  )) as touchdownliftoff  from master_join master_join_aupxbn
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_cyzlgn on master_join_aupxbn.target_id = airport_heliport_touchdownliftoff_lat_cyzlgn.id
  where master_join_aupxbn.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_vshhub on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_yctrvl.id) as navaidequipment
  from master_join master_join_kvqbsy
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_yctrvl on master_join_kvqbsy.target_id = navaids_points_navaidcomponent_lat_yctrvl.id
  where master_join_kvqbsy.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_bmqksg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_azkpbj.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_azkpbj.title AS varchar), '(' || airport_heliport_runwaydirection_lat_azkpbj.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_azkpbj.href
  )) as runwaydirection  from master_join master_join_ujzltj
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_azkpbj on master_join_ujzltj.target_id = airport_heliport_runwaydirection_lat_azkpbj.id
  where master_join_ujzltj.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_xcmhrw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_qcszls.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_qcszls.title AS varchar), '(' || airport_heliport_airportheliport_lat_qcszls.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_qcszls.href
  )) as servedairport  from master_join master_join_nnsfcr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_qcszls on master_join_nnsfcr.target_id = airport_heliport_airportheliport_lat_qcszls.id
  where master_join_nnsfcr.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_jygkmn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qzzowt.id) as availability
  from master_join master_join_kmvqeo
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qzzowt on master_join_kmvqeo.target_id = navaids_points_navaidoperationalstatus_lat_qzzowt.id
  where master_join_kmvqeo.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_nizfgo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vejzyx.*) AS annotation
  from master_join master_join_jiikek
  join notes.note_view notes_note_lat_vejzyx on master_join_jiikek.target_id = notes_note_lat_vejzyx.id
  where master_join_jiikek.source_id = navaids_points.navaid_ts.id
) as notes_note_view_kzwomq on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_yvrevo.id)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_yvrevo.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_coojab.id)::jsonb AS sectordefinition,
    shared_circlesector_view_coojab.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_ppikpj.procedure::jsonb as procedure,
    notes_note_view_hkycab.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_yvrevo on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_yvrevo.id
left join shared.circlesector_view shared_circlesector_view_coojab on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_coojab.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_pnjzxt.id,
      'title', coalesce(cast(procedure_procedure_lat_pnjzxt.title AS varchar), '(' || procedure_procedure_lat_pnjzxt.nilreason[1] || ')'),
      'href', procedure_procedure_lat_pnjzxt.href
  )) as procedure  from master_join master_join_zduoia
  join procedure.procedure_pt procedure_procedure_lat_pnjzxt on master_join_zduoia.target_id = procedure_procedure_lat_pnjzxt.id
  where master_join_zduoia.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_ppikpj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izszid.*) AS annotation
  from master_join master_join_ntpfpn
  join notes.note_view notes_note_lat_izszid on master_join_ntpfpn.target_id = notes_note_lat_izszid.id
  where master_join_ntpfpn.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_hkycab on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaType
-- ['notes.note_view', 'procedure.navigationareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_qyjkhs.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_qyjkhs.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_qyjkhs.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ohxdes.title as varchar), '(' || navaids_points_designatedpoint_pt_ohxdes.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ohxdes.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xkeoks.title as varchar), '(' || navaids_points_navaid_pt_xkeoks.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_xkeoks.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ezwamg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ezwamg.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_ezwamg.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oqyjut.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oqyjut.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oqyjut.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_seaggo.title as varchar), '(' || airport_heliport_airportheliport_pt_seaggo.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_seaggo.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_ytduyn.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_ytduyn.longitude AS centrepointposition_longitude,
    geometry_point_view_ytduyn.latitude AS centrepointposition_latitude,
    geometry_point_view_ytduyn.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_ksmsdc.sector::jsonb as sector,
    notes_note_view_cmaemq.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_qyjkhs on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_qyjkhs.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ohxdes on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ohxdes.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xkeoks on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_xkeoks.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ezwamg on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ezwamg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oqyjut on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oqyjut.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_seaggo on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_seaggo.id
left join geometry.point_view geometry_point_view_ytduyn on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_ytduyn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_avbbol.id) as sector
  from master_join master_join_nmjkut
  join procedure.navigationareasector_view procedure_navigationareasector_lat_avbbol on master_join_nmjkut.target_id = procedure_navigationareasector_lat_avbbol.id
  where master_join_nmjkut.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_ksmsdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dgvqow.*) AS annotation
  from master_join master_join_wgromw
  join notes.note_view notes_note_lat_dgvqow on master_join_wgromw.target_id = notes_note_lat_dgvqow.id
  where master_join_wgromw.source_id = procedure.navigationarea_ts.id
) as notes_note_view_cmaemq on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_jnqxly.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jnqxly.longitude AS location_longitude,
    geometry_elevatedpoint_view_jnqxly.latitude AS location_latitude,
    geometry_elevatedpoint_view_jnqxly.elevation AS location_elevation,
    geometry_elevatedpoint_view_jnqxly.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jnqxly.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jnqxly.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jnqxly.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_duxzym.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_eghrux.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_bkzpgo.availability::jsonb as availability,
    notes_note_view_lwptga.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jnqxly on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_jnqxly.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_otqmfi.id) as authority
  from master_join master_join_yiqnjg
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_otqmfi on master_join_yiqnjg.target_id = navaids_points_authorityfornavaidequipment_lat_otqmfi.id
  where master_join_yiqnjg.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_duxzym on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_oaxazq.id) as monitoring
  from master_join master_join_ixoslc
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_oaxazq on master_join_ixoslc.target_id = navaids_points_navaidequipmentmonitoring_lat_oaxazq.id
  where master_join_ixoslc.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_eghrux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_otstzy.id) as availability
  from master_join master_join_bxrfnr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_otstzy on master_join_bxrfnr.target_id = navaids_points_navaidoperationalstatus_lat_otstzy.id
  where master_join_bxrfnr.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_bkzpgo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cqwzqo.*) AS annotation
  from master_join master_join_qkoxjq
  join notes.note_view notes_note_lat_cqwzqo on master_join_qkoxjq.target_id = notes_note_lat_cqwzqo.id
  where master_join_qkoxjq.source_id = navaids_points.ndb_ts.id
) as notes_note_view_lwptga on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_jbyiys.title as varchar), '(' || airport_heliport_airportheliport_pt_jbyiys.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_jbyiys.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_drxiap.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_drxiap.elevation AS extent_elevation,
    geometry_elevatedsurface_view_drxiap.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_drxiap.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_drxiap.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_drxiap.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_blbeqk.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jbyiys on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_jbyiys.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_drxiap on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_drxiap.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eswejo.*) AS annotation
  from master_join master_join_ntwzox
  join notes.note_view notes_note_lat_eswejo on master_join_ntwzox.target_id = notes_note_lat_eswejo.id
  where master_join_ntwzox.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_blbeqk on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_kvytjs.title as varchar), '(' || airport_heliport_airportheliport_pt_kvytjs.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_kvytjs.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_xhcwwh.title as varchar), '(' || airport_heliport_runwaydirection_pt_xhcwwh.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_xhcwwh.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_jnwlpc.title as varchar), '(' || organisation_organisationauthority_pt_jnwlpc.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_jnwlpc.href::text AS referenceownerorganisation_href,
    geometry_surface_view_cpxsyu.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_cpxsyu.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_irfqqk.obstacle::jsonb as obstacle,
    notes_note_view_khcqax.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kvytjs on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_kvytjs.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_xhcwwh on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_xhcwwh.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jnwlpc on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_jnwlpc.id
left join geometry.surface_view geometry_surface_view_cpxsyu on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_cpxsyu.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_yttnqp.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_yttnqp.title AS varchar), '(' || obstacles_verticalstructure_lat_yttnqp.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_yttnqp.href
  )) as obstacle  from master_join master_join_kcsiys
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_yttnqp on master_join_kcsiys.target_id = obstacles_verticalstructure_lat_yttnqp.id
  where master_join_kcsiys.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_irfqqk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrxxjm.*) AS annotation
  from master_join master_join_mixwch
  join notes.note_view notes_note_lat_vrxxjm on master_join_mixwch.target_id = notes_note_lat_vrxxjm.id
  where master_join_mixwch.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_khcqax on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_yuretk.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_yjvscc.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_amccvy
  join shared.contactinformation_view shared_contactinformation_lat_iezsff on master_join_amccvy.target_id = shared_contactinformation_lat_iezsff.id
  where master_join_amccvy.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_vdwqme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_vrcqpy.id) as relatedorganisationauthority
  from master_join master_join_avxdml
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_vrcqpy on master_join_avxdml.target_id = organisation_organisationauthorityassociation_lat_vrcqpy.id
  where master_join_avxdml.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_yuretk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_enlsrv.*) AS annotation
  from master_join master_join_inqvau
  join notes.note_view notes_note_lat_enlsrv on master_join_inqvau.target_id = notes_note_lat_enlsrv.id
  where master_join_inqvau.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_yjvscc on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_qjyoea.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_qjyoea.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qjyoea.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qjyoea.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qjyoea.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qjyoea.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_ncyeyi.associatedstand::jsonb as associatedstand,
    notes_note_view_dpiqey.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qjyoea on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_qjyoea.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_ryhemi.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_ryhemi.title AS varchar), '(' || airport_heliport_aircraftstand_lat_ryhemi.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_ryhemi.href
  )) as associatedstand  from master_join master_join_czjwfx
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_ryhemi on master_join_czjwfx.target_id = airport_heliport_aircraftstand_lat_ryhemi.id
  where master_join_czjwfx.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_ncyeyi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_svdtno.*) AS annotation
  from master_join master_join_zytphl
  join notes.note_view notes_note_lat_svdtno on master_join_zytphl.target_id = notes_note_lat_svdtno.id
  where master_join_zytphl.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_dpiqey on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_rrldur.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rrldur.longitude AS location_longitude,
    geometry_elevatedpoint_view_rrldur.latitude AS location_latitude,
    geometry_elevatedpoint_view_rrldur.elevation AS location_elevation,
    geometry_elevatedpoint_view_rrldur.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rrldur.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rrldur.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rrldur.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wsjbre.title as varchar), '(' || organisation_unit_pt_wsjbre.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_wsjbre.href::text AS serviceprovider_href,
    service_callsigndetail_view_slghdj.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_bkuohv.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_exnimg.availability::jsonb as availability,
    notes_note_view_fciqnh.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_jjkouo.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rrldur on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_rrldur.id
left join organisation.unit_pt organisation_unit_pt_wsjbre on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_wsjbre.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_rmldpq.id) as callsign
  from master_join master_join_hxjtvl
  join service.callsigndetail_view service_callsigndetail_lat_rmldpq on master_join_hxjtvl.target_id = service_callsigndetail_lat_rmldpq.id
  where master_join_hxjtvl.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_slghdj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_kezezy.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_kezezy.title AS varchar), '(' || service_radiocommunicationchannel_lat_kezezy.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_kezezy.href
  )) as radiocommunication  from master_join master_join_qjwlot
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_kezezy on master_join_qjwlot.target_id = service_radiocommunicationchannel_lat_kezezy.id
  where master_join_qjwlot.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_bkuohv on TRUE
left join lateral(
  select
  from master_join master_join_xwuxgv
  join shared.contactinformation_view shared_contactinformation_lat_mgixqi on master_join_xwuxgv.target_id = shared_contactinformation_lat_mgixqi.id
  where master_join_xwuxgv.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_kxyzer on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hrylok.id) as availability
  from master_join master_join_rxpjyg
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hrylok on master_join_rxpjyg.target_id = service_serviceoperationalstatus_lat_hrylok.id
  where master_join_rxpjyg.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_exnimg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbywpm.*) AS annotation
  from master_join master_join_gdmubd
  join notes.note_view notes_note_lat_dbywpm on master_join_gdmubd.target_id = notes_note_lat_dbywpm.id
  where master_join_gdmubd.source_id = service.passengerservice_ts.id
) as notes_note_view_fciqnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_mfzrey.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_mfzrey.title AS varchar), '(' || airport_heliport_airportheliport_lat_mfzrey.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_mfzrey.href
  )) as airportheliport  from master_join master_join_ouzmlv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_mfzrey on master_join_ouzmlv.target_id = airport_heliport_airportheliport_lat_mfzrey.id
  where master_join_ouzmlv.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_jjkouo on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_wjundy.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_groundlightsystem_pt_whxnfa.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_auqjit.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_ezldgi.id) as controlledlightintensity
  from master_join master_join_byrejz
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_ezldgi on master_join_byrejz.target_id = airport_heliport_lightactivation_lat_ezldgi.id
  where master_join_byrejz.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_wjundy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_rkfzfn.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_rkfzfn.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_rkfzfn.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_rkfzfn.href
  )) as activatedgroundlighting  from master_join master_join_dzgvmm
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_rkfzfn on master_join_dzgvmm.target_id = airport_heliport_groundlightsystem_lat_rkfzfn.id
  where master_join_dzgvmm.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_whxnfa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kugvhx.*) AS annotation
  from master_join master_join_oqqijr
  join notes.note_view notes_note_lat_kugvhx on master_join_oqqijr.target_id = notes_note_lat_kugvhx.id
  where master_join_oqqijr.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_auqjit on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'surveillance.reflector_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_xbgfxj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xbgfxj.longitude AS location_longitude,
    geometry_elevatedpoint_view_xbgfxj.latitude AS location_latitude,
    geometry_elevatedpoint_view_xbgfxj.elevation AS location_elevation,
    geometry_elevatedpoint_view_xbgfxj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xbgfxj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xbgfxj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xbgfxj.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ynlcxc.annotation::jsonb as annotation,
    surveillance_reflector_view_dbrzpb.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xbgfxj on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_xbgfxj.id
left join lateral(
  select
  from master_join master_join_rfoptl
  join shared.contactinformation_view shared_contactinformation_lat_pxyamy on master_join_rfoptl.target_id = shared_contactinformation_lat_pxyamy.id
  where master_join_rfoptl.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_yblswd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydcvdk.*) AS annotation
  from master_join master_join_yieobh
  join notes.note_view notes_note_lat_ydcvdk on master_join_yieobh.target_id = notes_note_lat_ydcvdk.id
  where master_join_yieobh.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_ynlcxc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_hxwoxq.id) as reflector
  from master_join master_join_xlrbsf
  join surveillance.reflector_view surveillance_reflector_lat_hxwoxq on master_join_xlrbsf.target_id = surveillance_reflector_lat_hxwoxq.id
  where master_join_xlrbsf.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_dbrzpb on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_zopesd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zopesd.longitude AS location_longitude,
    geometry_elevatedpoint_view_zopesd.latitude AS location_latitude,
    geometry_elevatedpoint_view_zopesd.elevation AS location_elevation,
    geometry_elevatedpoint_view_zopesd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zopesd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zopesd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zopesd.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_wnbzlc.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_bjuzwo.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zopesd on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_zopesd.id
left join lateral(
  select
  from master_join master_join_unuirt
  join shared.contactinformation_view shared_contactinformation_lat_bqelbv on master_join_unuirt.target_id = shared_contactinformation_lat_bqelbv.id
  where master_join_unuirt.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_nwvxfn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_braafh.*) AS annotation
  from master_join master_join_yiirah
  join notes.note_view notes_note_lat_braafh on master_join_yiirah.target_id = notes_note_lat_braafh.id
  where master_join_yiirah.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_wnbzlc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_moljmf.id) as groundstation
  from master_join master_join_rtnyfp
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_moljmf on master_join_rtnyfp.target_id = surveillance_surveillancegroundstation_lat_moljmf.id
  where master_join_rtnyfp.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_bjuzwo on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_flmsya.title as varchar), '(' || navaids_points_dme_pt_flmsya.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_flmsya.href::text AS dme_href,
    coalesce(cast(procedure_segmentleg_pt_gothki.title as varchar), '(' || procedure_segmentleg_pt_gothki.nilreason[1] || ')')::text AS segmentleg,
    procedure_segmentleg_pt_gothki.href::text AS segmentleg_href,
    notes_note_view_mflaps.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_flmsya on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_flmsya.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_gothki on procedure.proceduredme_ts.segmentleg_id = procedure_segmentleg_pt_gothki.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sibszm.*) AS annotation
  from master_join master_join_odyrjr
  join notes.note_view notes_note_lat_sibszm on master_join_odyrjr.target_id = notes_note_lat_sibszm.id
  where master_join_odyrjr.source_id = procedure.proceduredme_ts.id
) as notes_note_view_mflaps on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemType
-- ['notes.note_view', 'surveillance.radarcomponent_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_ofcdib.title as varchar), '(' || airport_heliport_airportheliport_pt_ofcdib.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_ofcdib.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_kghqqf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kghqqf.longitude AS location_longitude,
    geometry_elevatedpoint_view_kghqqf.latitude AS location_latitude,
    geometry_elevatedpoint_view_kghqqf.elevation AS location_elevation,
    geometry_elevatedpoint_view_kghqqf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kghqqf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kghqqf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kghqqf.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_hjrxhp.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_gsgktd.office::jsonb as office,
    airport_heliport_runway_pt_qxjugw.parrunway::jsonb as parrunway,
    notes_note_view_sfvczc.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ofcdib on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_ofcdib.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kghqqf on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_kghqqf.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_pfgpqb.id) as radarequipment
  from master_join master_join_drlrsp
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_pfgpqb on master_join_drlrsp.target_id = surveillance_radarcomponent_lat_pfgpqb.id
  where master_join_drlrsp.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_hjrxhp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vzahzs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vzahzs.title AS varchar), '(' || organisation_organisationauthority_lat_vzahzs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vzahzs.href
  )) as office  from master_join master_join_olnflb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vzahzs on master_join_olnflb.target_id = organisation_organisationauthority_lat_vzahzs.id
  where master_join_olnflb.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_gsgktd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_qdfmxa.id,
      'title', coalesce(cast(airport_heliport_runway_lat_qdfmxa.title AS varchar), '(' || airport_heliport_runway_lat_qdfmxa.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_qdfmxa.href
  )) as parrunway  from master_join master_join_najkbr
  join airport_heliport.runway_pt airport_heliport_runway_lat_qdfmxa on master_join_najkbr.target_id = airport_heliport_runway_lat_qdfmxa.id
  where master_join_najkbr.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_qxjugw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pfprhq.*) AS annotation
  from master_join master_join_eraupr
  join notes.note_view notes_note_lat_pfprhq on master_join_eraupr.target_id = notes_note_lat_pfprhq.id
  where master_join_eraupr.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_sfvczc on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelType
-- ['notes.note_view', 'service.radiocommunicationoperationalstatus_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_wokxnk.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_wokxnk.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_emnjau.availability::jsonb as availability,
    notes_note_view_iyncnc.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_pvchuz.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_pvchuz.id,
      'longitude', geometry_elevatedpoint_lat_pvchuz.longitude,
      'latitude', geometry_elevatedpoint_lat_pvchuz.latitude,
      'elevation', geometry_elevatedpoint_lat_pvchuz.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_pvchuz.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_pvchuz.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_pvchuz.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_pvchuz.horizontalAccuracy
    )) AS attr
  from master_join master_join_klrzfa
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_pvchuz on master_join_klrzfa.target_id = geometry_elevatedpoint_lat_pvchuz.id
  where master_join_klrzfa.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_wokxnk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_djunnv.id) as availability
  from master_join master_join_hgaaqx
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_djunnv on master_join_hgaaqx.target_id = service_radiocommunicationoperationalstatus_lat_djunnv.id
  where master_join_hgaaqx.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_emnjau on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_idcuhq.*) AS annotation
  from master_join master_join_jlsjhq
  join notes.note_view notes_note_lat_idcuhq on master_join_jlsjhq.target_id = notes_note_lat_idcuhq.id
  where master_join_jlsjhq.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_iyncnc on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaType
-- ['shared.circlesector_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(navaids_points_navaidequipment_pt_ndbaxg.title as varchar), '(' || navaids_points_navaidequipment_pt_ndbaxg.nilreason[1] || ')')::text AS equipmentnavaidequipment,
    navaids_points_navaidequipment_pt_ndbaxg.href::text AS equipmentnavaidequipment_href,
    coalesce(cast(service_radiocommunicationchannel_pt_gqhfil.title as varchar), '(' || service_radiocommunicationchannel_pt_gqhfil.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_gqhfil.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_pkncdx.title as varchar), '(' || navaids_points_specialnavigationstation_pt_pkncdx.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_pkncdx.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_zzlifo.title as varchar), '(' || surveillance_precisionapproachradar_pt_zzlifo.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_zzlifo.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_ddgttl.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_ddgttl.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_ddgttl.href::text AS equipmentradar_href,
    shared_circlesector_view_thhrty.sector::jsonb as sector,
    geometry_surface_view_xdabpr.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_xdabpr.attr::jsonb as extent,
    notes_note_view_zkupif.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_ndbaxg on shared.radiofrequencyarea_ts.equipment_navaidequipment_id = navaids_points_navaidequipment_pt_ndbaxg.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_gqhfil on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_gqhfil.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_pkncdx on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_pkncdx.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_zzlifo on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_zzlifo.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_ddgttl on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_ddgttl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_jghntr.id) as sector
  from master_join master_join_zlhqnw
  join shared.circlesector_view shared_circlesector_lat_jghntr on master_join_zlhqnw.target_id = shared_circlesector_lat_jghntr.id
  where master_join_zlhqnw.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_thhrty on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_bvyzxb.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_bvyzxb.id,
      'horizontalAccuracy', geometry_surface_lat_bvyzxb.horizontalAccuracy
    )) AS attr
  from master_join master_join_jecbqt
  join geometry.surface_view geometry_surface_lat_bvyzxb on master_join_jecbqt.target_id = geometry_surface_lat_bvyzxb.id
  where master_join_jecbqt.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_xdabpr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jlqiam.*) AS annotation
  from master_join master_join_priklk
  join notes.note_view notes_note_lat_jlqiam on master_join_priklk.target_id = notes_note_lat_jlqiam.id
  where master_join_priklk.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_zkupif on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_oaqazt.title as varchar), '(' || airport_heliport_airportheliport_pt_oaqazt.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_oaqazt.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ufwftm.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ufwftm.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_xftntk.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_xftntk.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_xftntk.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_xftntk.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_xftntk.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_xftntk.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_siwdsw.accessiblestand::jsonb as accessiblestand,
    notes_note_view_mgksgn.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oaqazt on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_oaqazt.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ufwftm on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ufwftm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xftntk on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_xftntk.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_jddpyp.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_jddpyp.title AS varchar), '(' || airport_heliport_aircraftstand_lat_jddpyp.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_jddpyp.href
  )) as accessiblestand  from master_join master_join_kxtjdj
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_jddpyp on master_join_kxtjdj.target_id = airport_heliport_aircraftstand_lat_jddpyp.id
  where master_join_kxtjdj.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_siwdsw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qpzkks.*) AS annotation
  from master_join master_join_yrjreg
  join notes.note_view notes_note_lat_qpzkks on master_join_yrjreg.target_id = notes_note_lat_qpzkks.id
  where master_join_yrjreg.source_id = airport_heliport.road_ts.id
) as notes_note_view_mgksgn on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMEType
-- ['notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_ubrhvd.title as varchar), '(' || navaids_points_dme_pt_ubrhvd.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_ubrhvd.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_swwxsh.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_swwxsh.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_zhqtxe.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_ubrhvd on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_ubrhvd.id
left join routes.routeportion_view routes_routeportion_view_swwxsh on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_swwxsh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zwbvez.*) AS annotation
  from master_join master_join_luecxi
  join notes.note_view notes_note_lat_zwbvez on master_join_luecxi.target_id = notes_note_lat_zwbvez.id
  where master_join_luecxi.source_id = routes.routedme_ts.id
) as notes_note_view_zhqtxe on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentType
-- ['notes.note_view', 'routes.routeavailability_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'navaids_points.enroutesegmentpoint_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_izased.id)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_izased.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_yokhsr.id)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_yokhsr.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_jqesjc.title as varchar), '(' || routes_route_pt_jqesjc.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_jqesjc.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_yawqzo.id)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_yawqzo.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_otceey.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_otceey.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_lcdsjv.availability::jsonb as availability,
    notes_note_view_vdgmpu.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_izased on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_izased.id
left join routes.route_pt routes_route_pt_jqesjc on routes.routesegment_ts.routeformed_id = routes_route_pt_jqesjc.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_yawqzo on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_yawqzo.id
left join geometry.curve_view geometry_curve_view_otceey on routes.routesegment_ts.curveextent_id = geometry_curve_view_otceey.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_yokhsr on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_yokhsr.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_hpjmxx.id) as availability
  from master_join master_join_gwihgk
  join routes.routeavailability_view routes_routeavailability_lat_hpjmxx on master_join_gwihgk.target_id = routes_routeavailability_lat_hpjmxx.id
  where master_join_gwihgk.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_lcdsjv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ijlqla.*) AS annotation
  from master_join master_join_ymbaql
  join notes.note_view notes_note_lat_ijlqla on master_join_ymbaql.target_id = notes_note_lat_ijlqla.id
  where master_join_ymbaql.source_id = routes.routesegment_ts.id
) as notes_note_view_vdgmpu on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_jtqdhz.title as varchar), '(' || organisation_organisationauthority_pt_jtqdhz.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_jtqdhz.href::text AS userorganisation_href,
    notes_note_view_yoqjco.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jtqdhz on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_jtqdhz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hbcxnb.*) AS annotation
  from master_join master_join_ujcrrk
  join notes.note_view notes_note_lat_hbcxnb on master_join_ujcrrk.target_id = notes_note_lat_hbcxnb.id
  where master_join_ujcrrk.source_id = routes.route_ts.id
) as notes_note_view_yoqjco on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_tbkbbv.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_tkmafr.affectedarea::jsonb as affectedarea,
    notes_note_view_ndkabj.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_odkifz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_odkifz.title AS varchar), '(' || airport_heliport_airportheliport_lat_odkifz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_odkifz.href
  )) as affectedlocation  from master_join master_join_tqxlvt
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_odkifz on master_join_tqxlvt.target_id = airport_heliport_airportheliport_lat_odkifz.id
  where master_join_tqxlvt.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_tbkbbv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_sefvio.id,
      'title', coalesce(cast(airspace_airspace_lat_sefvio.title AS varchar), '(' || airspace_airspace_lat_sefvio.nilreason[1] || ')'),
      'href', airspace_airspace_lat_sefvio.href
  )) as affectedarea  from master_join master_join_msapru
  join airspace.airspace_pt airspace_airspace_lat_sefvio on master_join_msapru.target_id = airspace_airspace_lat_sefvio.id
  where master_join_msapru.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_tkmafr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ufltre.*) AS annotation
  from master_join master_join_upzumf
  join notes.note_view notes_note_lat_ufltre on master_join_upzumf.target_id = notes_note_lat_ufltre.id
  where master_join_upzumf.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_ndkabj on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_lvzfkd.title as varchar), '(' || airport_heliport_runwaydirection_pt_lvzfkd.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_lvzfkd.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_awvuqo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_awvuqo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_awvuqo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_awvuqo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_awvuqo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_awvuqo.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zbhmup.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_zbhmup.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_ydazhq.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_lvzfkd on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_lvzfkd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_awvuqo on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_awvuqo.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zbhmup on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zbhmup.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uoscug.*) AS annotation
  from master_join master_join_dwdqvu
  join notes.note_view notes_note_lat_uoscug on master_join_dwdqvu.target_id = notes_note_lat_uoscug.id
  where master_join_dwdqvu.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_ydazhq on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointType
-- ['notes.note_view', 'airport_heliport.runwaydeclareddistance_view', 'airport_heliport.navaidequipmentdistance_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_xqjrvl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xqjrvl.longitude AS location_longitude,
    geometry_elevatedpoint_view_xqjrvl.latitude AS location_latitude,
    geometry_elevatedpoint_view_xqjrvl.elevation AS location_elevation,
    geometry_elevatedpoint_view_xqjrvl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xqjrvl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xqjrvl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xqjrvl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_sthury.title as varchar), '(' || airport_heliport_runwaydirection_pt_sthury.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_sthury.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_vcjonc.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_traaew.navaidequipment::jsonb as navaidequipment,
    notes_note_view_qajoca.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xqjrvl on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_xqjrvl.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_sthury on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_sthury.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_iztpiq.id) as associateddeclareddistance
  from master_join master_join_wrudxj
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_iztpiq on master_join_wrudxj.target_id = airport_heliport_runwaydeclareddistance_lat_iztpiq.id
  where master_join_wrudxj.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_vcjonc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_knbksp.id) as navaidequipment
  from master_join master_join_yrrynb
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_knbksp on master_join_yrrynb.target_id = airport_heliport_navaidequipmentdistance_lat_knbksp.id
  where master_join_yrrynb.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_traaew on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuqdxn.*) AS annotation
  from master_join master_join_ulzczh
  join notes.note_view notes_note_lat_vuqdxn on master_join_ulzczh.target_id = notes_note_lat_vuqdxn.id
  where master_join_ulzczh.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_qajoca on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_evwzcs.title as varchar), '(' || airport_heliport_runwaydirection_pt_evwzcs.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_evwzcs.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_rhxtig.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_rvyzee.availability::jsonb as availability,
    notes_note_view_photvw.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_evwzcs on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_evwzcs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jufdfb.id) as element
  from master_join master_join_vpyfpc
  join shared.lightelement_view shared_lightelement_lat_jufdfb on master_join_vpyfpc.target_id = shared_lightelement_lat_jufdfb.id
  where master_join_vpyfpc.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_rhxtig on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_rskeac.id) as availability
  from master_join master_join_yvfwmu
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_rskeac on master_join_yvfwmu.target_id = airport_heliport_groundlightingavailability_lat_rskeac.id
  where master_join_yvfwmu.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_rvyzee on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfqoas.*) AS annotation
  from master_join master_join_hxhwfw
  join notes.note_view notes_note_lat_gfqoas on master_join_hxhwfw.target_id = notes_note_lat_gfqoas.id
  where master_join_hxhwfw.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_photvw on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_gmvvan.title as varchar), '(' || airport_heliport_runway_pt_gmvvan.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_gmvvan.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_hfccvr.title as varchar), '(' || airport_heliport_runwayelement_pt_hfccvr.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_hfccvr.href::text AS startingelement_href,
    notes_note_view_bgmxev.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_nusulf.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_gmvvan on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_gmvvan.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_hfccvr on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_hfccvr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mfflyr.*) AS annotation
  from master_join master_join_owlpdz
  join notes.note_view notes_note_lat_mfflyr on master_join_owlpdz.target_id = notes_note_lat_mfflyr.id
  where master_join_owlpdz.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_bgmxev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_scpggk.id) as availability
  from master_join master_join_qrnagw
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_scpggk on master_join_qrnagw.target_id = airport_heliport_manoeuvringareaavailability_lat_scpggk.id
  where master_join_qrnagw.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_nusulf on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jrmotp.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_jrmotp.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_xekzrw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xekzrw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xekzrw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xekzrw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xekzrw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xekzrw.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_iavghx.associatedrunway::jsonb as associatedrunway,
    notes_note_view_gjlekk.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_ivmxpx.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jrmotp on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jrmotp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xekzrw on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_xekzrw.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_ryyqzu.id,
      'title', coalesce(cast(airport_heliport_runway_lat_ryyqzu.title AS varchar), '(' || airport_heliport_runway_lat_ryyqzu.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_ryyqzu.href
  )) as associatedrunway  from master_join master_join_eapuul
  join airport_heliport.runway_pt airport_heliport_runway_lat_ryyqzu on master_join_eapuul.target_id = airport_heliport_runway_lat_ryyqzu.id
  where master_join_eapuul.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_iavghx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibwjjl.*) AS annotation
  from master_join master_join_wxuwwq
  join notes.note_view notes_note_lat_ibwjjl on master_join_wxuwwq.target_id = notes_note_lat_ibwjjl.id
  where master_join_wxuwwq.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_gjlekk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ghmyzt.id) as availability
  from master_join master_join_yahlkf
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ghmyzt on master_join_yahlkf.target_id = airport_heliport_manoeuvringareaavailability_lat_ghmyzt.id
  where master_join_yahlkf.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_ivmxpx on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_pklmuy.title as varchar), '(' || airport_heliport_runway_pt_pklmuy.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_pklmuy.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_fhokrj.element::jsonb as element,
    notes_note_view_mayxqq.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_pklmuy on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_pklmuy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_awbyps.id) as element
  from master_join master_join_kmvaye
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_awbyps on master_join_kmvaye.target_id = airport_heliport_markingelement_lat_awbyps.id
  where master_join_kmvaye.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_fhokrj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlcbyg.*) AS annotation
  from master_join master_join_uwmkse
  join notes.note_view notes_note_lat_vlcbyg on master_join_uwmkse.target_id = notes_note_lat_vlcbyg.id
  where master_join_uwmkse.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_mayxqq on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_udgqha.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_udgqha.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_udgqha.href::text AS lightedarea_href,
    shared_lightelement_view_fusgpk.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qfijxw.availability::jsonb as availability,
    notes_note_view_icxnix.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_udgqha on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_udgqha.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jqtowt.id) as element
  from master_join master_join_rgxznt
  join shared.lightelement_view shared_lightelement_lat_jqtowt on master_join_rgxznt.target_id = shared_lightelement_lat_jqtowt.id
  where master_join_rgxznt.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_fusgpk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_jkzyyr.id) as availability
  from master_join master_join_nsnpcr
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_jkzyyr on master_join_nsnpcr.target_id = airport_heliport_groundlightingavailability_lat_jkzyyr.id
  where master_join_nsnpcr.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qfijxw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mjhykp.*) AS annotation
  from master_join master_join_wsrwef
  join notes.note_view notes_note_lat_mjhykp on master_join_wsrwef.target_id = notes_note_lat_mjhykp.id
  where master_join_wsrwef.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_icxnix on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bpmzlx.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_bpmzlx.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_ukywka.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ukywka.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ukywka.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ukywka.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ukywka.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ukywka.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_nzhyje.title as varchar), '(' || airport_heliport_runwaydirection_pt_nzhyje.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_nzhyje.href::text AS protectedrunwaydirection_href,
    notes_note_view_usnqrq.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bpmzlx on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bpmzlx.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ukywka on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_ukywka.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_nzhyje on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_nzhyje.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oxkczt.*) AS annotation
  from master_join master_join_zqtxqw
  join notes.note_view notes_note_lat_oxkczt on master_join_zqtxqw.target_id = notes_note_lat_oxkczt.id
  where master_join_zqtxqw.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_usnqrq on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayType
-- ['notes.note_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qcwiop.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_qcwiop.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_wjzokg.title as varchar), '(' || airport_heliport_airportheliport_pt_wjzokg.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_wjzokg.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_zpcmjr.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_pdlvui.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_pcqfke.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qcwiop on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qcwiop.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wjzokg on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_wjzokg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_dxyind.id) as overallcontaminant
  from master_join master_join_bgwccl
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_dxyind on master_join_bgwccl.target_id = airport_heliport_runwaycontamination_lat_dxyind.id
  where master_join_bgwccl.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_zpcmjr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yziudw.*) AS annotation
  from master_join master_join_daolpm
  join notes.note_view notes_note_lat_yziudw on master_join_daolpm.target_id = notes_note_lat_yziudw.id
  where master_join_daolpm.source_id = airport_heliport.runway_ts.id
) as notes_note_view_pdlvui on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_godndy.id) as areacontaminant
  from master_join master_join_guvfus
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_godndy on master_join_guvfus.target_id = airport_heliport_runwaysectioncontamination_lat_godndy.id
  where master_join_guvfus.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_pcqfke on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_xwcyrd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xwcyrd.longitude AS location_longitude,
    geometry_elevatedpoint_view_xwcyrd.latitude AS location_latitude,
    geometry_elevatedpoint_view_xwcyrd.elevation AS location_elevation,
    geometry_elevatedpoint_view_xwcyrd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xwcyrd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xwcyrd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xwcyrd.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_elxtdi.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_fsbinp.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xwcyrd on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_xwcyrd.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_zieikl.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_zieikl.title AS varchar), '(' || airport_heliport_runwaydirection_lat_zieikl.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_zieikl.href
  )) as associatedrunwaydirection  from master_join master_join_sjdrli
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_zieikl on master_join_sjdrli.target_id = airport_heliport_runwaydirection_lat_zieikl.id
  where master_join_sjdrli.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_elxtdi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xmguiz.*) AS annotation
  from master_join master_join_cjbeeg
  join notes.note_view notes_note_lat_xmguiz on master_join_cjbeeg.target_id = notes_note_lat_xmguiz.id
  where master_join_cjbeeg.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_fsbinp on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaType
-- ['notes.note_view', 'geometry.point_view', 'procedure.safealtitudeareasector_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_rdlzah.title as varchar), '(' || navaids_points_designatedpoint_pt_rdlzah.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rdlzah.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_udzctt.title as varchar), '(' || navaids_points_navaid_pt_udzctt.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_udzctt.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zrwlhj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zrwlhj.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_zrwlhj.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_izlgrz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_izlgrz.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_izlgrz.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_czfcie.title as varchar), '(' || airport_heliport_airportheliport_pt_czfcie.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_czfcie.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_mutyzb.location::jsonb as location,
    geometry_point_view_taetqz.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_taetqz.longitude AS centrepointposition_longitude,
    geometry_point_view_taetqz.latitude AS centrepointposition_latitude,
    geometry_point_view_taetqz.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_zbdpsn.sector::jsonb as sector,
    notes_note_view_pbyesv.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rdlzah on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rdlzah.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_udzctt on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_udzctt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zrwlhj on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_zrwlhj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_izlgrz on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_izlgrz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_czfcie on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_czfcie.id
left join geometry.point_view geometry_point_view_taetqz on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_taetqz.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_hsnoci.id) as sector
  from master_join master_join_vahlpf
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_hsnoci on master_join_vahlpf.target_id = procedure_safealtitudeareasector_lat_hsnoci.id
  where master_join_vahlpf.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_zbdpsn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_amzwhl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_amzwhl.title AS varchar), '(' || airport_heliport_airportheliport_lat_amzwhl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_amzwhl.href
  )) as location  from master_join master_join_mifabv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_amzwhl on master_join_mifabv.target_id = airport_heliport_airportheliport_lat_amzwhl.id
  where master_join_mifabv.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_mutyzb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kcxqgd.*) AS annotation
  from master_join master_join_yocowc
  join notes.note_view notes_note_lat_kcxqgd on master_join_yocowc.target_id = notes_note_lat_kcxqgd.id
  where master_join_yocowc.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_pbyesv on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_yeifgn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yeifgn.longitude AS location_longitude,
    geometry_elevatedpoint_view_yeifgn.latitude AS location_latitude,
    geometry_elevatedpoint_view_yeifgn.elevation AS location_elevation,
    geometry_elevatedpoint_view_yeifgn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yeifgn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yeifgn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yeifgn.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_imxrbl.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_fbkdqz.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_ajmxbq.availability::jsonb as availability,
    notes_note_view_kizqhh.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yeifgn on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_yeifgn.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_byhlec.id) as authority
  from master_join master_join_nneuze
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_byhlec on master_join_nneuze.target_id = navaids_points_authorityfornavaidequipment_lat_byhlec.id
  where master_join_nneuze.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_imxrbl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_nvjqnm.id) as monitoring
  from master_join master_join_wuksno
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_nvjqnm on master_join_wuksno.target_id = navaids_points_navaidequipmentmonitoring_lat_nvjqnm.id
  where master_join_wuksno.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_fbkdqz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vigkwx.id) as availability
  from master_join master_join_zqpqmq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vigkwx on master_join_zqpqmq.target_id = navaids_points_navaidoperationalstatus_lat_vigkwx.id
  where master_join_zqpqmq.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_ajmxbq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uhnfhj.*) AS annotation
  from master_join master_join_iytzcg
  join notes.note_view notes_note_lat_uhnfhj on master_join_iytzcg.target_id = notes_note_lat_uhnfhj.id
  where master_join_iytzcg.source_id = navaids_points.sdf_ts.id
) as notes_note_view_kizqhh on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_dwctzq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_dwctzq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dwctzq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dwctzq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dwctzq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dwctzq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_zecwgx.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_cncatl.docksite::jsonb as docksite,
    notes_note_view_dcmbzw.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_thegxb.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dwctzq on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_dwctzq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_dufrcz.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_dufrcz.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_dufrcz.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_dufrcz.href
  )) as rampsite  from master_join master_join_gnlsze
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_dufrcz on master_join_gnlsze.target_id = airport_heliport_seaplanerampsite_lat_dufrcz.id
  where master_join_gnlsze.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_zecwgx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_lcabkx.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_lcabkx.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_lcabkx.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_lcabkx.href
  )) as docksite  from master_join master_join_gizzgp
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_lcabkx on master_join_gizzgp.target_id = airport_heliport_floatingdocksite_lat_lcabkx.id
  where master_join_gizzgp.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_cncatl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jbpcdy.*) AS annotation
  from master_join master_join_mforul
  join notes.note_view notes_note_lat_jbpcdy on master_join_mforul.target_id = notes_note_lat_jbpcdy.id
  where master_join_mforul.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_dcmbzw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_eqpwxs.id) as availability
  from master_join master_join_sbchrh
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_eqpwxs on master_join_sbchrh.target_id = airport_heliport_manoeuvringareaavailability_lat_eqpwxs.id
  where master_join_sbchrh.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_thegxb on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteType
-- ['notes.note_view', 'geometry.elevatedcurve_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_apjsri.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_apjsri.elevation AS extent_elevation,
    geometry_elevatedsurface_view_apjsri.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_apjsri.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_apjsri.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_apjsri.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_dpcpkm.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_dpcpkm.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_dpcpkm.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_dpcpkm.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_dpcpkm.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_dpcpkm.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_dygcug.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_apjsri on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_apjsri.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_dpcpkm on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_dpcpkm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_leupve.*) AS annotation
  from master_join master_join_ukpjos
  join notes.note_view notes_note_lat_leupve on master_join_ukpjos.target_id = notes_note_lat_leupve.id
  where master_join_ukpjos.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_dygcug on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceType
-- ['notes.note_view', 'service.callsigndetail_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_jmeqvy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jmeqvy.longitude AS location_longitude,
    geometry_elevatedpoint_view_jmeqvy.latitude AS location_latitude,
    geometry_elevatedpoint_view_jmeqvy.elevation AS location_elevation,
    geometry_elevatedpoint_view_jmeqvy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jmeqvy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jmeqvy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jmeqvy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_qzzlbv.title as varchar), '(' || organisation_unit_pt_qzzlbv.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_qzzlbv.href::text AS serviceprovider_href,
    service_callsigndetail_view_vbrwua.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_wpvcda.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ubtcqt.availability::jsonb as availability,
    notes_note_view_udtkjt.annotation::jsonb as annotation,
    airspace_airspace_pt_oscxyh.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_tzikxt.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jmeqvy on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_jmeqvy.id
left join organisation.unit_pt organisation_unit_pt_qzzlbv on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_qzzlbv.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_oiippc.id) as callsign
  from master_join master_join_jstoqh
  join service.callsigndetail_view service_callsigndetail_lat_oiippc on master_join_jstoqh.target_id = service_callsigndetail_lat_oiippc.id
  where master_join_jstoqh.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_vbrwua on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_fpxiwx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_fpxiwx.title AS varchar), '(' || service_radiocommunicationchannel_lat_fpxiwx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_fpxiwx.href
  )) as radiocommunication  from master_join master_join_tieigu
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_fpxiwx on master_join_tieigu.target_id = service_radiocommunicationchannel_lat_fpxiwx.id
  where master_join_tieigu.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_wpvcda on TRUE
left join lateral(
  select
  from master_join master_join_vqldio
  join shared.contactinformation_view shared_contactinformation_lat_wakffn on master_join_vqldio.target_id = shared_contactinformation_lat_wakffn.id
  where master_join_vqldio.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_chqlrf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_nbznsh.id) as availability
  from master_join master_join_xujcym
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_nbznsh on master_join_xujcym.target_id = service_serviceoperationalstatus_lat_nbznsh.id
  where master_join_xujcym.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_ubtcqt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_enzqos.*) AS annotation
  from master_join master_join_ugirof
  join notes.note_view notes_note_lat_enzqos on master_join_ugirof.target_id = notes_note_lat_enzqos.id
  where master_join_ugirof.source_id = service.searchrescueservice_ts.id
) as notes_note_view_udtkjt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_gtghsq.id,
      'title', coalesce(cast(airspace_airspace_lat_gtghsq.title AS varchar), '(' || airspace_airspace_lat_gtghsq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_gtghsq.href
  )) as clientairspace  from master_join master_join_fabynn
  join airspace.airspace_pt airspace_airspace_lat_gtghsq on master_join_fabynn.target_id = airspace_airspace_lat_gtghsq.id
  where master_join_fabynn.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_oscxyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_hriqtf.id) as clientroute
  from master_join master_join_kuomin
  join routes.routeportion_view routes_routeportion_lat_hriqtf on master_join_kuomin.target_id = routes_routeportion_lat_hriqtf.id
  where master_join_kuomin.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_tzikxt on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarType
-- ['notes.note_view', 'shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_csyair.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_csyair.longitude AS location_longitude,
    geometry_elevatedpoint_view_csyair.latitude AS location_latitude,
    geometry_elevatedpoint_view_csyair.elevation AS location_elevation,
    geometry_elevatedpoint_view_csyair.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_csyair.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_csyair.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_csyair.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_zvqsxm.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_ebsgjj.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_csyair on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_csyair.id
left join lateral(
  select
  from master_join master_join_hkcrxj
  join shared.contactinformation_view shared_contactinformation_lat_mdnxzq on master_join_hkcrxj.target_id = shared_contactinformation_lat_mdnxzq.id
  where master_join_hkcrxj.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_xvflhh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_okjbot.*) AS annotation
  from master_join master_join_cjpjig
  join notes.note_view notes_note_lat_okjbot on master_join_cjpjig.target_id = notes_note_lat_okjbot.id
  where master_join_cjpjig.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_zvqsxm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_afgwlz.id) as groundstation
  from master_join master_join_beeblp
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_afgwlz on master_join_beeblp.target_id = surveillance_surveillancegroundstation_lat_afgwlz.id
  where master_join_beeblp.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_ebsgjj on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_sbwmyr.title as varchar), '(' || airspace_airspace_pt_sbwmyr.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_sbwmyr.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_loevaw.title as varchar), '(' || navaids_points_designatedpoint_pt_loevaw.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_loevaw.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ubsafq.title as varchar), '(' || navaids_points_navaid_pt_ubsafq.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_ubsafq.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jnveji.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jnveji.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_jnveji.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qwrjjk.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qwrjjk.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qwrjjk.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hirutm.title as varchar), '(' || airport_heliport_airportheliport_pt_hirutm.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_hirutm.href::text AS locationairportreferencepoint_href,
    geometry_point_view_gjmxvu.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_gjmxvu.longitude AS locationposition_longitude,
    geometry_point_view_gjmxvu.latitude AS locationposition_latitude,
    geometry_point_view_gjmxvu.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_mohnaf.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_sbwmyr on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_sbwmyr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_loevaw on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_loevaw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ubsafq on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_ubsafq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jnveji on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jnveji.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qwrjjk on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qwrjjk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hirutm on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_hirutm.id
left join geometry.point_view geometry_point_view_gjmxvu on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_gjmxvu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aemhdk.*) AS annotation
  from master_join master_join_snjqzr
  join notes.note_view notes_note_lat_aemhdk on master_join_snjqzr.target_id = notes_note_lat_aemhdk.id
  where master_join_snjqzr.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_mohnaf on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_sbuqvs.title as varchar), '(' || organisation_organisationauthority_pt_sbuqvs.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_sbuqvs.href::text AS authority_href,
    notes_note_view_wefhqd.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_sbuqvs on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_sbuqvs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfpbeb.*) AS annotation
  from master_join master_join_emoxrj
  join notes.note_view notes_note_lat_lfpbeb on master_join_emoxrj.target_id = notes_note_lat_lfpbeb.id
  where master_join_emoxrj.source_id = shared.specialdate_ts.id
) as notes_note_view_wefhqd on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationType
-- ['notes.note_view', 'navaids_points.specialnavigationstationstatus_view', 'navaids_points.authorityforspecialnavigationstation_view', 'geometry.elevatedpoint_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_phgslj.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_phgslj.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_phgslj.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_vzmxbh.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_vzmxbh.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_bjnsom.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_bjnsom.longitude AS position_longitude,
    geometry_elevatedpoint_view_bjnsom.latitude AS position_latitude,
    geometry_elevatedpoint_view_bjnsom.elevation AS position_elevation,
    geometry_elevatedpoint_view_bjnsom.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_bjnsom.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_bjnsom.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_bjnsom.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_kimfxz.availability::jsonb as availability,
    notes_note_view_vfpljn.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_phgslj on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_phgslj.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_vzmxbh on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_vzmxbh.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bjnsom on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_bjnsom.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_jrtpds.id) as availability
  from master_join master_join_szaarc
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_jrtpds on master_join_szaarc.target_id = navaids_points_specialnavigationstationstatus_lat_jrtpds.id
  where master_join_szaarc.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_kimfxz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrgqdc.*) AS annotation
  from master_join master_join_lcssqt
  join notes.note_view notes_note_lat_wrgqdc on master_join_lcssqt.target_id = notes_note_lat_wrgqdc.id
  where master_join_lcssqt.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_vfpljn on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemType
-- ['notes.note_view', 'navaids_points.authorityforspecialnavigationsystem_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_jctwdj.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_jctwdj.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_knkpcs.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_jctwdj on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_jctwdj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qnmdmq.*) AS annotation
  from master_join master_join_xwnllm
  join notes.note_view notes_note_lat_qnmdmq on master_join_xwnllm.target_id = notes_note_lat_qnmdmq.id
  where master_join_xwnllm.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_knkpcs on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalType
-- ['notes.note_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_jhkoeu.title as varchar), '(' || navaids_points_navaid_pt_jhkoeu.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_jhkoeu.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_skkbek.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_skkbek.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_skkbek.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ywyzba.title as varchar), '(' || surveillance_radarsystem_pt_ywyzba.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_ywyzba.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_qiujon.title as varchar), '(' || procedure_safealtitudearea_pt_qiujon.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_qiujon.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_hroipg.id)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_hroipg.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_lqgciy.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_fgfnhf.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_nzgbte.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_ozcinw.flighttransition::jsonb as flighttransition,
    notes_note_view_dogpjg.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jhkoeu on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_jhkoeu.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_skkbek on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_skkbek.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ywyzba on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ywyzba.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_qiujon on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_qiujon.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_hroipg on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_hroipg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_vvftfu.id) as availability
  from master_join master_join_znrxnv
  join procedure.procedureavailability_view procedure_procedureavailability_lat_vvftfu on master_join_znrxnv.target_id = procedure_procedureavailability_lat_vvftfu.id
  where master_join_znrxnv.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_lqgciy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_phymoy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_phymoy.title AS varchar), '(' || airport_heliport_airportheliport_lat_phymoy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_phymoy.href
  )) as airportheliport  from master_join master_join_ytpkjf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_phymoy on master_join_ytpkjf.target_id = airport_heliport_airportheliport_lat_phymoy.id
  where master_join_ytpkjf.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_fgfnhf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_lksrix.id) as aircraftcharacteristic
  from master_join master_join_omulol
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_lksrix on master_join_omulol.target_id = shared_aircraftcharacteristic_lat_lksrix.id
  where master_join_omulol.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_nzgbte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_cwimkf.id) as flighttransition
  from master_join master_join_rxkfps
  join procedure.proceduretransition_view procedure_proceduretransition_lat_cwimkf on master_join_rxkfps.target_id = procedure_proceduretransition_lat_cwimkf.id
  where master_join_rxkfps.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_ozcinw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnujbw.*) AS annotation
  from master_join master_join_yrfrkg
  join notes.note_view notes_note_lat_lnujbw on master_join_yrfrkg.target_id = notes_note_lat_lnujbw.id
  where master_join_yrfrkg.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_dogpjg on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureType
-- ['notes.note_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_ppvvrm.title as varchar), '(' || navaids_points_navaid_pt_ppvvrm.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ppvvrm.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_cfivmg.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_cfivmg.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_cfivmg.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ckahmt.title as varchar), '(' || surveillance_radarsystem_pt_ckahmt.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_ckahmt.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_fwoyix.title as varchar), '(' || procedure_safealtitudearea_pt_fwoyix.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_fwoyix.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_mfzurc.id)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_mfzurc.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_qktuxm.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_zfcjfr.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_qmoyag.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_rvvqwl.flighttransition::jsonb as flighttransition,
    notes_note_view_rpuvfx.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ppvvrm on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ppvvrm.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_cfivmg on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_cfivmg.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ckahmt on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ckahmt.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_fwoyix on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_fwoyix.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_mfzurc on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_mfzurc.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_jgxmvi.id) as availability
  from master_join master_join_kubbzy
  join procedure.procedureavailability_view procedure_procedureavailability_lat_jgxmvi on master_join_kubbzy.target_id = procedure_procedureavailability_lat_jgxmvi.id
  where master_join_kubbzy.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_qktuxm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wpmpxb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wpmpxb.title AS varchar), '(' || airport_heliport_airportheliport_lat_wpmpxb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wpmpxb.href
  )) as airportheliport  from master_join master_join_ghoyad
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wpmpxb on master_join_ghoyad.target_id = airport_heliport_airportheliport_lat_wpmpxb.id
  where master_join_ghoyad.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_zfcjfr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xgznle.id) as aircraftcharacteristic
  from master_join master_join_dcnkmr
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xgznle on master_join_dcnkmr.target_id = shared_aircraftcharacteristic_lat_xgznle.id
  where master_join_dcnkmr.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_qmoyag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_cywltv.id) as flighttransition
  from master_join master_join_zfxnxy
  join procedure.proceduretransition_view procedure_proceduretransition_lat_cywltv on master_join_zfxnxy.target_id = procedure_proceduretransition_lat_cywltv.id
  where master_join_zfxnxy.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_rvvqwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xpdpbn.*) AS annotation
  from master_join master_join_dnesbp
  join notes.note_view notes_note_lat_xpdpbn on master_join_dnesbp.target_id = notes_note_lat_xpdpbn.id
  where master_join_dnesbp.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_rpuvfx on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_zwgqxs.title as varchar), '(' || shared_standardleveltable_pt_zwgqxs.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_zwgqxs.href::text AS leveltable_href,
    shared_standardlevel_view_xsjcah.level::jsonb as level,
    notes_note_view_tvrevi.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_zwgqxs on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_zwgqxs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_hmihyr.id) as level
  from master_join master_join_alwkrt
  join shared.standardlevel_view shared_standardlevel_lat_hmihyr on master_join_alwkrt.target_id = shared_standardlevel_lat_hmihyr.id
  where master_join_alwkrt.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_xsjcah on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqsdmx.*) AS annotation
  from master_join master_join_ecjgfi
  join notes.note_view notes_note_lat_kqsdmx on master_join_ecjgfi.target_id = notes_note_lat_kqsdmx.id
  where master_join_ecjgfi.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_tvrevi on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_wyusyf.title as varchar), '(' || shared_standardlevelcolumn_pt_wyusyf.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_wyusyf.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_svhbrr.applicableairspace::jsonb as applicableairspace,
    notes_note_view_waqqks.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_wyusyf on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_wyusyf.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_xztqyf.id,
      'title', coalesce(cast(airspace_airspace_lat_xztqyf.title AS varchar), '(' || airspace_airspace_lat_xztqyf.nilreason[1] || ')'),
      'href', airspace_airspace_lat_xztqyf.href
  )) as applicableairspace  from master_join master_join_qaoqzn
  join airspace.airspace_pt airspace_airspace_lat_xztqyf on master_join_qaoqzn.target_id = airspace_airspace_lat_xztqyf.id
  where master_join_qaoqzn.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_svhbrr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ceitbb.*) AS annotation
  from master_join master_join_pffgda
  join notes.note_view notes_note_lat_ceitbb on master_join_pffgda.target_id = notes_note_lat_ceitbb.id
  where master_join_pffgda.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_waqqks on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_zpyfme.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izgskf.*) AS annotation
  from master_join master_join_jfdqek
  join notes.note_view notes_note_lat_izgskf on master_join_jfdqek.target_id = notes_note_lat_izgskf.id
  where master_join_jfdqek.source_id = shared.standardleveltable_ts.id
) as notes_note_view_zpyfme on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_tefjgf.title as varchar), '(' || airport_heliport_aircraftstand_pt_tefjgf.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_tefjgf.href::text AS markedstand_href,
    airport_heliport_markingelement_view_pacdsc.element::jsonb as element,
    notes_note_view_dkyncb.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_tefjgf on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_tefjgf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rdiyjx.id) as element
  from master_join master_join_tugisd
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rdiyjx on master_join_tugisd.target_id = airport_heliport_markingelement_lat_rdiyjx.id
  where master_join_tugisd.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_pacdsc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvchsq.*) AS annotation
  from master_join master_join_uqkovj
  join notes.note_view notes_note_lat_jvchsq on master_join_uqkovj.target_id = notes_note_lat_jvchsq.id
  where master_join_uqkovj.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_dkyncb on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_allhhv.title as varchar), '(' || airport_heliport_airportheliport_pt_allhhv.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_allhhv.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_bgznsy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bgznsy.longitude AS location_longitude,
    geometry_elevatedpoint_view_bgznsy.latitude AS location_latitude,
    geometry_elevatedpoint_view_bgznsy.elevation AS location_elevation,
    geometry_elevatedpoint_view_bgznsy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bgznsy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bgznsy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bgznsy.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xdmjks.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_allhhv on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_allhhv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bgznsy on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_bgznsy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pqkwiy.*) AS annotation
  from master_join master_join_rcbpus
  join notes.note_view notes_note_lat_pqkwiy on master_join_rcbpus.target_id = notes_note_lat_pqkwiy.id
  where master_join_rcbpus.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_xdmjks on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_husoqf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_husoqf.longitude AS location_longitude,
    geometry_elevatedpoint_view_husoqf.latitude AS location_latitude,
    geometry_elevatedpoint_view_husoqf.elevation AS location_elevation,
    geometry_elevatedpoint_view_husoqf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_husoqf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_husoqf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_husoqf.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_bhqwse.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_spiaik.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_dtktdc.availability::jsonb as availability,
    notes_note_view_ovitss.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_husoqf on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_husoqf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zywbdd.id) as authority
  from master_join master_join_mwdxga
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zywbdd on master_join_mwdxga.target_id = navaids_points_authorityfornavaidequipment_lat_zywbdd.id
  where master_join_mwdxga.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_bhqwse on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pgllvr.id) as monitoring
  from master_join master_join_werwzu
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pgllvr on master_join_werwzu.target_id = navaids_points_navaidequipmentmonitoring_lat_pgllvr.id
  where master_join_werwzu.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_spiaik on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_kjauiw.id) as availability
  from master_join master_join_phcgzy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_kjauiw on master_join_phcgzy.target_id = navaids_points_navaidoperationalstatus_lat_kjauiw.id
  where master_join_phcgzy.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_dtktdc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqcyrj.*) AS annotation
  from master_join master_join_ollutx
  join notes.note_view notes_note_lat_oqcyrj on master_join_ollutx.target_id = notes_note_lat_oqcyrj.id
  where master_join_ollutx.source_id = navaids_points.tacan_ts.id
) as notes_note_view_ovitss on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_ltmoos.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_ltmoos.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_ltmoos.href::text AS taxiholding_href,
    shared_lightelement_view_qajysr.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_arbzyo.availability::jsonb as availability,
    notes_note_view_axezco.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_ltmoos on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_ltmoos.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_zzeqgr.id) as element
  from master_join master_join_yvzmqa
  join shared.lightelement_view shared_lightelement_lat_zzeqgr on master_join_yvzmqa.target_id = shared_lightelement_lat_zzeqgr.id
  where master_join_yvzmqa.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_qajysr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_medbxq.id) as availability
  from master_join master_join_vjjmfa
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_medbxq on master_join_vjjmfa.target_id = airport_heliport_groundlightingavailability_lat_medbxq.id
  where master_join_vjjmfa.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_arbzyo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hmrceb.*) AS annotation
  from master_join master_join_cnagfn
  join notes.note_view notes_note_lat_hmrceb on master_join_cnagfn.target_id = notes_note_lat_hmrceb.id
  where master_join_cnagfn.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_axezco on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_qjfcfn.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_qjfcfn.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_qjfcfn.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_wlmefw.element::jsonb as element,
    notes_note_view_aadecw.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_qjfcfn on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_qjfcfn.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_purete.id) as element
  from master_join master_join_bkomkm
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_purete on master_join_bkomkm.target_id = airport_heliport_markingelement_lat_purete.id
  where master_join_bkomkm.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_wlmefw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ffnhcw.*) AS annotation
  from master_join master_join_tdfyst
  join notes.note_view notes_note_lat_ffnhcw on master_join_tdfyst.target_id = notes_note_lat_ffnhcw.id
  where master_join_tdfyst.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_aadecw on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionType
-- ['notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_jmahaa.title as varchar), '(' || airport_heliport_guidanceline_pt_jmahaa.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_jmahaa.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_kpgtwo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kpgtwo.longitude AS location_longitude,
    geometry_elevatedpoint_view_kpgtwo.latitude AS location_latitude,
    geometry_elevatedpoint_view_kpgtwo.elevation AS location_elevation,
    geometry_elevatedpoint_view_kpgtwo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kpgtwo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kpgtwo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kpgtwo.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_depjff.protectedrunway::jsonb as protectedrunway,
    notes_note_view_cirxbo.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jmahaa on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_jmahaa.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kpgtwo on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_kpgtwo.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_iubvgn.id,
      'title', coalesce(cast(airport_heliport_runway_lat_iubvgn.title AS varchar), '(' || airport_heliport_runway_lat_iubvgn.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_iubvgn.href
  )) as protectedrunway  from master_join master_join_phmcmh
  join airport_heliport.runway_pt airport_heliport_runway_lat_iubvgn on master_join_phmcmh.target_id = airport_heliport_runway_lat_iubvgn.id
  where master_join_phmcmh.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_depjff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tbhkhm.*) AS annotation
  from master_join master_join_pjrqin
  join notes.note_view notes_note_lat_tbhkhm on master_join_pjrqin.target_id = notes_note_lat_tbhkhm.id
  where master_join_pjrqin.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_cirxbo on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_aaogst.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_aaogst.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_gmzouy.title as varchar), '(' || airport_heliport_taxiway_pt_gmzouy.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_gmzouy.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_tjwvzw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_tjwvzw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tjwvzw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tjwvzw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tjwvzw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tjwvzw.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_cirelg.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_iynasz.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_aaogst on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_aaogst.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_gmzouy on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_gmzouy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tjwvzw on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_tjwvzw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fxzbby.*) AS annotation
  from master_join master_join_ynheye
  join notes.note_view notes_note_lat_fxzbby on master_join_ynheye.target_id = notes_note_lat_fxzbby.id
  where master_join_ynheye.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_cirelg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_jhqkyu.id) as availability
  from master_join master_join_ckosed
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_jhqkyu on master_join_ckosed.target_id = airport_heliport_manoeuvringareaavailability_lat_jhqkyu.id
  where master_join_ckosed.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_iynasz on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_rzrwrh.title as varchar), '(' || airport_heliport_taxiway_pt_rzrwrh.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_rzrwrh.href::text AS lightedtaxiway_href,
    shared_lightelement_view_hjkcbd.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_lfiplm.availability::jsonb as availability,
    notes_note_view_kyiqdv.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_rzrwrh on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_rzrwrh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jhqbhy.id) as element
  from master_join master_join_sgmruf
  join shared.lightelement_view shared_lightelement_lat_jhqbhy on master_join_sgmruf.target_id = shared_lightelement_lat_jhqbhy.id
  where master_join_sgmruf.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_hjkcbd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_gcksly.id) as availability
  from master_join master_join_bdxwon
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_gcksly on master_join_bdxwon.target_id = airport_heliport_groundlightingavailability_lat_gcksly.id
  where master_join_bdxwon.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_lfiplm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_svjecl.*) AS annotation
  from master_join master_join_rwldyr
  join notes.note_view notes_note_lat_svjecl on master_join_rwldyr.target_id = notes_note_lat_svjecl.id
  where master_join_rwldyr.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_kyiqdv on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_mjhzhj.title as varchar), '(' || airport_heliport_taxiway_pt_mjhzhj.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_mjhzhj.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_pqvyxw.title as varchar), '(' || airport_heliport_taxiwayelement_pt_pqvyxw.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_pqvyxw.href::text AS markedelement_href,
    airport_heliport_markingelement_view_jjrfgq.element::jsonb as element,
    notes_note_view_jtnwqq.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_mjhzhj on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_mjhzhj.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_pqvyxw on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_pqvyxw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_eeiuam.id) as element
  from master_join master_join_kdtzlg
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_eeiuam on master_join_kdtzlg.target_id = airport_heliport_markingelement_lat_eeiuam.id
  where master_join_kdtzlg.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_jjrfgq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xhsfyy.*) AS annotation
  from master_join master_join_avgegb
  join notes.note_view notes_note_lat_xhsfyy on master_join_avgegb.target_id = notes_note_lat_xhsfyy.id
  where master_join_avgegb.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_jtnwqq on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.taxiwaycontamination_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_nadneh.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_nadneh.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_pqhriw.title as varchar), '(' || airport_heliport_airportheliport_pt_pqhriw.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_pqhriw.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_xvdcdx.contaminant::jsonb as contaminant,
    notes_note_view_yrfobp.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_eodxep.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_nadneh on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_nadneh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pqhriw on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_pqhriw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_xjkadg.id) as contaminant
  from master_join master_join_bupsww
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_xjkadg on master_join_bupsww.target_id = airport_heliport_taxiwaycontamination_lat_xjkadg.id
  where master_join_bupsww.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_xvdcdx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sunyrv.*) AS annotation
  from master_join master_join_ttwzbb
  join notes.note_view notes_note_lat_sunyrv on master_join_ttwzbb.target_id = notes_note_lat_sunyrv.id
  where master_join_ttwzbb.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_yrfobp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_vuqfmc.id) as availability
  from master_join master_join_smljuq
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_vuqfmc on master_join_smljuq.target_id = airport_heliport_manoeuvringareaavailability_lat_vuqfmc.id
  where master_join_smljuq.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_eodxep on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaType
-- ['notes.note_view', 'geometry.point_view', 'procedure.terminalarrivalareasector_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_tpcngp.title as varchar), '(' || navaids_points_designatedpoint_pt_tpcngp.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_tpcngp.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_evcmos.title as varchar), '(' || navaids_points_designatedpoint_pt_evcmos.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_evcmos.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_oynrfp.title as varchar), '(' || navaids_points_navaid_pt_oynrfp.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_oynrfp.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_eydnhf.title as varchar), '(' || navaids_points_navaid_pt_eydnhf.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_eydnhf.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_phdehv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_phdehv.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_phdehv.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_epshvu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_epshvu.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_epshvu.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bwbrsi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bwbrsi.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bwbrsi.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bffhjw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bffhjw.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bffhjw.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ogecek.title as varchar), '(' || airport_heliport_airportheliport_pt_ogecek.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_ogecek.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dmlacx.title as varchar), '(' || airport_heliport_airportheliport_pt_dmlacx.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_dmlacx.href::text AS iafairportreferencepoint_href,
    geometry_point_view_etlrex.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_etlrex.longitude AS ifposition_longitude,
    geometry_point_view_etlrex.latitude AS ifposition_latitude,
    geometry_point_view_etlrex.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_thcavx.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_thcavx.longitude AS iafposition_longitude,
    geometry_point_view_thcavx.latitude AS iafposition_latitude,
    geometry_point_view_thcavx.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_iddvhd.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_iddvhd.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_shghxk.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_shghxk.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_shghxk.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_sepytb.sector::jsonb as sector,
    notes_note_view_tklwef.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_tpcngp on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_tpcngp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_oynrfp on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_oynrfp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_phdehv on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_phdehv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bwbrsi on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bwbrsi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ogecek on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_ogecek.id
left join geometry.point_view geometry_point_view_etlrex on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_etlrex.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_evcmos on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_evcmos.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eydnhf on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_eydnhf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_epshvu on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_epshvu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bffhjw on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bffhjw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dmlacx on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_dmlacx.id
left join geometry.point_view geometry_point_view_thcavx on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_thcavx.id
left join geometry.surface_view geometry_surface_view_iddvhd on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_iddvhd.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_shghxk on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_shghxk.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_qoflil.id) as sector
  from master_join master_join_avijjc
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_qoflil on master_join_avijjc.target_id = procedure_terminalarrivalareasector_lat_qoflil.id
  where master_join_avijjc.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_sepytb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qnvmyu.*) AS annotation
  from master_join master_join_ruifah
  join notes.note_view notes_note_lat_qnvmyu on master_join_ruifah.target_id = notes_note_lat_qnvmyu.id
  where master_join_ruifah.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_tklwef on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qtrfhh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qtrfhh.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_qtrfhh.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_mnzmhi.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_bczklh.availability::jsonb as availability,
    notes_note_view_lhofgh.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qtrfhh on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_qtrfhh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_gtysmk.id) as element
  from master_join master_join_iocwmv
  join shared.lightelement_view shared_lightelement_lat_gtysmk on master_join_iocwmv.target_id = shared_lightelement_lat_gtysmk.id
  where master_join_iocwmv.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_mnzmhi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_gkyije.id) as availability
  from master_join master_join_utzhel
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_gkyije on master_join_utzhel.target_id = airport_heliport_groundlightingavailability_lat_gkyije.id
  where master_join_utzhel.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_bczklh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_faizch.*) AS annotation
  from master_join master_join_xtuznh
  join notes.note_view notes_note_lat_faizch on master_join_xtuznh.target_id = notes_note_lat_faizch.id
  where master_join_xtuznh.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_lhofgh on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_zmuaxq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_zmuaxq.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_zmuaxq.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_rgwxdf.element::jsonb as element,
    notes_note_view_ujxhhe.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_zmuaxq on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_zmuaxq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_gsoqqw.id) as element
  from master_join master_join_vagorf
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_gsoqqw on master_join_vagorf.target_id = airport_heliport_markingelement_lat_gsoqqw.id
  where master_join_vagorf.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_rgwxdf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dauftc.*) AS annotation
  from master_join master_join_amlhum
  join notes.note_view notes_note_lat_dauftc on master_join_amlhum.target_id = notes_note_lat_dauftc.id
  where master_join_amlhum.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_ujxhhe on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jhsbki.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_jhsbki.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_rsivoj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rsivoj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rsivoj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rsivoj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rsivoj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rsivoj.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fofjrv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fofjrv.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_fofjrv.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_parlwj.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jhsbki on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jhsbki.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rsivoj on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_rsivoj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fofjrv on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_fofjrv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mtiijk.*) AS annotation
  from master_join master_join_inyrjh
  join notes.note_view notes_note_lat_mtiijk on master_join_inyrjh.target_id = notes_note_lat_mtiijk.id
  where master_join_inyrjh.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_parlwj on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedpoint_view', 'airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_sevehv.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_sevehv.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_sevehv.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_sevehv.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_sevehv.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_sevehv.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_sevehv.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_sevehv.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_gktrom.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_gktrom.elevation AS extent_elevation,
    geometry_elevatedsurface_view_gktrom.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_gktrom.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_gktrom.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_gktrom.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_eebkpn.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_eebkpn.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_zvwyvq.title as varchar), '(' || airport_heliport_airportheliport_pt_zvwyvq.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zvwyvq.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_vyvlbc.title as varchar), '(' || airport_heliport_runway_pt_vyvlbc.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_vyvlbc.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_zhcxdo.contaminant::jsonb as contaminant,
    notes_note_view_bxuasa.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_jboemh.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sevehv on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_sevehv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gktrom on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_gktrom.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_eebkpn on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_eebkpn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zvwyvq on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zvwyvq.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_vyvlbc on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_vyvlbc.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_nkqlrh.id) as contaminant
  from master_join master_join_zxniyb
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_nkqlrh on master_join_zxniyb.target_id = airport_heliport_touchdownliftoffcontamination_lat_nkqlrh.id
  where master_join_zxniyb.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_zhcxdo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fvrjij.*) AS annotation
  from master_join master_join_xnhglh
  join notes.note_view notes_note_lat_fvrjij on master_join_xnhglh.target_id = notes_note_lat_fvrjij.id
  where master_join_xnhglh.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_bxuasa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_tmqctu.id) as availability
  from master_join master_join_nzzasy
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_tmqctu on master_join_nzzasy.target_id = airport_heliport_manoeuvringareaavailability_lat_tmqctu.id
  where master_join_nzzasy.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_jboemh on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.unitavailability_view', 'organisation.unitdependency_view', 'geometry.elevatedpoint_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_dknrrm.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_dknrrm.longitude AS position_longitude,
    geometry_elevatedpoint_view_dknrrm.latitude AS position_latitude,
    geometry_elevatedpoint_view_dknrrm.elevation AS position_elevation,
    geometry_elevatedpoint_view_dknrrm.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_dknrrm.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_dknrrm.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_dknrrm.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_xrafbb.title as varchar), '(' || airport_heliport_airportheliport_pt_xrafbb.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_xrafbb.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_ktrnyr.title as varchar), '(' || organisation_organisationauthority_pt_ktrnyr.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_ktrnyr.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_tnakou.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_ymvrtl.availability::jsonb as availability,
    notes_note_view_nyzyfm.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dknrrm on organisation.unit_ts.position_id = geometry_elevatedpoint_view_dknrrm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xrafbb on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_xrafbb.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ktrnyr on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_ktrnyr.id
left join lateral(
  select
  from master_join master_join_izivog
  join shared.contactinformation_view shared_contactinformation_lat_axngjj on master_join_izivog.target_id = shared_contactinformation_lat_axngjj.id
  where master_join_izivog.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_anrmzn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_lizkyz.id) as relatedunit
  from master_join master_join_tntjbn
  join organisation.unitdependency_view organisation_unitdependency_lat_lizkyz on master_join_tntjbn.target_id = organisation_unitdependency_lat_lizkyz.id
  where master_join_tntjbn.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_tnakou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_mwpble.id) as availability
  from master_join master_join_ilcpbt
  join organisation.unitavailability_view organisation_unitavailability_lat_mwpble on master_join_ilcpbt.target_id = organisation_unitavailability_lat_mwpble.id
  where master_join_ilcpbt.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_ymvrtl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlyzih.*) AS annotation
  from master_join master_join_bzwttx
  join notes.note_view notes_note_lat_vlyzih on master_join_bzwttx.target_id = notes_note_lat_vlyzih.id
  where master_join_bzwttx.source_id = organisation.unit_ts.id
) as notes_note_view_nyzyfm on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_leaqfw.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ckjjvt.*) AS annotation
  from master_join master_join_mihoxn
  join notes.note_view notes_note_lat_ckjjvt on master_join_mihoxn.target_id = notes_note_lat_ckjjvt.id
  where master_join_mihoxn.source_id = holding.unplannedholding_ts.id
) as notes_note_view_leaqfw on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureType
-- ['notes.note_view', 'obstacles.verticalstructurepart_view', 'obstacles.verticalstructurelightingstatus_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_likzdb.title as varchar), '(' || navaids_points_markerbeacon_pt_likzdb.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_likzdb.href::text AS marker_href,
    obstacles_verticalstructurepart_view_bvixxt.part::jsonb as part,
    service_passengerservice_pt_heblya.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_hbcymg.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_faohuv.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_kwzabl.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_iqgsrv.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_lfudvb.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_wyueam.supportedservice::jsonb as supportedservice,
    notes_note_view_ytwmhw.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_ziorzs.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_likzdb on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_likzdb.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_hejezp.id) as part
  from master_join master_join_upggsd
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_hejezp on master_join_upggsd.target_id = obstacles_verticalstructurepart_lat_hejezp.id
  where master_join_upggsd.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_bvixxt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_vdoint.id,
      'title', coalesce(cast(service_passengerservice_lat_vdoint.title AS varchar), '(' || service_passengerservice_lat_vdoint.nilreason[1] || ')'),
      'href', service_passengerservice_lat_vdoint.href
  )) as hostedpassengerservice  from master_join master_join_rawmde
  join service.passengerservice_pt service_passengerservice_lat_vdoint on master_join_rawmde.target_id = service_passengerservice_lat_vdoint.id
  where master_join_rawmde.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_heblya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_hsvcbn.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_hsvcbn.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_hsvcbn.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_hsvcbn.href
  )) as supportedgroundlight  from master_join master_join_xcvofl
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_hsvcbn on master_join_xcvofl.target_id = airport_heliport_groundlightsystem_lat_hsvcbn.id
  where master_join_xcvofl.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_hbcymg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_xmhbmm.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_xmhbmm.title AS varchar), '(' || navaids_points_navaidequipment_lat_xmhbmm.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_xmhbmm.href
  )) as hostednavaidequipment  from master_join master_join_bcanhd
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_xmhbmm on master_join_bcanhd.target_id = navaids_points_navaidequipment_lat_xmhbmm.id
  where master_join_bcanhd.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_faohuv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_mihvap.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_mihvap.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_mihvap.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_mihvap.href
  )) as hostedspecialnavstation  from master_join master_join_ylbrxq
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_mihvap on master_join_ylbrxq.target_id = navaids_points_specialnavigationstation_lat_mihvap.id
  where master_join_ylbrxq.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_kwzabl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_crfpjw.id,
      'title', coalesce(cast(organisation_unit_lat_crfpjw.title AS varchar), '(' || organisation_unit_lat_crfpjw.nilreason[1] || ')'),
      'href', organisation_unit_lat_crfpjw.href
  )) as hostedunit  from master_join master_join_afzqpa
  join organisation.unit_pt organisation_unit_lat_crfpjw on master_join_afzqpa.target_id = organisation_unit_lat_crfpjw.id
  where master_join_afzqpa.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_iqgsrv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rpufdu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rpufdu.title AS varchar), '(' || organisation_organisationauthority_lat_rpufdu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rpufdu.href
  )) as hostedorganisation  from master_join master_join_rvprmb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rpufdu on master_join_rvprmb.target_id = organisation_organisationauthority_lat_rpufdu.id
  where master_join_rvprmb.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_lfudvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_apjswv.id,
      'title', coalesce(cast(service_service_lat_apjswv.title AS varchar), '(' || service_service_lat_apjswv.nilreason[1] || ')'),
      'href', service_service_lat_apjswv.href
  )) as supportedservice  from master_join master_join_sanlcd
  join service.service_pt service_service_lat_apjswv on master_join_sanlcd.target_id = service_service_lat_apjswv.id
  where master_join_sanlcd.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_wyueam on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mqnlec.*) AS annotation
  from master_join master_join_uhgbrh
  join notes.note_view notes_note_lat_mqnlec on master_join_uhgbrh.target_id = notes_note_lat_mqnlec.id
  where master_join_uhgbrh.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_ytwmhw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_zzqccc.id) as lightingavailability
  from master_join master_join_rgwnjb
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_zzqccc on master_join_rgwnjb.target_id = obstacles_verticalstructurelightingstatus_lat_zzqccc.id
  where master_join_rgwnjb.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_ziorzs on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_znpnlt.title as varchar), '(' || airport_heliport_runwaydirection_pt_znpnlt.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_znpnlt.href::text AS runwaydirection_href,
    shared_lightelement_view_tjkpik.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_usblmm.availability::jsonb as availability,
    notes_note_view_svuvqp.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_znpnlt on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_znpnlt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_tcjtgg.id) as element
  from master_join master_join_iggvfj
  join shared.lightelement_view shared_lightelement_lat_tcjtgg on master_join_iggvfj.target_id = shared_lightelement_lat_tcjtgg.id
  where master_join_iggvfj.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_tjkpik on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_hqhtvx.id) as availability
  from master_join master_join_nlswyw
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_hqhtvx on master_join_nlswyw.target_id = airport_heliport_groundlightingavailability_lat_hqhtvx.id
  where master_join_nlswyw.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_usblmm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tktllh.*) AS annotation
  from master_join master_join_hnejtg
  join notes.note_view notes_note_lat_tktllh on master_join_hnejtg.target_id = notes_note_lat_tktllh.id
  where master_join_hnejtg.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_svuvqp on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORType
-- ['navaids_points.authorityfornavaidequipment_view', 'notes.note_view', 'navaids_points.navaidequipmentmonitoring_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ofyokz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ofyokz.longitude AS location_longitude,
    geometry_elevatedpoint_view_ofyokz.latitude AS location_latitude,
    geometry_elevatedpoint_view_ofyokz.elevation AS location_elevation,
    geometry_elevatedpoint_view_ofyokz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ofyokz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ofyokz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ofyokz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hetxal.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tytshw.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_ucnvvd.availability::jsonb as availability,
    notes_note_view_rxyowp.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ofyokz on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_ofyokz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_isdebc.id) as authority
  from master_join master_join_dgrnww
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_isdebc on master_join_dgrnww.target_id = navaids_points_authorityfornavaidequipment_lat_isdebc.id
  where master_join_dgrnww.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_hetxal on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_uhfoiv.id) as monitoring
  from master_join master_join_bqfjws
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_uhfoiv on master_join_bqfjws.target_id = navaids_points_navaidequipmentmonitoring_lat_uhfoiv.id
  where master_join_bqfjws.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tytshw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mkrqyy.id) as availability
  from master_join master_join_mpwlsu
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_mkrqyy on master_join_mpwlsu.target_id = navaids_points_navaidoperationalstatus_lat_mkrqyy.id
  where master_join_mpwlsu.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_ucnvvd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pewpgm.*) AS annotation
  from master_join master_join_wbmodf
  join notes.note_view notes_note_lat_pewpgm on master_join_wbmodf.target_id = notes_note_lat_pewpgm.id
  where master_join_wbmodf.source_id = navaids_points.vor_ts.id
) as notes_note_view_rxyowp on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaType
-- ['airport_heliport.workareaactivity_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_ezxhrj.title as varchar), '(' || airport_heliport_airportheliport_pt_ezxhrj.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ezxhrj.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_mhfbvb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mhfbvb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mhfbvb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mhfbvb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mhfbvb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mhfbvb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_hdsiji.activation::jsonb as activation,
    notes_note_view_bcdhko.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ezxhrj on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ezxhrj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mhfbvb on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_mhfbvb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_afsdqi.id) as activation
  from master_join master_join_yhkzbs
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_afsdqi on master_join_yhkzbs.target_id = airport_heliport_workareaactivity_lat_afsdqi.id
  where master_join_yhkzbs.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_hdsiji on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tilmej.*) AS annotation
  from master_join master_join_csxmao
  join notes.note_view notes_note_lat_tilmej on master_join_csxmao.target_id = notes_note_lat_tilmej.id
  where master_join_csxmao.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_bcdhko on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
