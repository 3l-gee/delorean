-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_kgijcc.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vmdqwd.*) AS annotation
  from master_join master_join_iwqjvx
  join notes.note_view notes_note_lat_vmdqwd on master_join_iwqjvx.target_id = notes_note_lat_vmdqwd.id
  where master_join_iwqjvx.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_kgijcc on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_qrtbnz.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_tyhdxl.layer::jsonb as layer,
    notes_note_view_nujspg.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_mkvdyb.id) as criticalridge
  from master_join master_join_zepmvl
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_mkvdyb on master_join_zepmvl.target_id = airport_heliport_ridge_lat_mkvdyb.id
  where master_join_zepmvl.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_qrtbnz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_xxzuoj.id) as layer
  from master_join master_join_zdetrl
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_xxzuoj on master_join_zdetrl.target_id = airport_heliport_surfacecontaminationlayer_lat_xxzuoj.id
  where master_join_zdetrl.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_tyhdxl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bdzhfc.*) AS annotation
  from master_join master_join_qfokwz
  join notes.note_view notes_note_lat_bdzhfc on master_join_qfokwz.target_id = notes_note_lat_bdzhfc.id
  where master_join_qfokwz.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_nujspg on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_rkmzpi.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_joeqju.layer::jsonb as layer,
    notes_note_view_hfwbtf.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_oijrsf.id) as criticalridge
  from master_join master_join_zumzqd
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_oijrsf on master_join_zumzqd.target_id = airport_heliport_ridge_lat_oijrsf.id
  where master_join_zumzqd.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_rkmzpi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_naajlq.id) as layer
  from master_join master_join_zsjcam
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_naajlq on master_join_zsjcam.target_id = airport_heliport_surfacecontaminationlayer_lat_naajlq.id
  where master_join_zsjcam.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_joeqju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhvrcl.*) AS annotation
  from master_join master_join_dujmrw
  join notes.note_view notes_note_lat_dhvrcl on master_join_dujmrw.target_id = notes_note_lat_dhvrcl.id
  where master_join_dujmrw.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_hfwbtf on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_vxkujq.id)::jsonb AS theairspacevolume,
    notes_note_view_nhegxm.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_vxkujq on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_vxkujq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gykhev.*) AS annotation
  from master_join master_join_xxqewv
  join notes.note_view notes_note_lat_gykhev on master_join_xxqewv.target_id = notes_note_lat_gykhev.id
  where master_join_xxqewv.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_nhegxm on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_inhcrz.title as varchar), '(' || shared_standardlevelcolumn_pt_inhcrz.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_inhcrz.href::text AS discretelevelseries_href,
    notes_note_view_yxnjyv.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_inhcrz on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_inhcrz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bmujak.*) AS annotation
  from master_join master_join_mpfqtu
  join notes.note_view notes_note_lat_bmujak on master_join_mpfqtu.target_id = notes_note_lat_bmujak.id
  where master_join_mpfqtu.source_id = shared.airspacelayer.id
) as notes_note_view_yxnjyv on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_fkfoax.title as varchar), '(' || airspace_airspace_pt_fkfoax.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_fkfoax.href::text AS theairspace_href,
    notes_note_view_mxofbs.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_fkfoax on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_fkfoax.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szwnuz.*) AS annotation
  from master_join master_join_tkmgwe
  join notes.note_view notes_note_lat_szwnuz on master_join_tkmgwe.target_id = notes_note_lat_szwnuz.id
  where master_join_tkmgwe.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_mxofbs on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_mlyisi.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rfifht.*) AS annotation
  from master_join master_join_waypaa
  join notes.note_view notes_note_lat_rfifht on master_join_waypaa.target_id = notes_note_lat_rfifht.id
  where master_join_waypaa.source_id = shared.altitudeadjustment.id
) as notes_note_view_mlyisi on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_mqiths.title as varchar), '(' || navaids_points_angleindication_pt_mqiths.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_mqiths.href::text AS theangleindication_href,
    notes_note_view_gbvrgq.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mqiths on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_mqiths.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ifeuzo.*) AS annotation
  from master_join master_join_zwwfxo
  join notes.note_view notes_note_lat_ifeuzo on master_join_zwwfxo.target_id = notes_note_lat_ifeuzo.id
  where master_join_zwwfxo.source_id = navaids_points.angleuse.id
) as notes_note_view_gbvrgq on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_uamjfd.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cigxii.*) AS annotation
  from master_join master_join_upokvu
  join notes.note_view notes_note_lat_cigxii on master_join_upokvu.target_id = notes_note_lat_cigxii.id
  where master_join_upokvu.source_id = procedure.approachaltitudetable.id
) as notes_note_view_uamjfd on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_pkqltb.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_raefjv.title as varchar), '(' || airport_heliport_altimetersource_pt_raefjv.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_raefjv.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_gpllov.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_xwtsnl.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_efyhux.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_thzyqw.designsurface::jsonb as designsurface,
    notes_note_view_oynhws.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_pkqltb on procedure.approachcondition.minimumset_id = procedure_minima_pt_pkqltb.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_raefjv on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_raefjv.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_txauwg.id) as circlingrestriction
  from master_join master_join_xbzkhi
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_txauwg on master_join_xbzkhi.target_id = procedure_circlingrestriction_lat_txauwg.id
  where master_join_xbzkhi.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_gpllov on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vzcmbm.id) as aircraftcategory
  from master_join master_join_sdsbkz
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_vzcmbm on master_join_sdsbkz.target_id = shared_aircraftcharacteristic_lat_vzcmbm.id
  where master_join_sdsbkz.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_xwtsnl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_gahwie.id) as landingarea
  from master_join master_join_gpwccv
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_gahwie on master_join_gpwccv.target_id = procedure_landingtakeoffareacollection_lat_gahwie.id
  where master_join_gpwccv.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_efyhux on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ndbnbp.id) as designsurface
  from master_join master_join_xaylwf
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_ndbnbp on master_join_xaylwf.target_id = shared_obstacleassessmentarea_lat_ndbnbp.id
  where master_join_xaylwf.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_thzyqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_glsyag.*) AS annotation
  from master_join master_join_worksw
  join notes.note_view notes_note_lat_glsyag on master_join_worksw.target_id = notes_note_lat_glsyag.id
  where master_join_worksw.source_id = procedure.approachcondition.id
) as notes_note_view_oynhws on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_agtamy.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jkhdlx.*) AS annotation
  from master_join master_join_wmfbhl
  join notes.note_view notes_note_lat_jkhdlx on master_join_wmfbhl.target_id = notes_note_lat_jkhdlx.id
  where master_join_wmfbhl.source_id = procedure.approachdistancetable.id
) as notes_note_view_agtamy on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_eqfjnl.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hblekv.*) AS annotation
  from master_join master_join_svwplk
  join notes.note_view notes_note_lat_hblekv on master_join_svwplk.target_id = notes_note_lat_hblekv.id
  where master_join_svwplk.source_id = procedure.approachtimingtable.id
) as notes_note_view_eqfjnl on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_ivufxs.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_pzhqdk.layer::jsonb as layer,
    notes_note_view_notvky.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_tccjtb.id) as criticalridge
  from master_join master_join_jpbytd
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_tccjtb on master_join_jpbytd.target_id = airport_heliport_ridge_lat_tccjtb.id
  where master_join_jpbytd.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_ivufxs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_kursyf.id) as layer
  from master_join master_join_rfyyra
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_kursyf on master_join_rfyyra.target_id = airport_heliport_surfacecontaminationlayer_lat_kursyf.id
  where master_join_rfyyra.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_pzhqdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ubiasx.*) AS annotation
  from master_join master_join_jnwcgz
  join notes.note_view notes_note_lat_ubiasx on master_join_jnwcgz.target_id = notes_note_lat_ubiasx.id
  where master_join_jnwcgz.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_notvky on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xsxlox.title as varchar), '(' || organisation_organisationauthority_pt_xsxlox.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_xsxlox.href::text AS theorganisationauthority_href,
    notes_note_view_vpmocb.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xsxlox on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_xsxlox.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrvbze.*) AS annotation
  from master_join master_join_igruir
  join notes.note_view notes_note_lat_wrvbze on master_join_igruir.target_id = notes_note_lat_wrvbze.id
  where master_join_igruir.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_vpmocb on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_mfdwpa.title as varchar), '(' || organisation_organisationauthority_pt_mfdwpa.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_mfdwpa.href::text AS theorganisationauthority_href,
    notes_note_view_lysszc.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_mfdwpa on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_mfdwpa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oizlqf.*) AS annotation
  from master_join master_join_tsadsm
  join notes.note_view notes_note_lat_oizlqf on master_join_tsadsm.target_id = notes_note_lat_oizlqf.id
  where master_join_tsadsm.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_lysszc on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ighbjj.title as varchar), '(' || organisation_organisationauthority_pt_ighbjj.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ighbjj.href::text AS theorganisationauthority_href,
    notes_note_view_xulcat.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ighbjj on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_ighbjj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbqduj.*) AS annotation
  from master_join master_join_zyyiyb
  join notes.note_view notes_note_lat_dbqduj on master_join_zyyiyb.target_id = notes_note_lat_dbqduj.id
  where master_join_zyyiyb.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_xulcat on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_xazfrr.title as varchar), '(' || organisation_organisationauthority_pt_xazfrr.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_xazfrr.href::text AS theorganisationauthority_href,
    notes_note_view_ydcthp.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xazfrr on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_xazfrr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ghqxen.*) AS annotation
  from master_join master_join_qitpbj
  join notes.note_view notes_note_lat_ghqxen on master_join_qitpbj.target_id = notes_note_lat_ghqxen.id
  where master_join_qitpbj.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_ydcthp on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_hshmwq.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qmgfky.*) AS annotation
  from master_join master_join_kqgvje
  join notes.note_view notes_note_lat_qmgfky on master_join_kqgvje.target_id = notes_note_lat_qmgfky.id
  where master_join_kqgvje.source_id = service.callsigndetail.id
) as notes_note_view_hshmwq on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_kuhoer.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tmaeoh.*) AS annotation
  from master_join master_join_zhbvnk
  join notes.note_view notes_note_lat_tmaeoh on master_join_zhbvnk.target_id = notes_note_lat_tmaeoh.id
  where master_join_zhbvnk.source_id = shared.circlesector.id
) as notes_note_view_kuhoer on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as aixmname,
    notes_note_view_oedlpl.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_woxmgi.*) AS annotation
  from master_join master_join_blqnxe
  join notes.note_view notes_note_lat_woxmgi on master_join_blqnxe.target_id = notes_note_lat_woxmgi.id
  where master_join_blqnxe.source_id = airport_heliport.city.id
) as notes_note_view_oedlpl on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_ljscor.id)::jsonb AS enginetype,
    notes_note_view_sxdvxc.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ljscor on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_ljscor.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mllioo.*) AS annotation
  from master_join master_join_enikmr
  join notes.note_view notes_note_lat_mllioo on master_join_enikmr.target_id = notes_note_lat_mllioo.id
  where master_join_enikmr.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_sxdvxc on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_rjpyqp.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njkbfz.*) AS annotation
  from master_join master_join_nrpjlh
  join notes.note_view notes_note_lat_njkbfz on master_join_nrpjlh.target_id = notes_note_lat_njkbfz.id
  where master_join_nrpjlh.source_id = routes.directflightclass.id
) as notes_note_view_rjpyqp on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_xdrate.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhpkmn.*) AS annotation
  from master_join master_join_jwcpmm
  join notes.note_view notes_note_lat_qhpkmn on master_join_jwcpmm.target_id = notes_note_lat_qhpkmn.id
  where master_join_jwcpmm.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_xdrate on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_ozogtj.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_lzyfuq.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_dqvace.id) as adjustmentinopcol
  from master_join master_join_heqplm
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_dqvace on master_join_heqplm.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_dqvace.id
  where master_join_heqplm.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_ozogtj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qimnzj.*) AS annotation
  from master_join master_join_xcbsyp
  join notes.note_view notes_note_lat_qimnzj on master_join_xcbsyp.target_id = notes_note_lat_qimnzj.id
  where master_join_xcbsyp.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_lzyfuq on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_cewean.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ixhdzy.*) AS annotation
  from master_join master_join_nfrzcf
  join notes.note_view notes_note_lat_ixhdzy on master_join_nfrzcf.target_id = notes_note_lat_ixhdzy.id
  where master_join_nfrzcf.source_id = public.fasdatablock.id
) as notes_note_view_cewean on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_bmtzqc.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_jdifni.distance::jsonb as distance,
    procedure_approachtimingtable_pt_rxibmg.timing::jsonb as timing,
    notes_note_view_lzsljb.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_xrwqay.id) as altitude
  from master_join master_join_jwthyf
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_xrwqay on master_join_jwthyf.target_id = procedure_approachaltitudetable_lat_xrwqay.id
  where master_join_jwthyf.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_bmtzqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_rjgbon.id) as distance
  from master_join master_join_mijrpp
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_rjgbon on master_join_mijrpp.target_id = procedure_approachdistancetable_lat_rjgbon.id
  where master_join_mijrpp.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_jdifni on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_fskvrq.id) as timing
  from master_join master_join_viqtcq
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_fskvrq on master_join_viqtcq.target_id = procedure_approachtimingtable_lat_fskvrq.id
  where master_join_viqtcq.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_rxibmg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ilbewq.*) AS annotation
  from master_join master_join_qdnbsr
  join notes.note_view notes_note_lat_ilbewq on master_join_qdnbsr.target_id = notes_note_lat_ilbewq.id
  where master_join_qdnbsr.source_id = procedure.finalprofile.id
) as notes_note_view_lzsljb on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_tnywhq.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rgvsiv.*) AS annotation
  from master_join master_join_tumcrj
  join notes.note_view notes_note_lat_rgvsiv on master_join_tumcrj.target_id = notes_note_lat_rgvsiv.id
  where master_join_tumcrj.source_id = shared.flightcharacteristic.id
) as notes_note_view_tnywhq on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_nlhtcx.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_spqnco.*) AS annotation
  from master_join master_join_pfkgky
  join notes.note_view notes_note_lat_spqnco on master_join_pfkgky.target_id = notes_note_lat_spqnco.id
  where master_join_pfkgky.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_nlhtcx on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_rfdigk.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ziflvq.*) AS annotation
  from master_join master_join_kjmrdw
  join notes.note_view notes_note_lat_ziflvq on master_join_kjmrdw.target_id = notes_note_lat_ziflvq.id
  where master_join_kjmrdw.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_rfdigk on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_jfpkyp.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zfsffb.*) AS annotation
  from master_join master_join_huqntm
  join notes.note_view notes_note_lat_zfsffb on master_join_huqntm.target_id = notes_note_lat_zfsffb.id
  where master_join_huqntm.source_id = service.fuel.id
) as notes_note_view_jfpkyp on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_fhczca.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jmmayt.*) AS annotation
  from master_join master_join_kjkuln
  join notes.note_view notes_note_lat_jmmayt on master_join_kjkuln.target_id = notes_note_lat_jmmayt.id
  where master_join_kjkuln.source_id = holding.holdingpatterndistance.id
) as notes_note_view_fhczca on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_ouavmv.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sjvqzx.*) AS annotation
  from master_join master_join_wkhmdn
  join notes.note_view notes_note_lat_sjvqzx on master_join_wkhmdn.target_id = notes_note_lat_sjvqzx.id
  where master_join_wkhmdn.source_id = holding.holdingpatternduration.id
) as notes_note_view_ouavmv on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_rvllfo.title as varchar), '(' || holding_holdingpattern_pt_rvllfo.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_rvllfo.href::text AS theholdingpattern_href,
    notes_note_view_lbegvk.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_rvllfo on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_rvllfo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fjroxi.*) AS annotation
  from master_join master_join_aoduhb
  join notes.note_view notes_note_lat_fjroxi on master_join_aoduhb.target_id = notes_note_lat_fjroxi.id
  where master_join_aoduhb.source_id = procedure.holdinguse.id
) as notes_note_view_lbegvk on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_ulcvrd.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_ahzfnc.tlof::jsonb as tlof,
    notes_note_view_hnkmek.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_mbbwwa.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_mbbwwa.title AS varchar), '(' || airport_heliport_runwaydirection_lat_mbbwwa.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_mbbwwa.href
  )) as runway  from master_join master_join_nulpqr
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_mbbwwa on master_join_nulpqr.target_id = airport_heliport_runwaydirection_lat_mbbwwa.id
  where master_join_nulpqr.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_ulcvrd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_whduer.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_whduer.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_whduer.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_whduer.href
  )) as tlof  from master_join master_join_ulcqnz
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_whduer on master_join_ulcqnz.target_id = airport_heliport_touchdownliftoff_lat_whduer.id
  where master_join_ulcqnz.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_ahzfnc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_btnjms.*) AS annotation
  from master_join master_join_sptvhu
  join notes.note_view notes_note_lat_btnjms on master_join_sptvhu.target_id = notes_note_lat_btnjms.id
  where master_join_sptvhu.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_hnkmek on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_wurtii.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xgjgjf.*) AS annotation
  from master_join master_join_dposlg
  join notes.note_view notes_note_lat_xgjgjf on master_join_dposlg.target_id = notes_note_lat_xgjgjf.id
  where master_join_dposlg.source_id = airport_heliport.lightactivation.id
) as notes_note_view_wurtii on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_yzfrhl.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mbyyek.*) AS annotation
  from master_join master_join_qjhcou
  join notes.note_view notes_note_lat_mbyyek on master_join_qjhcou.target_id = notes_note_lat_mbyyek.id
  where master_join_qjhcou.source_id = shared.meteorology.id
) as notes_note_view_yzfrhl on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_xwinog.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_eqjjai.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_jczfbc.id) as adjustmentinop
  from master_join master_join_suvmav
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_jczfbc on master_join_suvmav.target_id = procedure_equipmentunavailableadjustment_lat_jczfbc.id
  where master_join_suvmav.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_xwinog on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_woiyuh.*) AS annotation
  from master_join master_join_fobkhb
  join notes.note_view notes_note_lat_woiyuh on master_join_fobkhb.target_id = notes_note_lat_woiyuh.id
  where master_join_fobkhb.source_id = procedure.minima.id
) as notes_note_view_eqjjai on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_thyunq.altimeter::jsonb as altimeter,
    notes_note_view_txtakn.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_iamfux.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_iamfux.title AS varchar), '(' || airport_heliport_altimetersource_lat_iamfux.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_iamfux.href
  )) as altimeter  from master_join master_join_iahnta
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_iamfux on master_join_iahnta.target_id = airport_heliport_altimetersource_lat_iamfux.id
  where master_join_iahnta.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_thyunq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_boperk.*) AS annotation
  from master_join master_join_tptjct
  join notes.note_view notes_note_lat_boperk on master_join_tptjct.target_id = notes_note_lat_boperk.id
  where master_join_tptjct.source_id = procedure.missedapproachgroup.id
) as notes_note_view_txtakn on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    coalesce(cast(navaids_points_navaidequipment_pt_hcvnuo.title as varchar), '(' || navaids_points_navaidequipment_pt_hcvnuo.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_hcvnuo.href::text AS thenavaidequipment_href,
    notes_note_view_dfaryj.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_hcvnuo on navaids_points.navaidcomponent.thenavaidequipment_id = navaids_points_navaidequipment_pt_hcvnuo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_idczga.*) AS annotation
  from master_join master_join_ppgdbp
  join notes.note_view notes_note_lat_idczga on master_join_ppgdbp.target_id = notes_note_lat_idczga.id
  where master_join_ppgdbp.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_dfaryj on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    coalesce(cast(navaids_points_navaidequipment_pt_gelxpy.title as varchar), '(' || navaids_points_navaidequipment_pt_gelxpy.nilreason[1] || ')')::text AS thenavaidequipment,
    navaids_points_navaidequipment_pt_gelxpy.href::text AS thenavaidequipment_href,
    notes_note_view_tjvxyr.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_gelxpy on airport_heliport.navaidequipmentdistance.thenavaidequipment_id = navaids_points_navaidequipment_pt_gelxpy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ffesyl.*) AS annotation
  from master_join master_join_dczyxl
  join notes.note_view notes_note_lat_ffesyl on master_join_dczyxl.target_id = notes_note_lat_ffesyl.id
  where master_join_dczyxl.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_tjvxyr on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_idnslk.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ooxivj.*) AS annotation
  from master_join master_join_ywvyxf
  join notes.note_view notes_note_lat_ooxivj on master_join_ywvyxf.target_id = notes_note_lat_ooxivj.id
  where master_join_ywvyxf.source_id = service.nitrogen.id
) as notes_note_view_idnslk on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_uotxwv.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjizmy.*) AS annotation
  from master_join master_join_bagmzc
  join notes.note_view notes_note_lat_bjizmy on master_join_bagmzc.target_id = notes_note_lat_bjizmy.id
  where master_join_bagmzc.source_id = shared.obstacleplacement.id
) as notes_note_view_uotxwv on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_xotlll.title as varchar), '(' || obstacles_verticalstructure_pt_xotlll.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_xotlll.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_wfxrnh.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_tyxepo.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_bpzlfd.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_xotlll on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_xotlll.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_hkjiwc.id) as adjustment
  from master_join master_join_ysotpo
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_hkjiwc on master_join_ysotpo.target_id = shared_altitudeadjustment_lat_hkjiwc.id
  where master_join_ysotpo.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_wfxrnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_dltncx.id) as obstacleplacement
  from master_join master_join_yyohju
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_dltncx on master_join_yyohju.target_id = shared_obstacleplacement_lat_dltncx.id
  where master_join_yyohju.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_tyxepo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ncsmvs.*) AS annotation
  from master_join master_join_imnlqx
  join notes.note_view notes_note_lat_ncsmvs on master_join_imnlqx.target_id = notes_note_lat_ncsmvs.id
  where master_join_imnlqx.source_id = shared.obstruction.id
) as notes_note_view_bpzlfd on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_fqsktu.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wknitv.*) AS annotation
  from master_join master_join_dhksnp
  join notes.note_view notes_note_lat_wknitv on master_join_dhksnp.target_id = notes_note_lat_wknitv.id
  where master_join_dhksnp.source_id = service.oil.id
) as notes_note_view_fqsktu on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_urchht.title as varchar), '(' || organisation_organisationauthority_pt_urchht.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_urchht.href::text AS theorganisationauthority_href,
    notes_note_view_wgtddw.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_urchht on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_urchht.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_plajtj.*) AS annotation
  from master_join master_join_emfotw
  join notes.note_view notes_note_lat_plajtj on master_join_emfotw.target_id = notes_note_lat_plajtj.id
  where master_join_emfotw.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_wgtddw on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_raccjn.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tknumb.*) AS annotation
  from master_join master_join_xokonl
  join notes.note_view notes_note_lat_tknumb on master_join_xokonl.target_id = notes_note_lat_tknumb.id
  where master_join_xokonl.source_id = service.oxygen.id
) as notes_note_view_raccjn on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    coalesce(cast(procedure_segmentleg_pt_rxjlqd.title as varchar), '(' || procedure_segmentleg_pt_rxjlqd.nilreason[1] || ')')::text AS thesegmentleg,
    procedure_segmentleg_pt_rxjlqd.href::text AS thesegmentleg_href,
    notes_note_view_kzlcwu.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_rxjlqd on procedure.proceduretransitionleg.thesegmentleg_id = procedure_segmentleg_pt_rxjlqd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iuzjrm.*) AS annotation
  from master_join master_join_piubcj
  join notes.note_view notes_note_lat_iuzjrm on master_join_piubcj.target_id = notes_note_lat_iuzjrm.id
  where master_join_piubcj.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_kzlcwu on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(surveillance_radarequipment_pt_kogiol.title as varchar), '(' || surveillance_radarequipment_pt_kogiol.nilreason[1] || ')')::text AS theradarequipment,
    surveillance_radarequipment_pt_kogiol.href::text AS theradarequipment_href,
    notes_note_view_ykfjjt.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join surveillance.radarequipment_pt surveillance_radarequipment_pt_kogiol on surveillance.radarcomponent.theradarequipment_id = surveillance_radarequipment_pt_kogiol.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_enidyi.*) AS annotation
  from master_join master_join_enrhak
  join notes.note_view notes_note_lat_enidyi on master_join_enrhak.target_id = notes_note_lat_enidyi.id
  where master_join_enrhak.source_id = surveillance.radarcomponent.id
) as notes_note_view_ykfjjt on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_vdqjkh.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqahlw.*) AS annotation
  from master_join master_join_zveiss
  join notes.note_view notes_note_lat_lqahlw on master_join_zveiss.target_id = notes_note_lat_lqahlw.id
  where master_join_zveiss.source_id = airport_heliport.ridge.id
) as notes_note_view_vdqjkh on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_miztik.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jwsmhr.layer::jsonb as layer,
    notes_note_view_hkbabl.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_aztjgh.id) as criticalridge
  from master_join master_join_kblnkj
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_aztjgh on master_join_kblnkj.target_id = airport_heliport_ridge_lat_aztjgh.id
  where master_join_kblnkj.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_miztik on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_oikxfl.id) as layer
  from master_join master_join_hdrxgu
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_oikxfl on master_join_hdrxgu.target_id = airport_heliport_surfacecontaminationlayer_lat_oikxfl.id
  where master_join_hdrxgu.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jwsmhr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fcakqk.*) AS annotation
  from master_join master_join_cumjqn
  join notes.note_view notes_note_lat_fcakqk on master_join_cumjqn.target_id = notes_note_lat_fcakqk.id
  where master_join_cumjqn.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_hkbabl on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_hulazn.declaredvalue::jsonb as declaredvalue,
    notes_note_view_aploja.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_saazqn.id) as declaredvalue
  from master_join master_join_fatdwd
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_saazqn on master_join_fatdwd.target_id = airport_heliport_runwaydeclareddistancevalue_lat_saazqn.id
  where master_join_fatdwd.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_hulazn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jafwag.*) AS annotation
  from master_join master_join_fswbzg
  join notes.note_view notes_note_lat_jafwag on master_join_fswbzg.target_id = notes_note_lat_jafwag.id
  where master_join_fswbzg.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_aploja on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_uewycb.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jnqrqd.layer::jsonb as layer,
    notes_note_view_rvmvgm.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_hadqus.id) as criticalridge
  from master_join master_join_fivuqd
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_hadqus on master_join_fivuqd.target_id = airport_heliport_ridge_lat_hadqus.id
  where master_join_fivuqd.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_uewycb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_soiupu.id) as layer
  from master_join master_join_cmijvv
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_soiupu on master_join_cmijvv.target_id = airport_heliport_surfacecontaminationlayer_lat_soiupu.id
  where master_join_cmijvv.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jnqrqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsnvht.*) AS annotation
  from master_join master_join_xtljgu
  join notes.note_view notes_note_lat_rsnvht on master_join_xtljgu.target_id = notes_note_lat_rsnvht.id
  where master_join_xtljgu.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_rvmvgm on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_rcrvoe.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nuwacb.*) AS annotation
  from master_join master_join_dlwncf
  join notes.note_view notes_note_lat_nuwacb on master_join_dlwncf.target_id = notes_note_lat_nuwacb.id
  where master_join_dlwncf.source_id = procedure.sectordesign.id
) as notes_note_view_rcrvoe on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_xuulpp.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lsehar.*) AS annotation
  from master_join master_join_yawpeh
  join notes.note_view notes_note_lat_lsehar on master_join_yawpeh.target_id = notes_note_lat_lsehar.id
  where master_join_yawpeh.source_id = shared.standardlevel.id
) as notes_note_view_xuulpp on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_vdyooo.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kkvcwn.*) AS annotation
  from master_join master_join_xocqry
  join notes.note_view notes_note_lat_kkvcwn on master_join_xocqry.target_id = notes_note_lat_kkvcwn.id
  where master_join_xocqry.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_vdyooo on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_njozdm.title as varchar), '(' || organisation_unit_pt_njozdm.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_njozdm.href::text AS theunit_href,
    notes_note_view_iipfhx.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_njozdm on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_njozdm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_epeteg.*) AS annotation
  from master_join master_join_moavsj
  join notes.note_view notes_note_lat_epeteg on master_join_moavsj.target_id = notes_note_lat_epeteg.id
  where master_join_moavsj.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_iipfhx on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_epryev.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_wqifdv.layer::jsonb as layer,
    notes_note_view_mdghar.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_xglwzt.id) as criticalridge
  from master_join master_join_tqiwev
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_xglwzt on master_join_tqiwev.target_id = airport_heliport_ridge_lat_xglwzt.id
  where master_join_tqiwev.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_epryev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qfpogn.id) as layer
  from master_join master_join_qlikgy
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qfpogn on master_join_qlikgy.target_id = airport_heliport_surfacecontaminationlayer_lat_qfpogn.id
  where master_join_qlikgy.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_wqifdv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fgzxwl.*) AS annotation
  from master_join master_join_pkywan
  join notes.note_view notes_note_lat_fgzxwl on master_join_pkywan.target_id = notes_note_lat_fgzxwl.id
  where master_join_pkywan.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_mdghar on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_ollyyu.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_sxndqz.layer::jsonb as layer,
    notes_note_view_jypbaz.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_eacusa.id) as criticalridge
  from master_join master_join_rudaep
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_eacusa on master_join_rudaep.target_id = airport_heliport_ridge_lat_eacusa.id
  where master_join_rudaep.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_ollyyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_jqtprn.id) as layer
  from master_join master_join_zlnjsn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_jqtprn on master_join_zlnjsn.target_id = airport_heliport_surfacecontaminationlayer_lat_jqtprn.id
  where master_join_zlnjsn.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_sxndqz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tjeigt.*) AS annotation
  from master_join master_join_mumfzp
  join notes.note_view notes_note_lat_tjeigt on master_join_mumfzp.target_id = notes_note_lat_tjeigt.id
  where master_join_mumfzp.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_jypbaz on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_lgfkcu.title as varchar), '(' || organisation_unit_pt_lgfkcu.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_lgfkcu.href::text AS theunit_href,
    notes_note_view_ohrpkn.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_lgfkcu on organisation.unitdependency.theunit_id = organisation_unit_pt_lgfkcu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qtufvm.*) AS annotation
  from master_join master_join_xlffox
  join notes.note_view notes_note_lat_qtufvm on master_join_xlffox.target_id = notes_note_lat_qtufvm.id
  where master_join_xlffox.source_id = organisation.unitdependency.id
) as notes_note_view_ohrpkn on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_nxmelh.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_nxmelh.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_fkytqk.point::jsonb as point,
    shared_airspacelayer_pt_klsshf.verticalextent::jsonb as verticalextent,
    notes_note_view_qevrxw.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_nxmelh on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_nxmelh.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_aylfoc.id) as point
  from master_join master_join_bsvfxw
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_aylfoc on master_join_bsvfxw.target_id = aerial_refuelling_aerialrefuellingpoint_lat_aylfoc.id
  where master_join_bsvfxw.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_fkytqk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_kwbqbl.id) as verticalextent
  from master_join master_join_qjbvlk
  join shared.airspacelayer_pt shared_airspacelayer_lat_kwbqbl on master_join_qjbvlk.target_id = shared_airspacelayer_lat_kwbqbl.id
  where master_join_qjbvlk.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_klsshf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_anjnub.*) AS annotation
  from master_join master_join_yjvzpo
  join notes.note_view notes_note_lat_anjnub on master_join_yjvzpo.target_id = notes_note_lat_anjnub.id
  where master_join_yjvzpo.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_qevrxw on TRUE;
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_wlnyag.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_fxhuku.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_fxhuku.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_jctxrb.transitionleg::jsonb as transitionleg,
    notes_note_view_dpuspb.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_wlnyag on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_wlnyag.id
left join geometry.curve_view geometry_curve_view_fxhuku on procedure.proceduretransition.trajectory_id = geometry_curve_view_fxhuku.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_ksoelt.id) as transitionleg
  from master_join master_join_vdpwum
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_ksoelt on master_join_vdpwum.target_id = procedure_proceduretransitionleg_lat_ksoelt.id
  where master_join_vdpwum.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_jctxrb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mbxoxv.*) AS annotation
  from master_join master_join_tlfdot
  join notes.note_view notes_note_lat_mbxoxv on master_join_tlfdot.target_id = notes_note_lat_mbxoxv.id
  where master_join_tlfdot.source_id = procedure.proceduretransition.id
) as notes_note_view_dpuspb on TRUE;
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_dnfudq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_dnfudq.longitude AS location_longitude,
    geometry_elevatedpoint_view_dnfudq.latitude AS location_latitude,
    geometry_elevatedpoint_view_dnfudq.elevation AS location_elevation,
    geometry_elevatedpoint_view_dnfudq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dnfudq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dnfudq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dnfudq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ccovlq.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_ktrkkm.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dnfudq on shared.lightelement.location_id = geometry_elevatedpoint_view_dnfudq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ocbhbc.*) AS annotation
  from master_join master_join_zctcrb
  join notes.note_view notes_note_lat_ocbhbc on master_join_zctcrb.target_id = notes_note_lat_ocbhbc.id
  where master_join_zctcrb.source_id = shared.lightelement.id
) as notes_note_view_ccovlq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_ktmqis.id) as availability
  from master_join master_join_sgleof
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_ktmqis on master_join_sgleof.target_id = shared_lightelementstatus_lat_ktmqis.id
  where master_join_sgleof.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_ktrkkm on TRUE;
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lxbaxn.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_lxbaxn.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_lxbaxn.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_lxbaxn.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_lxbaxn.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_lxbaxn.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_lxbaxn.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_lxbaxn.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_zwxuku.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lxbaxn on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_lxbaxn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zhmbhg.*) AS annotation
  from master_join master_join_nsyslw
  join notes.note_view notes_note_lat_zhmbhg on master_join_nsyslw.target_id = notes_note_lat_zhmbhg.id
  where master_join_nsyslw.source_id = surveillance.reflector.id
) as notes_note_view_zwxuku on TRUE;
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_gajgys.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_gajgys.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_gajgys.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_gajgys.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_gajgys.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_gajgys.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_umugjg.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_umugjg.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_umugjg.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_umugjg.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_umugjg.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_umugjg.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_gmfgry.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_gmfgry.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_gmfgry.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_gmfgry.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_gmfgry.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_gmfgry.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_gmfgry.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_gmfgry.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_xolrwj.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gajgys on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_gajgys.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_umugjg on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_umugjg.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gmfgry on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_gmfgry.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tehjgj.*) AS annotation
  from master_join master_join_hgfscq
  join notes.note_view notes_note_lat_tehjgj on master_join_hgfscq.target_id = notes_note_lat_tehjgj.id
  where master_join_hgfscq.source_id = airport_heliport.markingelement.id
) as notes_note_view_xolrwj on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_ksfcaq.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_ksfcaq.attr::jsonb  as extent,
    notes_note_view_xmpphd.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_piuxwk.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_piuxwk.id,
      'elevation', geometry_elevatedsurface_lat_piuxwk.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_piuxwk.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_piuxwk.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_piuxwk.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_piuxwk.horizontalAccuracy
    )) AS attr
  from master_join master_join_jjsobo
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_piuxwk on master_join_jjsobo.target_id = geometry_elevatedsurface_lat_piuxwk.id
  where master_join_jjsobo.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_ksfcaq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbxkuv.*) AS annotation
  from master_join master_join_krpgnv
  join notes.note_view notes_note_lat_dbxkuv on master_join_krpgnv.target_id = notes_note_lat_dbxkuv.id
  where master_join_krpgnv.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_xmpphd on TRUE;
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_hmitgv.title as varchar), '(' || navaids_points_designatedpoint_pt_hmitgv.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_hmitgv.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_mwmjnv.title as varchar), '(' || navaids_points_navaid_pt_mwmjnv.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_mwmjnv.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ciiwsy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ciiwsy.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ciiwsy.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_edycmm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_edycmm.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_edycmm.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_akbnki.title as varchar), '(' || airport_heliport_airportheliport_pt_akbnki.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_akbnki.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_pbxxjy.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_pbxxjy.longitude AS pointchoiceposition_longitude,
    geometry_point_view_pbxxjy.latitude AS pointchoiceposition_latitude,
    geometry_point_view_pbxxjy.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_ktioum.title as varchar), '(' || shared_radiofrequencyarea_pt_ktioum.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_ktioum.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_fmpssz.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_rvjogw.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hmitgv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hmitgv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mwmjnv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_mwmjnv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ciiwsy on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ciiwsy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_edycmm on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_edycmm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_akbnki on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_akbnki.id
left join geometry.point_view geometry_point_view_pbxxjy on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_pbxxjy.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_ktioum on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_ktioum.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_bolulu.id) as facilitymakeup
  from master_join master_join_evhsal
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_bolulu on master_join_evhsal.target_id = navaids_points_pointreference_lat_bolulu.id
  where master_join_evhsal.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_fmpssz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzwkjc.*) AS annotation
  from master_join master_join_mvftya
  join notes.note_view notes_note_lat_nzwkjc on master_join_mvftya.target_id = notes_note_lat_nzwkjc.id
  where master_join_mvftya.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_rvjogw on TRUE;
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_pbjnyq.title as varchar), '(' || navaids_points_designatedpoint_pt_pbjnyq.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pbjnyq.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bkmdbf.title as varchar), '(' || navaids_points_designatedpoint_pt_bkmdbf.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bkmdbf.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_aawnjv.title as varchar), '(' || navaids_points_navaid_pt_aawnjv.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_aawnjv.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_jtiqxn.title as varchar), '(' || navaids_points_navaid_pt_jtiqxn.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_jtiqxn.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ixftjv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ixftjv.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_ixftjv.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_edvxvd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_edvxvd.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_edvxvd.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kqskgg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kqskgg.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kqskgg.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_bpheeq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_bpheeq.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_bpheeq.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ymiygd.title as varchar), '(' || airport_heliport_airportheliport_pt_ymiygd.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_ymiygd.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mgakdo.title as varchar), '(' || airport_heliport_airportheliport_pt_mgakdo.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_mgakdo.href::text AS startairportreferencepoint_href,
    geometry_point_view_gyflox.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_gyflox.longitude AS endposition_longitude,
    geometry_point_view_gyflox.latitude AS endposition_latitude,
    geometry_point_view_gyflox.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_xiiwar.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_xiiwar.longitude AS startposition_longitude,
    geometry_point_view_xiiwar.latitude AS startposition_latitude,
    geometry_point_view_xiiwar.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_wuaafg.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pbjnyq on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pbjnyq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_aawnjv on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_aawnjv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ixftjv on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ixftjv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kqskgg on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kqskgg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ymiygd on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_ymiygd.id
left join geometry.point_view geometry_point_view_gyflox on routes.directflightsegment.end_position_id = geometry_point_view_gyflox.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bkmdbf on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bkmdbf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jtiqxn on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_jtiqxn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_edvxvd on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_edvxvd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_bpheeq on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_bpheeq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mgakdo on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_mgakdo.id
left join geometry.point_view geometry_point_view_xiiwar on routes.directflightsegment.start_position_id = geometry_point_view_xiiwar.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kejumj.*) AS annotation
  from master_join master_join_gsdpcg
  join notes.note_view notes_note_lat_kejumj on master_join_gsdpcg.target_id = notes_note_lat_kejumj.id
  where master_join_gsdpcg.source_id = routes.directflightsegment.id
) as notes_note_view_wuaafg on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_ufpjgu.title as varchar), '(' || navaids_points_designatedpoint_pt_ufpjgu.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ufpjgu.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ugnanp.title as varchar), '(' || navaids_points_navaid_pt_ugnanp.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ugnanp.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ccwhta.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ccwhta.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_ccwhta.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nmpxfm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nmpxfm.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nmpxfm.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ajyclq.title as varchar), '(' || airport_heliport_airportheliport_pt_ajyclq.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ajyclq.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_kpqiuk.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_kpqiuk.longitude AS pointchoiceposition_longitude,
    geometry_point_view_kpqiuk.latitude AS pointchoiceposition_latitude,
    geometry_point_view_kpqiuk.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_izzbnz.title as varchar), '(' || shared_radiofrequencyarea_pt_izzbnz.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_izzbnz.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_ztwcuf.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_qxvqte.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ufpjgu on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ufpjgu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ugnanp on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_ugnanp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ccwhta on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ccwhta.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nmpxfm on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nmpxfm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ajyclq on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_ajyclq.id
left join geometry.point_view geometry_point_view_kpqiuk on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_kpqiuk.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_izzbnz on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_izzbnz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_xdfeju.id) as facilitymakeup
  from master_join master_join_ohxnyk
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_xdfeju on master_join_ohxnyk.target_id = navaids_points_pointreference_lat_xdfeju.id
  where master_join_ohxnyk.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_ztwcuf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_puhrze.*) AS annotation
  from master_join master_join_etpgva
  join notes.note_view notes_note_lat_puhrze on master_join_etpgva.target_id = notes_note_lat_puhrze.id
  where master_join_etpgva.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_qxvqte on TRUE;
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_uwkmpu.title as varchar), '(' || airport_heliport_airportheliport_pt_uwkmpu.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_uwkmpu.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ljesip.title as varchar), '(' || airport_heliport_airportheliport_pt_ljesip.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_ljesip.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_rkljyb.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_rkljyb.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_rkljyb.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_lopoaj.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_aljzbq.title as varchar), '(' || organisation_organisationauthority_pt_aljzbq.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_aljzbq.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ukscum.title as varchar), '(' || navaids_points_designatedpoint_pt_ukscum.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ukscum.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jpuqpu.title as varchar), '(' || navaids_points_navaid_pt_jpuqpu.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_jpuqpu.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qmghzi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qmghzi.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_qmghzi.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_vnycex.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_vnycex.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_vnycex.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_pweyye.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_pweyye.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_pweyye.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_pweyye.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_cdigjw.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_vdfryp.title as varchar), '(' || routes_airspacebordercrossing_pt_vdfryp.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_vdfryp.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_tonxum.title as varchar), '(' || airspace_airspace_pt_tonxum.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_tonxum.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_kkapjd.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_ktzfub.title as varchar), '(' || procedure_standardinstrumentarrival_pt_ktzfub.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_ktzfub.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_foouhm.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_yyqtvv.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_mycbeq.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_mycbeq.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_mycbeq.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_zatgdr.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_kmfhtu.flightlevel::jsonb as flightlevel,
    notes_note_view_wmwgiw.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uwkmpu on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_uwkmpu.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_rkljyb on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_rkljyb.id
left join routes.routeportion_pt routes_routeportion_pt_lopoaj on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_lopoaj.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_aljzbq on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_aljzbq.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ukscum on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ukscum.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jpuqpu on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_jpuqpu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qmghzi on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qmghzi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_vnycex on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_vnycex.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ljesip on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_ljesip.id
left join geometry.point_view geometry_point_view_pweyye on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_pweyye.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_cdigjw on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_cdigjw.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_vdfryp on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_vdfryp.id
left join airspace.airspace_pt airspace_airspace_pt_tonxum on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_tonxum.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_kkapjd on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_kkapjd.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_ktzfub on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_ktzfub.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_foouhm on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_foouhm.id
left join shared.meteorology_pt shared_meteorology_pt_yyqtvv on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_yyqtvv.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_mycbeq on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_mycbeq.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_zatgdr on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_zatgdr.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_imdnpr.id) as flightlevel
  from master_join master_join_ffgckr
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_imdnpr on master_join_ffgckr.target_id = routes_flightrestrictionlevel_lat_imdnpr.id
  where master_join_ffgckr.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_kmfhtu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zxfnyq.*) AS annotation
  from master_join master_join_wbdjxj
  join notes.note_view notes_note_lat_zxfnyq on master_join_wbdjxj.target_id = notes_note_lat_zxfnyq.id
  where master_join_wbdjxj.source_id = routes.flightconditionelement.id
) as notes_note_view_wmwgiw on TRUE;
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_irardr.title as varchar), '(' || procedure_standardinstrumentarrival_pt_irardr.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_irardr.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_qyvhle.title as varchar), '(' || airspace_airspace_pt_qyvhle.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_qyvhle.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nffkom.title as varchar), '(' || navaids_points_designatedpoint_pt_nffkom.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nffkom.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_dydwih.title as varchar), '(' || navaids_points_navaid_pt_dydwih.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_dydwih.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_butydu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_butydu.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_butydu.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kkmsbi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kkmsbi.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kkmsbi.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dshjfs.title as varchar), '(' || airport_heliport_airportheliport_pt_dshjfs.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_dshjfs.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bhzbfe.title as varchar), '(' || airport_heliport_airportheliport_pt_bhzbfe.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_bhzbfe.href::text AS elementairportheliportelement_href,
    geometry_point_view_zfryxz.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_zfryxz.longitude AS pointelementposition_longitude,
    geometry_point_view_zfryxz.latitude AS pointelementposition_latitude,
    geometry_point_view_zfryxz.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_jrzpfx.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_fwloda.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_fwloda.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_fwloda.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_fzzmuz.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_dhtqps.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_dhtqps.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_dhtqps.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_rennlg.flightlevel::jsonb as flightlevel,
    notes_note_view_gxojfn.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_irardr on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_irardr.id
left join airspace.airspace_pt airspace_airspace_pt_qyvhle on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_qyvhle.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nffkom on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nffkom.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_dydwih on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_dydwih.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_butydu on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_butydu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kkmsbi on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kkmsbi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dshjfs on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_dshjfs.id
left join geometry.point_view geometry_point_view_zfryxz on routes.flightroutingelement.pointelement_position_id = geometry_point_view_zfryxz.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_jrzpfx on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_jrzpfx.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_fwloda on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_fwloda.id
left join routes.routeportion_pt routes_routeportion_pt_fzzmuz on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_fzzmuz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bhzbfe on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_bhzbfe.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_dhtqps on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_dhtqps.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_qljwfk.id) as flightlevel
  from master_join master_join_flpgvb
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_qljwfk on master_join_flpgvb.target_id = routes_flightrestrictionlevel_lat_qljwfk.id
  where master_join_flpgvb.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_rennlg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rnfchg.*) AS annotation
  from master_join master_join_xrrkag
  join notes.note_view notes_note_lat_rnfchg on master_join_xrrkag.target_id = notes_note_lat_rnfchg.id
  where master_join_xrrkag.source_id = routes.flightroutingelement.id
) as notes_note_view_gxojfn on TRUE;
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_bwmlto.title as varchar), '(' || navaids_points_designatedpoint_pt_bwmlto.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bwmlto.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_qdvzvb.title as varchar), '(' || navaids_points_designatedpoint_pt_qdvzvb.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_qdvzvb.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_stzqnh.title as varchar), '(' || navaids_points_designatedpoint_pt_stzqnh.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_stzqnh.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_kamkmc.title as varchar), '(' || navaids_points_navaid_pt_kamkmc.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_kamkmc.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_tzmunh.title as varchar), '(' || navaids_points_navaid_pt_tzmunh.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_tzmunh.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_rzmmfc.title as varchar), '(' || navaids_points_navaid_pt_rzmmfc.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_rzmmfc.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rayote.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rayote.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_rayote.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tgjpog.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tgjpog.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_tgjpog.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lujeuj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lujeuj.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_lujeuj.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dmybrq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dmybrq.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dmybrq.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xtnrbm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xtnrbm.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xtnrbm.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_duowxn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_duowxn.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_duowxn.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gxfkbn.title as varchar), '(' || airport_heliport_airportheliport_pt_gxfkbn.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_gxfkbn.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_vnpwcu.title as varchar), '(' || airport_heliport_airportheliport_pt_vnpwcu.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_vnpwcu.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fwsotk.title as varchar), '(' || airport_heliport_airportheliport_pt_fwsotk.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_fwsotk.href::text AS endairportreferencepoint_href,
    geometry_point_view_iutvuy.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_iutvuy.longitude AS startposition_longitude,
    geometry_point_view_iutvuy.latitude AS startposition_latitude,
    geometry_point_view_iutvuy.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_pmellm.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_pmellm.longitude AS intermediatepointposition_longitude,
    geometry_point_view_pmellm.latitude AS intermediatepointposition_latitude,
    geometry_point_view_pmellm.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_slhnbw.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_slhnbw.longitude AS endposition_longitude,
    geometry_point_view_slhnbw.latitude AS endposition_latitude,
    geometry_point_view_slhnbw.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_xycunm.title as varchar), '(' || routes_route_pt_xycunm.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_xycunm.href::text AS referencedroute_href,
    notes_note_view_wwxzki.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bwmlto on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bwmlto.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_kamkmc on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_kamkmc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rayote on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rayote.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dmybrq on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dmybrq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gxfkbn on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_gxfkbn.id
left join geometry.point_view geometry_point_view_iutvuy on routes.routeportion.start_position_id = geometry_point_view_iutvuy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qdvzvb on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qdvzvb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tzmunh on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_tzmunh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tgjpog on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tgjpog.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xtnrbm on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xtnrbm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vnpwcu on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_vnpwcu.id
left join geometry.point_view geometry_point_view_pmellm on routes.routeportion.intermediatepoint_position_id = geometry_point_view_pmellm.id
left join routes.route_pt routes_route_pt_xycunm on routes.routeportion.referencedroute_id = routes_route_pt_xycunm.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_stzqnh on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_stzqnh.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_rzmmfc on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_rzmmfc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lujeuj on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lujeuj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_duowxn on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_duowxn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fwsotk on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_fwsotk.id
left join geometry.point_view geometry_point_view_slhnbw on routes.routeportion.end_position_id = geometry_point_view_slhnbw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ccqceb.*) AS annotation
  from master_join master_join_xnugia
  join notes.note_view notes_note_lat_ccqceb on master_join_xnugia.target_id = notes_note_lat_ccqceb.id
  where master_join_xnugia.source_id = routes.routeportion.id
) as notes_note_view_wwxzki on TRUE;
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_urjiuw.title as varchar), '(' || navaids_points_designatedpoint_pt_urjiuw.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_urjiuw.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_amrsvh.title as varchar), '(' || navaids_points_navaid_pt_amrsvh.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_amrsvh.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wnetov.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wnetov.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_wnetov.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_jormqz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_jormqz.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_jormqz.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hwgvuy.title as varchar), '(' || airport_heliport_airportheliport_pt_hwgvuy.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hwgvuy.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_pmuwyu.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_pmuwyu.longitude AS pointchoiceposition_longitude,
    geometry_point_view_pmuwyu.latitude AS pointchoiceposition_latitude,
    geometry_point_view_pmuwyu.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_pwpkvv.title as varchar), '(' || shared_radiofrequencyarea_pt_pwpkvv.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_pwpkvv.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_clkyri.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_zxvknv.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_urjiuw on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_urjiuw.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_amrsvh on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_amrsvh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wnetov on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wnetov.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_jormqz on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_jormqz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hwgvuy on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hwgvuy.id
left join geometry.point_view geometry_point_view_pmuwyu on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_pmuwyu.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_pwpkvv on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_pwpkvv.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_quhtxz.id) as facilitymakeup
  from master_join master_join_ajdfyi
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_quhtxz on master_join_ajdfyi.target_id = navaids_points_pointreference_lat_quhtxz.id
  where master_join_ajdfyi.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_clkyri on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vpqedk.*) AS annotation
  from master_join master_join_fvctzs
  join notes.note_view notes_note_lat_vpqedk on master_join_fvctzs.target_id = notes_note_lat_vpqedk.id
  where master_join_fvctzs.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_zxvknv on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_jkwudh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_jkwudh.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_uyrggp.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_kfihzw.point::jsonb as point,
    notes_note_view_pbwxgs.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_jkwudh on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_jkwudh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_fzbbqg.id) as verticalextent
  from master_join master_join_vhfqkz
  join shared.airspacelayer_pt shared_airspacelayer_lat_fzbbqg on master_join_vhfqkz.target_id = shared_airspacelayer_lat_fzbbqg.id
  where master_join_vhfqkz.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_uyrggp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_ibqybc.id) as point
  from master_join master_join_lnnqsg
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_ibqybc on master_join_lnnqsg.target_id = aerial_refuelling_aerialrefuellingpoint_lat_ibqybc.id
  where master_join_lnnqsg.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_kfihzw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edohpf.*) AS annotation
  from master_join master_join_gsines
  join notes.note_view notes_note_lat_edohpf on master_join_gsines.target_id = notes_note_lat_edohpf.id
  where master_join_gsines.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_pbwxgs on TRUE;
-- AirspaceVolumePropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_mbdzke.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_mbdzke.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_ymekfm.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_ymekfm.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_jjrfsv.id)::jsonb AS contributorairspace,
    notes_note_view_gnanfo.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_mbdzke on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_mbdzke.id
left join geometry.curve_view geometry_curve_view_ymekfm on airspace.airspacevolume.centreline_id = geometry_curve_view_ymekfm.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_jjrfsv on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_jjrfsv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szkkav.*) AS annotation
  from master_join master_join_zkzdfl
  join notes.note_view notes_note_lat_szkkav on master_join_zkzdfl.target_id = notes_note_lat_szkkav.id
  where master_join_zkzdfl.source_id = airspace.airspacevolume.id
) as notes_note_view_gnanfo on TRUE;
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_tfanbi.id)::jsonb AS sectordefinition,
    geometry_surface_view_qiwnku.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_qiwnku.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_vyzfpd.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_lrzlsi.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_mvgscf.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_tfanbi on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_tfanbi.id
left join geometry.surface_view geometry_surface_view_qiwnku on procedure.navigationareasector.extent_id = geometry_surface_view_qiwnku.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_uxwpvf.id) as significantobstacle
  from master_join master_join_ltvumc
  join shared.obstruction_pt shared_obstruction_lat_uxwpvf on master_join_ltvumc.target_id = shared_obstruction_lat_uxwpvf.id
  where master_join_ltvumc.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_vyzfpd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_hrxjwk.id) as sectorcriteria
  from master_join master_join_lbtlqk
  join procedure.sectordesign_pt procedure_sectordesign_lat_hrxjwk on master_join_lbtlqk.target_id = procedure_sectordesign_lat_hrxjwk.id
  where master_join_lbtlqk.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_lrzlsi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zsnuyp.*) AS annotation
  from master_join master_join_dmsnne
  join notes.note_view notes_note_lat_zsnuyp on master_join_dmsnne.target_id = notes_note_lat_zsnuyp.id
  where master_join_dmsnne.source_id = procedure.navigationareasector.id
) as notes_note_view_mvgscf on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_bboeqn.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_bboeqn.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_zfvrwo.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_zfvrwo.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_wllplq.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_phrnaw.significantobstacle::jsonb as significantobstacle,
    notes_note_view_xhfstb.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_bboeqn on shared.obstacleassessmentarea.surface_id = geometry_surface_view_bboeqn.id
left join geometry.curve_view geometry_curve_view_zfvrwo on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_zfvrwo.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_cwcbwy.id) as aircraftcategory
  from master_join master_join_lhnyff
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_cwcbwy on master_join_lhnyff.target_id = shared_aircraftcharacteristic_lat_cwcbwy.id
  where master_join_lhnyff.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_wllplq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_cbaqin.id) as significantobstacle
  from master_join master_join_oeraly
  join shared.obstruction_pt shared_obstruction_lat_cbaqin on master_join_oeraly.target_id = shared_obstruction_lat_cbaqin.id
  where master_join_oeraly.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_phrnaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mucjoa.*) AS annotation
  from master_join master_join_cevwcp
  join notes.note_view notes_note_lat_mucjoa on master_join_cevwcp.target_id = notes_note_lat_mucjoa.id
  where master_join_cevwcp.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_xhfstb on TRUE;
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_mobxxg.title as varchar), '(' || navaids_points_designatedpoint_pt_mobxxg.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_mobxxg.href::text AS point_href,
    geometry_surface_view_kibiza.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_kibiza.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_cnnnoj.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_oflqey.facilitydistance::jsonb as facilitydistance,
    notes_note_view_xfrnyt.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mobxxg on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_mobxxg.id
left join geometry.surface_view geometry_surface_view_kibiza on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_kibiza.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_oasbqy.id) as facilityangle
  from master_join master_join_zvcymp
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_oasbqy on master_join_zvcymp.target_id = navaids_points_angleuse_lat_oasbqy.id
  where master_join_zvcymp.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_cnnnoj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_xoonuu.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_xoonuu.title AS varchar), '(' || navaids_points_distanceindication_lat_xoonuu.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_xoonuu.href
  )) as facilitydistance  from master_join master_join_jlxydp
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_xoonuu on master_join_jlxydp.target_id = navaids_points_distanceindication_lat_xoonuu.id
  where master_join_jlxydp.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_oflqey on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wsdmlj.*) AS annotation
  from master_join master_join_wdquwu
  join notes.note_view notes_note_lat_wsdmlj on master_join_wdquwu.target_id = notes_note_lat_wsdmlj.id
  where master_join_wdquwu.source_id = navaids_points.pointreference.id
) as notes_note_view_xfrnyt on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_pqgtic.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_pqgtic.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_zqzvck.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_ryavyo.significantobstacle::jsonb as significantobstacle,
    notes_note_view_egmepq.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_pqgtic on procedure.safealtitudeareasector.extent_id = geometry_surface_view_pqgtic.id
left join shared.circlesector_pt shared_circlesector_pt_zqzvck on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_zqzvck.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_pxijyp.id) as significantobstacle
  from master_join master_join_scxapc
  join shared.obstruction_pt shared_obstruction_lat_pxijyp on master_join_scxapc.target_id = shared_obstruction_lat_pxijyp.id
  where master_join_scxapc.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_ryavyo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xssqbw.*) AS annotation
  from master_join master_join_pxiohz
  join notes.note_view notes_note_lat_xssqbw on master_join_pxiohz.target_id = notes_note_lat_xssqbw.id
  where master_join_pxiohz.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_egmepq on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_cyzwxp.id)::jsonb AS sectordefinition,
    geometry_surface_view_djxijv.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_djxijv.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_hmhpep.significantobstacle::jsonb as significantobstacle,
    notes_note_view_gyhltm.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_cyzwxp on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_cyzwxp.id
left join geometry.surface_view geometry_surface_view_djxijv on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_djxijv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_naebzv.id) as significantobstacle
  from master_join master_join_nolcby
  join shared.obstruction_pt shared_obstruction_lat_naebzv on master_join_nolcby.target_id = shared_obstruction_lat_naebzv.id
  where master_join_nolcby.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_hmhpep on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zmcffj.*) AS annotation
  from master_join master_join_azdkpg
  join notes.note_view notes_note_lat_zmcffj on master_join_azdkpg.target_id = notes_note_lat_zmcffj.id
  where master_join_azdkpg.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_gyhltm on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_dklymv.timeinterval::jsonb as timeinterval,
    notes_note_view_qxvhld.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bbritf.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_hhhhom.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_rdlqzu.*) AS timeinterval
  from master_join master_join_ghobte
  join shared.timesheet_view shared_timesheet_lat_rdlqzu on master_join_ghobte.target_id = shared_timesheet_lat_rdlqzu.id
  where master_join_ghobte.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_dklymv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_peorln.*) AS annotation
  from master_join master_join_oxhrft
  join notes.note_view notes_note_lat_peorln on master_join_oxhrft.target_id = notes_note_lat_peorln.id
  where master_join_oxhrft.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_qxvhld on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_onzpvm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_onzpvm.title AS varchar), '(' || organisation_organisationauthority_lat_onzpvm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_onzpvm.href
  )) as specialdateauthority  from master_join master_join_qejdor
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_onzpvm on master_join_qejdor.target_id = organisation_organisationauthority_lat_onzpvm.id
  where master_join_qejdor.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_bbritf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_lxochi.id) as usage
  from master_join master_join_jtzcyc
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_lxochi on master_join_jtzcyc.target_id = airport_heliport_airportheliportusage_lat_lxochi.id
  where master_join_jtzcyc.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_hhhhom on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_vbgxce.title as varchar), '(' || organisation_organisationauthority_pt_vbgxce.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_vbgxce.href::text AS theorganisationauthority_href,
    shared_timesheet_view_ziklju.timeinterval::jsonb as timeinterval,
    notes_note_view_bdckea.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_juzehj.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_vbgxce on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_vbgxce.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hbkief.*) AS timeinterval
  from master_join master_join_vfukbm
  join shared.timesheet_view shared_timesheet_lat_hbkief on master_join_vfukbm.target_id = shared_timesheet_lat_hbkief.id
  where master_join_vfukbm.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_ziklju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qyhtiy.*) AS annotation
  from master_join master_join_qijjnl
  join notes.note_view notes_note_lat_qyhtiy on master_join_qijjnl.target_id = notes_note_lat_qyhtiy.id
  where master_join_qijjnl.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_bdckea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_frwrdb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_frwrdb.title AS varchar), '(' || organisation_organisationauthority_lat_frwrdb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_frwrdb.href
  )) as specialdateauthority  from master_join master_join_ifdddf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_frwrdb on master_join_ifdddf.target_id = organisation_organisationauthority_lat_frwrdb.id
  where master_join_ifdddf.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_juzehj on TRUE;
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_czjknh.timeinterval::jsonb as timeinterval,
    notes_note_view_cwdkye.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lhvfta.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_fglxky.user::jsonb as user,
    shared_airspacelayer_pt_mbdtho.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_kcrngz.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xzqral.*) AS timeinterval
  from master_join master_join_swcdcm
  join shared.timesheet_view shared_timesheet_lat_xzqral on master_join_swcdcm.target_id = shared_timesheet_lat_xzqral.id
  where master_join_swcdcm.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_czjknh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kmpmhm.*) AS annotation
  from master_join master_join_vquwai
  join notes.note_view notes_note_lat_kmpmhm on master_join_vquwai.target_id = notes_note_lat_kmpmhm.id
  where master_join_vquwai.source_id = airspace.airspaceactivation.id
) as notes_note_view_cwdkye on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gehrdj.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gehrdj.title AS varchar), '(' || organisation_organisationauthority_lat_gehrdj.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gehrdj.href
  )) as specialdateauthority  from master_join master_join_vsqtwv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gehrdj on master_join_vsqtwv.target_id = organisation_organisationauthority_lat_gehrdj.id
  where master_join_vsqtwv.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_lhvfta on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_lyyarw.id) as levels
  from master_join master_join_efrbur
  join shared.airspacelayer_pt shared_airspacelayer_lat_lyyarw on master_join_efrbur.target_id = shared_airspacelayer_lat_lyyarw.id
  where master_join_efrbur.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_mbdtho on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uwknbu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uwknbu.title AS varchar), '(' || organisation_organisationauthority_lat_uwknbu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uwknbu.href
  )) as user  from master_join master_join_ekknzz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uwknbu on master_join_ekknzz.target_id = organisation_organisationauthority_lat_uwknbu.id
  where master_join_ekknzz.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_fglxky on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_tybzfx.id) as aircraft
  from master_join master_join_fhsscz
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_tybzfx on master_join_fhsscz.target_id = shared_aircraftcharacteristic_lat_tybzfx.id
  where master_join_fhsscz.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_kcrngz on TRUE;
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_ivzwxi.timeinterval::jsonb as timeinterval,
    notes_note_view_ggdtyu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ogalty.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_caaqsw.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dluvxv.*) AS timeinterval
  from master_join master_join_xtjade
  join shared.timesheet_view shared_timesheet_lat_dluvxv on master_join_xtjade.target_id = shared_timesheet_lat_dluvxv.id
  where master_join_xtjade.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_ivzwxi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gdgjsb.*) AS annotation
  from master_join master_join_dfqmha
  join notes.note_view notes_note_lat_gdgjsb on master_join_dfqmha.target_id = notes_note_lat_gdgjsb.id
  where master_join_dfqmha.source_id = airspace.airspacelayerclass.id
) as notes_note_view_ggdtyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wuwybf.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wuwybf.title AS varchar), '(' || organisation_organisationauthority_lat_wuwybf.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wuwybf.href
  )) as specialdateauthority  from master_join master_join_fygnrz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wuwybf on master_join_fygnrz.target_id = organisation_organisationauthority_lat_wuwybf.id
  where master_join_fygnrz.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_ogalty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_npvnyw.id) as associatedlevels
  from master_join master_join_chtzoo
  join shared.airspacelayer_pt shared_airspacelayer_lat_npvnyw on master_join_chtzoo.target_id = shared_airspacelayer_lat_npvnyw.id
  where master_join_chtzoo.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_caaqsw on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ylrtxe.timeinterval::jsonb as timeinterval,
    notes_note_view_sahmpv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jpwyof.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zffssa.*) AS timeinterval
  from master_join master_join_jvjjao
  join shared.timesheet_view shared_timesheet_lat_zffssa on master_join_jvjjao.target_id = shared_timesheet_lat_zffssa.id
  where master_join_jvjjao.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_ylrtxe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nxvxye.*) AS annotation
  from master_join master_join_hxblln
  join notes.note_view notes_note_lat_nxvxye on master_join_hxblln.target_id = notes_note_lat_nxvxye.id
  where master_join_hxblln.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_sahmpv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yxmehk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yxmehk.title AS varchar), '(' || organisation_organisationauthority_lat_yxmehk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yxmehk.href
  )) as specialdateauthority  from master_join master_join_ybzknh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yxmehk on master_join_ybzknh.target_id = organisation_organisationauthority_lat_yxmehk.id
  where master_join_ybzknh.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_jpwyof on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_xvfsui.timeinterval::jsonb as timeinterval,
    notes_note_view_cdigfs.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tgdlxm.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_sdtkwr.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zmlila.*) AS timeinterval
  from master_join master_join_fgneeh
  join shared.timesheet_view shared_timesheet_lat_zmlila on master_join_fgneeh.target_id = shared_timesheet_lat_zmlila.id
  where master_join_fgneeh.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_xvfsui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_spthlm.*) AS annotation
  from master_join master_join_makgae
  join notes.note_view notes_note_lat_spthlm on master_join_makgae.target_id = notes_note_lat_spthlm.id
  where master_join_makgae.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_cdigfs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vftvie.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vftvie.title AS varchar), '(' || organisation_organisationauthority_lat_vftvie.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vftvie.href
  )) as specialdateauthority  from master_join master_join_xmhnov
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vftvie on master_join_xmhnov.target_id = organisation_organisationauthority_lat_vftvie.id
  where master_join_xmhnov.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_tgdlxm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_sronkn.id) as usage
  from master_join master_join_jckdbc
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_sronkn on master_join_jckdbc.target_id = airport_heliport_apronareausage_lat_sronkn.id
  where master_join_jckdbc.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_sdtkwr on TRUE;
-- CirclingRestrictionPropertyType
-- ['geometry.surface_view', 'shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_nklyfm.id)::jsonb AS sectordescription,
    geometry_surface_view_iqalma.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_iqalma.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_xfupnj.timeinterval::jsonb as timeinterval,
    notes_note_view_jfuvnt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_akyaeh.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_nklyfm on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_nklyfm.id
left join geometry.surface_view geometry_surface_view_iqalma on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_iqalma.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hztymm.*) AS timeinterval
  from master_join master_join_bivkhe
  join shared.timesheet_view shared_timesheet_lat_hztymm on master_join_bivkhe.target_id = shared_timesheet_lat_hztymm.id
  where master_join_bivkhe.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_xfupnj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pgslqp.*) AS annotation
  from master_join master_join_pzrbnx
  join notes.note_view notes_note_lat_pgslqp on master_join_pzrbnx.target_id = notes_note_lat_pgslqp.id
  where master_join_pzrbnx.source_id = procedure.circlingrestriction.id
) as notes_note_view_jfuvnt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pzpsrz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pzpsrz.title AS varchar), '(' || organisation_organisationauthority_lat_pzpsrz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pzpsrz.href
  )) as specialdateauthority  from master_join master_join_cjerib
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pzpsrz on master_join_cjerib.target_id = organisation_organisationauthority_lat_pzpsrz.id
  where master_join_cjerib.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_akyaeh on TRUE;
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_cmdvcn.timeinterval::jsonb as timeinterval,
    notes_note_view_npaqto.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lygbmt.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_rabgxg.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_nqnyax.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_bdbxpa.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_yywhvn.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jeqehc.*) AS timeinterval
  from master_join master_join_djpwvk
  join shared.timesheet_view shared_timesheet_lat_jeqehc on master_join_djpwvk.target_id = shared_timesheet_lat_jeqehc.id
  where master_join_djpwvk.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_cmdvcn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tuwofr.*) AS annotation
  from master_join master_join_oipavl
  join notes.note_view notes_note_lat_tuwofr on master_join_oipavl.target_id = notes_note_lat_tuwofr.id
  where master_join_oipavl.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_npaqto on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xpbfdb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xpbfdb.title AS varchar), '(' || organisation_organisationauthority_lat_xpbfdb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xpbfdb.href
  )) as specialdateauthority  from master_join master_join_qxbhrt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xpbfdb on master_join_qxbhrt.target_id = organisation_organisationauthority_lat_xpbfdb.id
  where master_join_qxbhrt.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_lygbmt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_gdavfv.id) as weather
  from master_join master_join_imsdej
  join shared.meteorology_pt shared_meteorology_lat_gdavfv on master_join_imsdej.target_id = shared_meteorology_lat_gdavfv.id
  where master_join_imsdej.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_rabgxg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_teaita.id) as aircraft
  from master_join master_join_oulmdp
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_teaita on master_join_oulmdp.target_id = shared_aircraftcharacteristic_lat_teaita.id
  where master_join_oulmdp.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_nqnyax on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_plbkdt.id) as flight
  from master_join master_join_pbxbym
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_plbkdt on master_join_pbxbym.target_id = shared_flightcharacteristic_lat_plbkdt.id
  where master_join_pbxbym.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_bdbxpa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_hrblim.id) as subcondition
  from master_join master_join_kkzaqm
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_hrblim on master_join_kkzaqm.target_id = airport_heliport_conditioncombination_lat_hrblim.id
  where master_join_kkzaqm.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_yywhvn on TRUE;
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_cgskjk.timeinterval::jsonb as timeinterval,
    notes_note_view_ddeyml.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sosyso.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_fjuhnr.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hfnktx.*) AS timeinterval
  from master_join master_join_dbwbda
  join shared.timesheet_view shared_timesheet_lat_hfnktx on master_join_dbwbda.target_id = shared_timesheet_lat_hfnktx.id
  where master_join_dbwbda.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_cgskjk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zugtwf.*) AS annotation
  from master_join master_join_guzzbm
  join notes.note_view notes_note_lat_zugtwf on master_join_guzzbm.target_id = notes_note_lat_zugtwf.id
  where master_join_guzzbm.source_id = routes.flightconditioncombination.id
) as notes_note_view_ddeyml on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_mpjidq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_mpjidq.title AS varchar), '(' || organisation_organisationauthority_lat_mpjidq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_mpjidq.href
  )) as specialdateauthority  from master_join master_join_foznqc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_mpjidq on master_join_foznqc.target_id = organisation_organisationauthority_lat_mpjidq.id
  where master_join_foznqc.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_sosyso on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_cavwmy.id) as element
  from master_join master_join_tspazy
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_cavwmy on master_join_tspazy.target_id = routes_flightconditionelement_lat_cavwmy.id
  where master_join_tspazy.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_fjuhnr on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qmamix.timeinterval::jsonb as timeinterval,
    notes_note_view_vewibp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qbigkv.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hlfazb.*) AS timeinterval
  from master_join master_join_benudf
  join shared.timesheet_view shared_timesheet_lat_hlfazb on master_join_benudf.target_id = shared_timesheet_lat_hlfazb.id
  where master_join_benudf.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_qmamix on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tokimo.*) AS annotation
  from master_join master_join_khelux
  join notes.note_view notes_note_lat_tokimo on master_join_khelux.target_id = notes_note_lat_tokimo.id
  where master_join_khelux.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_vewibp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_oahzcb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_oahzcb.title AS varchar), '(' || organisation_organisationauthority_lat_oahzcb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_oahzcb.href
  )) as specialdateauthority  from master_join master_join_varyuu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_oahzcb on master_join_varyuu.target_id = organisation_organisationauthority_lat_oahzcb.id
  where master_join_varyuu.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_qbigkv on TRUE;
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_xfyznl.timeinterval::jsonb as timeinterval,
    notes_note_view_ohljvc.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ukipnk.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_duicuz.*) AS timeinterval
  from master_join master_join_dfcmzb
  join shared.timesheet_view shared_timesheet_lat_duicuz on master_join_dfcmzb.target_id = shared_timesheet_lat_duicuz.id
  where master_join_dfcmzb.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_xfyznl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zexrxz.*) AS annotation
  from master_join master_join_pbfelj
  join notes.note_view notes_note_lat_zexrxz on master_join_pbfelj.target_id = notes_note_lat_zexrxz.id
  where master_join_pbfelj.source_id = shared.lightelementstatus.id
) as notes_note_view_ohljvc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ludfuk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ludfuk.title AS varchar), '(' || organisation_organisationauthority_lat_ludfuk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ludfuk.href
  )) as specialdateauthority  from master_join master_join_grsyaw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ludfuk on master_join_grsyaw.target_id = organisation_organisationauthority_lat_ludfuk.id
  where master_join_grsyaw.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_ukipnk on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_fwsfwe.timeinterval::jsonb as timeinterval,
    notes_note_view_avhiac.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_djutti.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_jyjxeq.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kqfqgz.*) AS timeinterval
  from master_join master_join_yeinfp
  join shared.timesheet_view shared_timesheet_lat_kqfqgz on master_join_yeinfp.target_id = shared_timesheet_lat_kqfqgz.id
  where master_join_yeinfp.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_fwsfwe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpzspo.*) AS annotation
  from master_join master_join_lnkubf
  join notes.note_view notes_note_lat_wpzspo on master_join_lnkubf.target_id = notes_note_lat_wpzspo.id
  where master_join_lnkubf.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_avhiac on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kleiow.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kleiow.title AS varchar), '(' || organisation_organisationauthority_lat_kleiow.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kleiow.href
  )) as specialdateauthority  from master_join master_join_igxbit
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kleiow on master_join_igxbit.target_id = organisation_organisationauthority_lat_kleiow.id
  where master_join_igxbit.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_djutti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_lnhrqv.id) as usage
  from master_join master_join_fpjgiv
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_lnhrqv on master_join_fpjgiv.target_id = airport_heliport_manoeuvringareausage_lat_lnhrqv.id
  where master_join_fpjgiv.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_jyjxeq on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_btreor.timeinterval::jsonb as timeinterval,
    notes_note_view_bcgdjs.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dmyqap.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lwnwgj.*) AS timeinterval
  from master_join master_join_qufwrk
  join shared.timesheet_view shared_timesheet_lat_lwnwgj on master_join_qufwrk.target_id = shared_timesheet_lat_lwnwgj.id
  where master_join_qufwrk.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_btreor on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppsmtg.*) AS annotation
  from master_join master_join_gfsmyh
  join notes.note_view notes_note_lat_ppsmtg on master_join_gfsmyh.target_id = notes_note_lat_ppsmtg.id
  where master_join_gfsmyh.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_bcgdjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ncvobq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ncvobq.title AS varchar), '(' || organisation_organisationauthority_lat_ncvobq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ncvobq.href
  )) as specialdateauthority  from master_join master_join_avdnls
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ncvobq on master_join_avdnls.target_id = organisation_organisationauthority_lat_ncvobq.id
  where master_join_avdnls.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_dmyqap on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_bliywb.timeinterval::jsonb as timeinterval,
    notes_note_view_tfjzrt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pommbt.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_papaju.*) AS timeinterval
  from master_join master_join_qkwyfn
  join shared.timesheet_view shared_timesheet_lat_papaju on master_join_qkwyfn.target_id = shared_timesheet_lat_papaju.id
  where master_join_qkwyfn.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_bliywb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xhvoeh.*) AS annotation
  from master_join master_join_jxynml
  join notes.note_view notes_note_lat_xhvoeh on master_join_jxynml.target_id = notes_note_lat_xhvoeh.id
  where master_join_jxynml.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_tfjzrt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_glrvol.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_glrvol.title AS varchar), '(' || organisation_organisationauthority_lat_glrvol.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_glrvol.href
  )) as specialdateauthority  from master_join master_join_sjidnb
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_glrvol on master_join_sjidnb.target_id = organisation_organisationauthority_lat_glrvol.id
  where master_join_sjidnb.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_pommbt on TRUE;
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_iqddwl.timeinterval::jsonb as timeinterval,
    notes_note_view_cebnbs.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_itkkit.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bmmzve.*) AS timeinterval
  from master_join master_join_cysxhh
  join shared.timesheet_view shared_timesheet_lat_bmmzve on master_join_cysxhh.target_id = shared_timesheet_lat_bmmzve.id
  where master_join_cysxhh.source_id = shared.onlinecontact.id
) as shared_timesheet_view_iqddwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lupveg.*) AS annotation
  from master_join master_join_qydjkr
  join notes.note_view notes_note_lat_lupveg on master_join_qydjkr.target_id = notes_note_lat_lupveg.id
  where master_join_qydjkr.source_id = shared.onlinecontact.id
) as notes_note_view_cebnbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wlgvyd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wlgvyd.title AS varchar), '(' || organisation_organisationauthority_lat_wlgvyd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wlgvyd.href
  )) as specialdateauthority  from master_join master_join_zwksoo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wlgvyd on master_join_zwksoo.target_id = organisation_organisationauthority_lat_wlgvyd.id
  where master_join_zwksoo.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_itkkit on TRUE;
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_uoooqb.timeinterval::jsonb as timeinterval,
    notes_note_view_gesmtr.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hpanru.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qpdcit.*) AS timeinterval
  from master_join master_join_ipjfya
  join shared.timesheet_view shared_timesheet_lat_qpdcit on master_join_ipjfya.target_id = shared_timesheet_lat_qpdcit.id
  where master_join_ipjfya.source_id = shared.postaladdress.id
) as shared_timesheet_view_uoooqb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pmpnht.*) AS annotation
  from master_join master_join_oghlox
  join notes.note_view notes_note_lat_pmpnht on master_join_oghlox.target_id = notes_note_lat_pmpnht.id
  where master_join_oghlox.source_id = shared.postaladdress.id
) as notes_note_view_gesmtr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_trrfbq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_trrfbq.title AS varchar), '(' || organisation_organisationauthority_lat_trrfbq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_trrfbq.href
  )) as specialdateauthority  from master_join master_join_dxpuux
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_trrfbq on master_join_dxpuux.target_id = organisation_organisationauthority_lat_trrfbq.id
  where master_join_dxpuux.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_hpanru on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_wvklys.timeinterval::jsonb as timeinterval,
    notes_note_view_cyvraw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mtitzr.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hecvys.*) AS timeinterval
  from master_join master_join_czlhji
  join shared.timesheet_view shared_timesheet_lat_hecvys on master_join_czlhji.target_id = shared_timesheet_lat_hecvys.id
  where master_join_czlhji.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_wvklys on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rihjga.*) AS annotation
  from master_join master_join_jtlaxi
  join notes.note_view notes_note_lat_rihjga on master_join_jtlaxi.target_id = notes_note_lat_rihjga.id
  where master_join_jtlaxi.source_id = procedure.procedureavailability.id
) as notes_note_view_cyvraw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pgclug.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pgclug.title AS varchar), '(' || organisation_organisationauthority_lat_pgclug.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pgclug.href
  )) as specialdateauthority  from master_join master_join_dqaoch
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pgclug on master_join_dqaoch.target_id = organisation_organisationauthority_lat_pgclug.id
  where master_join_dqaoch.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_mtitzr on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ooizwg.timeinterval::jsonb as timeinterval,
    notes_note_view_wexfcf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ewlsny.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bnxkgy.*) AS timeinterval
  from master_join master_join_ddbdte
  join shared.timesheet_view shared_timesheet_lat_bnxkgy on master_join_ddbdte.target_id = shared_timesheet_lat_bnxkgy.id
  where master_join_ddbdte.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_ooizwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_snrkpl.*) AS annotation
  from master_join master_join_trwaat
  join notes.note_view notes_note_lat_snrkpl on master_join_trwaat.target_id = notes_note_lat_snrkpl.id
  where master_join_trwaat.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_wexfcf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_iemqsd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_iemqsd.title AS varchar), '(' || organisation_organisationauthority_lat_iemqsd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_iemqsd.href
  )) as specialdateauthority  from master_join master_join_scgtmw
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_iemqsd on master_join_scgtmw.target_id = organisation_organisationauthority_lat_iemqsd.id
  where master_join_scgtmw.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_ewlsny on TRUE;
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_zyzxes.timeinterval::jsonb as timeinterval,
    notes_note_view_bdtqgw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sfugmp.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_ojijea.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_snmqhh.*) AS timeinterval
  from master_join master_join_nlyjfv
  join shared.timesheet_view shared_timesheet_lat_snmqhh on master_join_nlyjfv.target_id = shared_timesheet_lat_snmqhh.id
  where master_join_nlyjfv.source_id = routes.routeavailability.id
) as shared_timesheet_view_zyzxes on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qtpovh.*) AS annotation
  from master_join master_join_ucscjl
  join notes.note_view notes_note_lat_qtpovh on master_join_ucscjl.target_id = notes_note_lat_qtpovh.id
  where master_join_ucscjl.source_id = routes.routeavailability.id
) as notes_note_view_bdtqgw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jjwepo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jjwepo.title AS varchar), '(' || organisation_organisationauthority_lat_jjwepo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jjwepo.href
  )) as specialdateauthority  from master_join master_join_mjyriy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jjwepo on master_join_mjyriy.target_id = organisation_organisationauthority_lat_jjwepo.id
  where master_join_mjyriy.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_sfugmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_sodtfb.id) as levels
  from master_join master_join_dmgddq
  join shared.airspacelayer_pt shared_airspacelayer_lat_sodtfb on master_join_dmgddq.target_id = shared_airspacelayer_lat_sodtfb.id
  where master_join_dmgddq.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_ojijea on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_rcofxv.timeinterval::jsonb as timeinterval,
    notes_note_view_igpwtk.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bfyorj.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_veiveo.*) AS timeinterval
  from master_join master_join_ertayh
  join shared.timesheet_view shared_timesheet_lat_veiveo on master_join_ertayh.target_id = shared_timesheet_lat_veiveo.id
  where master_join_ertayh.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_rcofxv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sswkmw.*) AS annotation
  from master_join master_join_hffpxn
  join notes.note_view notes_note_lat_sswkmw on master_join_hffpxn.target_id = notes_note_lat_sswkmw.id
  where master_join_hffpxn.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_igpwtk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vmdwge.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vmdwge.title AS varchar), '(' || organisation_organisationauthority_lat_vmdwge.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vmdwge.href
  )) as specialdateauthority  from master_join master_join_rbrusn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vmdwge on master_join_rbrusn.target_id = organisation_organisationauthority_lat_vmdwge.id
  where master_join_rbrusn.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_bfyorj on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_mgktof.timeinterval::jsonb as timeinterval,
    notes_note_view_zpdqaj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qrxnpf.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ckqigx.*) AS timeinterval
  from master_join master_join_suqdnp
  join shared.timesheet_view shared_timesheet_lat_ckqigx on master_join_suqdnp.target_id = shared_timesheet_lat_ckqigx.id
  where master_join_suqdnp.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_mgktof on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_azpocv.*) AS annotation
  from master_join master_join_gmgqqa
  join notes.note_view notes_note_lat_azpocv on master_join_gmgqqa.target_id = notes_note_lat_azpocv.id
  where master_join_gmgqqa.source_id = service.serviceoperationalstatus.id
) as notes_note_view_zpdqaj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pznbss.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pznbss.title AS varchar), '(' || organisation_organisationauthority_lat_pznbss.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pznbss.href
  )) as specialdateauthority  from master_join master_join_xsgksc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pznbss on master_join_xsgksc.target_id = organisation_organisationauthority_lat_pznbss.id
  where master_join_xsgksc.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_qrxnpf on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qltmuc.timeinterval::jsonb as timeinterval,
    notes_note_view_erlstj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_thcakn.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vrfgbx.*) AS timeinterval
  from master_join master_join_epvfnu
  join shared.timesheet_view shared_timesheet_lat_vrfgbx on master_join_epvfnu.target_id = shared_timesheet_lat_vrfgbx.id
  where master_join_epvfnu.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_qltmuc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrdhes.*) AS annotation
  from master_join master_join_bdtidf
  join notes.note_view notes_note_lat_mrdhes on master_join_bdtidf.target_id = notes_note_lat_mrdhes.id
  where master_join_bdtidf.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_erlstj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fmciwe.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fmciwe.title AS varchar), '(' || organisation_organisationauthority_lat_fmciwe.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fmciwe.href
  )) as specialdateauthority  from master_join master_join_wwgwdo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fmciwe on master_join_wwgwdo.target_id = organisation_organisationauthority_lat_fmciwe.id
  where master_join_wwgwdo.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_thcakn on TRUE;
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_cvguqa.timeinterval::jsonb as timeinterval,
    notes_note_view_zqglge.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xjgzjl.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xiuiqf.*) AS timeinterval
  from master_join master_join_kbszcn
  join shared.timesheet_view shared_timesheet_lat_xiuiqf on master_join_kbszcn.target_id = shared_timesheet_lat_xiuiqf.id
  where master_join_kbszcn.source_id = shared.telephonecontact.id
) as shared_timesheet_view_cvguqa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lpjvtb.*) AS annotation
  from master_join master_join_vmbxdv
  join notes.note_view notes_note_lat_lpjvtb on master_join_vmbxdv.target_id = notes_note_lat_lpjvtb.id
  where master_join_vmbxdv.source_id = shared.telephonecontact.id
) as notes_note_view_zqglge on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_bmkjjo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_bmkjjo.title AS varchar), '(' || organisation_organisationauthority_lat_bmkjjo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_bmkjjo.href
  )) as specialdateauthority  from master_join master_join_gxumba
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_bmkjjo on master_join_gxumba.target_id = organisation_organisationauthority_lat_bmkjjo.id
  where master_join_gxumba.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_xjgzjl on TRUE;
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_gbrfoz.timeinterval::jsonb as timeinterval,
    notes_note_view_xlexpu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vcycnq.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_inrmtm.*) AS timeinterval
  from master_join master_join_ksfxbi
  join shared.timesheet_view shared_timesheet_lat_inrmtm on master_join_ksfxbi.target_id = shared_timesheet_lat_inrmtm.id
  where master_join_ksfxbi.source_id = organisation.unitavailability.id
) as shared_timesheet_view_gbrfoz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oeqcpn.*) AS annotation
  from master_join master_join_tkojmw
  join notes.note_view notes_note_lat_oeqcpn on master_join_tkojmw.target_id = notes_note_lat_oeqcpn.id
  where master_join_tkojmw.source_id = organisation.unitavailability.id
) as notes_note_view_xlexpu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hjvbib.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hjvbib.title AS varchar), '(' || organisation_organisationauthority_lat_hjvbib.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hjvbib.href
  )) as specialdateauthority  from master_join master_join_ftbmlg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hjvbib on master_join_ftbmlg.target_id = organisation_organisationauthority_lat_hjvbib.id
  where master_join_ftbmlg.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_vcycnq on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_xfcgcj.timeinterval::jsonb as timeinterval,
    notes_note_view_ifqvzi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_yyneik.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_kzpsku.*) AS timeinterval
  from master_join master_join_khrreg
  join shared.timesheet_view shared_timesheet_lat_kzpsku on master_join_khrreg.target_id = shared_timesheet_lat_kzpsku.id
  where master_join_khrreg.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_xfcgcj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpdsgv.*) AS annotation
  from master_join master_join_qhqibw
  join notes.note_view notes_note_lat_gpdsgv on master_join_qhqibw.target_id = notes_note_lat_gpdsgv.id
  where master_join_qhqibw.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_ifqvzi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qbjfle.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qbjfle.title AS varchar), '(' || organisation_organisationauthority_lat_qbjfle.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qbjfle.href
  )) as specialdateauthority  from master_join master_join_mnhvqh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qbjfle on master_join_mnhvqh.target_id = organisation_organisationauthority_lat_qbjfle.id
  where master_join_mnhvqh.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_yyneik on TRUE;
-- VerticalStructurePartPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'shared.timesheet_view', 'notes.note_view', 'geometry.elevatedpoint_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_nqbtus.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_nqbtus.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_nqbtus.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_nqbtus.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_nqbtus.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_nqbtus.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_nqbtus.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_nqbtus.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_wirpdz.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_wirpdz.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_wirpdz.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_wirpdz.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_wirpdz.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_wirpdz.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_cbviwq.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_cbviwq.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_cbviwq.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_cbviwq.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_cbviwq.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_cbviwq.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_kfxtrq.timeinterval::jsonb as timeinterval,
    notes_note_view_dioelp.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ssxrdd.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_hinriw.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nqbtus on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_nqbtus.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_wirpdz on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_wirpdz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cbviwq on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_cbviwq.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zrzimv.*) AS timeinterval
  from master_join master_join_bilwiy
  join shared.timesheet_view shared_timesheet_lat_zrzimv on master_join_bilwiy.target_id = shared_timesheet_lat_zrzimv.id
  where master_join_bilwiy.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_kfxtrq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_otwoif.*) AS annotation
  from master_join master_join_idptfn
  join notes.note_view notes_note_lat_otwoif on master_join_idptfn.target_id = notes_note_lat_otwoif.id
  where master_join_idptfn.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_dioelp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rmertl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rmertl.title AS varchar), '(' || organisation_organisationauthority_lat_rmertl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rmertl.href
  )) as specialdateauthority  from master_join master_join_zxogdr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rmertl on master_join_zxogdr.target_id = organisation_organisationauthority_lat_rmertl.id
  where master_join_zxogdr.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_ssxrdd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_cqshlr.id) as lighting
  from master_join master_join_zqnpdg
  join shared.lightelement_pt shared_lightelement_lat_cqshlr on master_join_zqnpdg.target_id = shared_lightelement_lat_cqshlr.id
  where master_join_zqnpdg.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_hinriw on TRUE;
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_htjfhm.timeinterval::jsonb as timeinterval,
    notes_note_view_xmsxtm.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gldfeh.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_pmsnzt.*) AS timeinterval
  from master_join master_join_gpmwsc
  join shared.timesheet_view shared_timesheet_lat_pmsnzt on master_join_gpmwsc.target_id = shared_timesheet_lat_pmsnzt.id
  where master_join_gpmwsc.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_htjfhm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfdios.*) AS annotation
  from master_join master_join_ftqzyz
  join notes.note_view notes_note_lat_nfdios on master_join_ftqzyz.target_id = notes_note_lat_nfdios.id
  where master_join_ftqzyz.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_xmsxtm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xorjpr.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xorjpr.title AS varchar), '(' || organisation_organisationauthority_lat_xorjpr.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xorjpr.href
  )) as specialdateauthority  from master_join master_join_jifnwx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xorjpr on master_join_jifnwx.target_id = organisation_organisationauthority_lat_xorjpr.id
  where master_join_jifnwx.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_gldfeh on TRUE;
-- ContactInformationPropertyType
-- ['shared.telephonecontact_view', 'shared.postaladdress_view', 'shared.onlinecontact_view', 'notes.note_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_ywjsse.id)::jsonb AS selection,
    notes_note_view_cbgdks.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_ywjsse on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_ywjsse.id
left join lateral(
  select
  from master_join master_join_uyuvdw
  join shared.contactinformation_view shared_contactinformation_lat_uowyoo on master_join_uyuvdw.target_id = shared_contactinformation_lat_uowyoo.id
  where master_join_uyuvdw.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_kqnpmo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_efoqzt.*) AS annotation
  from master_join master_join_hsjfmk
  join notes.note_view notes_note_lat_efoqzt on master_join_hsjfmk.target_id = notes_note_lat_efoqzt.id
  where master_join_hsjfmk.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_cbgdks on TRUE;
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_hpmwjd.id)::jsonb AS selection,
    notes_note_view_nvxybm.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_hpmwjd on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_hpmwjd.id
left join lateral(
  select
  from master_join master_join_fhfhwx
  join shared.contactinformation_view shared_contactinformation_lat_cfpkgq on master_join_fhfhwx.target_id = shared_contactinformation_lat_cfpkgq.id
  where master_join_fhfhwx.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_etvtho on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hilqsh.*) AS annotation
  from master_join master_join_cihufk
  join notes.note_view notes_note_lat_hilqsh on master_join_cihufk.target_id = notes_note_lat_hilqsh.id
  where master_join_cihufk.source_id = airport_heliport.apronareausage.id
) as notes_note_view_nvxybm on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_pqddfm.routeelement::jsonb as routeelement,
    notes_note_view_tfxoru.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_ngrzrw.id) as routeelement
  from master_join master_join_coqjph
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_ngrzrw on master_join_coqjph.target_id = routes_flightroutingelement_lat_ngrzrw.id
  where master_join_coqjph.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_pqddfm on TRUE
left join lateral(
  select
  from master_join master_join_exlork
  join shared.contactinformation_view shared_contactinformation_lat_emdnfn on master_join_exlork.target_id = shared_contactinformation_lat_emdnfn.id
  where master_join_exlork.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_eyyxud on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_habnad.*) AS annotation
  from master_join master_join_oklxru
  join notes.note_view notes_note_lat_habnad on master_join_oklxru.target_id = notes_note_lat_habnad.id
  where master_join_oklxru.source_id = routes.flightrestrictionroute.id
) as notes_note_view_tfxoru on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_ifwaxj.id)::jsonb AS selection,
    notes_note_view_djjoyj.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_ifwaxj on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_ifwaxj.id
left join lateral(
  select
  from master_join master_join_rmfxjp
  join shared.contactinformation_view shared_contactinformation_lat_kelkxh on master_join_rmfxjp.target_id = shared_contactinformation_lat_kelkxh.id
  where master_join_rmfxjp.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_csxlpl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ljvcdt.*) AS annotation
  from master_join master_join_lbjvzn
  join notes.note_view notes_note_lat_ljvcdt on master_join_lbjvzn.target_id = notes_note_lat_ljvcdt.id
  where master_join_lbjvzn.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_djjoyj on TRUE;
-- AerialRefuellingType
-- ['aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'notes.note_view', 'routes.routeavailability_view', 'aerial_refuelling.aerialrefuellingtrack_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_guzkay.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_guzkay.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_guzkay.href::text AS oppositetrack_href,
    routes_routeavailability_view_wthsig.availability::jsonb as availability,
    airspace_airspace_pt_coaelq.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_aptxcu.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_xskcmv.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_ubiqli.managingorganisation::jsonb as managingorganisation,
    notes_note_view_fpnhsv.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_guzkay on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_guzkay.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_kuloun.id) as availability
  from master_join master_join_xdmlyg
  join routes.routeavailability_view routes_routeavailability_lat_kuloun on master_join_xdmlyg.target_id = routes_routeavailability_lat_kuloun.id
  where master_join_xdmlyg.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_wthsig on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_wufjrq.id,
      'title', coalesce(cast(airspace_airspace_lat_wufjrq.title AS varchar), '(' || airspace_airspace_lat_wufjrq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_wufjrq.href
  )) as protectingairspace  from master_join master_join_ozmwbm
  join airspace.airspace_pt airspace_airspace_lat_wufjrq on master_join_ozmwbm.target_id = airspace_airspace_lat_wufjrq.id
  where master_join_ozmwbm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_coaelq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_upevtb.id) as track
  from master_join master_join_mctrvt
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_upevtb on master_join_mctrvt.target_id = aerial_refuelling_aerialrefuellingtrack_lat_upevtb.id
  where master_join_mctrvt.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_aptxcu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_toyrmz.id) as anchor
  from master_join master_join_rhgfwu
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_toyrmz on master_join_rhgfwu.target_id = aerial_refuelling_aerialrefuellinganchor_lat_toyrmz.id
  where master_join_rhgfwu.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_xskcmv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_fjuqbz.id) as managingorganisation
  from master_join master_join_uymjir
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_fjuqbz on master_join_uymjir.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_fjuqbz.id
  where master_join_uymjir.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_ubiqli on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vdszqr.*) AS annotation
  from master_join master_join_jichsj
  join notes.note_view notes_note_lat_vdszqr on master_join_jichsj.target_id = notes_note_lat_vdszqr.id
  where master_join_jichsj.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_fpnhsv on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_bqasne.title as varchar), '(' || obstacles_verticalstructure_pt_bqasne.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_bqasne.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mglvqq.title as varchar), '(' || airport_heliport_airportheliport_pt_mglvqq.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_mglvqq.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_emnhyk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_emnhyk.longitude AS location_longitude,
    geometry_elevatedpoint_view_emnhyk.latitude AS location_latitude,
    geometry_elevatedpoint_view_emnhyk.elevation AS location_elevation,
    geometry_elevatedpoint_view_emnhyk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_emnhyk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_emnhyk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_emnhyk.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_tdjpit.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_bqasne on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_bqasne.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mglvqq on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_mglvqq.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_emnhyk on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_emnhyk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njrfoz.*) AS annotation
  from master_join master_join_egzaln
  join notes.note_view notes_note_lat_njrfoz on master_join_egzaln.target_id = notes_note_lat_njrfoz.id
  where master_join_egzaln.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_tdjpit on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_qtfoqg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qtfoqg.longitude AS location_longitude,
    geometry_elevatedpoint_view_qtfoqg.latitude AS location_latitude,
    geometry_elevatedpoint_view_qtfoqg.elevation AS location_elevation,
    geometry_elevatedpoint_view_qtfoqg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qtfoqg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qtfoqg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qtfoqg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_xgweoq.title as varchar), '(' || organisation_unit_pt_xgweoq.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_xgweoq.href::text AS serviceprovider_href,
    service_callsigndetail_view_kyrlrs.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_nmbmnj.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_vocllq.availability::jsonb as availability,
    notes_note_view_jphtay.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_watyjh.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qtfoqg on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_qtfoqg.id
left join organisation.unit_pt organisation_unit_pt_xgweoq on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_xgweoq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_czacfm.id) as callsign
  from master_join master_join_akkqxp
  join service.callsigndetail_view service_callsigndetail_lat_czacfm on master_join_akkqxp.target_id = service_callsigndetail_lat_czacfm.id
  where master_join_akkqxp.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_kyrlrs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_oftcbh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_oftcbh.title AS varchar), '(' || service_radiocommunicationchannel_lat_oftcbh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_oftcbh.href
  )) as radiocommunication  from master_join master_join_swxjhc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_oftcbh on master_join_swxjhc.target_id = service_radiocommunicationchannel_lat_oftcbh.id
  where master_join_swxjhc.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_nmbmnj on TRUE
left join lateral(
  select
  from master_join master_join_bpowxc
  join shared.contactinformation_view shared_contactinformation_lat_xlnvwk on master_join_bpowxc.target_id = shared_contactinformation_lat_xlnvwk.id
  where master_join_bpowxc.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_eillek on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_wlgdif.id) as availability
  from master_join master_join_eclhhe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_wlgdif on master_join_eclhhe.target_id = service_serviceoperationalstatus_lat_wlgdif.id
  where master_join_eclhhe.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_vocllq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nhnxip.*) AS annotation
  from master_join master_join_eckfvg
  join notes.note_view notes_note_lat_nhnxip on master_join_eckfvg.target_id = notes_note_lat_nhnxip.id
  where master_join_eckfvg.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_jphtay on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xmejsd.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xmejsd.title AS varchar), '(' || airport_heliport_airportheliport_lat_xmejsd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xmejsd.href
  )) as airportheliport  from master_join master_join_vvqnzc
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xmejsd on master_join_vvqnzc.target_id = airport_heliport_airportheliport_lat_xmejsd.id
  where master_join_vvqnzc.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_watyjh on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandType
-- ['airport_heliport.aircraftstandcontamination_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_wqwglv.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_wqwglv.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedpoint_view_wfsbyq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wfsbyq.longitude AS location_longitude,
    geometry_elevatedpoint_view_wfsbyq.latitude AS location_latitude,
    geometry_elevatedpoint_view_wfsbyq.elevation AS location_elevation,
    geometry_elevatedpoint_view_wfsbyq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wfsbyq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wfsbyq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wfsbyq.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_mdwpxp.title as varchar), '(' || airport_heliport_apronelement_pt_mdwpxp.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_mdwpxp.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_kimmns.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_kimmns.elevation AS extent_elevation,
    geometry_elevatedsurface_view_kimmns.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_kimmns.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_kimmns.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_kimmns.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_mairlv.contaminant::jsonb as contaminant,
    notes_note_view_hmipqt.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_wznsed.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_wqwglv on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_wqwglv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wfsbyq on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_wfsbyq.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_mdwpxp on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_mdwpxp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kimmns on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_kimmns.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_rjsatg.id) as contaminant
  from master_join master_join_wacykt
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_rjsatg on master_join_wacykt.target_id = airport_heliport_aircraftstandcontamination_lat_rjsatg.id
  where master_join_wacykt.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_mairlv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_txuuqq.*) AS annotation
  from master_join master_join_hekrmn
  join notes.note_view notes_note_lat_txuuqq on master_join_hekrmn.target_id = notes_note_lat_txuuqq.id
  where master_join_hekrmn.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_hmipqt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_tcuscb.id) as availability
  from master_join master_join_egdjed
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_tcuscb on master_join_egdjed.target_id = airport_heliport_apronareaavailability_lat_tcuscb.id
  where master_join_egdjed.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_wznsed on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_itxhbt.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_itxhbt.longitude AS location_longitude,
    geometry_elevatedpoint_view_itxhbt.latitude AS location_latitude,
    geometry_elevatedpoint_view_itxhbt.elevation AS location_elevation,
    geometry_elevatedpoint_view_itxhbt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_itxhbt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_itxhbt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_itxhbt.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_wjgixr.title as varchar), '(' || organisation_unit_pt_wjgixr.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_wjgixr.href::text AS serviceprovider_href,
    service_callsigndetail_view_izxdfm.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_vazncw.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_pvicja.availability::jsonb as availability,
    notes_note_view_mzsseq.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_qnacde.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_itxhbt on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_itxhbt.id
left join organisation.unit_pt organisation_unit_pt_wjgixr on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_wjgixr.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dhykne.id) as callsign
  from master_join master_join_shnqpf
  join service.callsigndetail_view service_callsigndetail_lat_dhykne on master_join_shnqpf.target_id = service_callsigndetail_lat_dhykne.id
  where master_join_shnqpf.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_izxdfm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_sunebh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_sunebh.title AS varchar), '(' || service_radiocommunicationchannel_lat_sunebh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_sunebh.href
  )) as radiocommunication  from master_join master_join_jgyjga
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_sunebh on master_join_jgyjga.target_id = service_radiocommunicationchannel_lat_sunebh.id
  where master_join_jgyjga.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_vazncw on TRUE
left join lateral(
  select
  from master_join master_join_tedjxe
  join shared.contactinformation_view shared_contactinformation_lat_ajptnk on master_join_tedjxe.target_id = shared_contactinformation_lat_ajptnk.id
  where master_join_tedjxe.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_bezjbm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jbjyws.id) as availability
  from master_join master_join_fjrzzq
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_jbjyws on master_join_fjrzzq.target_id = service_serviceoperationalstatus_lat_jbjyws.id
  where master_join_fjrzzq.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_pvicja on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qcpqme.*) AS annotation
  from master_join master_join_ojgnkq
  join notes.note_view notes_note_lat_qcpqme on master_join_ojgnkq.target_id = notes_note_lat_qcpqme.id
  where master_join_ojgnkq.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_mzsseq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_cycdqw.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_cycdqw.title AS varchar), '(' || airport_heliport_airportheliport_lat_cycdqw.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_cycdqw.href
  )) as airportheliport  from master_join master_join_kwgvdq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_cycdqw on master_join_kwgvdq.target_id = airport_heliport_airportheliport_lat_cycdqw.id
  where master_join_kwgvdq.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_qnacde on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_vkuptm.title as varchar), '(' || airport_heliport_airportheliport_pt_vkuptm.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_vkuptm.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yqhlel.title as varchar), '(' || airport_heliport_airportheliport_pt_yqhlel.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_yqhlel.href::text AS dependentairport_href,
    notes_note_view_stzmcd.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vkuptm on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_vkuptm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yqhlel on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_yqhlel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sbuduj.*) AS annotation
  from master_join master_join_xievjy
  join notes.note_view notes_note_lat_sbuduj on master_join_xievjy.target_id = notes_note_lat_sbuduj.id
  where master_join_xievjy.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_stzmcd on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'airport_heliport.airportheliportavailability_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportcontamination_view', 'shared.contactinformation_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_shlknj.id)::jsonb AS responsibleorganisation,
    airport_heliport_airportheliportresponsibilityorganisation_view_shlknj.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_dmuiee.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_dmuiee.longitude AS arp_longitude,
    geometry_elevatedpoint_view_dmuiee.latitude AS arp_latitude,
    geometry_elevatedpoint_view_dmuiee.elevation AS arp_elevation,
    geometry_elevatedpoint_view_dmuiee.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_dmuiee.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_dmuiee.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_dmuiee.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_vhkudl.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_vhkudl.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_vhkudl.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_vhkudl.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_vhkudl.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_vhkudl.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_xerzvz.contaminant::jsonb as contaminant,
    airport_heliport_city_view_tyomzs.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_ecioqz.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_ipzona.availability::jsonb as availability,
    notes_note_view_jitpph.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_shlknj on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_shlknj.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dmuiee on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_dmuiee.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vhkudl on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_vhkudl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_xpgwwj.id) as contaminant
  from master_join master_join_mqvhzr
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_xpgwwj on master_join_mqvhzr.target_id = airport_heliport_airportheliportcontamination_lat_xpgwwj.id
  where master_join_mqvhzr.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_xerzvz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_bgnyvl.id) as servedcity
  from master_join master_join_bcasxt
  join airport_heliport.city_view airport_heliport_city_lat_bgnyvl on master_join_bcasxt.target_id = airport_heliport_city_lat_bgnyvl.id
  where master_join_bcasxt.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_tyomzs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_cqslkl.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_cqslkl.title AS varchar), '(' || airport_heliport_altimetersource_lat_cqslkl.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_cqslkl.href
  )) as altimetersource  from master_join master_join_yfxlgk
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_cqslkl on master_join_yfxlgk.target_id = airport_heliport_altimetersource_lat_cqslkl.id
  where master_join_yfxlgk.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_ecioqz on TRUE
left join lateral(
  select
  from master_join master_join_zlvuom
  join shared.contactinformation_view shared_contactinformation_lat_jlnhne on master_join_zlvuom.target_id = shared_contactinformation_lat_jlnhne.id
  where master_join_zlvuom.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_hhdkwk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_wgkxzv.id) as availability
  from master_join master_join_mmjxar
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_wgkxzv on master_join_mmjxar.target_id = airport_heliport_airportheliportavailability_lat_wgkxzv.id
  where master_join_mmjxar.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_ipzona on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zhhnxo.*) AS annotation
  from master_join master_join_jwhngv
  join notes.note_view notes_note_lat_zhhnxo on master_join_jwhngv.target_id = notes_note_lat_zhhnxo.id
  where master_join_jwhngv.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_jitpph on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_zsgwjm.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_zsgwjm.elevation AS area_elevation,
    geometry_elevatedsurface_view_zsgwjm.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_zsgwjm.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_zsgwjm.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_zsgwjm.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_mdujtq.title as varchar), '(' || airport_heliport_airportheliport_pt_mdujtq.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_mdujtq.href::text AS affectedairport_href,
    notes_note_view_zwwmsg.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_zsgwjm on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_zsgwjm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mdujtq on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_mdujtq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vvzvfb.*) AS annotation
  from master_join master_join_hdjsnj
  join notes.note_view notes_note_lat_vvzvfb on master_join_hdjsnj.target_id = notes_note_lat_vvzvfb.id
  where master_join_hdjsnj.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_zwwmsg on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_airportheliportprotectionarea_pt_mprtax.title as varchar), '(' || airport_heliport_airportheliportprotectionarea_pt_mprtax.nilreason[1] || ')')::text AS markedprotectionarea,
    airport_heliport_airportheliportprotectionarea_pt_mprtax.href::text AS markedprotectionarea_href,
    airport_heliport_markingelement_view_nhciae.element::jsonb as element,
    notes_note_view_lippdx.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join airport_heliport.airportheliportprotectionarea_pt airport_heliport_airportheliportprotectionarea_pt_mprtax on airport_heliport.airportprotectionareamarking_ts.markedprotectionarea_id = airport_heliport_airportheliportprotectionarea_pt_mprtax.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_oabjtw.id) as element
  from master_join master_join_sqipvc
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_oabjtw on master_join_sqipvc.target_id = airport_heliport_markingelement_lat_oabjtw.id
  where master_join_sqipvc.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_nhciae on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ovtrog.*) AS annotation
  from master_join master_join_ulvboe
  join notes.note_view notes_note_lat_ovtrog on master_join_ulvboe.target_id = notes_note_lat_ovtrog.id
  where master_join_ulvboe.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_lippdx on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceType
-- ['service.nitrogen_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'service.oxygen_view', 'shared.contactinformation_view', 'service.oil_view', 'service.callsigndetail_view', 'service.fuel_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as aixmname,
    geometry_elevatedpoint_view_jpdvky.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jpdvky.longitude AS location_longitude,
    geometry_elevatedpoint_view_jpdvky.latitude AS location_latitude,
    geometry_elevatedpoint_view_jpdvky.elevation AS location_elevation,
    geometry_elevatedpoint_view_jpdvky.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jpdvky.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jpdvky.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jpdvky.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_trjbdr.title as varchar), '(' || organisation_unit_pt_trjbdr.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_trjbdr.href::text AS serviceprovider_href,
    service_callsigndetail_view_cgbgtl.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_kjbzis.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_dplqwz.availability::jsonb as availability,
    notes_note_view_qyfrkd.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_qszbxt.airportheliport::jsonb as airportheliport,
    service_fuel_view_raurar.fuelsupply::jsonb as fuelsupply,
    service_oil_view_occcwg.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_caajik.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_oruxwd.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jpdvky on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_jpdvky.id
left join organisation.unit_pt organisation_unit_pt_trjbdr on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_trjbdr.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_wioive.id) as callsign
  from master_join master_join_gopiwx
  join service.callsigndetail_view service_callsigndetail_lat_wioive on master_join_gopiwx.target_id = service_callsigndetail_lat_wioive.id
  where master_join_gopiwx.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_cgbgtl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_divazb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_divazb.title AS varchar), '(' || service_radiocommunicationchannel_lat_divazb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_divazb.href
  )) as radiocommunication  from master_join master_join_njxecv
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_divazb on master_join_njxecv.target_id = service_radiocommunicationchannel_lat_divazb.id
  where master_join_njxecv.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_kjbzis on TRUE
left join lateral(
  select
  from master_join master_join_vddwih
  join shared.contactinformation_view shared_contactinformation_lat_bgtqmu on master_join_vddwih.target_id = shared_contactinformation_lat_bgtqmu.id
  where master_join_vddwih.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_hxzghk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_yinkrr.id) as availability
  from master_join master_join_eterlc
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_yinkrr on master_join_eterlc.target_id = service_serviceoperationalstatus_lat_yinkrr.id
  where master_join_eterlc.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_dplqwz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gshfsb.*) AS annotation
  from master_join master_join_outukc
  join notes.note_view notes_note_lat_gshfsb on master_join_outukc.target_id = notes_note_lat_gshfsb.id
  where master_join_outukc.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_qyfrkd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vldtam.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vldtam.title AS varchar), '(' || airport_heliport_airportheliport_lat_vldtam.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vldtam.href
  )) as airportheliport  from master_join master_join_qyhcie
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vldtam on master_join_qyhcie.target_id = airport_heliport_airportheliport_lat_vldtam.id
  where master_join_qyhcie.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_qszbxt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_jateez.id) as fuelsupply
  from master_join master_join_aceiun
  join service.fuel_view service_fuel_lat_jateez on master_join_aceiun.target_id = service_fuel_lat_jateez.id
  where master_join_aceiun.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_raurar on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_fimkmb.id) as oilsupply
  from master_join master_join_vsgazr
  join service.oil_view service_oil_lat_fimkmb on master_join_vsgazr.target_id = service_oil_lat_fimkmb.id
  where master_join_vsgazr.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_occcwg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_mbuwtp.id) as nitrogensupply
  from master_join master_join_lroovp
  join service.nitrogen_view service_nitrogen_lat_mbuwtp on master_join_lroovp.target_id = service_nitrogen_lat_mbuwtp.id
  where master_join_lroovp.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_caajik on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_nygsml.id) as oxygensupply
  from master_join master_join_gajofs
  join service.oxygen_view service_oxygen_lat_nygsml on master_join_gajofs.target_id = service_oxygen_lat_nygsml.id
  where master_join_gajofs.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_oruxwd on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_xowdbl.title as varchar), '(' || airspace_airspace_pt_xowdbl.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_xowdbl.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_vbxnqb.title as varchar), '(' || airspace_airspace_pt_vbxnqb.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_vbxnqb.href::text AS enteredairspace_href,
    notes_note_view_aapkfl.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_xowdbl on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_xowdbl.id
left join airspace.airspace_pt airspace_airspace_pt_vbxnqb on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_vbxnqb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pxduig.*) AS annotation
  from master_join master_join_rvshkz
  join notes.note_view notes_note_lat_pxduig on master_join_rvshkz.target_id = notes_note_lat_pxduig.id
  where master_join_rvshkz.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_aapkfl on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceType
-- ['airspace.airspaceactivation_view', 'airspace.airspacegeometrycomponent_view', 'notes.note_view', 'airspace.airspacelayerclass_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_upxgqj.title as varchar), '(' || routes_route_pt_upxgqj.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_upxgqj.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_gymaya.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_iqkmyk.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_bdwmyt.activation::jsonb as activation,
    notes_note_view_bhxygg.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_upxgqj on airspace.airspace_ts.protectedroute_id = routes_route_pt_upxgqj.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_lxjdlt.id) as clazz
  from master_join master_join_qjvoia
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_lxjdlt on master_join_qjvoia.target_id = airspace_airspacelayerclass_lat_lxjdlt.id
  where master_join_qjvoia.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_gymaya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_xtnuyb.id) as geometrycomponent
  from master_join master_join_xdgcmx
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_xtnuyb on master_join_xdgcmx.target_id = airspace_airspacegeometrycomponent_lat_xtnuyb.id
  where master_join_xdgcmx.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_iqkmyk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_lwnvpz.id) as activation
  from master_join master_join_smtcjt
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_lwnvpz on master_join_smtcjt.target_id = airspace_airspaceactivation_lat_lwnvpz.id
  where master_join_smtcjt.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_bdwmyt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pstcth.*) AS annotation
  from master_join master_join_edswhh
  join notes.note_view notes_note_lat_pstcth on master_join_edswhh.target_id = notes_note_lat_pstcth.id
  where master_join_edswhh.source_id = airspace.airspace_ts.id
) as notes_note_view_bhxygg on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_aomale.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_aomale.longitude AS location_longitude,
    geometry_elevatedpoint_view_aomale.latitude AS location_latitude,
    geometry_elevatedpoint_view_aomale.elevation AS location_elevation,
    geometry_elevatedpoint_view_aomale.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aomale.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aomale.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aomale.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_srdaim.title as varchar), '(' || organisation_unit_pt_srdaim.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_srdaim.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_zieqnj.title as varchar), '(' || navaids_points_directionfinder_pt_zieqnj.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_zieqnj.href::text AS aircraftlocator_href,
    service_callsigndetail_view_ewefam.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_qgbyxp.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_nrtpyw.availability::jsonb as availability,
    notes_note_view_juqdjx.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_rsyvsl.clientairport::jsonb as clientairport,
    airspace_airspace_pt_ubppqd.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_vrecka.clientroute::jsonb as clientroute,
    procedure_procedure_pt_ynbcfl.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_lhljuj.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_fkhrsp.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aomale on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_aomale.id
left join organisation.unit_pt organisation_unit_pt_srdaim on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_srdaim.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_zieqnj on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_zieqnj.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_zazetf.id) as callsign
  from master_join master_join_ftqikf
  join service.callsigndetail_view service_callsigndetail_lat_zazetf on master_join_ftqikf.target_id = service_callsigndetail_lat_zazetf.id
  where master_join_ftqikf.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_ewefam on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bwdgqh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bwdgqh.title AS varchar), '(' || service_radiocommunicationchannel_lat_bwdgqh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bwdgqh.href
  )) as radiocommunication  from master_join master_join_pxvmfz
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bwdgqh on master_join_pxvmfz.target_id = service_radiocommunicationchannel_lat_bwdgqh.id
  where master_join_pxvmfz.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_qgbyxp on TRUE
left join lateral(
  select
  from master_join master_join_fztyux
  join shared.contactinformation_view shared_contactinformation_lat_orrjoq on master_join_fztyux.target_id = shared_contactinformation_lat_orrjoq.id
  where master_join_fztyux.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_otvnbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_mvzheq.id) as availability
  from master_join master_join_ckqjiv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_mvzheq on master_join_ckqjiv.target_id = service_serviceoperationalstatus_lat_mvzheq.id
  where master_join_ckqjiv.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_nrtpyw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sykmxo.*) AS annotation
  from master_join master_join_wdccwo
  join notes.note_view notes_note_lat_sykmxo on master_join_wdccwo.target_id = notes_note_lat_sykmxo.id
  where master_join_wdccwo.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_juqdjx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pusvwx.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pusvwx.title AS varchar), '(' || airport_heliport_airportheliport_lat_pusvwx.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pusvwx.href
  )) as clientairport  from master_join master_join_rxbkcs
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pusvwx on master_join_rxbkcs.target_id = airport_heliport_airportheliport_lat_pusvwx.id
  where master_join_rxbkcs.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_rsyvsl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_fsgmww.id,
      'title', coalesce(cast(airspace_airspace_lat_fsgmww.title AS varchar), '(' || airspace_airspace_lat_fsgmww.nilreason[1] || ')'),
      'href', airspace_airspace_lat_fsgmww.href
  )) as clientairspace  from master_join master_join_qwokbo
  join airspace.airspace_pt airspace_airspace_lat_fsgmww on master_join_qwokbo.target_id = airspace_airspace_lat_fsgmww.id
  where master_join_qwokbo.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_ubppqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_isvgih.id) as clientroute
  from master_join master_join_iswvzj
  join routes.routeportion_view routes_routeportion_lat_isvgih on master_join_iswvzj.target_id = routes_routeportion_lat_isvgih.id
  where master_join_iswvzj.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_vrecka on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_vecpxl.id,
      'title', coalesce(cast(procedure_procedure_lat_vecpxl.title AS varchar), '(' || procedure_procedure_lat_vecpxl.nilreason[1] || ')'),
      'href', procedure_procedure_lat_vecpxl.href
  )) as clientprocedure  from master_join master_join_uxhbmn
  join procedure.procedure_pt procedure_procedure_lat_vecpxl on master_join_uxhbmn.target_id = procedure_procedure_lat_vecpxl.id
  where master_join_uxhbmn.source_id = service.airtrafficcontrolservice_ts.id
) as procedure_procedure_pt_ynbcfl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_ifvbrd.id,
      'title', coalesce(cast(holding_holdingpattern_lat_ifvbrd.title AS varchar), '(' || holding_holdingpattern_lat_ifvbrd.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_ifvbrd.href
  )) as clientholding  from master_join master_join_mjjugl
  join holding.holdingpattern_pt holding_holdingpattern_lat_ifvbrd on master_join_mjjugl.target_id = holding_holdingpattern_lat_ifvbrd.id
  where master_join_mjjugl.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_lhljuj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_tvnyyw.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_tvnyyw.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_tvnyyw.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_tvnyyw.href
  )) as clientaerialrefuelling  from master_join master_join_cbyptz
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_tvnyyw on master_join_cbyptz.target_id = aerial_refuelling_aerialrefuelling_lat_tvnyyw.id
  where master_join_cbyptz.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_fkhrsp on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_umkama.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_umkama.longitude AS location_longitude,
    geometry_elevatedpoint_view_umkama.latitude AS location_latitude,
    geometry_elevatedpoint_view_umkama.elevation AS location_elevation,
    geometry_elevatedpoint_view_umkama.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_umkama.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_umkama.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_umkama.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pdzykx.title as varchar), '(' || organisation_unit_pt_pdzykx.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pdzykx.href::text AS serviceprovider_href,
    service_callsigndetail_view_ztzufx.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_kacxao.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_gtabor.availability::jsonb as availability,
    notes_note_view_hvaegf.annotation::jsonb as annotation,
    airspace_airspace_pt_vbsmnd.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_nytxch.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_koqifz.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_umkama on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_umkama.id
left join organisation.unit_pt organisation_unit_pt_pdzykx on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_pdzykx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_jumgat.id) as callsign
  from master_join master_join_jsufmx
  join service.callsigndetail_view service_callsigndetail_lat_jumgat on master_join_jsufmx.target_id = service_callsigndetail_lat_jumgat.id
  where master_join_jsufmx.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_ztzufx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_dzmgnf.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_dzmgnf.title AS varchar), '(' || service_radiocommunicationchannel_lat_dzmgnf.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_dzmgnf.href
  )) as radiocommunication  from master_join master_join_itmfcq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_dzmgnf on master_join_itmfcq.target_id = service_radiocommunicationchannel_lat_dzmgnf.id
  where master_join_itmfcq.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_kacxao on TRUE
left join lateral(
  select
  from master_join master_join_egpayg
  join shared.contactinformation_view shared_contactinformation_lat_ltbtct on master_join_egpayg.target_id = shared_contactinformation_lat_ltbtct.id
  where master_join_egpayg.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_ephcxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_pkazam.id) as availability
  from master_join master_join_cxzoft
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_pkazam on master_join_cxzoft.target_id = service_serviceoperationalstatus_lat_pkazam.id
  where master_join_cxzoft.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_gtabor on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sxtsww.*) AS annotation
  from master_join master_join_dtlwkh
  join notes.note_view notes_note_lat_sxtsww on master_join_dtlwkh.target_id = notes_note_lat_sxtsww.id
  where master_join_dtlwkh.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_hvaegf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_feutlg.id,
      'title', coalesce(cast(airspace_airspace_lat_feutlg.title AS varchar), '(' || airspace_airspace_lat_feutlg.nilreason[1] || ')'),
      'href', airspace_airspace_lat_feutlg.href
  )) as clientairspace  from master_join master_join_mnyyql
  join airspace.airspace_pt airspace_airspace_lat_feutlg on master_join_mnyyql.target_id = airspace_airspace_lat_feutlg.id
  where master_join_mnyyql.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_vbsmnd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_bdqnal.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_bdqnal.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_bdqnal.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_bdqnal.href
  )) as clientaerialrefuelling  from master_join master_join_wnpgda
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_bdqnal on master_join_wnpgda.target_id = aerial_refuelling_aerialrefuelling_lat_bdqnal.id
  where master_join_wnpgda.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_nytxch on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_ytwrur.id) as clientroute
  from master_join master_join_ghnxgn
  join routes.routeportion_view routes_routeportion_lat_ytwrur on master_join_ghnxgn.target_id = routes_routeportion_lat_ytwrur.id
  where master_join_ghnxgn.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_koqifz on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_qrmxqy.availability::jsonb as availability,
    notes_note_view_diuzqj.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_qnoiqu.id) as availability
  from master_join master_join_ajwowa
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_qnoiqu on master_join_ajwowa.target_id = airport_heliport_altimetersourcestatus_lat_qnoiqu.id
  where master_join_ajwowa.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_qrmxqy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xdlwnb.*) AS annotation
  from master_join master_join_headid
  join notes.note_view notes_note_lat_xdlwnb on master_join_headid.target_id = notes_note_lat_xdlwnb.id
  where master_join_headid.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_diuzqj on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_gmefcu.title as varchar), '(' || navaids_points_designatedpoint_pt_gmefcu.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_gmefcu.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_shwzjj.title as varchar), '(' || navaids_points_designatedpoint_pt_shwzjj.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_shwzjj.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_sjsgqc.title as varchar), '(' || navaids_points_navaid_pt_sjsgqc.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_sjsgqc.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yvjeez.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yvjeez.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_yvjeez.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lgzyaj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lgzyaj.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lgzyaj.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_brlqhm.title as varchar), '(' || airport_heliport_airportheliport_pt_brlqhm.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_brlqhm.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bmdvab.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_bmdvab.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bmdvab.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bmdvab.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_ogpnld.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gmefcu on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_gmefcu.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_shwzjj on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_shwzjj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_sjsgqc on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_sjsgqc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yvjeez on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_yvjeez.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lgzyaj on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lgzyaj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_brlqhm on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_brlqhm.id
left join geometry.point_view geometry_point_view_bmdvab on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_bmdvab.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dofffl.*) AS annotation
  from master_join master_join_qfmwoj
  join notes.note_view notes_note_lat_dofffl on master_join_qfmwoj.target_id = notes_note_lat_dofffl.id
  where master_join_qfmwoj.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_ogpnld on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_jwajty.title as varchar), '(' || airport_heliport_runwaydirection_pt_jwajty.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_jwajty.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_gzvpgi.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qwbmby.availability::jsonb as availability,
    notes_note_view_lgpghx.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_jwajty on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_jwajty.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_bliyro.id) as element
  from master_join master_join_abeimx
  join shared.lightelement_view shared_lightelement_lat_bliyro on master_join_abeimx.target_id = shared_lightelement_lat_bliyro.id
  where master_join_abeimx.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_gzvpgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mxcdsm.id) as availability
  from master_join master_join_wqqjum
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mxcdsm on master_join_wqqjum.target_id = airport_heliport_groundlightingavailability_lat_mxcdsm.id
  where master_join_wqqjum.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qwbmby on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pojlst.*) AS annotation
  from master_join master_join_cscviu
  join notes.note_view notes_note_lat_pojlst on master_join_cscviu.target_id = notes_note_lat_pojlst.id
  where master_join_cscviu.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_lgpghx on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_syigzz.title as varchar), '(' || airport_heliport_apron_pt_syigzz.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_syigzz.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xzdjwc.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_xzdjwc.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_tjpoky.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_tjpoky.elevation AS extent_elevation,
    geometry_elevatedsurface_view_tjpoky.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_tjpoky.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_tjpoky.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_tjpoky.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_pinixm.supplyservice::jsonb as supplyservice,
    notes_note_view_iebrhi.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_fnbxdv.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_syigzz on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_syigzz.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xzdjwc on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xzdjwc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_tjpoky on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_tjpoky.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_hrtpvp.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_hrtpvp.title AS varchar), '(' || service_airportsuppliesservice_lat_hrtpvp.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_hrtpvp.href
  )) as supplyservice  from master_join master_join_nqcxoy
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_hrtpvp on master_join_nqcxoy.target_id = service_airportsuppliesservice_lat_hrtpvp.id
  where master_join_nqcxoy.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_pinixm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rukjlc.*) AS annotation
  from master_join master_join_dztebr
  join notes.note_view notes_note_lat_rukjlc on master_join_dztebr.target_id = notes_note_lat_rukjlc.id
  where master_join_dztebr.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_iebrhi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_goodxc.id) as availability
  from master_join master_join_bgpxek
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_goodxc on master_join_bgpxek.target_id = airport_heliport_apronareaavailability_lat_goodxc.id
  where master_join_bgpxek.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_fnbxdv on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_suvrkw.title as varchar), '(' || airport_heliport_apron_pt_suvrkw.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_suvrkw.href::text AS lightedapron_href,
    shared_lightelement_view_ddrkkr.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_zxjcva.availability::jsonb as availability,
    notes_note_view_qqglev.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_suvrkw on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_suvrkw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_gwtsxr.id) as element
  from master_join master_join_vfmiwp
  join shared.lightelement_view shared_lightelement_lat_gwtsxr on master_join_vfmiwp.target_id = shared_lightelement_lat_gwtsxr.id
  where master_join_vfmiwp.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_ddrkkr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mkcqln.id) as availability
  from master_join master_join_yynbbk
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mkcqln on master_join_yynbbk.target_id = airport_heliport_groundlightingavailability_lat_mkcqln.id
  where master_join_yynbbk.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_zxjcva on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sjdswv.*) AS annotation
  from master_join master_join_yamlec
  join notes.note_view notes_note_lat_sjdswv on master_join_yamlec.target_id = notes_note_lat_sjdswv.id
  where master_join_yamlec.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_qqglev on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_kklatj.title as varchar), '(' || airport_heliport_apron_pt_kklatj.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_kklatj.href::text AS markedapron_href,
    airport_heliport_markingelement_view_uimart.element::jsonb as element,
    notes_note_view_tttebl.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_kklatj on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_kklatj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wwzkfd.id) as element
  from master_join master_join_atwwhz
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wwzkfd on master_join_atwwhz.target_id = airport_heliport_markingelement_lat_wwzkfd.id
  where master_join_atwwhz.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_uimart on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tltyio.*) AS annotation
  from master_join master_join_hkutxf
  join notes.note_view notes_note_lat_tltyio on master_join_hkutxf.target_id = notes_note_lat_tltyio.id
  where master_join_hkutxf.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_tttebl on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_egyrax.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_egyrax.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_hfzhtw.title as varchar), '(' || airport_heliport_airportheliport_pt_hfzhtw.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hfzhtw.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_smaeqm.contaminant::jsonb as contaminant,
    notes_note_view_gwjjai.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_gtywqr.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_egyrax on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_egyrax.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hfzhtw on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hfzhtw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_alrjjw.id) as contaminant
  from master_join master_join_qxtfts
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_alrjjw on master_join_qxtfts.target_id = airport_heliport_aproncontamination_lat_alrjjw.id
  where master_join_qxtfts.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_smaeqm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xocgag.*) AS annotation
  from master_join master_join_atmsyu
  join notes.note_view notes_note_lat_xocgag on master_join_atmsyu.target_id = notes_note_lat_xocgag.id
  where master_join_atmsyu.source_id = airport_heliport.apron_ts.id
) as notes_note_view_gwjjai on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_djlnhp.id) as availability
  from master_join master_join_xurzkx
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_djlnhp on master_join_xurzkx.target_id = airport_heliport_apronareaavailability_lat_djlnhp.id
  where master_join_xurzkx.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_gtywqr on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_tjtunp.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_tjtunp.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedcurve_view_kryrcz.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_kryrcz.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_kryrcz.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_kryrcz.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_kryrcz.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_kryrcz.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_movirr.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_movirr.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_movirr.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_movirr.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_movirr.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_movirr.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_dhdgvl.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_dhdgvl.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_dhdgvl.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_dhdgvl.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_dhdgvl.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_dhdgvl.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_dhdgvl.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_dhdgvl.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_ustyit.runwaydirection::jsonb as runwaydirection,
    notes_note_view_ogknqm.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_tjtunp on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_tjtunp.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_kryrcz on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_kryrcz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_movirr on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_movirr.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dhdgvl on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_dhdgvl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_hitrbb.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_hitrbb.title AS varchar), '(' || airport_heliport_runwaydirection_lat_hitrbb.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_hitrbb.href
  )) as runwaydirection  from master_join master_join_mzuzoe
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_hitrbb on master_join_mzuzoe.target_id = airport_heliport_runwaydirection_lat_hitrbb.id
  where master_join_mzuzoe.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_ustyit on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thjkcy.*) AS annotation
  from master_join master_join_jawbnd
  join notes.note_view notes_note_lat_thjkcy on master_join_jawbnd.target_id = notes_note_lat_thjkcy.id
  where master_join_jawbnd.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_ogknqm on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegType
-- ['procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yhkgce.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_yhkgce.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rooacd.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rooacd.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_gnkumo.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_gnkumo.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_clulkg.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_clulkg.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_mybxlr.title as varchar), '(' || navaids_points_angleindication_pt_mybxlr.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_mybxlr.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_cdyaye.title as varchar), '(' || navaids_points_distanceindication_pt_cdyaye.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_cdyaye.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_obbkeb.id)::jsonb AS holding,
    procedure_holdinguse_view_obbkeb.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_pgbqrq.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_pgbqrq.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_pgbqrq.href::text AS approach_href,
    shared_aircraftcharacteristic_view_njfyce.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_laueag.designsurface::jsonb as designsurface,
    notes_note_view_kloaok.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yhkgce on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_yhkgce.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rooacd on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rooacd.id
left join geometry.curve_view geometry_curve_view_clulkg on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_clulkg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_gnkumo on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_gnkumo.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_mybxlr on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_mybxlr.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_cdyaye on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_cdyaye.id
left join procedure.holdinguse_view procedure_holdinguse_view_obbkeb on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_obbkeb.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_pgbqrq on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_pgbqrq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_yqtnpy.id) as aircraftcategory
  from master_join master_join_zfkssp
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_yqtnpy on master_join_zfkssp.target_id = shared_aircraftcharacteristic_lat_yqtnpy.id
  where master_join_zfkssp.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_njfyce on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dxywnp.id) as designsurface
  from master_join master_join_jlwyxc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_dxywnp on master_join_jlwyxc.target_id = shared_obstacleassessmentarea_lat_dxywnp.id
  where master_join_jlwyxc.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_laueag on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hgjwkt.*) AS annotation
  from master_join master_join_tfqwqa
  join notes.note_view notes_note_lat_hgjwkt on master_join_tfqwqa.target_id = notes_note_lat_hgjwkt.id
  where master_join_tfqwqa.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_kloaok on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegType
-- ['procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_twnxme.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_twnxme.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rpeduz.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_rpeduz.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dyicfu.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_dyicfu.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_wnealc.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_wnealc.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ufezes.title as varchar), '(' || navaids_points_angleindication_pt_ufezes.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ufezes.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_rvlrbo.title as varchar), '(' || navaids_points_distanceindication_pt_rvlrbo.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_rvlrbo.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_kaclhk.id)::jsonb AS holding,
    procedure_holdinguse_view_kaclhk.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentarrival_pt_kfejbc.title as varchar), '(' || procedure_standardinstrumentarrival_pt_kfejbc.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_kfejbc.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_vsjptn.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_oqlizu.designsurface::jsonb as designsurface,
    notes_note_view_vxesny.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_twnxme on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_twnxme.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rpeduz on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_rpeduz.id
left join geometry.curve_view geometry_curve_view_wnealc on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_wnealc.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dyicfu on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_dyicfu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ufezes on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_ufezes.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_rvlrbo on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_rvlrbo.id
left join procedure.holdinguse_view procedure_holdinguse_view_kaclhk on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_kaclhk.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_kfejbc on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_kfejbc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_kswkkl.id) as aircraftcategory
  from master_join master_join_fduytw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_kswkkl on master_join_fduytw.target_id = shared_aircraftcharacteristic_lat_kswkkl.id
  where master_join_fduytw.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_vsjptn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_jlyxzz.id) as designsurface
  from master_join master_join_uzhvez
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_jlyxzz on master_join_uzhvez.target_id = shared_obstacleassessmentarea_lat_jlyxzz.id
  where master_join_uzhvez.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_oqlizu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_finnfj.*) AS annotation
  from master_join master_join_rysxla
  join notes.note_view notes_note_lat_finnfj on master_join_rysxla.target_id = notes_note_lat_finnfj.id
  where master_join_rysxla.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_vxesny on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_upptjf.title as varchar), '(' || organisation_organisationauthority_pt_upptjf.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_upptjf.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_ekwekq.title as varchar), '(' || airspace_airspace_pt_ekwekq.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_ekwekq.href::text AS assignedairspace_href,
    notes_note_view_nofxxp.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_upptjf on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_upptjf.id
left join airspace.airspace_pt airspace_airspace_pt_ekwekq on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_ekwekq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rclvgi.*) AS annotation
  from master_join master_join_ejbstl
  join notes.note_view notes_note_lat_rclvgi on master_join_ejbstl.target_id = notes_note_lat_rclvgi.id
  where master_join_ejbstl.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_nofxxp on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_ctonda.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ctonda.longitude AS location_longitude,
    geometry_elevatedpoint_view_ctonda.latitude AS location_latitude,
    geometry_elevatedpoint_view_ctonda.elevation AS location_elevation,
    geometry_elevatedpoint_view_ctonda.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ctonda.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ctonda.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ctonda.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ojufhq.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hbxrqq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_bypllr.availability::jsonb as availability,
    notes_note_view_qeptfd.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ctonda on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_ctonda.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_cbysic.id) as authority
  from master_join master_join_jctnoz
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_cbysic on master_join_jctnoz.target_id = navaids_points_authorityfornavaidequipment_lat_cbysic.id
  where master_join_jctnoz.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_ojufhq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_wtdmpo.id) as monitoring
  from master_join master_join_zyllyk
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_wtdmpo on master_join_zyllyk.target_id = navaids_points_navaidequipmentmonitoring_lat_wtdmpo.id
  where master_join_zyllyk.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hbxrqq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_pqeutc.id) as availability
  from master_join master_join_vsyuzk
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_pqeutc on master_join_vsyuzk.target_id = navaids_points_navaidoperationalstatus_lat_pqeutc.id
  where master_join_vsyuzk.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_bypllr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uvovih.*) AS annotation
  from master_join master_join_tjyzkn
  join notes.note_view notes_note_lat_uvovih on master_join_tjyzkn.target_id = notes_note_lat_uvovih.id
  where master_join_tjyzkn.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_qeptfd on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointType
-- ['routes.routeportion_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_dzbtyj.title as varchar), '(' || navaids_points_designatedpoint_pt_dzbtyj.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dzbtyj.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_gnyxbr.title as varchar), '(' || navaids_points_navaid_pt_gnyxbr.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_gnyxbr.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_wurdrd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_wurdrd.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_wurdrd.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_saxqzw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_saxqzw.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_saxqzw.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zqmetq.title as varchar), '(' || airport_heliport_airportheliport_pt_zqmetq.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_zqmetq.href::text AS locationairportreferencepoint_href,
    geometry_point_view_wlayds.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_wlayds.longitude AS locationposition_longitude,
    geometry_point_view_wlayds.latitude AS locationposition_latitude,
    geometry_point_view_wlayds.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_vmldbg.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_vmldbg.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_uvmrpe.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dzbtyj on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dzbtyj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gnyxbr on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_gnyxbr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_wurdrd on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_wurdrd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_saxqzw on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_saxqzw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zqmetq on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_zqmetq.id
left join geometry.point_view geometry_point_view_wlayds on routes.changeoverpoint_ts.location_position_id = geometry_point_view_wlayds.id
left join routes.routeportion_view routes_routeportion_view_vmldbg on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_vmldbg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srumao.*) AS annotation
  from master_join master_join_llcwrl
  join notes.note_view notes_note_lat_srumao on master_join_llcwrl.target_id = notes_note_lat_srumao.id
  where master_join_llcwrl.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_uvmrpe on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_ozxcyj.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_ozxcyj.longitude AS position_longitude,
    geometry_elevatedpoint_view_ozxcyj.latitude AS position_latitude,
    geometry_elevatedpoint_view_ozxcyj.elevation AS position_elevation,
    geometry_elevatedpoint_view_ozxcyj.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ozxcyj.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ozxcyj.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ozxcyj.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_qswqva.title as varchar), '(' || airport_heliport_airportheliport_pt_qswqva.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_qswqva.href::text AS airportheliport_href,
    notes_note_view_ptmsbd.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ozxcyj on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_ozxcyj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qswqva on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_qswqva.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrfrzo.*) AS annotation
  from master_join master_join_uierku
  join notes.note_view notes_note_lat_hrfrzo on master_join_uierku.target_id = notes_note_lat_hrfrzo.id
  where master_join_uierku.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_ptmsbd on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_xndnxo.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_xndnxo.longitude AS position_longitude,
    geometry_elevatedpoint_view_xndnxo.latitude AS position_latitude,
    geometry_elevatedpoint_view_xndnxo.elevation AS position_elevation,
    geometry_elevatedpoint_view_xndnxo.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_xndnxo.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_xndnxo.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_xndnxo.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_zwpbvj.title as varchar), '(' || airport_heliport_airportheliport_pt_zwpbvj.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_zwpbvj.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_rbigfd.title as varchar), '(' || navaids_points_vor_pt_rbigfd.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_rbigfd.href::text AS checkpointfacility_href,
    notes_note_view_mczsrr.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xndnxo on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_xndnxo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zwpbvj on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_zwpbvj.id
left join navaids_points.vor_pt navaids_points_vor_pt_rbigfd on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_rbigfd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_deuvkc.*) AS annotation
  from master_join master_join_klmslv
  join notes.note_view notes_note_lat_deuvkc on master_join_klmslv.target_id = notes_note_lat_deuvkc.id
  where master_join_klmslv.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_mczsrr on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaType
-- ['geometry.surface_view', 'procedure.approachcondition_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_savjat.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_savjat.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_aqxsyf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_aqxsyf.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_aqxsyf.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_trnvgd.id)::jsonb AS aircraftcategory,
    shared_aircraftcharacteristic_view_trnvgd.annotation::jsonb AS aircraftcategory_annotation,
    procedure_approachcondition_view_cxiuwi.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_jddfmo.designsurface::jsonb as designsurface,
    notes_note_view_kwhzcj.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_savjat on public.circlingarea_ts.extent_id = geometry_surface_view_savjat.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_aqxsyf on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_aqxsyf.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_trnvgd on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_trnvgd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_ihhaiv.id) as condition
  from master_join master_join_ztgawa
  join procedure.approachcondition_view procedure_approachcondition_lat_ihhaiv on master_join_ztgawa.target_id = procedure_approachcondition_lat_ihhaiv.id
  where master_join_ztgawa.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_cxiuwi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bezjax.id) as designsurface
  from master_join master_join_aoqoyj
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_bezjax on master_join_aoqoyj.target_id = shared_obstacleassessmentarea_lat_bezjax.id
  where master_join_aoqoyj.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_jddfmo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ziztmr.*) AS annotation
  from master_join master_join_vjmtsv
  join notes.note_view notes_note_lat_ziztmr on master_join_vjmtsv.target_id = notes_note_lat_ziztmr.id
  where master_join_vjmtsv.source_id = public.circlingarea_ts.id
) as notes_note_view_kwhzcj on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_lnwtoj.title as varchar), '(' || airport_heliport_deicingarea_pt_lnwtoj.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_lnwtoj.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_zdbxzi.element::jsonb as element,
    notes_note_view_despxf.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_lnwtoj on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_lnwtoj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_tsouhb.id) as element
  from master_join master_join_yznlfs
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_tsouhb on master_join_yznlfs.target_id = airport_heliport_markingelement_lat_tsouhb.id
  where master_join_yznlfs.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_zdbxzi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_blblgd.*) AS annotation
  from master_join master_join_lvhcid
  join notes.note_view notes_note_lat_blblgd on master_join_lvhcid.target_id = notes_note_lat_blblgd.id
  where master_join_lvhcid.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_despxf on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_nfcsya.title as varchar), '(' || airport_heliport_apron_pt_nfcsya.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_nfcsya.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_urxfce.title as varchar), '(' || airport_heliport_taxiway_pt_urxfce.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_urxfce.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_aosdty.title as varchar), '(' || airport_heliport_aircraftstand_pt_aosdty.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_aosdty.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_pwhouk.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_pwhouk.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_drvmwo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_drvmwo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_drvmwo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_drvmwo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_drvmwo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_drvmwo.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_lwowoq.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_paedwl.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_nfcsya on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_nfcsya.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_urxfce on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_urxfce.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_aosdty on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_aosdty.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_pwhouk on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_pwhouk.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_drvmwo on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_drvmwo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qvlgtx.*) AS annotation
  from master_join master_join_eievun
  join notes.note_view notes_note_lat_qvlgtx on master_join_eievun.target_id = notes_note_lat_qvlgtx.id
  where master_join_eievun.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_lwowoq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_xxaafr.id) as availability
  from master_join master_join_lxpcmt
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_xxaafr on master_join_lxpcmt.target_id = airport_heliport_apronareaavailability_lat_xxaafr.id
  where master_join_lxpcmt.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_paedwl on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegType
-- ['procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'procedure.departurearrivalcondition_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ipombb.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_ipombb.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wilbpq.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_wilbpq.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_abecef.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_abecef.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_opyymm.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_opyymm.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_iwvsmq.title as varchar), '(' || navaids_points_angleindication_pt_iwvsmq.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_iwvsmq.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_flfcwn.title as varchar), '(' || navaids_points_distanceindication_pt_flfcwn.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_flfcwn.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_krjycg.id)::jsonb AS holding,
    procedure_holdinguse_view_krjycg.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_guisrv.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_guisrv.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_guisrv.href::text AS departure_href,
    shared_aircraftcharacteristic_view_plbjni.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_djlvcs.designsurface::jsonb as designsurface,
    notes_note_view_cxmbcd.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_hitmsd.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ipombb on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ipombb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wilbpq on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_wilbpq.id
left join geometry.curve_view geometry_curve_view_opyymm on procedure.departureleg_ts.trajectory_id = geometry_curve_view_opyymm.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_abecef on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_abecef.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_iwvsmq on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_iwvsmq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_flfcwn on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_flfcwn.id
left join procedure.holdinguse_view procedure_holdinguse_view_krjycg on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_krjycg.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_guisrv on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_guisrv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_sfjqlj.id) as aircraftcategory
  from master_join master_join_ycmlji
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_sfjqlj on master_join_ycmlji.target_id = shared_aircraftcharacteristic_lat_sfjqlj.id
  where master_join_ycmlji.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_plbjni on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_yqdecb.id) as designsurface
  from master_join master_join_uyogaa
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_yqdecb on master_join_uyogaa.target_id = shared_obstacleassessmentarea_lat_yqdecb.id
  where master_join_uyogaa.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_djlvcs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klfxxd.*) AS annotation
  from master_join master_join_vhmiun
  join notes.note_view notes_note_lat_klfxxd on master_join_vhmiun.target_id = notes_note_lat_klfxxd.id
  where master_join_vhmiun.source_id = procedure.departureleg_ts.id
) as notes_note_view_cxmbcd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_vmzbad.id) as condition
  from master_join master_join_dlnfip
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_vmzbad on master_join_dlnfip.target_id = procedure_departurearrivalcondition_lat_vmzbad.id
  where master_join_dlnfip.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_hitmsd on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as aixmname,
    geometry_point_view_hlyqqj.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_hlyqqj.longitude AS location_longitude,
    geometry_point_view_hlyqqj.latitude AS location_latitude,
    geometry_point_view_hlyqqj.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mqakas.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mqakas.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_mqakas.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_adrgmo.title as varchar), '(' || airport_heliport_airportheliport_pt_adrgmo.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_adrgmo.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rlinkx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rlinkx.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rlinkx.href::text AS runwaypoint_href,
    notes_note_view_epewvg.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_hlyqqj on navaids_points.designatedpoint_ts.location_id = geometry_point_view_hlyqqj.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mqakas on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_mqakas.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_adrgmo on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_adrgmo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rlinkx on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rlinkx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_urcwxj.*) AS annotation
  from master_join master_join_pstvrv
  join notes.note_view notes_note_lat_urcwxj on master_join_pstvrv.target_id = notes_note_lat_urcwxj.id
  where master_join_pstvrv.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_epewvg on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_asiijs.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_asiijs.longitude AS location_longitude,
    geometry_elevatedpoint_view_asiijs.latitude AS location_latitude,
    geometry_elevatedpoint_view_asiijs.elevation AS location_elevation,
    geometry_elevatedpoint_view_asiijs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_asiijs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_asiijs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_asiijs.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_vbltya.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_aixaee.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_tgkied.availability::jsonb as availability,
    notes_note_view_jezkwl.annotation::jsonb as annotation,
    service_informationservice_pt_kixtgf.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_asiijs on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_asiijs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_gfkrdf.id) as authority
  from master_join master_join_ilfndi
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_gfkrdf on master_join_ilfndi.target_id = navaids_points_authorityfornavaidequipment_lat_gfkrdf.id
  where master_join_ilfndi.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_vbltya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zdfqwd.id) as monitoring
  from master_join master_join_xxvrqs
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zdfqwd on master_join_xxvrqs.target_id = navaids_points_navaidequipmentmonitoring_lat_zdfqwd.id
  where master_join_xxvrqs.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_aixaee on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_cpfvpg.id) as availability
  from master_join master_join_hzknlj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_cpfvpg on master_join_hzknlj.target_id = navaids_points_navaidoperationalstatus_lat_cpfvpg.id
  where master_join_hzknlj.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_tgkied on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wnbxeu.*) AS annotation
  from master_join master_join_xhogqy
  join notes.note_view notes_note_lat_wnbxeu on master_join_xhogqy.target_id = notes_note_lat_wnbxeu.id
  where master_join_xhogqy.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_jezkwl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_irutto.id,
      'title', coalesce(cast(service_informationservice_lat_irutto.title AS varchar), '(' || service_informationservice_lat_irutto.nilreason[1] || ')'),
      'href', service_informationservice_lat_irutto.href
  )) as informationprovision  from master_join master_join_ssdidd
  join service.informationservice_pt service_informationservice_lat_irutto on master_join_ssdidd.target_id = service_informationservice_lat_irutto.id
  where master_join_ssdidd.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_kixtgf on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_bogtxh.title as varchar), '(' || navaids_points_designatedpoint_pt_bogtxh.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_bogtxh.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ynciir.title as varchar), '(' || navaids_points_designatedpoint_pt_ynciir.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ynciir.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_bfnuni.title as varchar), '(' || navaids_points_navaid_pt_bfnuni.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_bfnuni.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_joxluw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_joxluw.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_joxluw.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_swwrea.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_swwrea.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_swwrea.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gudnzt.title as varchar), '(' || airport_heliport_airportheliport_pt_gudnzt.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_gudnzt.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_dzujgw.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_dzujgw.longitude AS pointchoiceposition_longitude,
    geometry_point_view_dzujgw.latitude AS pointchoiceposition_latitude,
    geometry_point_view_dzujgw.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_wnabzj.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bogtxh on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_bogtxh.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ynciir on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ynciir.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_bfnuni on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_bfnuni.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_joxluw on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_joxluw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_swwrea on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_swwrea.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gudnzt on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_gudnzt.id
left join geometry.point_view geometry_point_view_dzujgw on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_dzujgw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vakmjf.*) AS annotation
  from master_join master_join_gyiyon
  join notes.note_view notes_note_lat_vakmjf on master_join_gyiyon.target_id = notes_note_lat_vakmjf.id
  where master_join_gyiyon.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_wnabzj on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMEType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_ojcksf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ojcksf.longitude AS location_longitude,
    geometry_elevatedpoint_view_ojcksf.latitude AS location_latitude,
    geometry_elevatedpoint_view_ojcksf.elevation AS location_elevation,
    geometry_elevatedpoint_view_ojcksf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ojcksf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ojcksf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ojcksf.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fxzpmw.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hflucw.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_dlmlmm.availability::jsonb as availability,
    notes_note_view_ftizmt.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ojcksf on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_ojcksf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dsiuxk.id) as authority
  from master_join master_join_fxahfb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dsiuxk on master_join_fxahfb.target_id = navaids_points_authorityfornavaidequipment_lat_dsiuxk.id
  where master_join_fxahfb.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_fxzpmw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_uewbbb.id) as monitoring
  from master_join master_join_ijbiiq
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_uewbbb on master_join_ijbiiq.target_id = navaids_points_navaidequipmentmonitoring_lat_uewbbb.id
  where master_join_ijbiiq.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hflucw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_pziocq.id) as availability
  from master_join master_join_tcuzhf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_pziocq on master_join_tcuzhf.target_id = navaids_points_navaidoperationalstatus_lat_pziocq.id
  where master_join_tcuzhf.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_dlmlmm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hxhcbf.*) AS annotation
  from master_join master_join_hxoqyy
  join notes.note_view notes_note_lat_hxhcbf on master_join_hxoqyy.target_id = notes_note_lat_hxhcbf.id
  where master_join_hxoqyy.source_id = navaids_points.dme_ts.id
) as notes_note_view_ftizmt on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_pamfrp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pamfrp.longitude AS location_longitude,
    geometry_elevatedpoint_view_pamfrp.latitude AS location_latitude,
    geometry_elevatedpoint_view_pamfrp.elevation AS location_elevation,
    geometry_elevatedpoint_view_pamfrp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pamfrp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pamfrp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pamfrp.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hwfngq.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jsoqgk.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_lyyoaw.availability::jsonb as availability,
    notes_note_view_jyoqfe.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pamfrp on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_pamfrp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ttdutq.id) as authority
  from master_join master_join_mhvulb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ttdutq on master_join_mhvulb.target_id = navaids_points_authorityfornavaidequipment_lat_ttdutq.id
  where master_join_mhvulb.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_hwfngq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mdkhay.id) as monitoring
  from master_join master_join_uwxfnj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mdkhay on master_join_uwxfnj.target_id = navaids_points_navaidequipmentmonitoring_lat_mdkhay.id
  where master_join_uwxfnj.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jsoqgk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vmwtly.id) as availability
  from master_join master_join_jznfhs
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vmwtly on master_join_jznfhs.target_id = navaids_points_navaidoperationalstatus_lat_vmwtly.id
  where master_join_jznfhs.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_lyyoaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytmfdq.*) AS annotation
  from master_join master_join_iygcfg
  join notes.note_view notes_note_lat_ytmfdq on master_join_iygcfg.target_id = notes_note_lat_ytmfdq.id
  where master_join_iygcfg.source_id = navaids_points.elevation_ts.id
) as notes_note_view_jyoqfe on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegType
-- ['procedure.approachcondition_view', 'procedure.holdinguse_view', 'geometry.point_view', 'notes.note_view', 'public.fasdatablock_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vhwiuo.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_vhwiuo.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kbflmc.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_kbflmc.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ulmioi.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_ulmioi.annotation::jsonb AS arccentre_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_itniqt.id)::jsonb AS visualdescentpoint,
    navaids_points_terminalsegmentpoint_view_itniqt.annotation::jsonb AS visualdescentpoint_annotation,
    geometry_curve_view_frykkv.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_frykkv.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_slzqtj.title as varchar), '(' || navaids_points_angleindication_pt_slzqtj.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_slzqtj.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_rneohp.title as varchar), '(' || navaids_points_distanceindication_pt_rneohp.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_rneohp.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_metmvj.id)::jsonb AS holding,
    procedure_holdinguse_view_metmvj.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_fsevzz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_fsevzz.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_fsevzz.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_rqksao.title as varchar), '(' || navaids_points_designatedpoint_pt_rqksao.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_rqksao.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wzmjqs.title as varchar), '(' || navaids_points_navaid_pt_wzmjqs.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_wzmjqs.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xbfxfz.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xbfxfz.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_xbfxfz.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_eakphj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_eakphj.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_eakphj.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xulpib.title as varchar), '(' || airport_heliport_airportheliport_pt_xulpib.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_xulpib.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_enjhmh.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_enjhmh.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_enjhmh.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_enjhmh.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_fphokn.id)::jsonb AS fasdata,
    public_fasdatablock_view_fphokn.annotation::jsonb AS fasdata_annotation,
    shared_aircraftcharacteristic_view_zcntzy.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_myhdbx.designsurface::jsonb as designsurface,
    notes_note_view_sooaqx.annotation::jsonb as annotation,
    procedure_approachcondition_view_nkwkfp.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vhwiuo on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vhwiuo.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kbflmc on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_kbflmc.id
left join geometry.curve_view geometry_curve_view_frykkv on procedure.finalleg_ts.trajectory_id = geometry_curve_view_frykkv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ulmioi on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ulmioi.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_slzqtj on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_slzqtj.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_rneohp on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_rneohp.id
left join procedure.holdinguse_view procedure_holdinguse_view_metmvj on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_metmvj.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_fsevzz on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_fsevzz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rqksao on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_rqksao.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wzmjqs on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_wzmjqs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xbfxfz on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xbfxfz.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_eakphj on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_eakphj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xulpib on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xulpib.id
left join geometry.point_view geometry_point_view_enjhmh on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_enjhmh.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_itniqt on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_itniqt.id
left join public.fasdatablock_view public_fasdatablock_view_fphokn on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_fphokn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_iovhjn.id) as aircraftcategory
  from master_join master_join_xnmooq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_iovhjn on master_join_xnmooq.target_id = shared_aircraftcharacteristic_lat_iovhjn.id
  where master_join_xnmooq.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_zcntzy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hbccsb.id) as designsurface
  from master_join master_join_jzzyta
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hbccsb on master_join_jzzyta.target_id = shared_obstacleassessmentarea_lat_hbccsb.id
  where master_join_jzzyta.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_myhdbx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jgiuhv.*) AS annotation
  from master_join master_join_uunuwz
  join notes.note_view notes_note_lat_jgiuhv on master_join_uunuwz.target_id = notes_note_lat_jgiuhv.id
  where master_join_uunuwz.source_id = procedure.finalleg_ts.id
) as notes_note_view_sooaqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_pwrmhw.id) as condition
  from master_join master_join_ltttsf
  join procedure.approachcondition_view procedure_approachcondition_lat_pwrmhw on master_join_ltttsf.target_id = procedure_approachcondition_lat_pwrmhw.id
  where master_join_ltttsf.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_nkwkfp on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_puzxyh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_puzxyh.longitude AS location_longitude,
    geometry_elevatedpoint_view_puzxyh.latitude AS location_latitude,
    geometry_elevatedpoint_view_puzxyh.elevation AS location_elevation,
    geometry_elevatedpoint_view_puzxyh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_puzxyh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_puzxyh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_puzxyh.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ttcjpf.title as varchar), '(' || organisation_unit_pt_ttcjpf.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ttcjpf.href::text AS serviceprovider_href,
    service_callsigndetail_view_kvevdq.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_sxogwn.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_vadneg.availability::jsonb as availability,
    notes_note_view_oibjsv.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_owclnh.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_puzxyh on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_puzxyh.id
left join organisation.unit_pt organisation_unit_pt_ttcjpf on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_ttcjpf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_mzbdzb.id) as callsign
  from master_join master_join_fxfyka
  join service.callsigndetail_view service_callsigndetail_lat_mzbdzb on master_join_fxfyka.target_id = service_callsigndetail_lat_mzbdzb.id
  where master_join_fxfyka.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_kvevdq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mhugpz.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mhugpz.title AS varchar), '(' || service_radiocommunicationchannel_lat_mhugpz.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mhugpz.href
  )) as radiocommunication  from master_join master_join_xfjkkj
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mhugpz on master_join_xfjkkj.target_id = service_radiocommunicationchannel_lat_mhugpz.id
  where master_join_xfjkkj.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_sxogwn on TRUE
left join lateral(
  select
  from master_join master_join_mmlkkw
  join shared.contactinformation_view shared_contactinformation_lat_pgclye on master_join_mmlkkw.target_id = shared_contactinformation_lat_pgclye.id
  where master_join_mmlkkw.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_xhfgio on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_degqbn.id) as availability
  from master_join master_join_eohgrm
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_degqbn on master_join_eohgrm.target_id = service_serviceoperationalstatus_lat_degqbn.id
  where master_join_eohgrm.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_vadneg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tcsjoo.*) AS annotation
  from master_join master_join_kceejm
  join notes.note_view notes_note_lat_tcsjoo on master_join_kceejm.target_id = notes_note_lat_tcsjoo.id
  where master_join_kceejm.source_id = service.firefightingservice_ts.id
) as notes_note_view_oibjsv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_cleqyt.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_cleqyt.title AS varchar), '(' || airport_heliport_airportheliport_lat_cleqyt.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_cleqyt.href
  )) as airportheliport  from master_join master_join_tpzzzm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_cleqyt on master_join_tpzzzm.target_id = airport_heliport_airportheliport_lat_cleqyt.id
  where master_join_tpzzzm.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_owclnh on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionType
-- ['routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view', 'notes.note_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_kfinft.id)::jsonb AS flight,
    routes_flightconditioncombination_view_kfinft.annotation::jsonb AS flight_annotation,
    routes_flightrestrictionroute_view_oycrvn.regulatedroute::jsonb as regulatedroute,
    notes_note_view_snvvzi.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_kfinft on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_kfinft.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_gahlxk.id) as regulatedroute
  from master_join master_join_efmlar
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_gahlxk on master_join_efmlar.target_id = routes_flightrestrictionroute_lat_gahlxk.id
  where master_join_efmlar.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_oycrvn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mtboog.*) AS annotation
  from master_join master_join_juyrvk
  join notes.note_view notes_note_lat_mtboog on master_join_juyrvk.target_id = notes_note_lat_mtboog.id
  where master_join_juyrvk.source_id = routes.flightrestriction_ts.id
) as notes_note_view_snvvzi on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_uzdaur.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_uzdaur.elevation AS extent_elevation,
    geometry_elevatedsurface_view_uzdaur.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_uzdaur.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_uzdaur.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_uzdaur.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_zywgta.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uzdaur on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_uzdaur.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rrapah.*) AS annotation
  from master_join master_join_ykjmep
  join notes.note_view notes_note_lat_rrapah on master_join_ykjmep.target_id = notes_note_lat_rrapah.id
  where master_join_ykjmep.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_zywgta on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_hkmxpc.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_hkmxpc.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_lnjmyv.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_hkmxpc on airspace.geoborder_ts.border_id = geometry_curve_view_hkmxpc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drvbjj.*) AS annotation
  from master_join master_join_wundrw
  join notes.note_view notes_note_lat_drvbjj on master_join_wundrw.target_id = notes_note_lat_drvbjj.id
  where master_join_wundrw.source_id = airspace.geoborder_ts.id
) as notes_note_view_lnjmyv on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_tnfcwl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tnfcwl.longitude AS location_longitude,
    geometry_elevatedpoint_view_tnfcwl.latitude AS location_latitude,
    geometry_elevatedpoint_view_tnfcwl.elevation AS location_elevation,
    geometry_elevatedpoint_view_tnfcwl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tnfcwl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tnfcwl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tnfcwl.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_nqbtnz.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tqdtez.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_fpfocb.availability::jsonb as availability,
    notes_note_view_dcukow.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tnfcwl on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_tnfcwl.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zchqju.id) as authority
  from master_join master_join_ynavgt
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zchqju on master_join_ynavgt.target_id = navaids_points_authorityfornavaidequipment_lat_zchqju.id
  where master_join_ynavgt.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_nqbtnz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_tbrkxi.id) as monitoring
  from master_join master_join_lkcrza
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_tbrkxi on master_join_lkcrza.target_id = navaids_points_navaidequipmentmonitoring_lat_tbrkxi.id
  where master_join_lkcrza.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tqdtez on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_csymae.id) as availability
  from master_join master_join_fneuxe
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_csymae on master_join_fneuxe.target_id = navaids_points_navaidoperationalstatus_lat_csymae.id
  where master_join_fneuxe.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_fpfocb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nhmcuo.*) AS annotation
  from master_join master_join_jqkxhp
  join notes.note_view notes_note_lat_nhmcuo on master_join_jqkxhp.target_id = notes_note_lat_nhmcuo.id
  where master_join_jqkxhp.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_dcukow on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ykrqmw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ykrqmw.longitude AS location_longitude,
    geometry_elevatedpoint_view_ykrqmw.latitude AS location_latitude,
    geometry_elevatedpoint_view_ykrqmw.elevation AS location_elevation,
    geometry_elevatedpoint_view_ykrqmw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ykrqmw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ykrqmw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ykrqmw.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ncdtqm.title as varchar), '(' || organisation_unit_pt_ncdtqm.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ncdtqm.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mhszlf.title as varchar), '(' || airport_heliport_airportheliport_pt_mhszlf.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_mhszlf.href::text AS clientairport_href,
    service_callsigndetail_view_ndydxu.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_vxzlsh.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_waoqhc.availability::jsonb as availability,
    notes_note_view_wrdznb.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ykrqmw on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_ykrqmw.id
left join organisation.unit_pt organisation_unit_pt_ncdtqm on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ncdtqm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mhszlf on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_mhszlf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tfqbia.id) as callsign
  from master_join master_join_cpmopm
  join service.callsigndetail_view service_callsigndetail_lat_tfqbia on master_join_cpmopm.target_id = service_callsigndetail_lat_tfqbia.id
  where master_join_cpmopm.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_ndydxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_zcoyej.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_zcoyej.title AS varchar), '(' || service_radiocommunicationchannel_lat_zcoyej.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_zcoyej.href
  )) as radiocommunication  from master_join master_join_vzpccf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_zcoyej on master_join_vzpccf.target_id = service_radiocommunicationchannel_lat_zcoyej.id
  where master_join_vzpccf.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_vxzlsh on TRUE
left join lateral(
  select
  from master_join master_join_knruep
  join shared.contactinformation_view shared_contactinformation_lat_eaupkj on master_join_knruep.target_id = shared_contactinformation_lat_eaupkj.id
  where master_join_knruep.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_hbthdd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_tstbei.id) as availability
  from master_join master_join_boaxpj
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_tstbei on master_join_boaxpj.target_id = service_serviceoperationalstatus_lat_tstbei.id
  where master_join_boaxpj.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_waoqhc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cqjnea.*) AS annotation
  from master_join master_join_wlqzjg
  join notes.note_view notes_note_lat_cqjnea on master_join_wlqzjg.target_id = notes_note_lat_cqjnea.id
  where master_join_wlqzjg.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_wrdznb on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_mokprd.title as varchar), '(' || airport_heliport_guidanceline_pt_mokprd.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_mokprd.href::text AS lightedguidanceline_href,
    shared_lightelement_view_olyivo.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_uuorzq.availability::jsonb as availability,
    notes_note_view_chupus.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_mokprd on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_mokprd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_maevfo.id) as element
  from master_join master_join_xakjlj
  join shared.lightelement_view shared_lightelement_lat_maevfo on master_join_xakjlj.target_id = shared_lightelement_lat_maevfo.id
  where master_join_xakjlj.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_olyivo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_fbcksc.id) as availability
  from master_join master_join_fxsabx
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_fbcksc on master_join_fxsabx.target_id = airport_heliport_groundlightingavailability_lat_fbcksc.id
  where master_join_fxsabx.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_uuorzq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_swpygh.*) AS annotation
  from master_join master_join_ueqlww
  join notes.note_view notes_note_lat_swpygh on master_join_ueqlww.target_id = notes_note_lat_swpygh.id
  where master_join_ueqlww.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_chupus on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_bigpwp.title as varchar), '(' || airport_heliport_guidanceline_pt_bigpwp.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_bigpwp.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_uxvmgn.element::jsonb as element,
    notes_note_view_pzqcjt.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_bigpwp on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_bigpwp.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_tmjaox.id) as element
  from master_join master_join_layodw
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_tmjaox on master_join_layodw.target_id = airport_heliport_markingelement_lat_tmjaox.id
  where master_join_layodw.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_uxvmgn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_prmsyl.*) AS annotation
  from master_join master_join_imsjrm
  join notes.note_view notes_note_lat_prmsyl on master_join_imsjrm.target_id = notes_note_lat_prmsyl.id
  where master_join_imsjrm.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_pzqcjt on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_kunppl.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_kunppl.elevation AS extent_elevation,
    geometry_elevatedcurve_view_kunppl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_kunppl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_kunppl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_kunppl.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_buhwlu.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_atpfcc.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_xqzyks.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_omxahq.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_vmtagw.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_ciyosf.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_kunppl on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_kunppl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_nbbpxy.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_nbbpxy.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_nbbpxy.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_nbbpxy.href
  )) as connectedtouchdownliftoff  from master_join master_join_ydauos
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_nbbpxy on master_join_ydauos.target_id = airport_heliport_touchdownliftoff_lat_nbbpxy.id
  where master_join_ydauos.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_buhwlu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_lunczi.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_lunczi.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_lunczi.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_lunczi.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_auzrtp
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_lunczi on master_join_auzrtp.target_id = airport_heliport_runwaycentrelinepoint_lat_lunczi.id
  where master_join_auzrtp.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_atpfcc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_tfjapn.id,
      'title', coalesce(cast(airport_heliport_apron_lat_tfjapn.title AS varchar), '(' || airport_heliport_apron_lat_tfjapn.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_tfjapn.href
  )) as connectedapron  from master_join master_join_vhijiw
  join airport_heliport.apron_pt airport_heliport_apron_lat_tfjapn on master_join_vhijiw.target_id = airport_heliport_apron_lat_tfjapn.id
  where master_join_vhijiw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_xqzyks on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_ceawlo.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_ceawlo.title AS varchar), '(' || airport_heliport_aircraftstand_lat_ceawlo.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_ceawlo.href
  )) as connectedstand  from master_join master_join_zxtgdq
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_ceawlo on master_join_zxtgdq.target_id = airport_heliport_aircraftstand_lat_ceawlo.id
  where master_join_zxtgdq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_omxahq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_npzegl.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_npzegl.title AS varchar), '(' || airport_heliport_taxiway_lat_npzegl.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_npzegl.href
  )) as connectedtaxiway  from master_join master_join_aqwrvg
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_npzegl on master_join_aqwrvg.target_id = airport_heliport_taxiway_lat_npzegl.id
  where master_join_aqwrvg.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_vmtagw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qaxtca.*) AS annotation
  from master_join master_join_vgwbag
  join notes.note_view notes_note_lat_qaxtca on master_join_vgwbag.target_id = notes_note_lat_qaxtca.id
  where master_join_vgwbag.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_ciyosf on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_jdmlud.title as varchar), '(' || holding_unplannedholding_pt_jdmlud.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_jdmlud.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_oxedzp.title as varchar), '(' || holding_holdingpattern_pt_oxedzp.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_oxedzp.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_eazyxb.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_phqpes.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_jdmlud on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_jdmlud.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_oxedzp on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_oxedzp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_lngwss.id) as obstacleassessment
  from master_join master_join_hnsviy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_lngwss on master_join_hnsviy.target_id = shared_obstacleassessmentarea_lat_lngwss.id
  where master_join_hnsviy.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_eazyxb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aydmeb.*) AS annotation
  from master_join master_join_nmezdl
  join notes.note_view notes_note_lat_aydmeb on master_join_nmezdl.target_id = notes_note_lat_aydmeb.id
  where master_join_nmezdl.source_id = shared.holdingassessment_ts.id
) as notes_note_view_phqpes on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternType
-- ['holding.holdingpatterndistance_view', 'geometry.curve_view', 'holding.holdingpatternduration_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_vctkrx.id)::jsonb AS outboundlegspanendtime,
    holding_holdingpatternduration_view_vctkrx.annotation::jsonb AS outboundlegspanendtime_annotation,
    to_jsonb(holding_holdingpatterndistance_view_cxgmdm.id)::jsonb AS outboundlegspanenddistance,
    holding_holdingpatterndistance_view_cxgmdm.annotation::jsonb AS outboundlegspanenddistance_annotation,
    geometry_curve_view_gdozlm.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_gdozlm.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_nancfk.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_vctkrx on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_vctkrx.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_cxgmdm on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_cxgmdm.id
left join geometry.curve_view geometry_curve_view_gdozlm on holding.holdingpattern_ts.extent_id = geometry_curve_view_gdozlm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_njqwui.*) AS annotation
  from master_join master_join_yvlgsl
  join notes.note_view notes_note_lat_njqwui on master_join_yvlgsl.target_id = notes_note_lat_njqwui.id
  where master_join_yvlgsl.source_id = holding.holdingpattern_ts.id
) as notes_note_view_nancfk on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'routes.routeportion_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_xkrjmo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_xkrjmo.longitude AS location_longitude,
    geometry_elevatedpoint_view_xkrjmo.latitude AS location_latitude,
    geometry_elevatedpoint_view_xkrjmo.elevation AS location_elevation,
    geometry_elevatedpoint_view_xkrjmo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_xkrjmo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_xkrjmo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_xkrjmo.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hknjqg.title as varchar), '(' || organisation_unit_pt_hknjqg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_hknjqg.href::text AS serviceprovider_href,
    service_callsigndetail_view_ojhcid.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_dqkxyv.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_esgcxj.availability::jsonb as availability,
    notes_note_view_pwhlfh.annotation::jsonb as annotation,
    navaids_points_vor_pt_jdxygz.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_emwhga.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_mpkeyb.clientairport::jsonb as clientairport,
    routes_routeportion_view_gwcvxu.clientroute::jsonb as clientroute,
    procedure_procedure_pt_hkqyqd.clientprocedure::jsonb as clientprocedure,
    holding_holdingpattern_pt_zrglde.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_kuhywl.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_xkrjmo on service.informationservice_ts.location_id = geometry_elevatedpoint_view_xkrjmo.id
left join organisation.unit_pt organisation_unit_pt_hknjqg on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_hknjqg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_btxome.id) as callsign
  from master_join master_join_iqyyps
  join service.callsigndetail_view service_callsigndetail_lat_btxome on master_join_iqyyps.target_id = service_callsigndetail_lat_btxome.id
  where master_join_iqyyps.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_ojhcid on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_meyomu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_meyomu.title AS varchar), '(' || service_radiocommunicationchannel_lat_meyomu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_meyomu.href
  )) as radiocommunication  from master_join master_join_jhzwyc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_meyomu on master_join_jhzwyc.target_id = service_radiocommunicationchannel_lat_meyomu.id
  where master_join_jhzwyc.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_dqkxyv on TRUE
left join lateral(
  select
  from master_join master_join_lsqjnt
  join shared.contactinformation_view shared_contactinformation_lat_kudjlv on master_join_lsqjnt.target_id = shared_contactinformation_lat_kudjlv.id
  where master_join_lsqjnt.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_rercwo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bdukxu.id) as availability
  from master_join master_join_jmxqgr
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bdukxu on master_join_jmxqgr.target_id = service_serviceoperationalstatus_lat_bdukxu.id
  where master_join_jmxqgr.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_esgcxj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrbisr.*) AS annotation
  from master_join master_join_jhiazx
  join notes.note_view notes_note_lat_wrbisr on master_join_jhiazx.target_id = notes_note_lat_wrbisr.id
  where master_join_jhiazx.source_id = service.informationservice_ts.id
) as notes_note_view_pwhlfh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_wfrqbu.id,
      'title', coalesce(cast(navaids_points_vor_lat_wfrqbu.title AS varchar), '(' || navaids_points_vor_lat_wfrqbu.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_wfrqbu.href
  )) as navaidbroadcast  from master_join master_join_xvioef
  join navaids_points.vor_pt navaids_points_vor_lat_wfrqbu on master_join_xvioef.target_id = navaids_points_vor_lat_wfrqbu.id
  where master_join_xvioef.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_jdxygz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_wpvkpq.id,
      'title', coalesce(cast(airspace_airspace_lat_wpvkpq.title AS varchar), '(' || airspace_airspace_lat_wpvkpq.nilreason[1] || ')'),
      'href', airspace_airspace_lat_wpvkpq.href
  )) as clientairspace  from master_join master_join_qkuarm
  join airspace.airspace_pt airspace_airspace_lat_wpvkpq on master_join_qkuarm.target_id = airspace_airspace_lat_wpvkpq.id
  where master_join_qkuarm.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_emwhga on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ttvvbg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ttvvbg.title AS varchar), '(' || airport_heliport_airportheliport_lat_ttvvbg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ttvvbg.href
  )) as clientairport  from master_join master_join_lfptqd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ttvvbg on master_join_lfptqd.target_id = airport_heliport_airportheliport_lat_ttvvbg.id
  where master_join_lfptqd.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_mpkeyb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_wwzqcz.id) as clientroute
  from master_join master_join_axdfsi
  join routes.routeportion_view routes_routeportion_lat_wwzqcz on master_join_axdfsi.target_id = routes_routeportion_lat_wwzqcz.id
  where master_join_axdfsi.source_id = service.informationservice_ts.id
) as routes_routeportion_view_gwcvxu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_mfilvh.id,
      'title', coalesce(cast(procedure_procedure_lat_mfilvh.title AS varchar), '(' || procedure_procedure_lat_mfilvh.nilreason[1] || ')'),
      'href', procedure_procedure_lat_mfilvh.href
  )) as clientprocedure  from master_join master_join_lchttw
  join procedure.procedure_pt procedure_procedure_lat_mfilvh on master_join_lchttw.target_id = procedure_procedure_lat_mfilvh.id
  where master_join_lchttw.source_id = service.informationservice_ts.id
) as procedure_procedure_pt_hkqyqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_nfabgv.id,
      'title', coalesce(cast(holding_holdingpattern_lat_nfabgv.title AS varchar), '(' || holding_holdingpattern_lat_nfabgv.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_nfabgv.href
  )) as clientholding  from master_join master_join_klxtok
  join holding.holdingpattern_pt holding_holdingpattern_lat_nfabgv on master_join_klxtok.target_id = holding_holdingpattern_lat_nfabgv.id
  where master_join_klxtok.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_zrglde on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_moxlun.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_moxlun.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_moxlun.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_moxlun.href
  )) as clientaerialrefuelling  from master_join master_join_fjnruu
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_moxlun on master_join_fjnruu.target_id = aerial_refuelling_aerialrefuelling_lat_moxlun.id
  where master_join_fjnruu.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_kuhywl on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegType
-- ['procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_uytrvn.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_uytrvn.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qwasyu.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_qwasyu.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sbfxoy.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_sbfxoy.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_yocbln.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_yocbln.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_jxylia.title as varchar), '(' || navaids_points_angleindication_pt_jxylia.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_jxylia.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_frsctp.title as varchar), '(' || navaids_points_distanceindication_pt_frsctp.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_frsctp.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_xnpelk.id)::jsonb AS holding,
    procedure_holdinguse_view_xnpelk.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_sekpin.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_sekpin.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_sekpin.href::text AS approach_href,
    shared_aircraftcharacteristic_view_mhygor.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_bhvlyv.designsurface::jsonb as designsurface,
    notes_note_view_kefhzh.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_uytrvn on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_uytrvn.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qwasyu on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_qwasyu.id
left join geometry.curve_view geometry_curve_view_yocbln on procedure.initialleg_ts.trajectory_id = geometry_curve_view_yocbln.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sbfxoy on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_sbfxoy.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_jxylia on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_jxylia.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_frsctp on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_frsctp.id
left join procedure.holdinguse_view procedure_holdinguse_view_xnpelk on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_xnpelk.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_sekpin on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_sekpin.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qrdver.id) as aircraftcategory
  from master_join master_join_blunes
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qrdver on master_join_blunes.target_id = shared_aircraftcharacteristic_lat_qrdver.id
  where master_join_blunes.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_mhygor on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_uphbki.id) as designsurface
  from master_join master_join_bxkvgi
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_uphbki on master_join_bxkvgi.target_id = shared_obstacleassessmentarea_lat_uphbki.id
  where master_join_bxkvgi.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_bhvlyv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivjohp.*) AS annotation
  from master_join master_join_bsjhba
  join notes.note_view notes_note_lat_ivjohp on master_join_bsjhba.target_id = notes_note_lat_ivjohp.id
  where master_join_bsjhba.source_id = procedure.initialleg_ts.id
) as notes_note_view_kefhzh on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureType
-- ['procedure.procedureavailability_view', 'procedure.finalprofile_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view', 'procedure.missedapproachgroup_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_ngggqf.title as varchar), '(' || navaids_points_navaid_pt_ngggqf.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ngggqf.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_gngmgs.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_gngmgs.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_gngmgs.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_uxcmlu.title as varchar), '(' || surveillance_radarsystem_pt_uxcmlu.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_uxcmlu.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_qxorpq.title as varchar), '(' || procedure_safealtitudearea_pt_qxorpq.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_qxorpq.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_prwovy.id)::jsonb AS landing,
    procedure_landingtakeoffareacollection_view_prwovy.annotation::jsonb AS landing_annotation,
    to_jsonb(procedure_finalprofile_view_lvtgyb.id)::jsonb AS finalprofile,
    procedure_finalprofile_view_lvtgyb.annotation::jsonb AS finalprofile_annotation,
    procedure_procedureavailability_view_luqvhw.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_cnpnsn.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_hcawet.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_xivkcw.flighttransition::jsonb as flighttransition,
    notes_note_view_cadlhe.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_zxnwsc.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ngggqf on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ngggqf.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_gngmgs on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_gngmgs.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_uxcmlu on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_uxcmlu.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_qxorpq on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_qxorpq.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_prwovy on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_prwovy.id
left join procedure.finalprofile_view procedure_finalprofile_view_lvtgyb on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_lvtgyb.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_eorllh.id) as availability
  from master_join master_join_lnjfjj
  join procedure.procedureavailability_view procedure_procedureavailability_lat_eorllh on master_join_lnjfjj.target_id = procedure_procedureavailability_lat_eorllh.id
  where master_join_lnjfjj.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_luqvhw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xydcng.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xydcng.title AS varchar), '(' || airport_heliport_airportheliport_lat_xydcng.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xydcng.href
  )) as airportheliport  from master_join master_join_vpcypw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xydcng on master_join_vpcypw.target_id = airport_heliport_airportheliport_lat_xydcng.id
  where master_join_vpcypw.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_cnpnsn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pbkphb.id) as aircraftcharacteristic
  from master_join master_join_imwzek
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_pbkphb on master_join_imwzek.target_id = shared_aircraftcharacteristic_lat_pbkphb.id
  where master_join_imwzek.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_hcawet on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_uscxfc.id) as flighttransition
  from master_join master_join_hildln
  join procedure.proceduretransition_view procedure_proceduretransition_lat_uscxfc on master_join_hildln.target_id = procedure_proceduretransition_lat_uscxfc.id
  where master_join_hildln.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_xivkcw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsghsu.*) AS annotation
  from master_join master_join_xyjrlg
  join notes.note_view notes_note_lat_tsghsu on master_join_xyjrlg.target_id = notes_note_lat_tsghsu.id
  where master_join_xyjrlg.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_cadlhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_ektzyw.id) as missedinstruction
  from master_join master_join_fwadma
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_ektzyw on master_join_fwadma.target_id = procedure_missedapproachgroup_lat_ektzyw.id
  where master_join_fwadma.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_zxnwsc on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegType
-- ['procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lzxzia.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_lzxzia.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jcrvrk.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_jcrvrk.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_raqoqs.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_raqoqs.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_rxpguz.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_rxpguz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_yxfmmq.title as varchar), '(' || navaids_points_angleindication_pt_yxfmmq.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_yxfmmq.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_dugmnh.title as varchar), '(' || navaids_points_distanceindication_pt_dugmnh.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_dugmnh.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_kvyien.id)::jsonb AS holding,
    procedure_holdinguse_view_kvyien.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_gaqdhz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_gaqdhz.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_gaqdhz.href::text AS approach_href,
    shared_aircraftcharacteristic_view_qralup.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_nkpkpt.designsurface::jsonb as designsurface,
    notes_note_view_sldall.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lzxzia on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_lzxzia.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jcrvrk on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_jcrvrk.id
left join geometry.curve_view geometry_curve_view_rxpguz on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_rxpguz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_raqoqs on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_raqoqs.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_yxfmmq on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_yxfmmq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_dugmnh on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_dugmnh.id
left join procedure.holdinguse_view procedure_holdinguse_view_kvyien on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_kvyien.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_gaqdhz on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_gaqdhz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_pwrdpw.id) as aircraftcategory
  from master_join master_join_mkbiog
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_pwrdpw on master_join_mkbiog.target_id = shared_aircraftcharacteristic_lat_pwrdpw.id
  where master_join_mkbiog.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_qralup on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ufaado.id) as designsurface
  from master_join master_join_mvccim
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ufaado on master_join_mvccim.target_id = shared_obstacleassessmentarea_lat_ufaado.id
  where master_join_mvccim.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_nkpkpt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vxxnxs.*) AS annotation
  from master_join master_join_xpfsch
  join notes.note_view notes_note_lat_vxxnxs on master_join_xpfsch.target_id = notes_note_lat_vxxnxs.id
  where master_join_xpfsch.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_sldall on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_ijexrh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ijexrh.longitude AS location_longitude,
    geometry_elevatedpoint_view_ijexrh.latitude AS location_latitude,
    geometry_elevatedpoint_view_ijexrh.elevation AS location_elevation,
    geometry_elevatedpoint_view_ijexrh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ijexrh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ijexrh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ijexrh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_xagsfk.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hhqqya.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_jizkev.availability::jsonb as availability,
    notes_note_view_kozzvq.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ijexrh on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_ijexrh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_qebaic.id) as authority
  from master_join master_join_adfahw
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_qebaic on master_join_adfahw.target_id = navaids_points_authorityfornavaidequipment_lat_qebaic.id
  where master_join_adfahw.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_xagsfk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_cgukgu.id) as monitoring
  from master_join master_join_zhuyyt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_cgukgu on master_join_zhuyyt.target_id = navaids_points_navaidequipmentmonitoring_lat_cgukgu.id
  where master_join_zhuyyt.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hhqqya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_alzfbn.id) as availability
  from master_join master_join_lvlmqq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_alzfbn on master_join_lvlmqq.target_id = navaids_points_navaidoperationalstatus_lat_alzfbn.id
  where master_join_lvlmqq.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_jizkev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hzyhtn.*) AS annotation
  from master_join master_join_zamped
  join notes.note_view notes_note_lat_hzyhtn on master_join_zamped.target_id = notes_note_lat_hzyhtn.id
  where master_join_zamped.source_id = navaids_points.localizer_ts.id
) as notes_note_view_kozzvq on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_gbpmgp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gbpmgp.longitude AS location_longitude,
    geometry_elevatedpoint_view_gbpmgp.latitude AS location_latitude,
    geometry_elevatedpoint_view_gbpmgp.elevation AS location_elevation,
    geometry_elevatedpoint_view_gbpmgp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gbpmgp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gbpmgp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gbpmgp.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_awxwlc.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jdqzmc.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_mijcml.availability::jsonb as availability,
    notes_note_view_yiuems.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gbpmgp on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_gbpmgp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_chmvjm.id) as authority
  from master_join master_join_zzbgsd
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_chmvjm on master_join_zzbgsd.target_id = navaids_points_authorityfornavaidequipment_lat_chmvjm.id
  where master_join_zzbgsd.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_awxwlc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_hdaznf.id) as monitoring
  from master_join master_join_afijiy
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_hdaznf on master_join_afijiy.target_id = navaids_points_navaidequipmentmonitoring_lat_hdaznf.id
  where master_join_afijiy.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jdqzmc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_kqnazw.id) as availability
  from master_join master_join_hbmkvm
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_kqnazw on master_join_hbmkvm.target_id = navaids_points_navaidoperationalstatus_lat_kqnazw.id
  where master_join_hbmkvm.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_mijcml on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fykzry.*) AS annotation
  from master_join master_join_jsjcpu
  join notes.note_view notes_note_lat_fykzry on master_join_jsjcpu.target_id = notes_note_lat_fykzry.id
  where master_join_jsjcpu.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_yiuems on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_yerobz.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_yerobz.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_yerobz.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_jqucuk.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jqucuk.longitude AS location_longitude,
    geometry_elevatedpoint_view_jqucuk.latitude AS location_latitude,
    geometry_elevatedpoint_view_jqucuk.elevation AS location_elevation,
    geometry_elevatedpoint_view_jqucuk.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jqucuk.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jqucuk.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jqucuk.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_dtjhct.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_yerobz on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_yerobz.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jqucuk on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_jqucuk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nrayre.*) AS annotation
  from master_join master_join_hmdlmn
  join notes.note_view notes_note_lat_nrayre on master_join_hmdlmn.target_id = notes_note_lat_nrayre.id
  where master_join_hmdlmn.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_dtjhct on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegType
-- ['procedure.approachcondition_view', 'procedure.holdinguse_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'shared.obstacleassessmentarea_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dsvblw.id)::jsonb AS startpoint,
    navaids_points_terminalsegmentpoint_view_dsvblw.annotation::jsonb AS startpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mjfger.id)::jsonb AS endpoint,
    navaids_points_terminalsegmentpoint_view_mjfger.annotation::jsonb AS endpoint_annotation,
    to_jsonb(navaids_points_terminalsegmentpoint_view_gmfrgq.id)::jsonb AS arccentre,
    navaids_points_terminalsegmentpoint_view_gmfrgq.annotation::jsonb AS arccentre_annotation,
    geometry_curve_view_gvkkru.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_gvkkru.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qhxwea.title as varchar), '(' || navaids_points_angleindication_pt_qhxwea.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qhxwea.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_qarxfo.title as varchar), '(' || navaids_points_distanceindication_pt_qarxfo.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_qarxfo.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_tjxyyh.id)::jsonb AS holding,
    procedure_holdinguse_view_tjxyyh.annotation::jsonb AS holding_annotation,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_tnrxur.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_tnrxur.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_tnrxur.href::text AS approach_href,
    shared_aircraftcharacteristic_view_rvuspg.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_blitvt.designsurface::jsonb as designsurface,
    notes_note_view_ttmwsj.annotation::jsonb as annotation,
    procedure_approachcondition_view_jmcruw.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dsvblw on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_dsvblw.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mjfger on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_mjfger.id
left join geometry.curve_view geometry_curve_view_gvkkru on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_gvkkru.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_gmfrgq on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_gmfrgq.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qhxwea on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_qhxwea.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_qarxfo on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_qarxfo.id
left join procedure.holdinguse_view procedure_holdinguse_view_tjxyyh on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_tjxyyh.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_tnrxur on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_tnrxur.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_grpshl.id) as aircraftcategory
  from master_join master_join_umhitc
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_grpshl on master_join_umhitc.target_id = shared_aircraftcharacteristic_lat_grpshl.id
  where master_join_umhitc.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_rvuspg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_mlzgiw.id) as designsurface
  from master_join master_join_skhcll
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_mlzgiw on master_join_skhcll.target_id = shared_obstacleassessmentarea_lat_mlzgiw.id
  where master_join_skhcll.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_blitvt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vltluz.*) AS annotation
  from master_join master_join_unsvec
  join notes.note_view notes_note_lat_vltluz on master_join_unsvec.target_id = notes_note_lat_vltluz.id
  where master_join_unsvec.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_ttmwsj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_wqfrnu.id) as condition
  from master_join master_join_jfyzts
  join procedure.approachcondition_view procedure_approachcondition_lat_wqfrnu on master_join_jfyzts.target_id = procedure_approachcondition_lat_wqfrnu.id
  where master_join_jfyzts.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_jmcruw on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidType
-- ['navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_qcafqp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qcafqp.longitude AS location_longitude,
    geometry_elevatedpoint_view_qcafqp.latitude AS location_latitude,
    geometry_elevatedpoint_view_qcafqp.elevation AS location_elevation,
    geometry_elevatedpoint_view_qcafqp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qcafqp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qcafqp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qcafqp.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_emrdup.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_zuhmte.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_wagrqd.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_zrhcev.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_vdumko.availability::jsonb as availability,
    notes_note_view_vaimpq.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qcafqp on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_qcafqp.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_dhduiw.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_dhduiw.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_dhduiw.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_dhduiw.href
  )) as touchdownliftoff  from master_join master_join_cwjblu
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_dhduiw on master_join_cwjblu.target_id = airport_heliport_touchdownliftoff_lat_dhduiw.id
  where master_join_cwjblu.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_emrdup on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_zojpth.id) as navaidequipment
  from master_join master_join_cmynsj
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_zojpth on master_join_cmynsj.target_id = navaids_points_navaidcomponent_lat_zojpth.id
  where master_join_cmynsj.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_zuhmte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_jpefes.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_jpefes.title AS varchar), '(' || airport_heliport_runwaydirection_lat_jpefes.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_jpefes.href
  )) as runwaydirection  from master_join master_join_iyjzib
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_jpefes on master_join_iyjzib.target_id = airport_heliport_runwaydirection_lat_jpefes.id
  where master_join_iyjzib.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_wagrqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vlhyzt.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vlhyzt.title AS varchar), '(' || airport_heliport_airportheliport_lat_vlhyzt.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vlhyzt.href
  )) as servedairport  from master_join master_join_qfhsvw
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vlhyzt on master_join_qfhsvw.target_id = airport_heliport_airportheliport_lat_vlhyzt.id
  where master_join_qfhsvw.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_zrhcev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_inrwau.id) as availability
  from master_join master_join_zqmhpd
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_inrwau on master_join_zqmhpd.target_id = navaids_points_navaidoperationalstatus_lat_inrwau.id
  where master_join_zqmhpd.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_vdumko on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oftcdg.*) AS annotation
  from master_join master_join_gtllmx
  join notes.note_view notes_note_lat_oftcdg on master_join_gtllmx.target_id = notes_note_lat_oftcdg.id
  where master_join_gtllmx.source_id = navaids_points.navaid_ts.id
) as notes_note_view_vaimpq on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionType
-- ['shared.circlesector_view', 'notes.note_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_fldzno.id)::jsonb AS designsurface,
    shared_obstacleassessmentarea_view_fldzno.annotation::jsonb AS designsurface_annotation,
    to_jsonb(shared_circlesector_view_zvnmzp.id)::jsonb AS sectordefinition,
    shared_circlesector_view_zvnmzp.annotation::jsonb AS sectordefinition_annotation,
    procedure_procedure_pt_ohlbjq.procedure::jsonb as procedure,
    notes_note_view_dimvwf.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_fldzno on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_fldzno.id
left join shared.circlesector_view shared_circlesector_view_zvnmzp on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_zvnmzp.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', procedure_procedure_lat_pnpfjd.id,
      'title', coalesce(cast(procedure_procedure_lat_pnpfjd.title AS varchar), '(' || procedure_procedure_lat_pnpfjd.nilreason[1] || ')'),
      'href', procedure_procedure_lat_pnpfjd.href
  )) as procedure  from master_join master_join_eveqgy
  join procedure.procedure_pt procedure_procedure_lat_pnpfjd on master_join_eveqgy.target_id = procedure_procedure_lat_pnpfjd.id
  where master_join_eveqgy.source_id = procedure.navigationarearestriction_ts.id
) as procedure_procedure_pt_ohlbjq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chzcvd.*) AS annotation
  from master_join master_join_qsdyyr
  join notes.note_view notes_note_lat_chzcvd on master_join_qsdyyr.target_id = notes_note_lat_chzcvd.id
  where master_join_qsdyyr.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_dimvwf on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaType
-- ['procedure.navigationareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_iwxbme.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_iwxbme.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_iwxbme.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_cugqij.title as varchar), '(' || navaids_points_designatedpoint_pt_cugqij.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_cugqij.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xcshvp.title as varchar), '(' || navaids_points_navaid_pt_xcshvp.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_xcshvp.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nnusxf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nnusxf.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_nnusxf.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mphcue.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mphcue.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mphcue.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_edmfob.title as varchar), '(' || airport_heliport_airportheliport_pt_edmfob.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_edmfob.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_hlxxsl.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_hlxxsl.longitude AS centrepointposition_longitude,
    geometry_point_view_hlxxsl.latitude AS centrepointposition_latitude,
    geometry_point_view_hlxxsl.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_dvgwgi.sector::jsonb as sector,
    notes_note_view_cqdjns.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_iwxbme on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_iwxbme.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_cugqij on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_cugqij.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xcshvp on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_xcshvp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nnusxf on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nnusxf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mphcue on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mphcue.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_edmfob on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_edmfob.id
left join geometry.point_view geometry_point_view_hlxxsl on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_hlxxsl.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_xzccuc.id) as sector
  from master_join master_join_susbvj
  join procedure.navigationareasector_view procedure_navigationareasector_lat_xzccuc on master_join_susbvj.target_id = procedure_navigationareasector_lat_xzccuc.id
  where master_join_susbvj.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_dvgwgi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mgbabh.*) AS annotation
  from master_join master_join_wofbwg
  join notes.note_view notes_note_lat_mgbabh on master_join_wofbwg.target_id = notes_note_lat_mgbabh.id
  where master_join_wofbwg.source_id = procedure.navigationarea_ts.id
) as notes_note_view_cqdjns on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as clazz,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_tyqqps.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tyqqps.longitude AS location_longitude,
    geometry_elevatedpoint_view_tyqqps.latitude AS location_latitude,
    geometry_elevatedpoint_view_tyqqps.elevation AS location_elevation,
    geometry_elevatedpoint_view_tyqqps.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tyqqps.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tyqqps.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tyqqps.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_vogdje.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_crlleg.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_xaatpf.availability::jsonb as availability,
    notes_note_view_inlgce.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tyqqps on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_tyqqps.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_npzhsa.id) as authority
  from master_join master_join_wuqyhw
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_npzhsa on master_join_wuqyhw.target_id = navaids_points_authorityfornavaidequipment_lat_npzhsa.id
  where master_join_wuqyhw.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_vogdje on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_mvarrl.id) as monitoring
  from master_join master_join_rpyvha
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_mvarrl on master_join_rpyvha.target_id = navaids_points_navaidequipmentmonitoring_lat_mvarrl.id
  where master_join_rpyvha.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_crlleg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dznesu.id) as availability
  from master_join master_join_rglvpc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dznesu on master_join_rglvpc.target_id = navaids_points_navaidoperationalstatus_lat_dznesu.id
  where master_join_rglvpc.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_xaatpf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xditmm.*) AS annotation
  from master_join master_join_iuelhs
  join notes.note_view notes_note_lat_xditmm on master_join_iuelhs.target_id = notes_note_lat_xditmm.id
  where master_join_iuelhs.source_id = navaids_points.ndb_ts.id
) as notes_note_view_inlgce on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_mtfxhm.title as varchar), '(' || airport_heliport_airportheliport_pt_mtfxhm.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_mtfxhm.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_jigfcj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jigfcj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jigfcj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jigfcj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jigfcj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jigfcj.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_zzryug.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mtfxhm on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_mtfxhm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jigfcj on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_jigfcj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osuhaw.*) AS annotation
  from master_join master_join_wgaaxc
  join notes.note_view notes_note_lat_osuhaw on master_join_wgaaxc.target_id = notes_note_lat_osuhaw.id
  where master_join_wgaaxc.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_zzryug on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_pomief.title as varchar), '(' || airport_heliport_airportheliport_pt_pomief.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_pomief.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_qpcqli.title as varchar), '(' || airport_heliport_runwaydirection_pt_qpcqli.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_qpcqli.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_efdeez.title as varchar), '(' || organisation_organisationauthority_pt_efdeez.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_efdeez.href::text AS referenceownerorganisation_href,
    geometry_surface_view_uyyrex.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_uyyrex.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_eqattq.obstacle::jsonb as obstacle,
    notes_note_view_rhrudi.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pomief on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_pomief.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_qpcqli on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_qpcqli.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_efdeez on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_efdeez.id
left join geometry.surface_view geometry_surface_view_uyyrex on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_uyyrex.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_uscass.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_uscass.title AS varchar), '(' || obstacles_verticalstructure_lat_uscass.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_uscass.href
  )) as obstacle  from master_join master_join_mbivsh
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_uscass on master_join_mbivsh.target_id = obstacles_verticalstructure_lat_uscass.id
  where master_join_mbivsh.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_eqattq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_homdwm.*) AS annotation
  from master_join master_join_uxvmkx
  join notes.note_view notes_note_lat_homdwm on master_join_uxvmkx.target_id = notes_note_lat_homdwm.id
  where master_join_uxvmkx.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_rhrudi on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_yhrxhp.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_clkuyu.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_icivhk
  join shared.contactinformation_view shared_contactinformation_lat_gcxgab on master_join_icivhk.target_id = shared_contactinformation_lat_gcxgab.id
  where master_join_icivhk.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_jgsvyd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_ijlrtx.id) as relatedorganisationauthority
  from master_join master_join_mgztxn
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_ijlrtx on master_join_mgztxn.target_id = organisation_organisationauthorityassociation_lat_ijlrtx.id
  where master_join_mgztxn.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_yhrxhp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yevzzr.*) AS annotation
  from master_join master_join_tnkkkg
  join notes.note_view notes_note_lat_yevzzr on master_join_tnkkkg.target_id = notes_note_lat_yevzzr.id
  where master_join_tnkkkg.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_clkuyu on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_dosmxb.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_dosmxb.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dosmxb.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dosmxb.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dosmxb.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dosmxb.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_ivyskh.associatedstand::jsonb as associatedstand,
    notes_note_view_bixvtf.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dosmxb on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_dosmxb.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_limfmt.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_limfmt.title AS varchar), '(' || airport_heliport_aircraftstand_lat_limfmt.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_limfmt.href
  )) as associatedstand  from master_join master_join_qmhyex
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_limfmt on master_join_qmhyex.target_id = airport_heliport_aircraftstand_lat_limfmt.id
  where master_join_qmhyex.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_ivyskh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sbgkxg.*) AS annotation
  from master_join master_join_nsmvrc
  join notes.note_view notes_note_lat_sbgkxg on master_join_nsmvrc.target_id = notes_note_lat_sbgkxg.id
  where master_join_nsmvrc.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_bixvtf on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ltdxeo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ltdxeo.longitude AS location_longitude,
    geometry_elevatedpoint_view_ltdxeo.latitude AS location_latitude,
    geometry_elevatedpoint_view_ltdxeo.elevation AS location_elevation,
    geometry_elevatedpoint_view_ltdxeo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ltdxeo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ltdxeo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ltdxeo.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_nknmlb.title as varchar), '(' || organisation_unit_pt_nknmlb.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_nknmlb.href::text AS serviceprovider_href,
    service_callsigndetail_view_fujgkf.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_gwcmdj.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_wpytkj.availability::jsonb as availability,
    notes_note_view_xlvexp.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_llcarl.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ltdxeo on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_ltdxeo.id
left join organisation.unit_pt organisation_unit_pt_nknmlb on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_nknmlb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_osynco.id) as callsign
  from master_join master_join_oyndsh
  join service.callsigndetail_view service_callsigndetail_lat_osynco on master_join_oyndsh.target_id = service_callsigndetail_lat_osynco.id
  where master_join_oyndsh.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_fujgkf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ircxpj.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ircxpj.title AS varchar), '(' || service_radiocommunicationchannel_lat_ircxpj.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ircxpj.href
  )) as radiocommunication  from master_join master_join_opxlsp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ircxpj on master_join_opxlsp.target_id = service_radiocommunicationchannel_lat_ircxpj.id
  where master_join_opxlsp.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_gwcmdj on TRUE
left join lateral(
  select
  from master_join master_join_bwznmg
  join shared.contactinformation_view shared_contactinformation_lat_glgxyd on master_join_bwznmg.target_id = shared_contactinformation_lat_glgxyd.id
  where master_join_bwznmg.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_gintfj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_mqrfxb.id) as availability
  from master_join master_join_dzqwqg
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_mqrfxb on master_join_dzqwqg.target_id = service_serviceoperationalstatus_lat_mqrfxb.id
  where master_join_dzqwqg.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_wpytkj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rozhrb.*) AS annotation
  from master_join master_join_cfwdxl
  join notes.note_view notes_note_lat_rozhrb on master_join_cfwdxl.target_id = notes_note_lat_rozhrb.id
  where master_join_cfwdxl.source_id = service.passengerservice_ts.id
) as notes_note_view_xlvexp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ellwpg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ellwpg.title AS varchar), '(' || airport_heliport_airportheliport_lat_ellwpg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ellwpg.href
  )) as airportheliport  from master_join master_join_aomkaq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ellwpg on master_join_aomkaq.target_id = airport_heliport_airportheliport_lat_ellwpg.id
  where master_join_aomkaq.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_llcarl on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_pocnly.controlledlightintensity::jsonb as controlledlightintensity,
    airport_heliport_groundlightsystem_pt_pvdhzq.activatedgroundlighting::jsonb as activatedgroundlighting,
    notes_note_view_umyruj.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_afpvrk.id) as controlledlightintensity
  from master_join master_join_pinxgc
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_afpvrk on master_join_pinxgc.target_id = airport_heliport_lightactivation_lat_afpvrk.id
  where master_join_pinxgc.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_pocnly on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_tjowji.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_tjowji.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_tjowji.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_tjowji.href
  )) as activatedgroundlighting  from master_join master_join_phghlx
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_tjowji on master_join_phghlx.target_id = airport_heliport_groundlightsystem_lat_tjowji.id
  where master_join_phghlx.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_groundlightsystem_pt_pvdhzq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bwxkti.*) AS annotation
  from master_join master_join_hqqzmv
  join notes.note_view notes_note_lat_bwxkti on master_join_hqqzmv.target_id = notes_note_lat_bwxkti.id
  where master_join_hqqzmv.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_umyruj on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarType
-- ['surveillance.reflector_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_tuxfwz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tuxfwz.longitude AS location_longitude,
    geometry_elevatedpoint_view_tuxfwz.latitude AS location_latitude,
    geometry_elevatedpoint_view_tuxfwz.elevation AS location_elevation,
    geometry_elevatedpoint_view_tuxfwz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tuxfwz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tuxfwz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tuxfwz.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_zixqwv.annotation::jsonb as annotation,
    surveillance_reflector_view_nfcjur.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tuxfwz on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_tuxfwz.id
left join lateral(
  select
  from master_join master_join_nhaurf
  join shared.contactinformation_view shared_contactinformation_lat_mpoxdg on master_join_nhaurf.target_id = shared_contactinformation_lat_mpoxdg.id
  where master_join_nhaurf.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_gyaefj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dpscfa.*) AS annotation
  from master_join master_join_laztrs
  join notes.note_view notes_note_lat_dpscfa on master_join_laztrs.target_id = notes_note_lat_dpscfa.id
  where master_join_laztrs.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_zixqwv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_cxryyi.id) as reflector
  from master_join master_join_htecvr
  join surveillance.reflector_view surveillance_reflector_lat_cxryyi on master_join_htecvr.target_id = surveillance_reflector_lat_cxryyi.id
  where master_join_htecvr.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_nfcjur on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarType
-- ['surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_wofyfq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wofyfq.longitude AS location_longitude,
    geometry_elevatedpoint_view_wofyfq.latitude AS location_latitude,
    geometry_elevatedpoint_view_wofyfq.elevation AS location_elevation,
    geometry_elevatedpoint_view_wofyfq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wofyfq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wofyfq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wofyfq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_lrrqhk.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_msalru.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wofyfq on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_wofyfq.id
left join lateral(
  select
  from master_join master_join_opvzvw
  join shared.contactinformation_view shared_contactinformation_lat_qgyqas on master_join_opvzvw.target_id = shared_contactinformation_lat_qgyqas.id
  where master_join_opvzvw.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_mfvgqp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hfnwjz.*) AS annotation
  from master_join master_join_wtdkcz
  join notes.note_view notes_note_lat_hfnwjz on master_join_wtdkcz.target_id = notes_note_lat_hfnwjz.id
  where master_join_wtdkcz.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_lrrqhk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_dovemv.id) as groundstation
  from master_join master_join_tabzsc
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_dovemv on master_join_tabzsc.target_id = surveillance_surveillancegroundstation_lat_dovemv.id
  where master_join_tabzsc.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_msalru on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMEType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_qtvelq.title as varchar), '(' || navaids_points_dme_pt_qtvelq.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_qtvelq.href::text AS dme_href,
    coalesce(cast(procedure_segmentleg_pt_knthzd.title as varchar), '(' || procedure_segmentleg_pt_knthzd.nilreason[1] || ')')::text AS segmentleg,
    procedure_segmentleg_pt_knthzd.href::text AS segmentleg_href,
    notes_note_view_ayhgnm.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_qtvelq on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_qtvelq.id
left join procedure.segmentleg_pt procedure_segmentleg_pt_knthzd on procedure.proceduredme_ts.segmentleg_id = procedure_segmentleg_pt_knthzd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ffeksq.*) AS annotation
  from master_join master_join_tozfql
  join notes.note_view notes_note_lat_ffeksq on master_join_tozfql.target_id = notes_note_lat_ffeksq.id
  where master_join_tozfql.source_id = procedure.proceduredme_ts.id
) as notes_note_view_ayhgnm on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemType
-- ['geometry.elevatedpoint_view', 'surveillance.radarcomponent_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_aiegwx.title as varchar), '(' || airport_heliport_airportheliport_pt_aiegwx.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_aiegwx.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_dzrqwb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_dzrqwb.longitude AS location_longitude,
    geometry_elevatedpoint_view_dzrqwb.latitude AS location_latitude,
    geometry_elevatedpoint_view_dzrqwb.elevation AS location_elevation,
    geometry_elevatedpoint_view_dzrqwb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dzrqwb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dzrqwb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dzrqwb.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_ndnzgz.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_hukjme.office::jsonb as office,
    airport_heliport_runway_pt_ndmkhv.parrunway::jsonb as parrunway,
    notes_note_view_yxtscv.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aiegwx on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_aiegwx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dzrqwb on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_dzrqwb.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_rvbjwc.id) as radarequipment
  from master_join master_join_yknlmv
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_rvbjwc on master_join_yknlmv.target_id = surveillance_radarcomponent_lat_rvbjwc.id
  where master_join_yknlmv.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_ndnzgz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_csekyl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_csekyl.title AS varchar), '(' || organisation_organisationauthority_lat_csekyl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_csekyl.href
  )) as office  from master_join master_join_lapovx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_csekyl on master_join_lapovx.target_id = organisation_organisationauthority_lat_csekyl.id
  where master_join_lapovx.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_hukjme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_xuwpkq.id,
      'title', coalesce(cast(airport_heliport_runway_lat_xuwpkq.title AS varchar), '(' || airport_heliport_runway_lat_xuwpkq.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_xuwpkq.href
  )) as parrunway  from master_join master_join_knjmab
  join airport_heliport.runway_pt airport_heliport_runway_lat_xuwpkq on master_join_knjmab.target_id = airport_heliport_runway_lat_xuwpkq.id
  where master_join_knjmab.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_ndmkhv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrtmcd.*) AS annotation
  from master_join master_join_ztfnzl
  join notes.note_view notes_note_lat_mrtmcd on master_join_ztfnzl.target_id = notes_note_lat_mrtmcd.id
  where master_join_ztfnzl.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_yxtscv on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelType
-- ['service.radiocommunicationoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_qiowqp.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_qiowqp.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_hjfuma.availability::jsonb as availability,
    notes_note_view_egubux.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_nqlgvu.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_nqlgvu.id,
      'longitude', geometry_elevatedpoint_lat_nqlgvu.longitude,
      'latitude', geometry_elevatedpoint_lat_nqlgvu.latitude,
      'elevation', geometry_elevatedpoint_lat_nqlgvu.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_nqlgvu.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_nqlgvu.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_nqlgvu.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_nqlgvu.horizontalAccuracy
    )) AS attr
  from master_join master_join_pluits
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_nqlgvu on master_join_pluits.target_id = geometry_elevatedpoint_lat_nqlgvu.id
  where master_join_pluits.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_qiowqp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_vkfubn.id) as availability
  from master_join master_join_ejrkju
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_vkfubn on master_join_ejrkju.target_id = service_radiocommunicationoperationalstatus_lat_vkfubn.id
  where master_join_ejrkju.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_hjfuma on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nnecbv.*) AS annotation
  from master_join master_join_itjmzx
  join notes.note_view notes_note_lat_nnecbv on master_join_itjmzx.target_id = notes_note_lat_nnecbv.id
  where master_join_itjmzx.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_egubux on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaType
-- ['shared.circlesector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(navaids_points_navaidequipment_pt_odjakg.title as varchar), '(' || navaids_points_navaidequipment_pt_odjakg.nilreason[1] || ')')::text AS equipmentnavaidequipment,
    navaids_points_navaidequipment_pt_odjakg.href::text AS equipmentnavaidequipment_href,
    coalesce(cast(service_radiocommunicationchannel_pt_gwpnyh.title as varchar), '(' || service_radiocommunicationchannel_pt_gwpnyh.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_gwpnyh.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_chodjr.title as varchar), '(' || navaids_points_specialnavigationstation_pt_chodjr.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_chodjr.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_dtiqze.title as varchar), '(' || surveillance_precisionapproachradar_pt_dtiqze.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_dtiqze.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_bheynq.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_bheynq.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_bheynq.href::text AS equipmentradar_href,
    shared_circlesector_view_kzjeoi.sector::jsonb as sector,
    geometry_surface_view_slatxu.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_slatxu.attr::jsonb as extent,
    notes_note_view_tzpchj.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join navaids_points.navaidequipment_pt navaids_points_navaidequipment_pt_odjakg on shared.radiofrequencyarea_ts.equipment_navaidequipment_id = navaids_points_navaidequipment_pt_odjakg.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_gwpnyh on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_gwpnyh.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_chodjr on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_chodjr.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_dtiqze on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_dtiqze.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_bheynq on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_bheynq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_vkuvmc.id) as sector
  from master_join master_join_pcbypj
  join shared.circlesector_view shared_circlesector_lat_vkuvmc on master_join_pcbypj.target_id = shared_circlesector_lat_vkuvmc.id
  where master_join_pcbypj.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_kzjeoi on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_aduelv.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_aduelv.id,
      'horizontalAccuracy', geometry_surface_lat_aduelv.horizontalAccuracy
    )) AS attr
  from master_join master_join_pdcrqx
  join geometry.surface_view geometry_surface_lat_aduelv on master_join_pdcrqx.target_id = geometry_surface_lat_aduelv.id
  where master_join_pdcrqx.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_slatxu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egittv.*) AS annotation
  from master_join master_join_hedmoy
  join notes.note_view notes_note_lat_egittv on master_join_hedmoy.target_id = notes_note_lat_egittv.id
  where master_join_hedmoy.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_tzpchj on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_getzms.title as varchar), '(' || airport_heliport_airportheliport_pt_getzms.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_getzms.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_glurvc.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_glurvc.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_jyhioi.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_jyhioi.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_jyhioi.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_jyhioi.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_jyhioi.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_jyhioi.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_obnfce.accessiblestand::jsonb as accessiblestand,
    notes_note_view_kisxsm.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_getzms on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_getzms.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_glurvc on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_glurvc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jyhioi on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_jyhioi.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_bjayzr.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_bjayzr.title AS varchar), '(' || airport_heliport_aircraftstand_lat_bjayzr.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_bjayzr.href
  )) as accessiblestand  from master_join master_join_ctuqpl
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_bjayzr on master_join_ctuqpl.target_id = airport_heliport_aircraftstand_lat_bjayzr.id
  where master_join_ctuqpl.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_obnfce on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sukhnr.*) AS annotation
  from master_join master_join_lztzwn
  join notes.note_view notes_note_lat_sukhnr on master_join_lztzwn.target_id = notes_note_lat_sukhnr.id
  where master_join_lztzwn.source_id = airport_heliport.road_ts.id
) as notes_note_view_kisxsm on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMEType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_xnwewa.title as varchar), '(' || navaids_points_dme_pt_xnwewa.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_xnwewa.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_qnpjsj.id)::jsonb AS applicablerouteportion,
    routes_routeportion_view_qnpjsj.annotation::jsonb AS applicablerouteportion_annotation,
    notes_note_view_furtsy.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_xnwewa on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_xnwewa.id
left join routes.routeportion_view routes_routeportion_view_qnpjsj on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_qnpjsj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zviuhf.*) AS annotation
  from master_join master_join_iytmgr
  join notes.note_view notes_note_lat_zviuhf on master_join_iytmgr.target_id = notes_note_lat_zviuhf.id
  where master_join_iytmgr.source_id = routes.routedme_ts.id
) as notes_note_view_furtsy on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentType
-- ['navaids_points.enroutesegmentpoint_view', 'notes.note_view', 'routes.routeavailability_view', 'shared.obstacleassessmentarea_view', 'geometry.curve_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_rmacsx.id)::jsonb AS start,
    navaids_points_enroutesegmentpoint_view_rmacsx.annotation::jsonb AS start_annotation,
    to_jsonb(navaids_points_enroutesegmentpoint_view_yutjjb.id)::jsonb AS end,
    navaids_points_enroutesegmentpoint_view_yutjjb.annotation::jsonb AS end_annotation,
    coalesce(cast(routes_route_pt_bqywic.title as varchar), '(' || routes_route_pt_bqywic.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_bqywic.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_qojcel.id)::jsonb AS evaluationarea,
    shared_obstacleassessmentarea_view_qojcel.annotation::jsonb AS evaluationarea_annotation,
    geometry_curve_view_ewicku.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_ewicku.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_unhwgb.availability::jsonb as availability,
    notes_note_view_fljyti.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_rmacsx on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_rmacsx.id
left join routes.route_pt routes_route_pt_bqywic on routes.routesegment_ts.routeformed_id = routes_route_pt_bqywic.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_qojcel on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_qojcel.id
left join geometry.curve_view geometry_curve_view_ewicku on routes.routesegment_ts.curveextent_id = geometry_curve_view_ewicku.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_yutjjb on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_yutjjb.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_sfqcsu.id) as availability
  from master_join master_join_zslqmb
  join routes.routeavailability_view routes_routeavailability_lat_sfqcsu on master_join_zslqmb.target_id = routes_routeavailability_lat_sfqcsu.id
  where master_join_zslqmb.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_unhwgb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fjnqye.*) AS annotation
  from master_join master_join_pnnhaq
  join notes.note_view notes_note_lat_fjnqye on master_join_pnnhaq.target_id = notes_note_lat_fjnqye.id
  where master_join_pnnhaq.source_id = routes.routesegment_ts.id
) as notes_note_view_fljyti on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_eulgtj.title as varchar), '(' || organisation_organisationauthority_pt_eulgtj.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_eulgtj.href::text AS userorganisation_href,
    notes_note_view_zkkzec.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_eulgtj on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_eulgtj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thqozb.*) AS annotation
  from master_join master_join_tgipii
  join notes.note_view notes_note_lat_thqozb on master_join_tgipii.target_id = notes_note_lat_thqozb.id
  where master_join_tgipii.source_id = routes.route_ts.id
) as notes_note_view_zkkzec on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_sbvcya.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_kxoani.affectedarea::jsonb as affectedarea,
    notes_note_view_jqwlct.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xewpep.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xewpep.title AS varchar), '(' || airport_heliport_airportheliport_lat_xewpep.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xewpep.href
  )) as affectedlocation  from master_join master_join_qbxpak
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xewpep on master_join_qbxpak.target_id = airport_heliport_airportheliport_lat_xewpep.id
  where master_join_qbxpak.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_sbvcya on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_oxmgqf.id,
      'title', coalesce(cast(airspace_airspace_lat_oxmgqf.title AS varchar), '(' || airspace_airspace_lat_oxmgqf.nilreason[1] || ')'),
      'href', airspace_airspace_lat_oxmgqf.href
  )) as affectedarea  from master_join master_join_moyzjw
  join airspace.airspace_pt airspace_airspace_lat_oxmgqf on master_join_moyzjw.target_id = airspace_airspace_lat_oxmgqf.id
  where master_join_moyzjw.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_kxoani on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ipvqqt.*) AS annotation
  from master_join master_join_aoerup
  join notes.note_view notes_note_lat_ipvqqt on master_join_aoerup.target_id = notes_note_lat_ipvqqt.id
  where master_join_aoerup.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_jqwlct on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_xqxwlw.title as varchar), '(' || airport_heliport_runwaydirection_pt_xqxwlw.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_xqxwlw.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_btwats.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_btwats.elevation AS extent_elevation,
    geometry_elevatedsurface_view_btwats.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_btwats.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_btwats.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_btwats.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fizwhm.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_fizwhm.annotation::jsonb AS surfaceproperties_annotation,
    notes_note_view_sadakq.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_xqxwlw on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_xqxwlw.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_btwats on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_btwats.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fizwhm on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fizwhm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kfchvz.*) AS annotation
  from master_join master_join_escngy
  join notes.note_view notes_note_lat_kfchvz on master_join_escngy.target_id = notes_note_lat_kfchvz.id
  where master_join_escngy.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_sadakq on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointType
-- ['geometry.elevatedpoint_view', 'airport_heliport.navaidequipmentdistance_view', 'notes.note_view', 'airport_heliport.runwaydeclareddistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_bitxbb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bitxbb.longitude AS location_longitude,
    geometry_elevatedpoint_view_bitxbb.latitude AS location_latitude,
    geometry_elevatedpoint_view_bitxbb.elevation AS location_elevation,
    geometry_elevatedpoint_view_bitxbb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bitxbb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bitxbb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bitxbb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_tamomx.title as varchar), '(' || airport_heliport_runwaydirection_pt_tamomx.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_tamomx.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_ddwrfg.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_gdmonw.navaidequipment::jsonb as navaidequipment,
    notes_note_view_imwnne.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bitxbb on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_bitxbb.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_tamomx on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_tamomx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_hjspez.id) as associateddeclareddistance
  from master_join master_join_qdvwbs
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_hjspez on master_join_qdvwbs.target_id = airport_heliport_runwaydeclareddistance_lat_hjspez.id
  where master_join_qdvwbs.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_ddwrfg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_vnzjdx.id) as navaidequipment
  from master_join master_join_tojcyz
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_vnzjdx on master_join_tojcyz.target_id = airport_heliport_navaidequipmentdistance_lat_vnzjdx.id
  where master_join_tojcyz.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_gdmonw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xmofuk.*) AS annotation
  from master_join master_join_kpcdat
  join notes.note_view notes_note_lat_xmofuk on master_join_kpcdat.target_id = notes_note_lat_xmofuk.id
  where master_join_kpcdat.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_imwnne on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_ugbvmf.title as varchar), '(' || airport_heliport_runwaydirection_pt_ugbvmf.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_ugbvmf.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_oapupa.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_vvovov.availability::jsonb as availability,
    notes_note_view_ijsypu.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ugbvmf on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_ugbvmf.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ujfrob.id) as element
  from master_join master_join_qkhfpc
  join shared.lightelement_view shared_lightelement_lat_ujfrob on master_join_qkhfpc.target_id = shared_lightelement_lat_ujfrob.id
  where master_join_qkhfpc.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_oapupa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tvgtyh.id) as availability
  from master_join master_join_iicmyb
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tvgtyh on master_join_iicmyb.target_id = airport_heliport_groundlightingavailability_lat_tvgtyh.id
  where master_join_iicmyb.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_vvovov on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ynuofm.*) AS annotation
  from master_join master_join_hfyzwh
  join notes.note_view notes_note_lat_ynuofm on master_join_hfyzwh.target_id = notes_note_lat_ynuofm.id
  where master_join_hfyzwh.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_ijsypu on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_pnehit.title as varchar), '(' || airport_heliport_runway_pt_pnehit.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_pnehit.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_bekwkz.title as varchar), '(' || airport_heliport_runwayelement_pt_bekwkz.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_bekwkz.href::text AS startingelement_href,
    notes_note_view_coionz.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_stqmcy.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_pnehit on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_pnehit.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_bekwkz on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_bekwkz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pqzyhq.*) AS annotation
  from master_join master_join_fdrpqy
  join notes.note_view notes_note_lat_pqzyhq on master_join_fdrpqy.target_id = notes_note_lat_pqzyhq.id
  where master_join_fdrpqy.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_coionz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xjvxbx.id) as availability
  from master_join master_join_ottlkc
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xjvxbx on master_join_ottlkc.target_id = airport_heliport_manoeuvringareaavailability_lat_xjvxbx.id
  where master_join_ottlkc.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_stqmcy on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jxsvjm.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_jxsvjm.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_ffidrs.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ffidrs.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ffidrs.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ffidrs.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ffidrs.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ffidrs.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_rrncev.associatedrunway::jsonb as associatedrunway,
    notes_note_view_dgpxlw.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_xwwmiv.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jxsvjm on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jxsvjm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ffidrs on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_ffidrs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_wriahh.id,
      'title', coalesce(cast(airport_heliport_runway_lat_wriahh.title AS varchar), '(' || airport_heliport_runway_lat_wriahh.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_wriahh.href
  )) as associatedrunway  from master_join master_join_yqndsu
  join airport_heliport.runway_pt airport_heliport_runway_lat_wriahh on master_join_yqndsu.target_id = airport_heliport_runway_lat_wriahh.id
  where master_join_yqndsu.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_rrncev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjnrsz.*) AS annotation
  from master_join master_join_qgyztp
  join notes.note_view notes_note_lat_xjnrsz on master_join_qgyztp.target_id = notes_note_lat_xjnrsz.id
  where master_join_qgyztp.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_dgpxlw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_bdlrsi.id) as availability
  from master_join master_join_nressl
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_bdlrsi on master_join_nressl.target_id = airport_heliport_manoeuvringareaavailability_lat_bdlrsi.id
  where master_join_nressl.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_xwwmiv on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_fojdsk.title as varchar), '(' || airport_heliport_runway_pt_fojdsk.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_fojdsk.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_yupksj.element::jsonb as element,
    notes_note_view_kuediy.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_fojdsk on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_fojdsk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_sgtrgm.id) as element
  from master_join master_join_wlkgsq
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_sgtrgm on master_join_wlkgsq.target_id = airport_heliport_markingelement_lat_sgtrgm.id
  where master_join_wlkgsq.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_yupksj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evgjeb.*) AS annotation
  from master_join master_join_nnfhgc
  join notes.note_view notes_note_lat_evgjeb on master_join_nnfhgc.target_id = notes_note_lat_evgjeb.id
  where master_join_nnfhgc.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_kuediy on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_zmqutj.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_zmqutj.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_zmqutj.href::text AS lightedarea_href,
    shared_lightelement_view_cxlazn.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_hvsidg.availability::jsonb as availability,
    notes_note_view_helakc.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_zmqutj on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_zmqutj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_xtiadt.id) as element
  from master_join master_join_lxhbbo
  join shared.lightelement_view shared_lightelement_lat_xtiadt on master_join_lxhbbo.target_id = shared_lightelement_lat_xtiadt.id
  where master_join_lxhbbo.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_cxlazn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ydqwrs.id) as availability
  from master_join master_join_dsdpsx
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ydqwrs on master_join_dsdpsx.target_id = airport_heliport_groundlightingavailability_lat_ydqwrs.id
  where master_join_dsdpsx.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hvsidg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_elkkhk.*) AS annotation
  from master_join master_join_zmykro
  join notes.note_view notes_note_lat_elkkhk on master_join_zmykro.target_id = notes_note_lat_elkkhk.id
  where master_join_zmykro.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_helakc on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_aylquv.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_aylquv.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_sfbkgq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_sfbkgq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_sfbkgq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_sfbkgq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_sfbkgq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_sfbkgq.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_vypixv.title as varchar), '(' || airport_heliport_runwaydirection_pt_vypixv.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_vypixv.href::text AS protectedrunwaydirection_href,
    notes_note_view_ksluwd.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_aylquv on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_aylquv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_sfbkgq on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_sfbkgq.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vypixv on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_vypixv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lqqude.*) AS annotation
  from master_join master_join_gldqnx
  join notes.note_view notes_note_lat_lqqude on master_join_gldqnx.target_id = notes_note_lat_lqqude.id
  where master_join_gldqnx.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_ksluwd on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.runwaysectioncontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_aomgfc.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_aomgfc.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_ikziyu.title as varchar), '(' || airport_heliport_airportheliport_pt_ikziyu.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ikziyu.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_ojaeak.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_sfwmij.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_ckrgsa.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_aomgfc on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_aomgfc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ikziyu on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ikziyu.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_tutuvq.id) as overallcontaminant
  from master_join master_join_lovibq
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_tutuvq on master_join_lovibq.target_id = airport_heliport_runwaycontamination_lat_tutuvq.id
  where master_join_lovibq.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_ojaeak on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aktyda.*) AS annotation
  from master_join master_join_uzjvbr
  join notes.note_view notes_note_lat_aktyda on master_join_uzjvbr.target_id = notes_note_lat_aktyda.id
  where master_join_uzjvbr.source_id = airport_heliport.runway_ts.id
) as notes_note_view_sfwmij on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_behyzj.id) as areacontaminant
  from master_join master_join_fsmgfx
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_behyzj on master_join_fsmgfx.target_id = airport_heliport_runwaysectioncontamination_lat_behyzj.id
  where master_join_fsmgfx.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_ckrgsa on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_szrlfv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_szrlfv.longitude AS location_longitude,
    geometry_elevatedpoint_view_szrlfv.latitude AS location_latitude,
    geometry_elevatedpoint_view_szrlfv.elevation AS location_elevation,
    geometry_elevatedpoint_view_szrlfv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_szrlfv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_szrlfv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_szrlfv.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_hthihe.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_ykhayp.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_szrlfv on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_szrlfv.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_qsbadx.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_qsbadx.title AS varchar), '(' || airport_heliport_runwaydirection_lat_qsbadx.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_qsbadx.href
  )) as associatedrunwaydirection  from master_join master_join_loebdg
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_qsbadx on master_join_loebdg.target_id = airport_heliport_runwaydirection_lat_qsbadx.id
  where master_join_loebdg.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_hthihe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqjtgo.*) AS annotation
  from master_join master_join_zluofj
  join notes.note_view notes_note_lat_kqjtgo on master_join_zluofj.target_id = notes_note_lat_kqjtgo.id
  where master_join_zluofj.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_ykhayp on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaType
-- ['procedure.safealtitudeareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_vfddpr.title as varchar), '(' || navaids_points_designatedpoint_pt_vfddpr.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_vfddpr.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ptsaee.title as varchar), '(' || navaids_points_navaid_pt_ptsaee.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_ptsaee.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rvqtfo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rvqtfo.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_rvqtfo.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_gnrvzz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_gnrvzz.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_gnrvzz.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_plyjkn.title as varchar), '(' || airport_heliport_airportheliport_pt_plyjkn.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_plyjkn.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_mcvcmz.location::jsonb as location,
    geometry_point_view_juebeh.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_juebeh.longitude AS centrepointposition_longitude,
    geometry_point_view_juebeh.latitude AS centrepointposition_latitude,
    geometry_point_view_juebeh.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_dcvqvl.sector::jsonb as sector,
    notes_note_view_vqpimk.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vfddpr on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vfddpr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ptsaee on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_ptsaee.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rvqtfo on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rvqtfo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_gnrvzz on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_gnrvzz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_plyjkn on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_plyjkn.id
left join geometry.point_view geometry_point_view_juebeh on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_juebeh.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_sykpxw.id) as sector
  from master_join master_join_ekapkh
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_sykpxw on master_join_ekapkh.target_id = procedure_safealtitudeareasector_lat_sykpxw.id
  where master_join_ekapkh.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_dcvqvl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_fluohb.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_fluohb.title AS varchar), '(' || airport_heliport_airportheliport_lat_fluohb.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_fluohb.href
  )) as location  from master_join master_join_jqjjmi
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_fluohb on master_join_jqjjmi.target_id = airport_heliport_airportheliport_lat_fluohb.id
  where master_join_jqjjmi.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_mcvcmz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nztoye.*) AS annotation
  from master_join master_join_pytcje
  join notes.note_view notes_note_lat_nztoye on master_join_pytcje.target_id = notes_note_lat_nztoye.id
  where master_join_pytcje.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_vqpimk on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_sdytae.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_sdytae.longitude AS location_longitude,
    geometry_elevatedpoint_view_sdytae.latitude AS location_latitude,
    geometry_elevatedpoint_view_sdytae.elevation AS location_elevation,
    geometry_elevatedpoint_view_sdytae.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sdytae.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sdytae.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sdytae.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lqwgku.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_xksspd.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_wjhmno.availability::jsonb as availability,
    notes_note_view_uxbior.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sdytae on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_sdytae.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_oerrms.id) as authority
  from master_join master_join_irszwc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_oerrms on master_join_irszwc.target_id = navaids_points_authorityfornavaidequipment_lat_oerrms.id
  where master_join_irszwc.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_lqwgku on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zwitml.id) as monitoring
  from master_join master_join_qafrfr
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zwitml on master_join_qafrfr.target_id = navaids_points_navaidequipmentmonitoring_lat_zwitml.id
  where master_join_qafrfr.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xksspd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ynnloh.id) as availability
  from master_join master_join_qmmpwv
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ynnloh on master_join_qmmpwv.target_id = navaids_points_navaidoperationalstatus_lat_ynnloh.id
  where master_join_qmmpwv.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_wjhmno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_recmml.*) AS annotation
  from master_join master_join_kqtjdd
  join notes.note_view notes_note_lat_recmml on master_join_kqtjdd.target_id = notes_note_lat_recmml.id
  where master_join_kqtjdd.source_id = navaids_points.sdf_ts.id
) as notes_note_view_uxbior on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaType
-- ['geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_vntuon.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vntuon.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vntuon.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vntuon.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vntuon.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vntuon.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_abcntr.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_alysme.docksite::jsonb as docksite,
    notes_note_view_ddvfye.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_cixfwi.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vntuon on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_vntuon.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_znnsul.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_znnsul.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_znnsul.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_znnsul.href
  )) as rampsite  from master_join master_join_pdnqqv
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_znnsul on master_join_pdnqqv.target_id = airport_heliport_seaplanerampsite_lat_znnsul.id
  where master_join_pdnqqv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_abcntr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_rosnag.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_rosnag.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_rosnag.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_rosnag.href
  )) as docksite  from master_join master_join_aopvuw
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_rosnag on master_join_aopvuw.target_id = airport_heliport_floatingdocksite_lat_rosnag.id
  where master_join_aopvuw.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_alysme on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wdnyqn.*) AS annotation
  from master_join master_join_vihtsn
  join notes.note_view notes_note_lat_wdnyqn on master_join_vihtsn.target_id = notes_note_lat_wdnyqn.id
  where master_join_vihtsn.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_ddvfye on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_kznazm.id) as availability
  from master_join master_join_vukady
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_kznazm on master_join_vukady.target_id = airport_heliport_manoeuvringareaavailability_lat_kznazm.id
  where master_join_vukady.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_cixfwi on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_gvxvhk.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_gvxvhk.elevation AS extent_elevation,
    geometry_elevatedsurface_view_gvxvhk.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_gvxvhk.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_gvxvhk.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_gvxvhk.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_jashtt.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_jashtt.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_jashtt.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_jashtt.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_jashtt.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_jashtt.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_rkjmei.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gvxvhk on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_gvxvhk.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_jashtt on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_jashtt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lafpes.*) AS annotation
  from master_join master_join_dwjvgx
  join notes.note_view notes_note_lat_lafpes on master_join_dwjvgx.target_id = notes_note_lat_lafpes.id
  where master_join_dwjvgx.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_rkjmei on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'routes.routeportion_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_qmxpes.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qmxpes.longitude AS location_longitude,
    geometry_elevatedpoint_view_qmxpes.latitude AS location_latitude,
    geometry_elevatedpoint_view_qmxpes.elevation AS location_elevation,
    geometry_elevatedpoint_view_qmxpes.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qmxpes.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qmxpes.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qmxpes.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pmvitk.title as varchar), '(' || organisation_unit_pt_pmvitk.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pmvitk.href::text AS serviceprovider_href,
    service_callsigndetail_view_yoimbs.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_omnjwf.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_tunvwb.availability::jsonb as availability,
    notes_note_view_bfunqo.annotation::jsonb as annotation,
    airspace_airspace_pt_hckjeg.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_tdfemv.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qmxpes on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_qmxpes.id
left join organisation.unit_pt organisation_unit_pt_pmvitk on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_pmvitk.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_mzmwyd.id) as callsign
  from master_join master_join_ayczlq
  join service.callsigndetail_view service_callsigndetail_lat_mzmwyd on master_join_ayczlq.target_id = service_callsigndetail_lat_mzmwyd.id
  where master_join_ayczlq.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_yoimbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_sxgiif.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_sxgiif.title AS varchar), '(' || service_radiocommunicationchannel_lat_sxgiif.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_sxgiif.href
  )) as radiocommunication  from master_join master_join_bhtafp
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_sxgiif on master_join_bhtafp.target_id = service_radiocommunicationchannel_lat_sxgiif.id
  where master_join_bhtafp.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_omnjwf on TRUE
left join lateral(
  select
  from master_join master_join_rljgiy
  join shared.contactinformation_view shared_contactinformation_lat_hlnoqm on master_join_rljgiy.target_id = shared_contactinformation_lat_hlnoqm.id
  where master_join_rljgiy.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_yzsimi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_joohlg.id) as availability
  from master_join master_join_tbvkpr
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_joohlg on master_join_tbvkpr.target_id = service_serviceoperationalstatus_lat_joohlg.id
  where master_join_tbvkpr.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_tunvwb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uedoog.*) AS annotation
  from master_join master_join_fhbgoj
  join notes.note_view notes_note_lat_uedoog on master_join_fhbgoj.target_id = notes_note_lat_uedoog.id
  where master_join_fhbgoj.source_id = service.searchrescueservice_ts.id
) as notes_note_view_bfunqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_psjhqx.id,
      'title', coalesce(cast(airspace_airspace_lat_psjhqx.title AS varchar), '(' || airspace_airspace_lat_psjhqx.nilreason[1] || ')'),
      'href', airspace_airspace_lat_psjhqx.href
  )) as clientairspace  from master_join master_join_zbvkty
  join airspace.airspace_pt airspace_airspace_lat_psjhqx on master_join_zbvkty.target_id = airspace_airspace_lat_psjhqx.id
  where master_join_zbvkty.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_hckjeg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_xqlckf.id) as clientroute
  from master_join master_join_ncvnsc
  join routes.routeportion_view routes_routeportion_lat_xqlckf on master_join_ncvnsc.target_id = routes_routeportion_lat_xqlckf.id
  where master_join_ncvnsc.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_tdfemv on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarType
-- ['surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_bmihur.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bmihur.longitude AS location_longitude,
    geometry_elevatedpoint_view_bmihur.latitude AS location_latitude,
    geometry_elevatedpoint_view_bmihur.elevation AS location_elevation,
    geometry_elevatedpoint_view_bmihur.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bmihur.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bmihur.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bmihur.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_lnwxxe.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_ffnxrr.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bmihur on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_bmihur.id
left join lateral(
  select
  from master_join master_join_hlltbx
  join shared.contactinformation_view shared_contactinformation_lat_dnqnnh on master_join_hlltbx.target_id = shared_contactinformation_lat_dnqnnh.id
  where master_join_hlltbx.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_srrosz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srelft.*) AS annotation
  from master_join master_join_pnqawk
  join notes.note_view notes_note_lat_srelft on master_join_pnqawk.target_id = notes_note_lat_srelft.id
  where master_join_pnqawk.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_lnwxxe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_mofwfd.id) as groundstation
  from master_join master_join_odljvj
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_mofwfd on master_join_odljvj.target_id = surveillance_surveillancegroundstation_lat_mofwfd.id
  where master_join_odljvj.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_ffnxrr on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_vsywin.title as varchar), '(' || airspace_airspace_pt_vsywin.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_vsywin.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_fnmunm.title as varchar), '(' || navaids_points_designatedpoint_pt_fnmunm.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_fnmunm.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_hhngyp.title as varchar), '(' || navaids_points_navaid_pt_hhngyp.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_hhngyp.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_buzfrp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_buzfrp.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_buzfrp.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dsbknd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dsbknd.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dsbknd.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nsndov.title as varchar), '(' || airport_heliport_airportheliport_pt_nsndov.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_nsndov.href::text AS locationairportreferencepoint_href,
    geometry_point_view_zznpxc.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_zznpxc.longitude AS locationposition_longitude,
    geometry_point_view_zznpxc.latitude AS locationposition_latitude,
    geometry_point_view_zznpxc.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_lwpfnp.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_vsywin on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_vsywin.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_fnmunm on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_fnmunm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_hhngyp on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_hhngyp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_buzfrp on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_buzfrp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dsbknd on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dsbknd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nsndov on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_nsndov.id
left join geometry.point_view geometry_point_view_zznpxc on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_zznpxc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xruaot.*) AS annotation
  from master_join master_join_rfwpay
  join notes.note_view notes_note_lat_xruaot on master_join_rfwpay.target_id = notes_note_lat_xruaot.id
  where master_join_rfwpay.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_lwpfnp on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation_organisationauthority_pt_gjrxse.title as varchar), '(' || organisation_organisationauthority_pt_gjrxse.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_gjrxse.href::text AS authority_href,
    notes_note_view_ewolfd.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gjrxse on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_gjrxse.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqqrit.*) AS annotation
  from master_join master_join_cmhccu
  join notes.note_view notes_note_lat_gqqrit on master_join_cmhccu.target_id = notes_note_lat_gqqrit.id
  where master_join_cmhccu.source_id = shared.specialdate_ts.id
) as notes_note_view_ewolfd on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view', 'navaids_points.authorityforspecialnavigationstation_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_hbmcdx.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_hbmcdx.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_hbmcdx.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_lqgpcw.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationstation_view_lqgpcw.annotation::jsonb AS responsibleorganisation_annotation,
    geometry_elevatedpoint_view_tvprox.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_tvprox.longitude AS position_longitude,
    geometry_elevatedpoint_view_tvprox.latitude AS position_latitude,
    geometry_elevatedpoint_view_tvprox.elevation AS position_elevation,
    geometry_elevatedpoint_view_tvprox.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_tvprox.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_tvprox.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_tvprox.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_kndkgv.availability::jsonb as availability,
    notes_note_view_nvleiq.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_hbmcdx on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_hbmcdx.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_lqgpcw on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_lqgpcw.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tvprox on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_tvprox.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_rsppjw.id) as availability
  from master_join master_join_jclkbt
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_rsppjw on master_join_jclkbt.target_id = navaids_points_specialnavigationstationstatus_lat_rsppjw.id
  where master_join_jclkbt.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_kndkgv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pogair.*) AS annotation
  from master_join master_join_mjabvz
  join notes.note_view notes_note_lat_pogair on master_join_mjabvz.target_id = notes_note_lat_pogair.id
  where master_join_mjabvz.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_nvleiq on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as aixmname,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_dnevnb.id)::jsonb AS responsibleorganisation,
    navaids_points_authorityforspecialnavigationsystem_view_dnevnb.annotation::jsonb AS responsibleorganisation_annotation,
    notes_note_view_viyhpk.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_dnevnb on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_dnevnb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xanftr.*) AS annotation
  from master_join master_join_kvhtmx
  join notes.note_view notes_note_lat_xanftr on master_join_kvhtmx.target_id = notes_note_lat_xanftr.id
  where master_join_kvhtmx.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_viyhpk on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalType
-- ['procedure.procedureavailability_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_ukohjo.title as varchar), '(' || navaids_points_navaid_pt_ukohjo.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ukohjo.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qzbout.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qzbout.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qzbout.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_oexatj.title as varchar), '(' || surveillance_radarsystem_pt_oexatj.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_oexatj.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_ldldhx.title as varchar), '(' || procedure_safealtitudearea_pt_ldldhx.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_ldldhx.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_juzupo.id)::jsonb AS arrival,
    procedure_landingtakeoffareacollection_view_juzupo.annotation::jsonb AS arrival_annotation,
    procedure_procedureavailability_view_elkozw.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_rditgx.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_bpejsh.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_gpajum.flighttransition::jsonb as flighttransition,
    notes_note_view_wyhaqq.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ukohjo on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ukohjo.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qzbout on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qzbout.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_oexatj on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_oexatj.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_ldldhx on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_ldldhx.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_juzupo on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_juzupo.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_qwkagj.id) as availability
  from master_join master_join_evugrl
  join procedure.procedureavailability_view procedure_procedureavailability_lat_qwkagj on master_join_evugrl.target_id = procedure_procedureavailability_lat_qwkagj.id
  where master_join_evugrl.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_elkozw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_dfsdhu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_dfsdhu.title AS varchar), '(' || airport_heliport_airportheliport_lat_dfsdhu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_dfsdhu.href
  )) as airportheliport  from master_join master_join_dqioam
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_dfsdhu on master_join_dqioam.target_id = airport_heliport_airportheliport_lat_dfsdhu.id
  where master_join_dqioam.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_rditgx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ltucop.id) as aircraftcharacteristic
  from master_join master_join_zentmy
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ltucop on master_join_zentmy.target_id = shared_aircraftcharacteristic_lat_ltucop.id
  where master_join_zentmy.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_bpejsh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_ippfpt.id) as flighttransition
  from master_join master_join_eyvpef
  join procedure.proceduretransition_view procedure_proceduretransition_lat_ippfpt on master_join_eyvpef.target_id = procedure_proceduretransition_lat_ippfpt.id
  where master_join_eyvpef.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_gpajum on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xwksss.*) AS annotation
  from master_join master_join_gjhdrv
  join notes.note_view notes_note_lat_xwksss on master_join_gjhdrv.target_id = notes_note_lat_xwksss.id
  where master_join_gjhdrv.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_wyhaqq on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureType
-- ['procedure.procedureavailability_view', 'notes.note_view', 'shared.aircraftcharacteristic_view', 'procedure.proceduretransition_view', 'procedure.landingtakeoffareacollection_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_uqrhai.title as varchar), '(' || navaids_points_navaid_pt_uqrhai.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_uqrhai.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_nbcqjx.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_nbcqjx.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_nbcqjx.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_tdltwt.title as varchar), '(' || surveillance_radarsystem_pt_tdltwt.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_tdltwt.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_poswol.title as varchar), '(' || procedure_safealtitudearea_pt_poswol.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_poswol.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_rjgsyg.id)::jsonb AS takeoff,
    procedure_landingtakeoffareacollection_view_rjgsyg.annotation::jsonb AS takeoff_annotation,
    procedure_procedureavailability_view_dgmghz.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_sxlszu.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_pneedc.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_ovhmmj.flighttransition::jsonb as flighttransition,
    notes_note_view_nnqfej.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uqrhai on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_uqrhai.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_nbcqjx on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_nbcqjx.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_tdltwt on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_tdltwt.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_poswol on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_poswol.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_rjgsyg on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_rjgsyg.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_bpeswa.id) as availability
  from master_join master_join_byyhyu
  join procedure.procedureavailability_view procedure_procedureavailability_lat_bpeswa on master_join_byyhyu.target_id = procedure_procedureavailability_lat_bpeswa.id
  where master_join_byyhyu.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_dgmghz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bbpvzw.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bbpvzw.title AS varchar), '(' || airport_heliport_airportheliport_lat_bbpvzw.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bbpvzw.href
  )) as airportheliport  from master_join master_join_shpuqe
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bbpvzw on master_join_shpuqe.target_id = airport_heliport_airportheliport_lat_bbpvzw.id
  where master_join_shpuqe.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_sxlszu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_povrer.id) as aircraftcharacteristic
  from master_join master_join_twrwqz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_povrer on master_join_twrwqz.target_id = shared_aircraftcharacteristic_lat_povrer.id
  where master_join_twrwqz.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_pneedc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_faxaim.id) as flighttransition
  from master_join master_join_ajjmtm
  join procedure.proceduretransition_view procedure_proceduretransition_lat_faxaim on master_join_ajjmtm.target_id = procedure_proceduretransition_lat_faxaim.id
  where master_join_ajjmtm.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_ovhmmj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ydossn.*) AS annotation
  from master_join master_join_nrciyr
  join notes.note_view notes_note_lat_ydossn on master_join_nrciyr.target_id = notes_note_lat_ydossn.id
  where master_join_nrciyr.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_nnqfej on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_xiyjpp.title as varchar), '(' || shared_standardleveltable_pt_xiyjpp.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_xiyjpp.href::text AS leveltable_href,
    shared_standardlevel_view_gthwoj.level::jsonb as level,
    notes_note_view_dmkwze.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_xiyjpp on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_xiyjpp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_pczxhs.id) as level
  from master_join master_join_dxyuie
  join shared.standardlevel_view shared_standardlevel_lat_pczxhs on master_join_dxyuie.target_id = shared_standardlevel_lat_pczxhs.id
  where master_join_dxyuie.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_gthwoj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gszwmo.*) AS annotation
  from master_join master_join_wlfklt
  join notes.note_view notes_note_lat_gszwmo on master_join_wlfklt.target_id = notes_note_lat_gszwmo.id
  where master_join_wlfklt.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_dmkwze on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_umwbxk.title as varchar), '(' || shared_standardlevelcolumn_pt_umwbxk.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_umwbxk.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_bfrnrt.applicableairspace::jsonb as applicableairspace,
    notes_note_view_jluxfx.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_umwbxk on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_umwbxk.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_otvhtb.id,
      'title', coalesce(cast(airspace_airspace_lat_otvhtb.title AS varchar), '(' || airspace_airspace_lat_otvhtb.nilreason[1] || ')'),
      'href', airspace_airspace_lat_otvhtb.href
  )) as applicableairspace  from master_join master_join_wiqmlb
  join airspace.airspace_pt airspace_airspace_lat_otvhtb on master_join_wiqmlb.target_id = airspace_airspace_lat_otvhtb.id
  where master_join_wiqmlb.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_bfrnrt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_euvpnd.*) AS annotation
  from master_join master_join_oyeqcm
  join notes.note_view notes_note_lat_euvpnd on master_join_oyeqcm.target_id = notes_note_lat_euvpnd.id
  where master_join_oyeqcm.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_jluxfx on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_klihxd.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mokgbc.*) AS annotation
  from master_join master_join_mbcmcy
  join notes.note_view notes_note_lat_mokgbc on master_join_mbcmcy.target_id = notes_note_lat_mokgbc.id
  where master_join_mbcmcy.source_id = shared.standardleveltable_ts.id
) as notes_note_view_klihxd on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_wmcxbk.title as varchar), '(' || airport_heliport_aircraftstand_pt_wmcxbk.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_wmcxbk.href::text AS markedstand_href,
    airport_heliport_markingelement_view_ombppa.element::jsonb as element,
    notes_note_view_uedvkr.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_wmcxbk on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_wmcxbk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wvifbw.id) as element
  from master_join master_join_pbwjeu
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wvifbw on master_join_pbwjeu.target_id = airport_heliport_markingelement_lat_wvifbw.id
  where master_join_pbwjeu.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_ombppa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zpheio.*) AS annotation
  from master_join master_join_yhgyuc
  join notes.note_view notes_note_lat_zpheio on master_join_yhgyuc.target_id = notes_note_lat_zpheio.id
  where master_join_yhgyuc.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_uedvkr on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_ichbph.title as varchar), '(' || airport_heliport_airportheliport_pt_ichbph.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ichbph.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_iimfok.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_iimfok.longitude AS location_longitude,
    geometry_elevatedpoint_view_iimfok.latitude AS location_latitude,
    geometry_elevatedpoint_view_iimfok.elevation AS location_elevation,
    geometry_elevatedpoint_view_iimfok.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iimfok.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iimfok.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iimfok.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_mjsjed.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ichbph on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ichbph.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iimfok on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_iimfok.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rbpils.*) AS annotation
  from master_join master_join_fuieec
  join notes.note_view notes_note_lat_rbpils on master_join_fuieec.target_id = notes_note_lat_rbpils.id
  where master_join_fuieec.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_mjsjed on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_gtwqxp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gtwqxp.longitude AS location_longitude,
    geometry_elevatedpoint_view_gtwqxp.latitude AS location_latitude,
    geometry_elevatedpoint_view_gtwqxp.elevation AS location_elevation,
    geometry_elevatedpoint_view_gtwqxp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gtwqxp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gtwqxp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gtwqxp.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_oeyime.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_lorafv.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_rxmvuy.availability::jsonb as availability,
    notes_note_view_wqgtxi.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gtwqxp on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_gtwqxp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_tbosfa.id) as authority
  from master_join master_join_bqejvl
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_tbosfa on master_join_bqejvl.target_id = navaids_points_authorityfornavaidequipment_lat_tbosfa.id
  where master_join_bqejvl.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_oeyime on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pegmyj.id) as monitoring
  from master_join master_join_qucllk
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pegmyj on master_join_qucllk.target_id = navaids_points_navaidequipmentmonitoring_lat_pegmyj.id
  where master_join_qucllk.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_lorafv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_qfcots.id) as availability
  from master_join master_join_vjahnm
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_qfcots on master_join_vjahnm.target_id = navaids_points_navaidoperationalstatus_lat_qfcots.id
  where master_join_vjahnm.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_rxmvuy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oknopk.*) AS annotation
  from master_join master_join_bkmuoh
  join notes.note_view notes_note_lat_oknopk on master_join_bkmuoh.target_id = notes_note_lat_oknopk.id
  where master_join_bkmuoh.source_id = navaids_points.tacan_ts.id
) as notes_note_view_wqgtxi on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_xzaqeq.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_xzaqeq.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_xzaqeq.href::text AS taxiholding_href,
    shared_lightelement_view_bjayip.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_alqgfz.availability::jsonb as availability,
    notes_note_view_fpicim.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_xzaqeq on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_xzaqeq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_mqxhyo.id) as element
  from master_join master_join_qffsqy
  join shared.lightelement_view shared_lightelement_lat_mqxhyo on master_join_qffsqy.target_id = shared_lightelement_lat_mqxhyo.id
  where master_join_qffsqy.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_bjayip on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qfxklf.id) as availability
  from master_join master_join_soudvi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qfxklf on master_join_soudvi.target_id = airport_heliport_groundlightingavailability_lat_qfxklf.id
  where master_join_soudvi.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_alqgfz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kbjhzg.*) AS annotation
  from master_join master_join_galmkn
  join notes.note_view notes_note_lat_kbjhzg on master_join_galmkn.target_id = notes_note_lat_kbjhzg.id
  where master_join_galmkn.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_fpicim on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_wlpprb.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_wlpprb.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_wlpprb.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_jlvklx.element::jsonb as element,
    notes_note_view_pygypp.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_wlpprb on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_wlpprb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_usfjyb.id) as element
  from master_join master_join_elxaxp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_usfjyb on master_join_elxaxp.target_id = airport_heliport_markingelement_lat_usfjyb.id
  where master_join_elxaxp.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_jlvklx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ncpdud.*) AS annotation
  from master_join master_join_distxz
  join notes.note_view notes_note_lat_ncpdud on master_join_distxz.target_id = notes_note_lat_ncpdud.id
  where master_join_distxz.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_pygypp on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_vkinco.title as varchar), '(' || airport_heliport_guidanceline_pt_vkinco.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_vkinco.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_rlkdtq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rlkdtq.longitude AS location_longitude,
    geometry_elevatedpoint_view_rlkdtq.latitude AS location_latitude,
    geometry_elevatedpoint_view_rlkdtq.elevation AS location_elevation,
    geometry_elevatedpoint_view_rlkdtq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rlkdtq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rlkdtq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rlkdtq.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_zgmhtq.protectedrunway::jsonb as protectedrunway,
    notes_note_view_dtjivi.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_vkinco on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_vkinco.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rlkdtq on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_rlkdtq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_zlsiak.id,
      'title', coalesce(cast(airport_heliport_runway_lat_zlsiak.title AS varchar), '(' || airport_heliport_runway_lat_zlsiak.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_zlsiak.href
  )) as protectedrunway  from master_join master_join_hqpiyd
  join airport_heliport.runway_pt airport_heliport_runway_lat_zlsiak on master_join_hqpiyd.target_id = airport_heliport_runway_lat_zlsiak.id
  where master_join_hqpiyd.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_zgmhtq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_krmqux.*) AS annotation
  from master_join master_join_hoiupd
  join notes.note_view notes_note_lat_krmqux on master_join_hoiupd.target_id = notes_note_lat_krmqux.id
  where master_join_hoiupd.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_dtjivi on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ztczac.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_ztczac.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_taxiway_pt_iizbcj.title as varchar), '(' || airport_heliport_taxiway_pt_iizbcj.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_iizbcj.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_icnvrg.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_icnvrg.elevation AS extent_elevation,
    geometry_elevatedsurface_view_icnvrg.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_icnvrg.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_icnvrg.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_icnvrg.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ahhpkz.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_deuakk.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ztczac on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ztczac.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_iizbcj on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_iizbcj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_icnvrg on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_icnvrg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqxdzx.*) AS annotation
  from master_join master_join_maxkaf
  join notes.note_view notes_note_lat_gqxdzx on master_join_maxkaf.target_id = notes_note_lat_gqxdzx.id
  where master_join_maxkaf.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_ahhpkz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_hsyudh.id) as availability
  from master_join master_join_zliern
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_hsyudh on master_join_zliern.target_id = airport_heliport_manoeuvringareaavailability_lat_hsyudh.id
  where master_join_zliern.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_deuakk on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_izcpzt.title as varchar), '(' || airport_heliport_taxiway_pt_izcpzt.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_izcpzt.href::text AS lightedtaxiway_href,
    shared_lightelement_view_eunbih.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_hxlhky.availability::jsonb as availability,
    notes_note_view_lrbyez.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_izcpzt on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_izcpzt.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_drbfvc.id) as element
  from master_join master_join_tipleh
  join shared.lightelement_view shared_lightelement_lat_drbfvc on master_join_tipleh.target_id = shared_lightelement_lat_drbfvc.id
  where master_join_tipleh.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_eunbih on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_qfjhmx.id) as availability
  from master_join master_join_notwch
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_qfjhmx on master_join_notwch.target_id = airport_heliport_groundlightingavailability_lat_qfjhmx.id
  where master_join_notwch.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hxlhky on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_czrinx.*) AS annotation
  from master_join master_join_fymzop
  join notes.note_view notes_note_lat_czrinx on master_join_fymzop.target_id = notes_note_lat_czrinx.id
  where master_join_fymzop.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_lrbyez on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_hfmjke.title as varchar), '(' || airport_heliport_taxiway_pt_hfmjke.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_hfmjke.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_ptwqgf.title as varchar), '(' || airport_heliport_taxiwayelement_pt_ptwqgf.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_ptwqgf.href::text AS markedelement_href,
    airport_heliport_markingelement_view_xwtqut.element::jsonb as element,
    notes_note_view_bpezhz.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_hfmjke on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_hfmjke.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_ptwqgf on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_ptwqgf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rdlodk.id) as element
  from master_join master_join_oxewul
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rdlodk on master_join_oxewul.target_id = airport_heliport_markingelement_lat_rdlodk.id
  where master_join_oxewul.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_xwtqut on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nvlnyw.*) AS annotation
  from master_join master_join_ppikxb
  join notes.note_view notes_note_lat_nvlnyw on master_join_ppikxb.target_id = notes_note_lat_nvlnyw.id
  where master_join_ppikxb.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_bpezhz on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_fxwhpg.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_fxwhpg.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_rdkbcv.title as varchar), '(' || airport_heliport_airportheliport_pt_rdkbcv.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_rdkbcv.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_vbdizb.contaminant::jsonb as contaminant,
    notes_note_view_tiidnp.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_idybkn.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_fxwhpg on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_fxwhpg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rdkbcv on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_rdkbcv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_qtgkds.id) as contaminant
  from master_join master_join_utplmg
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_qtgkds on master_join_utplmg.target_id = airport_heliport_taxiwaycontamination_lat_qtgkds.id
  where master_join_utplmg.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_vbdizb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pfezpa.*) AS annotation
  from master_join master_join_rnatcu
  join notes.note_view notes_note_lat_pfezpa on master_join_rnatcu.target_id = notes_note_lat_pfezpa.id
  where master_join_rnatcu.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_tiidnp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_uvjlpv.id) as availability
  from master_join master_join_pihzgj
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_uvjlpv on master_join_pihzgj.target_id = airport_heliport_manoeuvringareaavailability_lat_uvjlpv.id
  where master_join_pihzgj.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_idybkn on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaType
-- ['procedure.terminalarrivalareasector_view', 'geometry.surface_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_ixuilf.title as varchar), '(' || navaids_points_designatedpoint_pt_ixuilf.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ixuilf.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_igheul.title as varchar), '(' || navaids_points_designatedpoint_pt_igheul.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_igheul.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ibsskv.title as varchar), '(' || navaids_points_navaid_pt_ibsskv.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_ibsskv.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_yalpix.title as varchar), '(' || navaids_points_navaid_pt_yalpix.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_yalpix.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_msigeb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_msigeb.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_msigeb.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qefmuj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qefmuj.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_qefmuj.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lmjvat.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lmjvat.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lmjvat.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_upbqlw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_upbqlw.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_upbqlw.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xwpuui.title as varchar), '(' || airport_heliport_airportheliport_pt_xwpuui.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_xwpuui.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tdwdcg.title as varchar), '(' || airport_heliport_airportheliport_pt_tdwdcg.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_tdwdcg.href::text AS iafairportreferencepoint_href,
    geometry_point_view_rchsku.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_rchsku.longitude AS ifposition_longitude,
    geometry_point_view_rchsku.latitude AS ifposition_latitude,
    geometry_point_view_rchsku.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_qtsuef.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_qtsuef.longitude AS iafposition_longitude,
    geometry_point_view_qtsuef.latitude AS iafposition_latitude,
    geometry_point_view_qtsuef.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_onjfbb.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_onjfbb.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_mswjml.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_mswjml.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_mswjml.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_rhhwsk.sector::jsonb as sector,
    notes_note_view_mruxra.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ixuilf on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ixuilf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ibsskv on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_ibsskv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_msigeb on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_msigeb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lmjvat on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lmjvat.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xwpuui on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_xwpuui.id
left join geometry.point_view geometry_point_view_rchsku on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_rchsku.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_igheul on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_igheul.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yalpix on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_yalpix.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qefmuj on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qefmuj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_upbqlw on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_upbqlw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tdwdcg on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_tdwdcg.id
left join geometry.point_view geometry_point_view_qtsuef on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_qtsuef.id
left join geometry.surface_view geometry_surface_view_onjfbb on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_onjfbb.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_mswjml on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_mswjml.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_dovegm.id) as sector
  from master_join master_join_nvrool
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_dovegm on master_join_nvrool.target_id = procedure_terminalarrivalareasector_lat_dovegm.id
  where master_join_nvrool.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_rhhwsk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cpuaai.*) AS annotation
  from master_join master_join_yxunok
  join notes.note_view notes_note_lat_cpuaai on master_join_yxunok.target_id = notes_note_lat_cpuaai.id
  where master_join_yxunok.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_mruxra on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bmibrd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bmibrd.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_bmibrd.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_ntsrav.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_gozahf.availability::jsonb as availability,
    notes_note_view_ahagzv.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bmibrd on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_bmibrd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lyeqgp.id) as element
  from master_join master_join_bhjfin
  join shared.lightelement_view shared_lightelement_lat_lyeqgp on master_join_bhjfin.target_id = shared_lightelement_lat_lyeqgp.id
  where master_join_bhjfin.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_ntsrav on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tmyoko.id) as availability
  from master_join master_join_uooawi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tmyoko on master_join_uooawi.target_id = airport_heliport_groundlightingavailability_lat_tmyoko.id
  where master_join_uooawi.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_gozahf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ymagxt.*) AS annotation
  from master_join master_join_xsipit
  join notes.note_view notes_note_lat_ymagxt on master_join_xsipit.target_id = notes_note_lat_ymagxt.id
  where master_join_xsipit.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_ahagzv on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rojmkf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rojmkf.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_rojmkf.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_sblqqc.element::jsonb as element,
    notes_note_view_kbxcwu.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rojmkf on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_rojmkf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ehlpwe.id) as element
  from master_join master_join_zcrmai
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ehlpwe on master_join_zcrmai.target_id = airport_heliport_markingelement_lat_ehlpwe.id
  where master_join_zcrmai.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_sblqqc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yfcsnz.*) AS annotation
  from master_join master_join_rxhbnj
  join notes.note_view notes_note_lat_yfcsnz on master_join_rxhbnj.target_id = notes_note_lat_yfcsnz.id
  where master_join_rxhbnj.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_kbxcwu on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_opgxhy.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_opgxhy.annotation::jsonb AS surfaceproperties_annotation,
    geometry_elevatedsurface_view_yaegju.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_yaegju.elevation AS extent_elevation,
    geometry_elevatedsurface_view_yaegju.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_yaegju.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_yaegju.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_yaegju.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ywlprl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ywlprl.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ywlprl.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_iaquzv.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_opgxhy on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_opgxhy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yaegju on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_yaegju.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ywlprl on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ywlprl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mugjsf.*) AS annotation
  from master_join master_join_ovgftu
  join notes.note_view notes_note_lat_mugjsf on master_join_ovgftu.target_id = notes_note_lat_mugjsf.id
  where master_join_ovgftu.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_iaquzv on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffType
-- ['airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_ppgtbh.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_ppgtbh.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_ppgtbh.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_ppgtbh.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_ppgtbh.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_ppgtbh.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_ppgtbh.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_ppgtbh.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_vtmgtm.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_vtmgtm.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vtmgtm.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vtmgtm.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vtmgtm.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vtmgtm.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_levodh.id)::jsonb AS surfaceproperties,
    airport_heliport_surfacecharacteristics_view_levodh.annotation::jsonb AS surfaceproperties_annotation,
    coalesce(cast(airport_heliport_airportheliport_pt_cyzidv.title as varchar), '(' || airport_heliport_airportheliport_pt_cyzidv.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_cyzidv.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_jjiyjf.title as varchar), '(' || airport_heliport_runway_pt_jjiyjf.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_jjiyjf.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_rtvagp.contaminant::jsonb as contaminant,
    notes_note_view_ocayas.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_edskpv.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ppgtbh on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_ppgtbh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vtmgtm on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_vtmgtm.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_levodh on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_levodh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cyzidv on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_cyzidv.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_jjiyjf on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_jjiyjf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_esivbs.id) as contaminant
  from master_join master_join_nusgqi
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_esivbs on master_join_nusgqi.target_id = airport_heliport_touchdownliftoffcontamination_lat_esivbs.id
  where master_join_nusgqi.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_rtvagp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wvznxg.*) AS annotation
  from master_join master_join_mqvkhg
  join notes.note_view notes_note_lat_wvznxg on master_join_mqvkhg.target_id = notes_note_lat_wvznxg.id
  where master_join_mqvkhg.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_ocayas on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_xdlmrw.id) as availability
  from master_join master_join_kbvidl
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_xdlmrw on master_join_kbvidl.target_id = airport_heliport_manoeuvringareaavailability_lat_xdlmrw.id
  where master_join_kbvidl.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_edskpv on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'organisation.unitavailability_view', 'organisation.unitdependency_view', 'shared.contactinformation_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_dbitvn.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_dbitvn.longitude AS position_longitude,
    geometry_elevatedpoint_view_dbitvn.latitude AS position_latitude,
    geometry_elevatedpoint_view_dbitvn.elevation AS position_elevation,
    geometry_elevatedpoint_view_dbitvn.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_dbitvn.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_dbitvn.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_dbitvn.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_sebusw.title as varchar), '(' || airport_heliport_airportheliport_pt_sebusw.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_sebusw.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_hjspaq.title as varchar), '(' || organisation_organisationauthority_pt_hjspaq.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_hjspaq.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_ohwnnw.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_srqtms.availability::jsonb as availability,
    notes_note_view_sklbrj.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dbitvn on organisation.unit_ts.position_id = geometry_elevatedpoint_view_dbitvn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sebusw on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_sebusw.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hjspaq on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_hjspaq.id
left join lateral(
  select
  from master_join master_join_sydaqt
  join shared.contactinformation_view shared_contactinformation_lat_akbmnk on master_join_sydaqt.target_id = shared_contactinformation_lat_akbmnk.id
  where master_join_sydaqt.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_bjdwag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_svbfmv.id) as relatedunit
  from master_join master_join_gjxtsa
  join organisation.unitdependency_view organisation_unitdependency_lat_svbfmv on master_join_gjxtsa.target_id = organisation_unitdependency_lat_svbfmv.id
  where master_join_gjxtsa.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_ohwnnw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_jsvaco.id) as availability
  from master_join master_join_ddnfev
  join organisation.unitavailability_view organisation_unitavailability_lat_jsvaco on master_join_ddnfev.target_id = organisation_unitavailability_lat_jsvaco.id
  where master_join_ddnfev.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_srqtms on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ruilio.*) AS annotation
  from master_join master_join_znxunn
  join notes.note_view notes_note_lat_ruilio on master_join_znxunn.target_id = notes_note_lat_ruilio.id
  where master_join_znxunn.source_id = organisation.unit_ts.id
) as notes_note_view_sklbrj on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_dinkhx.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_szivmn.*) AS annotation
  from master_join master_join_sugddd
  join notes.note_view notes_note_lat_szivmn on master_join_sugddd.target_id = notes_note_lat_szivmn.id
  where master_join_sugddd.source_id = holding.unplannedholding_ts.id
) as notes_note_view_dinkhx on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureType
-- ['obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_stcacq.title as varchar), '(' || navaids_points_markerbeacon_pt_stcacq.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_stcacq.href::text AS marker_href,
    obstacles_verticalstructurepart_view_zybjht.part::jsonb as part,
    service_passengerservice_pt_bcxwoh.hostedpassengerservice::jsonb as hostedpassengerservice,
    airport_heliport_groundlightsystem_pt_stjcbq.supportedgroundlight::jsonb as supportedgroundlight,
    navaids_points_navaidequipment_pt_nzzgsr.hostednavaidequipment::jsonb as hostednavaidequipment,
    navaids_points_specialnavigationstation_pt_jjbtjs.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_crkxzw.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_tbrpbj.hostedorganisation::jsonb as hostedorganisation,
    service_service_pt_mfutan.supportedservice::jsonb as supportedservice,
    notes_note_view_giqqgl.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_pkqlrh.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_stcacq on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_stcacq.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_yfveiv.id) as part
  from master_join master_join_jmmnpl
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_yfveiv on master_join_jmmnpl.target_id = obstacles_verticalstructurepart_lat_yfveiv.id
  where master_join_jmmnpl.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_zybjht on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_ykghyw.id,
      'title', coalesce(cast(service_passengerservice_lat_ykghyw.title AS varchar), '(' || service_passengerservice_lat_ykghyw.nilreason[1] || ')'),
      'href', service_passengerservice_lat_ykghyw.href
  )) as hostedpassengerservice  from master_join master_join_sdvqgi
  join service.passengerservice_pt service_passengerservice_lat_ykghyw on master_join_sdvqgi.target_id = service_passengerservice_lat_ykghyw.id
  where master_join_sdvqgi.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_bcxwoh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_groundlightsystem_lat_ibbnlw.id,
      'title', coalesce(cast(airport_heliport_groundlightsystem_lat_ibbnlw.title AS varchar), '(' || airport_heliport_groundlightsystem_lat_ibbnlw.nilreason[1] || ')'),
      'href', airport_heliport_groundlightsystem_lat_ibbnlw.href
  )) as supportedgroundlight  from master_join master_join_iqntje
  join airport_heliport.groundlightsystem_pt airport_heliport_groundlightsystem_lat_ibbnlw on master_join_iqntje.target_id = airport_heliport_groundlightsystem_lat_ibbnlw.id
  where master_join_iqntje.source_id = obstacles.verticalstructure_ts.id
) as airport_heliport_groundlightsystem_pt_stjcbq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_navaidequipment_lat_iwmlal.id,
      'title', coalesce(cast(navaids_points_navaidequipment_lat_iwmlal.title AS varchar), '(' || navaids_points_navaidequipment_lat_iwmlal.nilreason[1] || ')'),
      'href', navaids_points_navaidequipment_lat_iwmlal.href
  )) as hostednavaidequipment  from master_join master_join_eluhhe
  join navaids_points.navaidequipment_pt navaids_points_navaidequipment_lat_iwmlal on master_join_eluhhe.target_id = navaids_points_navaidequipment_lat_iwmlal.id
  where master_join_eluhhe.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_navaidequipment_pt_nzzgsr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_mpllge.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_mpllge.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_mpllge.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_mpllge.href
  )) as hostedspecialnavstation  from master_join master_join_zoggoa
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_mpllge on master_join_zoggoa.target_id = navaids_points_specialnavigationstation_lat_mpllge.id
  where master_join_zoggoa.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_jjbtjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_jcsjyf.id,
      'title', coalesce(cast(organisation_unit_lat_jcsjyf.title AS varchar), '(' || organisation_unit_lat_jcsjyf.nilreason[1] || ')'),
      'href', organisation_unit_lat_jcsjyf.href
  )) as hostedunit  from master_join master_join_wbifbg
  join organisation.unit_pt organisation_unit_lat_jcsjyf on master_join_wbifbg.target_id = organisation_unit_lat_jcsjyf.id
  where master_join_wbifbg.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_crkxzw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_euzsdm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_euzsdm.title AS varchar), '(' || organisation_organisationauthority_lat_euzsdm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_euzsdm.href
  )) as hostedorganisation  from master_join master_join_dhgigq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_euzsdm on master_join_dhgigq.target_id = organisation_organisationauthority_lat_euzsdm.id
  where master_join_dhgigq.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_tbrpbj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_service_lat_tzasqz.id,
      'title', coalesce(cast(service_service_lat_tzasqz.title AS varchar), '(' || service_service_lat_tzasqz.nilreason[1] || ')'),
      'href', service_service_lat_tzasqz.href
  )) as supportedservice  from master_join master_join_ucljdm
  join service.service_pt service_service_lat_tzasqz on master_join_ucljdm.target_id = service_service_lat_tzasqz.id
  where master_join_ucljdm.source_id = obstacles.verticalstructure_ts.id
) as service_service_pt_mfutan on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vayzgv.*) AS annotation
  from master_join master_join_yrexgv
  join notes.note_view notes_note_lat_vayzgv on master_join_yrexgv.target_id = notes_note_lat_vayzgv.id
  where master_join_yrexgv.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_giqqgl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_avswuh.id) as lightingavailability
  from master_join master_join_dakxws
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_avswuh on master_join_dakxws.target_id = obstacles_verticalstructurelightingstatus_lat_avswuh.id
  where master_join_dakxws.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_pkqlrh on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorType
-- ['shared.lightelement_view', 'notes.note_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_cpfnpb.title as varchar), '(' || airport_heliport_runwaydirection_pt_cpfnpb.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_cpfnpb.href::text AS runwaydirection_href,
    shared_lightelement_view_vecugm.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qcyfhu.availability::jsonb as availability,
    notes_note_view_wbhoor.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_cpfnpb on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_cpfnpb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_wnzowx.id) as element
  from master_join master_join_xnpspn
  join shared.lightelement_view shared_lightelement_lat_wnzowx on master_join_xnpspn.target_id = shared_lightelement_lat_wnzowx.id
  where master_join_xnpspn.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_vecugm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_jjtlce.id) as availability
  from master_join master_join_omxzox
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_jjtlce on master_join_omxzox.target_id = airport_heliport_groundlightingavailability_lat_jjtlce.id
  where master_join_omxzox.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_qcyfhu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oujaow.*) AS annotation
  from master_join master_join_jrxywh
  join notes.note_view notes_note_lat_oujaow on master_join_jrxywh.target_id = notes_note_lat_oujaow.id
  where master_join_jrxywh.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_wbhoor on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as aixmname,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_zgkkvs.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zgkkvs.longitude AS location_longitude,
    geometry_elevatedpoint_view_zgkkvs.latitude AS location_latitude,
    geometry_elevatedpoint_view_zgkkvs.elevation AS location_elevation,
    geometry_elevatedpoint_view_zgkkvs.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zgkkvs.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zgkkvs.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zgkkvs.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_qhxicj.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_fxokyp.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_qhldsg.availability::jsonb as availability,
    notes_note_view_olxomb.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zgkkvs on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_zgkkvs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nfjgrv.id) as authority
  from master_join master_join_iszuww
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nfjgrv on master_join_iszuww.target_id = navaids_points_authorityfornavaidequipment_lat_nfjgrv.id
  where master_join_iszuww.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_qhxicj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_nfwuir.id) as monitoring
  from master_join master_join_mdlnsx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_nfwuir on master_join_mdlnsx.target_id = navaids_points_navaidequipmentmonitoring_lat_nfwuir.id
  where master_join_mdlnsx.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_fxokyp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dlatoy.id) as availability
  from master_join master_join_dvcofg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dlatoy on master_join_dvcofg.target_id = navaids_points_navaidoperationalstatus_lat_dlatoy.id
  where master_join_dvcofg.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_qhldsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_munrgv.*) AS annotation
  from master_join master_join_tohgao
  join notes.note_view notes_note_lat_munrgv on master_join_tohgao.target_id = notes_note_lat_munrgv.id
  where master_join_tohgao.source_id = navaids_points.vor_ts.id
) as notes_note_view_olxomb on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaType
-- ['airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedoperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_iybzug.title as varchar), '(' || airport_heliport_airportheliport_pt_iybzug.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_iybzug.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_pttkkf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_pttkkf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_pttkkf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_pttkkf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_pttkkf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_pttkkf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_ajpnoh.activation::jsonb as activation,
    notes_note_view_kqbsfc.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iybzug on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_iybzug.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pttkkf on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_pttkkf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_uoanbt.id) as activation
  from master_join master_join_bfhqfh
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_uoanbt on master_join_bfhqfh.target_id = airport_heliport_workareaactivity_lat_uoanbt.id
  where master_join_bfhqfh.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_ajpnoh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dvbdfo.*) AS annotation
  from master_join master_join_rqupoz
  join notes.note_view notes_note_lat_dvbdfo on master_join_rqupoz.target_id = notes_note_lat_dvbdfo.id
  where master_join_rqupoz.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_kqbsfc on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
