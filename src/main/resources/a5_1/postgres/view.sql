-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id,
    shared.aircraftcharacteristic_pt.nilreason AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')') as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')') as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')') as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')') as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')') as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')') as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')') as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')') as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')') as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')') as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')') as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')') as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')') as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')') as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')') as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')') as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')') as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')') as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')') as speed,
    notes_note_view_qhjnhk.annotation as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kalcyl.*) AS annotation
  from master_join master_join_bmfpmy
  join notes.note_view notes_note_lat_kalcyl on master_join_bmfpmy.target_id = notes_note_lat_kalcyl.id
  where master_join_bmfpmy.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_qhjnhk on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id,
    airport_heliport.aircraftstandcontamination_pt.nilreason AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_utxajb.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_chibyb.layer as layer,
    notes_note_view_zhjnxl.annotation as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_nvrmdi.id) as criticalridge
  from master_join master_join_zqfbrg
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_nvrmdi on master_join_zqfbrg.target_id = airport_heliport_ridge_lat_nvrmdi.id
  where master_join_zqfbrg.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_utxajb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_krjkqi.id) as layer
  from master_join master_join_mpkpsu
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_krjkqi on master_join_mpkpsu.target_id = airport_heliport_surfacecontaminationlayer_lat_krjkqi.id
  where master_join_mpkpsu.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_chibyb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gauhac.*) AS annotation
  from master_join master_join_yhkgne
  join notes.note_view notes_note_lat_gauhac on master_join_yhkgne.target_id = notes_note_lat_gauhac.id
  where master_join_yhkgne.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_zhjnxl on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id,
    airport_heliport.airportheliportcontamination_pt.nilreason AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_cfuemy.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_okwlvr.layer as layer,
    notes_note_view_cnkbqt.annotation as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_fcymio.id) as criticalridge
  from master_join master_join_pexwnl
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_fcymio on master_join_pexwnl.target_id = airport_heliport_ridge_lat_fcymio.id
  where master_join_pexwnl.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_cfuemy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qgzpdz.id) as layer
  from master_join master_join_vbwhqk
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qgzpdz on master_join_vbwhqk.target_id = airport_heliport_surfacecontaminationlayer_lat_qgzpdz.id
  where master_join_vbwhqk.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_okwlvr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_klndqa.*) AS annotation
  from master_join master_join_osgjvv
  join notes.note_view notes_note_lat_klndqa on master_join_osgjvv.target_id = notes_note_lat_klndqa.id
  where master_join_osgjvv.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_cnkbqt on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id,
    airspace.airspacegeometrycomponent_pt.nilreason AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')') as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')') as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_kkqbnf.id) AS theairspacevolume,
    notes_note_view_wnupnn.annotation as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_kkqbnf on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_kkqbnf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xiczff.*) AS annotation
  from master_join master_join_mxwrxn
  join notes.note_view notes_note_lat_xiczff on master_join_mxwrxn.target_id = notes_note_lat_xiczff.id
  where master_join_mxwrxn.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_wnupnn on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id,
    shared.airspacelayer_pt.nilreason AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_iqppqh.title as varchar), '(' || shared_standardlevelcolumn_pt_iqppqh.nilreason[1] || ')') AS discretelevelseries,
    shared_standardlevelcolumn_pt_iqppqh.href AS discretelevelseries_href,
    notes_note_view_hsybcy.annotation as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_iqppqh on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_iqppqh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bsptfo.*) AS annotation
  from master_join master_join_finijb
  join notes.note_view notes_note_lat_bsptfo on master_join_finijb.target_id = notes_note_lat_bsptfo.id
  where master_join_finijb.source_id = shared.airspacelayer.id
) as notes_note_view_hsybcy on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id,
    airspace.airspacevolumedependency_pt.nilreason AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')') as dependency,
    coalesce(cast(airspace_airspace_pt_vhdpzn.title as varchar), '(' || airspace_airspace_pt_vhdpzn.nilreason[1] || ')') AS theairspace,
    airspace_airspace_pt_vhdpzn.href AS theairspace_href,
    notes_note_view_jbjiwa.annotation as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_vhdpzn on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_vhdpzn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgbjdc.*) AS annotation
  from master_join master_join_ipvcxh
  join notes.note_view notes_note_lat_vgbjdc on master_join_ipvcxh.target_id = notes_note_lat_vgbjdc.id
  where master_join_ipvcxh.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_jbjiwa on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id,
    shared.altitudeadjustment_pt.nilreason AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')') as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')') as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')') as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')') as altitudeadjustment,
    notes_note_view_cebcbr.annotation as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jlkcvz.*) AS annotation
  from master_join master_join_idhwyi
  join notes.note_view notes_note_lat_jlkcvz on master_join_idhwyi.target_id = notes_note_lat_jlkcvz.id
  where master_join_idhwyi.source_id = shared.altitudeadjustment.id
) as notes_note_view_cebcbr on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id,
    navaids_points.angleuse_pt.nilreason AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')') as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_xakcdl.title as varchar), '(' || navaids_points_angleindication_pt_xakcdl.nilreason[1] || ')') AS theangleindication,
    navaids_points_angleindication_pt_xakcdl.href AS theangleindication_href,
    notes_note_view_wvrlii.annotation as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_xakcdl on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_xakcdl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdluhi.*) AS annotation
  from master_join master_join_jrljar
  join notes.note_view notes_note_lat_hdluhi on master_join_jrljar.target_id = notes_note_lat_hdluhi.id
  where master_join_jrljar.source_id = navaids_points.angleuse.id
) as notes_note_view_wvrlii on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id,
    procedure.approachaltitudetable_pt.nilreason AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')') as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')') as altitude,
    notes_note_view_nicthc.annotation as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ofxvuy.*) AS annotation
  from master_join master_join_wvmpdq
  join notes.note_view notes_note_lat_ofxvuy on master_join_wvmpdq.target_id = notes_note_lat_ofxvuy.id
  where master_join_wvmpdq.source_id = procedure.approachaltitudetable.id
) as notes_note_view_nicthc on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id,
    procedure.approachcondition_pt.nilreason AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')') as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')') as climbgradient,
    to_jsonb(procedure_minima_pt_wxeviq.id) AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_agstxr.title as varchar), '(' || airport_heliport_altimetersource_pt_agstxr.nilreason[1] || ')') AS altimeter,
    airport_heliport_altimetersource_pt_agstxr.href AS altimeter_href,
    procedure_circlingrestriction_pt_cxgsqc.circlingrestriction as circlingrestriction,
    shared_aircraftcharacteristic_pt_yesion.aircraftcategory as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_tdnjlg.landingarea as landingarea,
    shared_obstacleassessmentarea_pt_bfrynd.designsurface as designsurface,
    notes_note_view_ujxlri.annotation as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_wxeviq on procedure.approachcondition.minimumset_id = procedure_minima_pt_wxeviq.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_agstxr on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_agstxr.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_smdikc.id) as circlingrestriction
  from master_join master_join_tbdszv
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_smdikc on master_join_tbdszv.target_id = procedure_circlingrestriction_lat_smdikc.id
  where master_join_tbdszv.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_cxgsqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_rgekho.id) as aircraftcategory
  from master_join master_join_ytmqyx
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_rgekho on master_join_ytmqyx.target_id = shared_aircraftcharacteristic_lat_rgekho.id
  where master_join_ytmqyx.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_yesion on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_iqocxy.id) as landingarea
  from master_join master_join_ynivrh
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_iqocxy on master_join_ynivrh.target_id = procedure_landingtakeoffareacollection_lat_iqocxy.id
  where master_join_ynivrh.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_tdnjlg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_iqwich.id) as designsurface
  from master_join master_join_pjtvzl
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_iqwich on master_join_pjtvzl.target_id = shared_obstacleassessmentarea_lat_iqwich.id
  where master_join_pjtvzl.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_bfrynd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_icqemk.*) AS annotation
  from master_join master_join_wvitds
  join notes.note_view notes_note_lat_icqemk on master_join_wvitds.target_id = notes_note_lat_icqemk.id
  where master_join_wvitds.source_id = procedure.approachcondition.id
) as notes_note_view_ujxlri on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id,
    procedure.approachdistancetable_pt.nilreason AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')') as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')') as distance,
    notes_note_view_xbatqu.annotation as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bxydis.*) AS annotation
  from master_join master_join_uefsnv
  join notes.note_view notes_note_lat_bxydis on master_join_uefsnv.target_id = notes_note_lat_bxydis.id
  where master_join_uefsnv.source_id = procedure.approachdistancetable.id
) as notes_note_view_xbatqu on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id,
    procedure.approachtimingtable_pt.nilreason AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')') as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')') as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')') as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')') as speed,
    notes_note_view_ajryvh.annotation as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrkldw.*) AS annotation
  from master_join master_join_zhftyd
  join notes.note_view notes_note_lat_yrkldw on master_join_zhftyd.target_id = notes_note_lat_yrkldw.id
  where master_join_zhftyd.source_id = procedure.approachtimingtable.id
) as notes_note_view_ajryvh on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id,
    airport_heliport.aproncontamination_pt.nilreason AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_vjqlpp.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_jkwvdd.layer as layer,
    notes_note_view_ulrvvt.annotation as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_jbfsnt.id) as criticalridge
  from master_join master_join_ybmjme
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_jbfsnt on master_join_ybmjme.target_id = airport_heliport_ridge_lat_jbfsnt.id
  where master_join_ybmjme.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_vjqlpp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_kyknsl.id) as layer
  from master_join master_join_mjvhvg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_kyknsl on master_join_mjvhvg.target_id = airport_heliport_surfacecontaminationlayer_lat_kyknsl.id
  where master_join_mjvhvg.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_jkwvdd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sdcvnv.*) AS annotation
  from master_join master_join_flakgh
  join notes.note_view notes_note_lat_sdcvnv on master_join_flakgh.target_id = notes_note_lat_sdcvnv.id
  where master_join_flakgh.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_ulrvvt on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_flmctm.title as varchar), '(' || organisation_organisationauthority_pt_flmctm.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_flmctm.href AS theorganisationauthority_href,
    notes_note_view_qaiqar.annotation as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_flmctm on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_flmctm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfbbeh.*) AS annotation
  from master_join master_join_olvkvj
  join notes.note_view notes_note_lat_gfbbeh on master_join_olvkvj.target_id = notes_note_lat_gfbbeh.id
  where master_join_olvkvj.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_qaiqar on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id,
    navaids_points.authorityfornavaidequipment_pt.nilreason AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_wmzera.title as varchar), '(' || organisation_organisationauthority_pt_wmzera.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_wmzera.href AS theorganisationauthority_href,
    notes_note_view_irkmjp.annotation as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_wmzera on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_wmzera.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wthkuz.*) AS annotation
  from master_join master_join_imkfqp
  join notes.note_view notes_note_lat_wthkuz on master_join_imkfqp.target_id = notes_note_lat_wthkuz.id
  where master_join_imkfqp.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_irkmjp on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_ahuwru.title as varchar), '(' || organisation_organisationauthority_pt_ahuwru.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_ahuwru.href AS theorganisationauthority_href,
    notes_note_view_kmkgzg.annotation as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ahuwru on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_ahuwru.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_suzcox.*) AS annotation
  from master_join master_join_qxpguf
  join notes.note_view notes_note_lat_suzcox on master_join_qxpguf.target_id = notes_note_lat_suzcox.id
  where master_join_qxpguf.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_kmkgzg on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_tkxjoe.title as varchar), '(' || organisation_organisationauthority_pt_tkxjoe.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_tkxjoe.href AS theorganisationauthority_href,
    notes_note_view_etsxdl.annotation as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tkxjoe on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_tkxjoe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_siwyvp.*) AS annotation
  from master_join master_join_nqqbbq
  join notes.note_view notes_note_lat_siwyvp on master_join_nqqbbq.target_id = notes_note_lat_siwyvp.id
  where master_join_nqqbbq.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_etsxdl on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id,
    service.callsigndetail_pt.nilreason AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')') as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')') as language,
    notes_note_view_twbtva.annotation as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eqvpez.*) AS annotation
  from master_join master_join_gksfwj
  join notes.note_view notes_note_lat_eqvpez on master_join_gksfwj.target_id = notes_note_lat_eqvpez.id
  where master_join_gksfwj.source_id = service.callsigndetail.id
) as notes_note_view_twbtva on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id,
    shared.circlesector_pt.nilreason AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')') as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')') as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')') as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')') as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')') as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')') as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')') as lowerlimit,
    notes_note_view_jjioaj.annotation as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lngpzf.*) AS annotation
  from master_join master_join_dypsba
  join notes.note_view notes_note_lat_lngpzf on master_join_dypsba.target_id = notes_note_lat_lngpzf.id
  where master_join_dypsba.source_id = shared.circlesector.id
) as notes_note_view_jjioaj on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id,
    airport_heliport.city_pt.nilreason AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')') as name,
    notes_note_view_kfoovz.annotation as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_spxzsl.*) AS annotation
  from master_join master_join_rpxwwo
  join notes.note_view notes_note_lat_spxzsl on master_join_rpxwwo.target_id = notes_note_lat_spxzsl.id
  where master_join_rpxwwo.source_id = airport_heliport.city.id
) as notes_note_view_kfoovz on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id,
    procedure.departurearrivalcondition_pt.nilreason AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_fuaxzm.id) AS enginetype,
    notes_note_view_baexpj.annotation as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_fuaxzm on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_fuaxzm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvbqml.*) AS annotation
  from master_join master_join_fdfwvn
  join notes.note_view notes_note_lat_cvbqml on master_join_fdfwvn.target_id = notes_note_lat_cvbqml.id
  where master_join_fdfwvn.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_baexpj on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id,
    routes.directflightclass_pt.nilreason AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')') as exceedlength,
    notes_note_view_fnhtyt.annotation as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ucpnzz.*) AS annotation
  from master_join master_join_ibyjee
  join notes.note_view notes_note_lat_ucpnzz on master_join_ibyjee.target_id = notes_note_lat_ucpnzz.id
  where master_join_ibyjee.source_id = routes.directflightclass.id
) as notes_note_view_fnhtyt on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')') as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')') as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')') as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')') as visibilityadjustment,
    notes_note_view_heyzbo.annotation as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_unqpjw.*) AS annotation
  from master_join master_join_wijxlq
  join notes.note_view notes_note_lat_unqpjw on master_join_wijxlq.target_id = notes_note_lat_unqpjw.id
  where master_join_wijxlq.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_heyzbo on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id,
    procedure.equipmentunavailableadjustment_pt.nilreason AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')') as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')') as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_gkqxch.adjustmentinopcol as adjustmentinopcol,
    notes_note_view_gcptkz.annotation as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_akxqhr.id) as adjustmentinopcol
  from master_join master_join_hyqtfw
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_akxqhr on master_join_hyqtfw.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_akxqhr.id
  where master_join_hyqtfw.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_gkqxch on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dfamlk.*) AS annotation
  from master_join master_join_ppayww
  join notes.note_view notes_note_lat_dfamlk on master_join_ppayww.target_id = notes_note_lat_dfamlk.id
  where master_join_ppayww.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_gcptkz on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id,
    public.fasdatablock_pt.nilreason AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')') as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')') as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')') as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')') as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')') as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')') as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')') as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')') as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')') as lengthoffset,
    notes_note_view_kgubze.annotation as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qcsxjf.*) AS annotation
  from master_join master_join_peoioa
  join notes.note_view notes_note_lat_qcsxjf on master_join_peoioa.target_id = notes_note_lat_qcsxjf.id
  where master_join_peoioa.source_id = public.fasdatablock.id
) as notes_note_view_kgubze on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id,
    procedure.finalprofile_pt.nilreason AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_hbqqbr.altitude as altitude,
    procedure_approachdistancetable_pt_rtfhly.distance as distance,
    procedure_approachtimingtable_pt_ocpwgd.timing as timing,
    notes_note_view_etkluk.annotation as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_dyusmp.id) as altitude
  from master_join master_join_yeaebo
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_dyusmp on master_join_yeaebo.target_id = procedure_approachaltitudetable_lat_dyusmp.id
  where master_join_yeaebo.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_hbqqbr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_dwxwnf.id) as distance
  from master_join master_join_wfhhfv
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_dwxwnf on master_join_wfhhfv.target_id = procedure_approachdistancetable_lat_dwxwnf.id
  where master_join_wfhhfv.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_rtfhly on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_fjbdok.id) as timing
  from master_join master_join_nlshgg
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_fjbdok on master_join_nlshgg.target_id = procedure_approachtimingtable_lat_fjbdok.id
  where master_join_nlshgg.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_ocpwgd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjigvo.*) AS annotation
  from master_join master_join_lnklif
  join notes.note_view notes_note_lat_bjigvo on master_join_lnklif.target_id = notes_note_lat_bjigvo.id
  where master_join_lnklif.source_id = procedure.finalprofile.id
) as notes_note_view_etkluk on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id,
    shared.flightcharacteristic_pt.nilreason AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')') as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')') as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')') as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')') as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')') as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')') as purpose,
    notes_note_view_gdgwaw.annotation as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gvmyfh.*) AS annotation
  from master_join master_join_dudrve
  join notes.note_view notes_note_lat_gvmyfh on master_join_dudrve.target_id = notes_note_lat_gvmyfh.id
  where master_join_dudrve.source_id = shared.flightcharacteristic.id
) as notes_note_view_gdgwaw on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id,
    routes.flightconditioncircumstance_pt.nilreason AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')') as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')') as relationwithlocation,
    notes_note_view_qunflr.annotation as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_foamoh.*) AS annotation
  from master_join master_join_tqghta
  join notes.note_view notes_note_lat_foamoh on master_join_tqghta.target_id = notes_note_lat_foamoh.id
  where master_join_tqghta.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_qunflr on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id,
    routes.flightrestrictionlevel_pt.nilreason AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')') as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')') as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')') as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')') as lowerlevel,
    notes_note_view_xppxfy.annotation as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_furklb.*) AS annotation
  from master_join master_join_ridkde
  join notes.note_view notes_note_lat_furklb on master_join_ridkde.target_id = notes_note_lat_furklb.id
  where master_join_ridkde.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_xppxfy on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id,
    service.fuel_pt.nilreason AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')') as category,
    notes_note_view_vlthjk.annotation as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hgaobs.*) AS annotation
  from master_join master_join_rbnmap
  join notes.note_view notes_note_lat_hgaobs on master_join_rbnmap.target_id = notes_note_lat_hgaobs.id
  where master_join_rbnmap.source_id = service.fuel.id
) as notes_note_view_vlthjk on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id,
    holding.holdingpatterndistance_pt.nilreason AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')') as length,
    notes_note_view_sksups.annotation as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_myvwkj.*) AS annotation
  from master_join master_join_zqmhao
  join notes.note_view notes_note_lat_myvwkj on master_join_zqmhao.target_id = notes_note_lat_myvwkj.id
  where master_join_zqmhao.source_id = holding.holdingpatterndistance.id
) as notes_note_view_sksups on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id,
    holding.holdingpatternduration_pt.nilreason AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')') as duration,
    notes_note_view_zetdib.annotation as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evksmh.*) AS annotation
  from master_join master_join_juskvk
  join notes.note_view notes_note_lat_evksmh on master_join_juskvk.target_id = notes_note_lat_evksmh.id
  where master_join_juskvk.source_id = holding.holdingpatternduration.id
) as notes_note_view_zetdib on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id,
    procedure.holdinguse_pt.nilreason AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')') as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')') as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')') as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_zujlrc.title as varchar), '(' || holding_holdingpattern_pt_zujlrc.nilreason[1] || ')') AS theholdingpattern,
    holding_holdingpattern_pt_zujlrc.href AS theholdingpattern_href,
    notes_note_view_lxhrgw.annotation as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_zujlrc on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_zujlrc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xufzpn.*) AS annotation
  from master_join master_join_tdswxb
  join notes.note_view notes_note_lat_xufzpn on master_join_tdswxb.target_id = notes_note_lat_xufzpn.id
  where master_join_tdswxb.source_id = procedure.holdinguse.id
) as notes_note_view_lxhrgw on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id,
    procedure.landingtakeoffareacollection_pt.nilreason AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_etrcgs.runway as runway,
    airport_heliport_touchdownliftoff_pt_kpjunf.tlof as tlof,
    notes_note_view_hywokm.annotation as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_tyftda.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_tyftda.title AS varchar), '(' || airport_heliport_runwaydirection_lat_tyftda.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_tyftda.href
  )) as runway  from master_join master_join_alygmp
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_tyftda on master_join_alygmp.target_id = airport_heliport_runwaydirection_lat_tyftda.id
  where master_join_alygmp.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_etrcgs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_lmtvlc.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_lmtvlc.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_lmtvlc.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_lmtvlc.href
  )) as tlof  from master_join master_join_tikrjb
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_lmtvlc on master_join_tikrjb.target_id = airport_heliport_touchdownliftoff_lat_lmtvlc.id
  where master_join_tikrjb.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_kpjunf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pfvxkg.*) AS annotation
  from master_join master_join_wlkefn
  join notes.note_view notes_note_lat_pfvxkg on master_join_wlkefn.target_id = notes_note_lat_pfvxkg.id
  where master_join_wlkefn.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_hywokm on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id,
    airport_heliport.lightactivation_pt.nilreason AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')') as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')') as activation,
    notes_note_view_sxiwhp.annotation as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vwdkzb.*) AS annotation
  from master_join master_join_irvfnc
  join notes.note_view notes_note_lat_vwdkzb on master_join_irvfnc.target_id = notes_note_lat_vwdkzb.id
  where master_join_irvfnc.source_id = airport_heliport.lightactivation.id
) as notes_note_view_sxiwhp on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id,
    shared.meteorology_pt.nilreason AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')') as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')') as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')') as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')') as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')') as runwayvisualrange,
    notes_note_view_kssktr.annotation as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbwuby.*) AS annotation
  from master_join master_join_krrjcc
  join notes.note_view notes_note_lat_wbwuby on master_join_krrjcc.target_id = notes_note_lat_wbwuby.id
  where master_join_krrjcc.source_id = shared.meteorology.id
) as notes_note_view_kssktr on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id,
    procedure.minima_pt.nilreason AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')') as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')') as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')') as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')') as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')') as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')') as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')') as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')') as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')') as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')') as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')') as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_oabduc.adjustmentinop as adjustmentinop,
    notes_note_view_prqtjk.annotation as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_csedfb.id) as adjustmentinop
  from master_join master_join_mrfjlk
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_csedfb on master_join_mrfjlk.target_id = procedure_equipmentunavailableadjustment_lat_csedfb.id
  where master_join_mrfjlk.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_oabduc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_flxoqn.*) AS annotation
  from master_join master_join_kzwldu
  join notes.note_view notes_note_lat_flxoqn on master_join_kzwldu.target_id = notes_note_lat_flxoqn.id
  where master_join_kzwldu.source_id = procedure.minima.id
) as notes_note_view_prqtjk on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id,
    procedure.missedapproachgroup_pt.nilreason AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')') as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')') as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_xxsfop.altimeter as altimeter,
    notes_note_view_bqpzwa.annotation as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_topvnv.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_topvnv.title AS varchar), '(' || airport_heliport_altimetersource_lat_topvnv.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_topvnv.href
  )) as altimeter  from master_join master_join_ixpwgm
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_topvnv on master_join_ixpwgm.target_id = airport_heliport_altimetersource_lat_topvnv.id
  where master_join_ixpwgm.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_xxsfop on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dcfans.*) AS annotation
  from master_join master_join_ebqmic
  join notes.note_view notes_note_lat_dcfans on master_join_ebqmic.target_id = notes_note_lat_dcfans.id
  where master_join_ebqmic.source_id = procedure.missedapproachgroup.id
) as notes_note_view_bqpzwa on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id,
    navaids_points.navaidcomponent_pt.nilreason AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')') as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')') as providesnavigablelocation,
    notes_note_view_avamos.annotation as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ufmrnd.*) AS annotation
  from master_join master_join_dxjhxv
  join notes.note_view notes_note_lat_ufmrnd on master_join_dxjhxv.target_id = notes_note_lat_ufmrnd.id
  where master_join_dxjhxv.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_avamos on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id,
    airport_heliport.navaidequipmentdistance_pt.nilreason AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    notes_note_view_nmnqmg.annotation as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_koekgb.*) AS annotation
  from master_join master_join_dtjmdh
  join notes.note_view notes_note_lat_koekgb on master_join_dtjmdh.target_id = notes_note_lat_koekgb.id
  where master_join_dtjmdh.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_nmnqmg on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id,
    service.nitrogen_pt.nilreason AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')') as type,
    notes_note_view_eauatw.annotation as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oebdae.*) AS annotation
  from master_join master_join_zyocon
  join notes.note_view notes_note_lat_oebdae on master_join_zyocon.target_id = notes_note_lat_oebdae.id
  where master_join_zyocon.source_id = service.nitrogen.id
) as notes_note_view_eauatw on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id,
    shared.obstacleplacement_pt.nilreason AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')') as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')') as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')') as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')') as obstacledistance,
    notes_note_view_ordzlm.annotation as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_boafrz.*) AS annotation
  from master_join master_join_tltvhp
  join notes.note_view notes_note_lat_boafrz on master_join_tltvhp.target_id = notes_note_lat_boafrz.id
  where master_join_tltvhp.source_id = shared.obstacleplacement.id
) as notes_note_view_ordzlm on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id,
    shared.obstruction_pt.nilreason AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')') as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')') as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')') as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')') as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')') as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')') as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_krcjqw.title as varchar), '(' || obstacles_verticalstructure_pt_krcjqw.nilreason[1] || ')') AS theverticalstructure,
    obstacles_verticalstructure_pt_krcjqw.href AS theverticalstructure_href,
    shared_altitudeadjustment_pt_qankwp.adjustment as adjustment,
    shared_obstacleplacement_pt_ryretm.obstacleplacement as obstacleplacement,
    notes_note_view_bitwfi.annotation as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_krcjqw on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_krcjqw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_lxxycy.id) as adjustment
  from master_join master_join_revgkr
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_lxxycy on master_join_revgkr.target_id = shared_altitudeadjustment_lat_lxxycy.id
  where master_join_revgkr.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_qankwp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_kkisxo.id) as obstacleplacement
  from master_join master_join_vxntbp
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_kkisxo on master_join_vxntbp.target_id = shared_obstacleplacement_lat_kkisxo.id
  where master_join_vxntbp.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_ryretm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eeitlq.*) AS annotation
  from master_join master_join_ytyivp
  join notes.note_view notes_note_lat_eeitlq on master_join_ytyivp.target_id = notes_note_lat_eeitlq.id
  where master_join_ytyivp.source_id = shared.obstruction.id
) as notes_note_view_bitwfi on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id,
    service.oil_pt.nilreason AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')') as category,
    notes_note_view_btnbyy.annotation as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lciuxq.*) AS annotation
  from master_join master_join_yiguss
  join notes.note_view notes_note_lat_lciuxq on master_join_yiguss.target_id = notes_note_lat_lciuxq.id
  where master_join_yiguss.source_id = service.oil.id
) as notes_note_view_btnbyy on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id,
    organisation.organisationauthorityassociation_pt.nilreason AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_ezrgjb.title as varchar), '(' || organisation_organisationauthority_pt_ezrgjb.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_ezrgjb.href AS theorganisationauthority_href,
    notes_note_view_aldqoc.annotation as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ezrgjb on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_ezrgjb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cgspfy.*) AS annotation
  from master_join master_join_vsvvfg
  join notes.note_view notes_note_lat_cgspfy on master_join_vsvvfg.target_id = notes_note_lat_cgspfy.id
  where master_join_vsvvfg.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_aldqoc on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id,
    service.oxygen_pt.nilreason AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')') as type,
    notes_note_view_oqaugp.annotation as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hutmjx.*) AS annotation
  from master_join master_join_asbjqv
  join notes.note_view notes_note_lat_hutmjx on master_join_asbjqv.target_id = notes_note_lat_hutmjx.id
  where master_join_asbjqv.source_id = service.oxygen.id
) as notes_note_view_oqaugp on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id,
    procedure.proceduretransitionleg_pt.nilreason AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')') as seqnumberarinc,
    notes_note_view_zgrrix.annotation as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lxjmad.*) AS annotation
  from master_join master_join_qhwljj
  join notes.note_view notes_note_lat_lxjmad on master_join_qhwljj.target_id = notes_note_lat_lxjmad.id
  where master_join_qhwljj.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_zgrrix on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id,
    surveillance.radarcomponent_pt.nilreason AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')') as collocationgroup,
    notes_note_view_elkzeb.annotation as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etcjsp.*) AS annotation
  from master_join master_join_owplrr
  join notes.note_view notes_note_lat_etcjsp on master_join_owplrr.target_id = notes_note_lat_etcjsp.id
  where master_join_owplrr.source_id = surveillance.radarcomponent.id
) as notes_note_view_elkzeb on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id,
    airport_heliport.ridge_pt.nilreason AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')') as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')') as depth,
    notes_note_view_svryol.annotation as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fgmqrw.*) AS annotation
  from master_join master_join_uwjzvt
  join notes.note_view notes_note_lat_fgmqrw on master_join_uwjzvt.target_id = notes_note_lat_fgmqrw.id
  where master_join_uwjzvt.source_id = airport_heliport.ridge.id
) as notes_note_view_svryol on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id,
    airport_heliport.runwaycontamination_pt.nilreason AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')') as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')') as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')') as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')') as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')') as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')') as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')') as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')') as clearedlengthbegin,
    airport_heliport_ridge_pt_iggqnp.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_nybulf.layer as layer,
    notes_note_view_jroewa.annotation as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_nlrfgs.id) as criticalridge
  from master_join master_join_ggbbqo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_nlrfgs on master_join_ggbbqo.target_id = airport_heliport_ridge_lat_nlrfgs.id
  where master_join_ggbbqo.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_iggqnp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_twggfw.id) as layer
  from master_join master_join_kqzusx
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_twggfw on master_join_kqzusx.target_id = airport_heliport_surfacecontaminationlayer_lat_twggfw.id
  where master_join_kqzusx.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_nybulf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hztgoc.*) AS annotation
  from master_join master_join_ifhlxl
  join notes.note_view notes_note_lat_hztgoc on master_join_ifhlxl.target_id = notes_note_lat_hztgoc.id
  where master_join_ifhlxl.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_jroewa on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id,
    airport_heliport.runwaydeclareddistance_pt.nilreason AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')') as type,
    airport_heliport_runwaydeclareddistancevalue_pt_twocwe.declaredvalue as declaredvalue,
    notes_note_view_flzonr.annotation as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_avcrxu.id) as declaredvalue
  from master_join master_join_zexahf
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_avcrxu on master_join_zexahf.target_id = airport_heliport_runwaydeclareddistancevalue_lat_avcrxu.id
  where master_join_zexahf.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_twocwe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yqrruu.*) AS annotation
  from master_join master_join_lqutvo
  join notes.note_view notes_note_lat_yqrruu on master_join_lqutvo.target_id = notes_note_lat_yqrruu.id
  where master_join_lqutvo.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_flzonr on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id,
    airport_heliport.runwaysectioncontamination_pt.nilreason AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')') as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_ctiefx.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_fgvdnb.layer as layer,
    notes_note_view_dsoawp.annotation as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_udhqkq.id) as criticalridge
  from master_join master_join_xpjqtd
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_udhqkq on master_join_xpjqtd.target_id = airport_heliport_ridge_lat_udhqkq.id
  where master_join_xpjqtd.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_ctiefx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_xjyndd.id) as layer
  from master_join master_join_wxrtqi
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_xjyndd on master_join_wxrtqi.target_id = airport_heliport_surfacecontaminationlayer_lat_xjyndd.id
  where master_join_wxrtqi.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_fgvdnb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppzklk.*) AS annotation
  from master_join master_join_erhntu
  join notes.note_view notes_note_lat_ppzklk on master_join_erhntu.target_id = notes_note_lat_ppzklk.id
  where master_join_erhntu.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_dsoawp on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id,
    procedure.sectordesign_pt.nilreason AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')') as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')') as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')') as terminationaltitude,
    notes_note_view_lxeesb.annotation as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ualoyt.*) AS annotation
  from master_join master_join_vryuyy
  join notes.note_view notes_note_lat_ualoyt on master_join_vryuyy.target_id = notes_note_lat_ualoyt.id
  where master_join_vryuyy.source_id = procedure.sectordesign.id
) as notes_note_view_lxeesb on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id,
    shared.standardlevel_pt.nilreason AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')') as verticaldistance,
    notes_note_view_ejajjc.annotation as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cgrncp.*) AS annotation
  from master_join master_join_ehxzvl
  join notes.note_view notes_note_lat_cgrncp on master_join_ehxzvl.target_id = notes_note_lat_cgrncp.id
  where master_join_ehxzvl.source_id = shared.standardlevel.id
) as notes_note_view_ejajjc on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id,
    airport_heliport.surfacecharacteristics_pt.nilreason AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')') as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')') as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')') as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')') as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')') as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')') as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')') as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')') as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')') as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')') as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')') as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')') as weightauw,
    notes_note_view_uqvxpy.annotation as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qqdlin.*) AS annotation
  from master_join master_join_cxjuqd
  join notes.note_view notes_note_lat_qqdlin on master_join_cxjuqd.target_id = notes_note_lat_qqdlin.id
  where master_join_cxjuqd.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_uqvxpy on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id,
    surveillance.surveillancegroundstation_pt.nilreason AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')') as videomap,
    coalesce(cast(organisation_unit_pt_nznbdl.title as varchar), '(' || organisation_unit_pt_nznbdl.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_nznbdl.href AS theunit_href,
    notes_note_view_ccojcb.annotation as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_nznbdl on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_nznbdl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_voyylk.*) AS annotation
  from master_join master_join_zkredg
  join notes.note_view notes_note_lat_voyylk on master_join_zkredg.target_id = notes_note_lat_voyylk.id
  where master_join_zkredg.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_ccojcb on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id,
    airport_heliport.taxiwaycontamination_pt.nilreason AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')') as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')') as clearedwidth,
    airport_heliport_ridge_pt_qzcaqv.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_moxmlg.layer as layer,
    notes_note_view_rfrkzx.annotation as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_abcidr.id) as criticalridge
  from master_join master_join_uvfluo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_abcidr on master_join_uvfluo.target_id = airport_heliport_ridge_lat_abcidr.id
  where master_join_uvfluo.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_qzcaqv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_rjfzfs.id) as layer
  from master_join master_join_xmfinn
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_rjfzfs on master_join_xmfinn.target_id = airport_heliport_surfacecontaminationlayer_lat_rjfzfs.id
  where master_join_xmfinn.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_moxmlg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nuobmt.*) AS annotation
  from master_join master_join_jaomlf
  join notes.note_view notes_note_lat_nuobmt on master_join_jaomlf.target_id = notes_note_lat_nuobmt.id
  where master_join_jaomlf.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_rfrkzx on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')') as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')') as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')') as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')') as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')') as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')') as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')') as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')') as depth,
    airport_heliport_ridge_pt_htywzh.criticalridge as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ofzazz.layer as layer,
    notes_note_view_qkbwot.annotation as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_nvcgkg.id) as criticalridge
  from master_join master_join_tiqech
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_nvcgkg on master_join_tiqech.target_id = airport_heliport_ridge_lat_nvcgkg.id
  where master_join_tiqech.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_htywzh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_rsmwol.id) as layer
  from master_join master_join_whnbgo
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_rsmwol on master_join_whnbgo.target_id = airport_heliport_surfacecontaminationlayer_lat_rsmwol.id
  where master_join_whnbgo.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ofzazz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_odrbps.*) AS annotation
  from master_join master_join_thtdco
  join notes.note_view notes_note_lat_odrbps on master_join_thtdco.target_id = notes_note_lat_odrbps.id
  where master_join_thtdco.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_qkbwot on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id,
    organisation.unitdependency_pt.nilreason AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')') as type,
    coalesce(cast(organisation_unit_pt_telfhv.title as varchar), '(' || organisation_unit_pt_telfhv.nilreason[1] || ')') AS theunit,
    organisation_unit_pt_telfhv.href AS theunit_href,
    notes_note_view_mewvdt.annotation as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_telfhv on organisation.unitdependency.theunit_id = organisation_unit_pt_telfhv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gsbzow.*) AS annotation
  from master_join master_join_aqxevd
  join notes.note_view notes_note_lat_gsbzow on master_join_aqxevd.target_id = notes_note_lat_gsbzow.id
  where master_join_aqxevd.source_id = organisation.unitdependency.id
) as notes_note_view_mewvdt on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_wjduhr.geom AS extent_geom,
    geometry_curve_view_wjduhr.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_whwomi.point as point,
    shared_airspacelayer_pt_zlpncc.verticalextent as verticalextent,
    notes_note_view_xeshaq.annotation as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_wjduhr on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_wjduhr.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_rjtoah.id) as point
  from master_join master_join_factlu
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_rjtoah on master_join_factlu.target_id = aerial_refuelling_aerialrefuellingpoint_lat_rjtoah.id
  where master_join_factlu.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_whwomi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_slydoo.id) as verticalextent
  from master_join master_join_okwzng
  join shared.airspacelayer_pt shared_airspacelayer_lat_slydoo on master_join_okwzng.target_id = shared_airspacelayer_lat_slydoo.id
  where master_join_okwzng.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_zlpncc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chsqyn.*) AS annotation
  from master_join master_join_wapvxs
  join notes.note_view notes_note_lat_chsqyn on master_join_wapvxs.target_id = notes_note_lat_chsqyn.id
  where master_join_wapvxs.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_xeshaq on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id,
    procedure.proceduretransition_pt.nilreason AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')') as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')') as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')') as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_eqhhbh.id) AS departurerunwaytransition,
    geometry_curve_view_hqolvu.geom AS trajectory_geom,
    geometry_curve_view_hqolvu.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_iwgzev.transitionleg as transitionleg,
    notes_note_view_jhegxw.annotation as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_eqhhbh on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_eqhhbh.id
left join geometry.curve_view geometry_curve_view_hqolvu on procedure.proceduretransition.trajectory_id = geometry_curve_view_hqolvu.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_kppzdi.id) as transitionleg
  from master_join master_join_utlcak
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_kppzdi on master_join_utlcak.target_id = procedure_proceduretransitionleg_lat_kppzdi.id
  where master_join_utlcak.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_iwgzev on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_unamez.*) AS annotation
  from master_join master_join_xnvnyf
  join notes.note_view notes_note_lat_unamez on master_join_xnvnyf.target_id = notes_note_lat_unamez.id
  where master_join_xnvnyf.source_id = procedure.proceduretransition.id
) as notes_note_view_jhegxw on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id,
    shared.lightelement_pt.nilreason AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')') as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')') as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')') as intensity,
    geometry_elevatedpoint_view_fwtxva.geom AS location_geom,
    geometry_elevatedpoint_view_fwtxva.longitude AS location_longitude,
    geometry_elevatedpoint_view_fwtxva.latitude AS location_latitude,
    geometry_elevatedpoint_view_fwtxva.elevation AS location_elevation,
    geometry_elevatedpoint_view_fwtxva.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fwtxva.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fwtxva.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fwtxva.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_tbvzhp.annotation as annotation,
    shared_lightelementstatus_pt_vdahin.availability as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fwtxva on shared.lightelement.location_id = geometry_elevatedpoint_view_fwtxva.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhxjaz.*) AS annotation
  from master_join master_join_edcffc
  join notes.note_view notes_note_lat_dhxjaz on master_join_edcffc.target_id = notes_note_lat_dhxjaz.id
  where master_join_edcffc.source_id = shared.lightelement.id
) as notes_note_view_tbvzhp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_wqfalx.id) as availability
  from master_join master_join_ixkorj
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_wqfalx on master_join_ixkorj.target_id = shared_lightelementstatus_lat_wqfalx.id
  where master_join_ixkorj.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_vdahin on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id,
    surveillance.reflector_pt.nilreason AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_duuqof.geom AS touchdownreflector_geom,
    geometry_elevatedpoint_view_duuqof.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_duuqof.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_duuqof.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_duuqof.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_duuqof.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_duuqof.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_duuqof.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_mwzgdt.annotation as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_duuqof on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_duuqof.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkodpw.*) AS annotation
  from master_join master_join_aoytgy
  join notes.note_view notes_note_lat_rkodpw on master_join_aoytgy.target_id = notes_note_lat_rkodpw.id
  where master_join_aoytgy.source_id = surveillance.reflector.id
) as notes_note_view_mwzgdt on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id,
    airport_heliport.markingelement_pt.nilreason AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')') as style,
    geometry_elevatedsurface_view_jqjrjd.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_jqjrjd.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_jqjrjd.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_jqjrjd.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_jqjrjd.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_jqjrjd.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_wryzec.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_wryzec.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_wryzec.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_wryzec.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_wryzec.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_wryzec.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_yzammv.geom AS extentlocation_geom,
    geometry_elevatedpoint_view_yzammv.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_yzammv.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_yzammv.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_yzammv.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_yzammv.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_yzammv.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_yzammv.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_unmpgd.annotation as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jqjrjd on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_jqjrjd.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_wryzec on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_wryzec.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yzammv on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_yzammv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fvvbyp.*) AS annotation
  from master_join master_join_fqehen
  join notes.note_view notes_note_lat_fvvbyp on master_join_fqehen.target_id = notes_note_lat_fvvbyp.id
  where master_join_fqehen.source_id = airport_heliport.markingelement.id
) as notes_note_view_unmpgd on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')') as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_odjatt.geom as extent_geom,
    geometry_elevatedsurface_view_odjatt.attr as extent,
    notes_note_view_bfwmcg.annotation as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_dzryqa.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_dzryqa.id,
      'elevation', geometry_elevatedsurface_lat_dzryqa.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_dzryqa.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_dzryqa.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_dzryqa.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_dzryqa.horizontalAccuracy
    )) AS attr
  from master_join master_join_hzxrmw
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_dzryqa on master_join_hzxrmw.target_id = geometry_elevatedsurface_lat_dzryqa.id
  where master_join_hzxrmw.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_odjatt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nrerkl.*) AS annotation
  from master_join master_join_gaxqka
  join notes.note_view notes_note_lat_nrerkl on master_join_gaxqka.target_id = notes_note_lat_nrerkl.id
  where master_join_gaxqka.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_bfwmcg on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')') as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')') as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_unttzr.title as varchar), '(' || navaids_points_designatedpoint_pt_unttzr.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_unttzr.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_pxmccb.title as varchar), '(' || navaids_points_navaid_pt_pxmccb.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_pxmccb.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mbbdva.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mbbdva.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_mbbdva.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xtvovn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xtvovn.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xtvovn.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_sjqaqv.title as varchar), '(' || airport_heliport_airportheliport_pt_sjqaqv.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_sjqaqv.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_lwdurs.geom AS pointchoiceposition_geom,
    geometry_point_view_lwdurs.longitude AS pointchoiceposition_longitude,
    geometry_point_view_lwdurs.latitude AS pointchoiceposition_latitude,
    geometry_point_view_lwdurs.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_fuzjgz.title as varchar), '(' || shared_radiofrequencyarea_pt_fuzjgz.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_fuzjgz.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_ytnodv.facilitymakeup as facilitymakeup,
    notes_note_view_aiacdt.annotation as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_unttzr on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_unttzr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pxmccb on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_pxmccb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mbbdva on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mbbdva.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xtvovn on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xtvovn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_sjqaqv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_sjqaqv.id
left join geometry.point_view geometry_point_view_lwdurs on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_lwdurs.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_fuzjgz on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_fuzjgz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_wsmynn.id) as facilitymakeup
  from master_join master_join_wbjnaq
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_wsmynn on master_join_wbjnaq.target_id = navaids_points_pointreference_lat_wsmynn.id
  where master_join_wbjnaq.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_ytnodv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_seovro.*) AS annotation
  from master_join master_join_cgxehf
  join notes.note_view notes_note_lat_seovro on master_join_cgxehf.target_id = notes_note_lat_seovro.id
  where master_join_cgxehf.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_aiacdt on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id,
    routes.directflightsegment_pt.nilreason AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_timrwt.title as varchar), '(' || navaids_points_designatedpoint_pt_timrwt.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_timrwt.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pshktk.title as varchar), '(' || navaids_points_designatedpoint_pt_pshktk.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pshktk.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_imtkaq.title as varchar), '(' || navaids_points_navaid_pt_imtkaq.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_imtkaq.href AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_gjeecx.title as varchar), '(' || navaids_points_navaid_pt_gjeecx.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_gjeecx.href AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jwzfjd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jwzfjd.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_jwzfjd.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fctfcg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fctfcg.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_fctfcg.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ksljvr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ksljvr.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ksljvr.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_fothtx.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_fothtx.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_fothtx.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kyhjlu.title as varchar), '(' || airport_heliport_airportheliport_pt_kyhjlu.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_kyhjlu.href AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_nrkucu.title as varchar), '(' || airport_heliport_airportheliport_pt_nrkucu.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_nrkucu.href AS startairportreferencepoint_href,
    geometry_point_view_nqmuzy.geom AS endposition_geom,
    geometry_point_view_nqmuzy.longitude AS endposition_longitude,
    geometry_point_view_nqmuzy.latitude AS endposition_latitude,
    geometry_point_view_nqmuzy.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_sacifr.geom AS startposition_geom,
    geometry_point_view_sacifr.longitude AS startposition_longitude,
    geometry_point_view_sacifr.latitude AS startposition_latitude,
    geometry_point_view_sacifr.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_cgswjk.annotation as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_timrwt on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_timrwt.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_imtkaq on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_imtkaq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jwzfjd on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jwzfjd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ksljvr on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ksljvr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kyhjlu on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_kyhjlu.id
left join geometry.point_view geometry_point_view_nqmuzy on routes.directflightsegment.end_position_id = geometry_point_view_nqmuzy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pshktk on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pshktk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gjeecx on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_gjeecx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fctfcg on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fctfcg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_fothtx on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_fothtx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nrkucu on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_nrkucu.id
left join geometry.point_view geometry_point_view_sacifr on routes.directflightsegment.start_position_id = geometry_point_view_sacifr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aomybe.*) AS annotation
  from master_join master_join_kevmhg
  join notes.note_view notes_note_lat_aomybe on master_join_kevmhg.target_id = notes_note_lat_aomybe.id
  where master_join_kevmhg.source_id = routes.directflightsegment.id
) as notes_note_view_cgswjk on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id,
    navaids_points.enroutesegmentpoint_pt.nilreason AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')') as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')') as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')') as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')') as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_vfziaz.title as varchar), '(' || navaids_points_designatedpoint_pt_vfziaz.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_vfziaz.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fkvvkm.title as varchar), '(' || navaids_points_navaid_pt_fkvvkm.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_fkvvkm.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_aloubg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_aloubg.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_aloubg.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rfbhcc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rfbhcc.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rfbhcc.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_buuhin.title as varchar), '(' || airport_heliport_airportheliport_pt_buuhin.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_buuhin.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_vgpvzc.geom AS pointchoiceposition_geom,
    geometry_point_view_vgpvzc.longitude AS pointchoiceposition_longitude,
    geometry_point_view_vgpvzc.latitude AS pointchoiceposition_latitude,
    geometry_point_view_vgpvzc.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_htkite.title as varchar), '(' || shared_radiofrequencyarea_pt_htkite.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_htkite.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_uwmkoh.facilitymakeup as facilitymakeup,
    notes_note_view_iloekg.annotation as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vfziaz on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vfziaz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fkvvkm on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_fkvvkm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_aloubg on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_aloubg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rfbhcc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rfbhcc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_buuhin on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_buuhin.id
left join geometry.point_view geometry_point_view_vgpvzc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_vgpvzc.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_htkite on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_htkite.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_grqfrc.id) as facilitymakeup
  from master_join master_join_ijrffm
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_grqfrc on master_join_ijrffm.target_id = navaids_points_pointreference_lat_grqfrc.id
  where master_join_ijrffm.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_uwmkoh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hmiytz.*) AS annotation
  from master_join master_join_etfnjx
  join notes.note_view notes_note_lat_hmiytz on master_join_etfnjx.target_id = notes_note_lat_hmiytz.id
  where master_join_etfnjx.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_iloekg on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id,
    routes.flightconditionelement_pt.nilreason AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')') as index,
    coalesce(cast(airport_heliport_airportheliport_pt_xwtgkh.title as varchar), '(' || airport_heliport_airportheliport_pt_xwtgkh.nilreason[1] || ')') AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_xwtgkh.href AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_djzyth.title as varchar), '(' || airport_heliport_airportheliport_pt_djzyth.nilreason[1] || ')') AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_djzyth.href AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_bmezur.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_bmezur.nilreason[1] || ')') AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_bmezur.href AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_bkmzfm.id) AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_lbtmef.title as varchar), '(' || organisation_organisationauthority_pt_lbtmef.nilreason[1] || ')') AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_lbtmef.href AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_xgrlrt.title as varchar), '(' || navaids_points_designatedpoint_pt_xgrlrt.nilreason[1] || ')') AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_xgrlrt.href AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_npgnyb.title as varchar), '(' || navaids_points_navaid_pt_npgnyb.nilreason[1] || ')') AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_npgnyb.href AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vfxpbl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vfxpbl.nilreason[1] || ')') AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_vfxpbl.href AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_yxstej.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_yxstej.nilreason[1] || ')') AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_yxstej.href AS significantpointconditionrunwaypoint_href,
    geometry_point_view_ziukli.geom AS significantpointconditionposition_geom,
    geometry_point_view_ziukli.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_ziukli.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_ziukli.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_ntmmpa.id) AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_dxfkoy.title as varchar), '(' || routes_airspacebordercrossing_pt_dxfkoy.nilreason[1] || ')') AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_dxfkoy.href AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_ocskwp.title as varchar), '(' || airspace_airspace_pt_ocskwp.nilreason[1] || ')') AS flightconditionairspacecondition,
    airspace_airspace_pt_ocskwp.href AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_xkbbww.id) AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_onyxvs.title as varchar), '(' || procedure_standardinstrumentarrival_pt_onyxvs.nilreason[1] || ')') AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_onyxvs.href AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_ljeltw.id) AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_lgwnro.id) AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_ytjiwa.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_ytjiwa.nilreason[1] || ')') AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_ytjiwa.href AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_cipmnq.id) AS operationalcondition,
    routes_flightrestrictionlevel_pt_rheyxh.flightlevel as flightlevel,
    notes_note_view_ydrsrc.annotation as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xwtgkh on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_xwtgkh.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_bmezur on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_bmezur.id
left join routes.routeportion_pt routes_routeportion_pt_bkmzfm on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_bkmzfm.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_lbtmef on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_lbtmef.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xgrlrt on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xgrlrt.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_npgnyb on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_npgnyb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vfxpbl on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vfxpbl.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_yxstej on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_yxstej.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_djzyth on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_djzyth.id
left join geometry.point_view geometry_point_view_ziukli on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_ziukli.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ntmmpa on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_ntmmpa.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_dxfkoy on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_dxfkoy.id
left join airspace.airspace_pt airspace_airspace_pt_ocskwp on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_ocskwp.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_xkbbww on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_xkbbww.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_onyxvs on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_onyxvs.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_ljeltw on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_ljeltw.id
left join shared.meteorology_pt shared_meteorology_pt_lgwnro on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_lgwnro.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_ytjiwa on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_ytjiwa.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_cipmnq on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_cipmnq.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_kvrjqd.id) as flightlevel
  from master_join master_join_czdlss
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_kvrjqd on master_join_czdlss.target_id = routes_flightrestrictionlevel_lat_kvrjqd.id
  where master_join_czdlss.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_rheyxh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tdclec.*) AS annotation
  from master_join master_join_iopbbh
  join notes.note_view notes_note_lat_tdclec on master_join_iopbbh.target_id = notes_note_lat_tdclec.id
  where master_join_iopbbh.source_id = routes.flightconditionelement.id
) as notes_note_view_ydrsrc on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id,
    routes.flightroutingelement_pt.nilreason AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')') as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')') as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')') as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_yqsipk.title as varchar), '(' || procedure_standardinstrumentarrival_pt_yqsipk.nilreason[1] || ')') AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_yqsipk.href AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_asywtv.title as varchar), '(' || airspace_airspace_pt_asywtv.nilreason[1] || ')') AS elementairspaceelement,
    airspace_airspace_pt_asywtv.href AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_hjjzpq.title as varchar), '(' || navaids_points_designatedpoint_pt_hjjzpq.nilreason[1] || ')') AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_hjjzpq.href AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xlpmbg.title as varchar), '(' || navaids_points_navaid_pt_xlpmbg.nilreason[1] || ')') AS pointelementnavaidsystem,
    navaids_points_navaid_pt_xlpmbg.href AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jfmspf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jfmspf.nilreason[1] || ')') AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_jfmspf.href AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_npwlvm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_npwlvm.nilreason[1] || ')') AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_npwlvm.href AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_smahya.title as varchar), '(' || airport_heliport_airportheliport_pt_smahya.nilreason[1] || ')') AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_smahya.href AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tgahaw.title as varchar), '(' || airport_heliport_airportheliport_pt_tgahaw.nilreason[1] || ')') AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_tgahaw.href AS elementairportheliportelement_href,
    geometry_point_view_iogwlt.geom AS pointelementposition_geom,
    geometry_point_view_iogwlt.longitude AS pointelementposition_longitude,
    geometry_point_view_iogwlt.latitude AS pointelementposition_latitude,
    geometry_point_view_iogwlt.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_jwzkxx.id) AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_rtuaeo.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_rtuaeo.nilreason[1] || ')') AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_rtuaeo.href AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_loqcup.id) AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_yxagsu.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_yxagsu.nilreason[1] || ')') AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_yxagsu.href AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_rnihkj.flightlevel as flightlevel,
    notes_note_view_akmbnt.annotation as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_yqsipk on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_yqsipk.id
left join airspace.airspace_pt airspace_airspace_pt_asywtv on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_asywtv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hjjzpq on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hjjzpq.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xlpmbg on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_xlpmbg.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jfmspf on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jfmspf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_npwlvm on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_npwlvm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_smahya on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_smahya.id
left join geometry.point_view geometry_point_view_iogwlt on routes.flightroutingelement.pointelement_position_id = geometry_point_view_iogwlt.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_jwzkxx on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_jwzkxx.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_rtuaeo on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_rtuaeo.id
left join routes.routeportion_pt routes_routeportion_pt_loqcup on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_loqcup.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tgahaw on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_tgahaw.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_yxagsu on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_yxagsu.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_nixqel.id) as flightlevel
  from master_join master_join_yzkoou
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_nixqel on master_join_yzkoou.target_id = routes_flightrestrictionlevel_lat_nixqel.id
  where master_join_yzkoou.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_rnihkj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qkdror.*) AS annotation
  from master_join master_join_vcbvze
  join notes.note_view notes_note_lat_qkdror on master_join_vcbvze.target_id = notes_note_lat_qkdror.id
  where master_join_vcbvze.source_id = routes.flightroutingelement.id
) as notes_note_view_akmbnt on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id,
    routes.routeportion_pt.nilreason AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_ytoypv.title as varchar), '(' || navaids_points_designatedpoint_pt_ytoypv.nilreason[1] || ')') AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ytoypv.href AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_pphggi.title as varchar), '(' || navaids_points_designatedpoint_pt_pphggi.nilreason[1] || ')') AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_pphggi.href AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_gftcsl.title as varchar), '(' || navaids_points_designatedpoint_pt_gftcsl.nilreason[1] || ')') AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_gftcsl.href AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wfvmpn.title as varchar), '(' || navaids_points_navaid_pt_wfvmpn.nilreason[1] || ')') AS startnavaidsystem,
    navaids_points_navaid_pt_wfvmpn.href AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_gkrwtq.title as varchar), '(' || navaids_points_navaid_pt_gkrwtq.nilreason[1] || ')') AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_gkrwtq.href AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_tgnozu.title as varchar), '(' || navaids_points_navaid_pt_tgnozu.nilreason[1] || ')') AS endnavaidsystem,
    navaids_points_navaid_pt_tgnozu.href AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rmqmbi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rmqmbi.nilreason[1] || ')') AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_rmqmbi.href AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_iafgiu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_iafgiu.nilreason[1] || ')') AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_iafgiu.href AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bigoxx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bigoxx.nilreason[1] || ')') AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_bigoxx.href AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_iiwqni.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_iiwqni.nilreason[1] || ')') AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_iiwqni.href AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cqiurz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cqiurz.nilreason[1] || ')') AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cqiurz.href AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mxgyqw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mxgyqw.nilreason[1] || ')') AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mxgyqw.href AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gaofsd.title as varchar), '(' || airport_heliport_airportheliport_pt_gaofsd.nilreason[1] || ')') AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_gaofsd.href AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gxahzu.title as varchar), '(' || airport_heliport_airportheliport_pt_gxahzu.nilreason[1] || ')') AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_gxahzu.href AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rqhgbs.title as varchar), '(' || airport_heliport_airportheliport_pt_rqhgbs.nilreason[1] || ')') AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_rqhgbs.href AS endairportreferencepoint_href,
    geometry_point_view_iijtiw.geom AS startposition_geom,
    geometry_point_view_iijtiw.longitude AS startposition_longitude,
    geometry_point_view_iijtiw.latitude AS startposition_latitude,
    geometry_point_view_iijtiw.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_evnijc.geom AS intermediatepointposition_geom,
    geometry_point_view_evnijc.longitude AS intermediatepointposition_longitude,
    geometry_point_view_evnijc.latitude AS intermediatepointposition_latitude,
    geometry_point_view_evnijc.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_ogtwhp.geom AS endposition_geom,
    geometry_point_view_ogtwhp.longitude AS endposition_longitude,
    geometry_point_view_ogtwhp.latitude AS endposition_latitude,
    geometry_point_view_ogtwhp.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_rirbzb.title as varchar), '(' || routes_route_pt_rirbzb.nilreason[1] || ')') AS referencedroute,
    routes_route_pt_rirbzb.href AS referencedroute_href,
    notes_note_view_hyqdvs.annotation as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ytoypv on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ytoypv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wfvmpn on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_wfvmpn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rmqmbi on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rmqmbi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_iiwqni on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_iiwqni.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gaofsd on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_gaofsd.id
left join geometry.point_view geometry_point_view_iijtiw on routes.routeportion.start_position_id = geometry_point_view_iijtiw.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_pphggi on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_pphggi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_gkrwtq on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_gkrwtq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_iafgiu on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_iafgiu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cqiurz on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cqiurz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gxahzu on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_gxahzu.id
left join geometry.point_view geometry_point_view_evnijc on routes.routeportion.intermediatepoint_position_id = geometry_point_view_evnijc.id
left join routes.route_pt routes_route_pt_rirbzb on routes.routeportion.referencedroute_id = routes_route_pt_rirbzb.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_gftcsl on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_gftcsl.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_tgnozu on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_tgnozu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bigoxx on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bigoxx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mxgyqw on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mxgyqw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rqhgbs on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_rqhgbs.id
left join geometry.point_view geometry_point_view_ogtwhp on routes.routeportion.end_position_id = geometry_point_view_ogtwhp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ueixuy.*) AS annotation
  from master_join master_join_rmavoz
  join notes.note_view notes_note_lat_ueixuy on master_join_rmavoz.target_id = notes_note_lat_ueixuy.id
  where master_join_rmavoz.source_id = routes.routeportion.id
) as notes_note_view_hyqdvs on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id,
    navaids_points.terminalsegmentpoint_pt.nilreason AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')') as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')') as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')') as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')') as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')') as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')') as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')') as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_ggscuv.title as varchar), '(' || navaids_points_designatedpoint_pt_ggscuv.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ggscuv.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_izjbpf.title as varchar), '(' || navaids_points_navaid_pt_izjbpf.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_izjbpf.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gtsamo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gtsamo.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_gtsamo.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_pxahyn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_pxahyn.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_pxahyn.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hoqpvt.title as varchar), '(' || airport_heliport_airportheliport_pt_hoqpvt.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_hoqpvt.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_fecsbf.geom AS pointchoiceposition_geom,
    geometry_point_view_fecsbf.longitude AS pointchoiceposition_longitude,
    geometry_point_view_fecsbf.latitude AS pointchoiceposition_latitude,
    geometry_point_view_fecsbf.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_zuvdob.title as varchar), '(' || shared_radiofrequencyarea_pt_zuvdob.nilreason[1] || ')') AS extendedservicevolume,
    shared_radiofrequencyarea_pt_zuvdob.href AS extendedservicevolume_href,
    navaids_points_pointreference_pt_gyqflc.facilitymakeup as facilitymakeup,
    notes_note_view_rrvynf.annotation as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ggscuv on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ggscuv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_izjbpf on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_izjbpf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gtsamo on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gtsamo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_pxahyn on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_pxahyn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hoqpvt on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hoqpvt.id
left join geometry.point_view geometry_point_view_fecsbf on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_fecsbf.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_zuvdob on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_zuvdob.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_stbsya.id) as facilitymakeup
  from master_join master_join_fbzhxf
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_stbsya on master_join_fbzhxf.target_id = navaids_points_pointreference_lat_stbsya.id
  where master_join_fbzhxf.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_gyqflc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kbqevi.*) AS annotation
  from master_join master_join_iojith
  join notes.note_view notes_note_lat_kbqevi on master_join_iojith.target_id = notes_note_lat_kbqevi.id
  where master_join_iojith.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_rrvynf on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')') as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')') as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')') as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')') as refuellingbaselevel,
    geometry_surface_view_fpiqov.geom AS extent_geom,
    geometry_surface_view_fpiqov.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_asltfn.verticalextent as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_fszxav.point as point,
    notes_note_view_rpyxgq.annotation as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_fpiqov on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_fpiqov.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xpxlvb.id) as verticalextent
  from master_join master_join_chssjr
  join shared.airspacelayer_pt shared_airspacelayer_lat_xpxlvb on master_join_chssjr.target_id = shared_airspacelayer_lat_xpxlvb.id
  where master_join_chssjr.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_asltfn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_obniss.id) as point
  from master_join master_join_jjexrn
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_obniss on master_join_jjexrn.target_id = aerial_refuelling_aerialrefuellingpoint_lat_obniss.id
  where master_join_jjexrn.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_fszxav on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gcumsy.*) AS annotation
  from master_join master_join_vaikbt
  join notes.note_view notes_note_lat_gcumsy on master_join_vaikbt.target_id = notes_note_lat_gcumsy.id
  where master_join_vaikbt.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_rpyxgq on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id,
    airspace.airspacevolume_pt.nilreason AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')') as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')') as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')') as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')') as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')') as width,
    geometry_surface_view_mdybjn.geom AS horizontalprojection_geom,
    geometry_surface_view_mdybjn.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_pbxmzt.geom AS centreline_geom,
    geometry_curve_view_pbxmzt.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_rtprak.id) AS contributorairspace,
    notes_note_view_sbvdab.annotation as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_mdybjn on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_mdybjn.id
left join geometry.curve_view geometry_curve_view_pbxmzt on airspace.airspacevolume.centreline_id = geometry_curve_view_pbxmzt.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_rtprak on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_rtprak.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mligqz.*) AS annotation
  from master_join master_join_gfvobv
  join notes.note_view notes_note_lat_mligqz on master_join_gfvobv.target_id = notes_note_lat_mligqz.id
  where master_join_gfvobv.source_id = airspace.airspacevolume.id
) as notes_note_view_sbvdab on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id,
    procedure.navigationareasector_pt.nilreason AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_sbfehl.id) AS sectordefinition,
    geometry_surface_view_oouqxy.geom AS extent_geom,
    geometry_surface_view_oouqxy.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_bqgdsy.significantobstacle as significantobstacle,
    procedure_sectordesign_pt_wfbsft.sectorcriteria as sectorcriteria,
    notes_note_view_rhnmfi.annotation as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_sbfehl on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_sbfehl.id
left join geometry.surface_view geometry_surface_view_oouqxy on procedure.navigationareasector.extent_id = geometry_surface_view_oouqxy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ymkejc.id) as significantobstacle
  from master_join master_join_icyljc
  join shared.obstruction_pt shared_obstruction_lat_ymkejc on master_join_icyljc.target_id = shared_obstruction_lat_ymkejc.id
  where master_join_icyljc.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_bqgdsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_dxaews.id) as sectorcriteria
  from master_join master_join_lmmauf
  join procedure.sectordesign_pt procedure_sectordesign_lat_dxaews on master_join_lmmauf.target_id = procedure_sectordesign_lat_dxaews.id
  where master_join_lmmauf.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_wfbsft on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oinetg.*) AS annotation
  from master_join master_join_zjgsrk
  join notes.note_view notes_note_lat_oinetg on master_join_zjgsrk.target_id = notes_note_lat_oinetg.id
  where master_join_zjgsrk.source_id = procedure.navigationareasector.id
) as notes_note_view_rhnmfi on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id,
    shared.obstacleassessmentarea_pt.nilreason AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')') as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')') as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')') as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')') as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')') as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')') as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')') as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')') as slopeloweraltitude,
    geometry_surface_view_znzbzy.geom AS surface_geom,
    geometry_surface_view_znzbzy.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_mkukhi.geom AS startingcurve_geom,
    geometry_curve_view_mkukhi.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_gbmtxq.aircraftcategory as aircraftcategory,
    shared_obstruction_pt_yeuodp.significantobstacle as significantobstacle,
    notes_note_view_fcxisv.annotation as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_znzbzy on shared.obstacleassessmentarea.surface_id = geometry_surface_view_znzbzy.id
left join geometry.curve_view geometry_curve_view_mkukhi on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_mkukhi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_wgjhds.id) as aircraftcategory
  from master_join master_join_jrrocq
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_wgjhds on master_join_jrrocq.target_id = shared_aircraftcharacteristic_lat_wgjhds.id
  where master_join_jrrocq.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_gbmtxq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_lpicll.id) as significantobstacle
  from master_join master_join_opngzw
  join shared.obstruction_pt shared_obstruction_lat_lpicll on master_join_opngzw.target_id = shared_obstruction_lat_lpicll.id
  where master_join_opngzw.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_yeuodp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_czsees.*) AS annotation
  from master_join master_join_uvlvgl
  join notes.note_view notes_note_lat_czsees on master_join_uvlvgl.target_id = notes_note_lat_czsees.id
  where master_join_uvlvgl.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_fcxisv on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id,
    navaids_points.pointreference_pt.nilreason AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')') as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')') as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')') as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_snfqmg.title as varchar), '(' || navaids_points_designatedpoint_pt_snfqmg.nilreason[1] || ')') AS point,
    navaids_points_designatedpoint_pt_snfqmg.href AS point_href,
    geometry_surface_view_qbdcce.geom AS fixtolerancearea_geom,
    geometry_surface_view_qbdcce.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_lumfey.facilityangle as facilityangle,
    navaids_points_distanceindication_pt_iwiuip.facilitydistance as facilitydistance,
    notes_note_view_nwjync.annotation as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_snfqmg on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_snfqmg.id
left join geometry.surface_view geometry_surface_view_qbdcce on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_qbdcce.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_ctojzh.id) as facilityangle
  from master_join master_join_dvhpbd
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_ctojzh on master_join_dvhpbd.target_id = navaids_points_angleuse_lat_ctojzh.id
  where master_join_dvhpbd.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_lumfey on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_tmahgx.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_tmahgx.title AS varchar), '(' || navaids_points_distanceindication_lat_tmahgx.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_tmahgx.href
  )) as facilitydistance  from master_join master_join_xttkuv
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_tmahgx on master_join_xttkuv.target_id = navaids_points_distanceindication_lat_tmahgx.id
  where master_join_xttkuv.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_iwiuip on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_anehov.*) AS annotation
  from master_join master_join_uohzhj
  join notes.note_view notes_note_lat_anehov on master_join_uohzhj.target_id = notes_note_lat_anehov.id
  where master_join_uohzhj.source_id = navaids_points.pointreference.id
) as notes_note_view_nwjync on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id,
    procedure.safealtitudeareasector_pt.nilreason AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')') as bufferwidth,
    geometry_surface_view_cmcyse.geom AS extent_geom,
    geometry_surface_view_cmcyse.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_ddlnku.id) AS sectordefinition,
    shared_obstruction_pt_qthrbe.significantobstacle as significantobstacle,
    notes_note_view_vjyykh.annotation as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_cmcyse on procedure.safealtitudeareasector.extent_id = geometry_surface_view_cmcyse.id
left join shared.circlesector_pt shared_circlesector_pt_ddlnku on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_ddlnku.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_uleqsa.id) as significantobstacle
  from master_join master_join_zpbhlf
  join shared.obstruction_pt shared_obstruction_lat_uleqsa on master_join_zpbhlf.target_id = shared_obstruction_lat_uleqsa.id
  where master_join_zpbhlf.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_qthrbe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nlslji.*) AS annotation
  from master_join master_join_evdrtg
  join notes.note_view notes_note_lat_nlslji on master_join_evdrtg.target_id = notes_note_lat_nlslji.id
  where master_join_evdrtg.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_vjyykh on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id,
    procedure.terminalarrivalareasector_pt.nilreason AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')') as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')') as altitudedescription,
    to_jsonb(shared_circlesector_pt_qquatf.id) AS sectordefinition,
    geometry_surface_view_gbqczq.geom AS extent_geom,
    geometry_surface_view_gbqczq.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_txwyxo.significantobstacle as significantobstacle,
    notes_note_view_npmpxv.annotation as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_qquatf on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_qquatf.id
left join geometry.surface_view geometry_surface_view_gbqczq on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_gbqczq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_wfwolu.id) as significantobstacle
  from master_join master_join_cwzxjc
  join shared.obstruction_pt shared_obstruction_lat_wfwolu on master_join_cwzxjc.target_id = shared_obstruction_lat_wfwolu.id
  where master_join_cwzxjc.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_txwyxo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_egkzot.*) AS annotation
  from master_join master_join_gfzgkg
  join notes.note_view notes_note_lat_egkzot on master_join_gfzgkg.target_id = notes_note_lat_egkzot.id
  where master_join_gfzgkg.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_npmpxv on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id,
    airport_heliport.airportheliportavailability_pt.nilreason AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_hjeeig.timeinterval as timeinterval,
    notes_note_view_vjqohw.annotation as annotation,
    organisation_organisationauthority_pt_enoiss.specialdateauthority as specialdateauthority,
    airport_heliport_airportheliportusage_pt_jchmud.usage as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ffvuct.*) AS timeinterval
  from master_join master_join_qpoumw
  join shared.timesheet_view shared_timesheet_lat_ffvuct on master_join_qpoumw.target_id = shared_timesheet_lat_ffvuct.id
  where master_join_qpoumw.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_hjeeig on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgbsjf.*) AS annotation
  from master_join master_join_yusapp
  join notes.note_view notes_note_lat_bgbsjf on master_join_yusapp.target_id = notes_note_lat_bgbsjf.id
  where master_join_yusapp.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_vjqohw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pacway.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pacway.title AS varchar), '(' || organisation_organisationauthority_lat_pacway.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pacway.href
  )) as specialdateauthority  from master_join master_join_shpnap
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pacway on master_join_shpnap.target_id = organisation_organisationauthority_lat_pacway.id
  where master_join_shpnap.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_enoiss on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_cpantd.id) as usage
  from master_join master_join_lboutr
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_cpantd on master_join_lboutr.target_id = airport_heliport_airportheliportusage_lat_cpantd.id
  where master_join_lboutr.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_jchmud on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')') as role,
    coalesce(cast(organisation_organisationauthority_pt_grtvbd.title as varchar), '(' || organisation_organisationauthority_pt_grtvbd.nilreason[1] || ')') AS theorganisationauthority,
    organisation_organisationauthority_pt_grtvbd.href AS theorganisationauthority_href,
    organisation_organisationauthority_pt_trlopj.specialdateauthority as specialdateauthority,
    shared_timesheet_view_gsgdfh.timeinterval as timeinterval,
    notes_note_view_examfl.annotation as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_grtvbd on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_grtvbd.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_rcuokd.*) AS timeinterval
  from master_join master_join_cgtioj
  join shared.timesheet_view shared_timesheet_lat_rcuokd on master_join_cgtioj.target_id = shared_timesheet_lat_rcuokd.id
  where master_join_cgtioj.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_gsgdfh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xwhegb.*) AS annotation
  from master_join master_join_fexksq
  join notes.note_view notes_note_lat_xwhegb on master_join_fexksq.target_id = notes_note_lat_xwhegb.id
  where master_join_fexksq.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_examfl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vufeua.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vufeua.title AS varchar), '(' || organisation_organisationauthority_lat_vufeua.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vufeua.href
  )) as specialdateauthority  from master_join master_join_nptzsq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vufeua on master_join_nptzsq.target_id = organisation_organisationauthority_lat_vufeua.id
  where master_join_nptzsq.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_trlopj on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id,
    airspace.airspaceactivation_pt.nilreason AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')') as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')') as status,
    shared_timesheet_view_xzwfia.timeinterval as timeinterval,
    notes_note_view_kiyakn.annotation as annotation,
    organisation_organisationauthority_pt_rgenfy.specialdateauthority as specialdateauthority,
    organisation_organisationauthority_pt_ibvthy.user as user,
    shared_airspacelayer_pt_adqnde.levels as levels,
    shared_aircraftcharacteristic_pt_egzbxd.aircraft as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vsbhyc.*) AS timeinterval
  from master_join master_join_kkckip
  join shared.timesheet_view shared_timesheet_lat_vsbhyc on master_join_kkckip.target_id = shared_timesheet_lat_vsbhyc.id
  where master_join_kkckip.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_xzwfia on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yedwaa.*) AS annotation
  from master_join master_join_gwaqdl
  join notes.note_view notes_note_lat_yedwaa on master_join_gwaqdl.target_id = notes_note_lat_yedwaa.id
  where master_join_gwaqdl.source_id = airspace.airspaceactivation.id
) as notes_note_view_kiyakn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_swsoyo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_swsoyo.title AS varchar), '(' || organisation_organisationauthority_lat_swsoyo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_swsoyo.href
  )) as specialdateauthority  from master_join master_join_vtphps
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_swsoyo on master_join_vtphps.target_id = organisation_organisationauthority_lat_swsoyo.id
  where master_join_vtphps.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_rgenfy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_utdxhg.id) as levels
  from master_join master_join_scgbhx
  join shared.airspacelayer_pt shared_airspacelayer_lat_utdxhg on master_join_scgbhx.target_id = shared_airspacelayer_lat_utdxhg.id
  where master_join_scgbhx.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_adqnde on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_amwigv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_amwigv.title AS varchar), '(' || organisation_organisationauthority_lat_amwigv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_amwigv.href
  )) as user  from master_join master_join_casilq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_amwigv on master_join_casilq.target_id = organisation_organisationauthority_lat_amwigv.id
  where master_join_casilq.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_ibvthy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_zviigp.id) as aircraft
  from master_join master_join_wtnfgx
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_zviigp on master_join_wtnfgx.target_id = shared_aircraftcharacteristic_lat_zviigp.id
  where master_join_wtnfgx.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_egzbxd on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id,
    airspace.airspacelayerclass_pt.nilreason AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')') as classification,
    shared_timesheet_view_szkeva.timeinterval as timeinterval,
    notes_note_view_lqlhje.annotation as annotation,
    organisation_organisationauthority_pt_ewfpvn.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_pbgchn.associatedlevels as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_orguwa.*) AS timeinterval
  from master_join master_join_dophfn
  join shared.timesheet_view shared_timesheet_lat_orguwa on master_join_dophfn.target_id = shared_timesheet_lat_orguwa.id
  where master_join_dophfn.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_szkeva on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_awmxoi.*) AS annotation
  from master_join master_join_tzkopj
  join notes.note_view notes_note_lat_awmxoi on master_join_tzkopj.target_id = notes_note_lat_awmxoi.id
  where master_join_tzkopj.source_id = airspace.airspacelayerclass.id
) as notes_note_view_lqlhje on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gixqpq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gixqpq.title AS varchar), '(' || organisation_organisationauthority_lat_gixqpq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gixqpq.href
  )) as specialdateauthority  from master_join master_join_saywpo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gixqpq on master_join_saywpo.target_id = organisation_organisationauthority_lat_gixqpq.id
  where master_join_saywpo.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_ewfpvn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_ejmtra.id) as associatedlevels
  from master_join master_join_mfiqvc
  join shared.airspacelayer_pt shared_airspacelayer_lat_ejmtra on master_join_mfiqvc.target_id = shared_airspacelayer_lat_ejmtra.id
  where master_join_mfiqvc.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_pbgchn on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id,
    airport_heliport.altimetersourcestatus_pt.nilreason AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_dwxwus.timeinterval as timeinterval,
    notes_note_view_cnjdzv.annotation as annotation,
    organisation_organisationauthority_pt_dsmnpa.specialdateauthority as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wyeysw.*) AS timeinterval
  from master_join master_join_aaiccq
  join shared.timesheet_view shared_timesheet_lat_wyeysw on master_join_aaiccq.target_id = shared_timesheet_lat_wyeysw.id
  where master_join_aaiccq.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_dwxwus on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oaqkdy.*) AS annotation
  from master_join master_join_asdhcq
  join notes.note_view notes_note_lat_oaqkdy on master_join_asdhcq.target_id = notes_note_lat_oaqkdy.id
  where master_join_asdhcq.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_cnjdzv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vodrbd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vodrbd.title AS varchar), '(' || organisation_organisationauthority_lat_vodrbd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vodrbd.href
  )) as specialdateauthority  from master_join master_join_wzfxjz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vodrbd on master_join_wzfxjz.target_id = organisation_organisationauthority_lat_vodrbd.id
  where master_join_wzfxjz.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_dsmnpa on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id,
    airport_heliport.apronareaavailability_pt.nilreason AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_gqyabm.timeinterval as timeinterval,
    notes_note_view_ivhlbm.annotation as annotation,
    organisation_organisationauthority_pt_zlhwcs.specialdateauthority as specialdateauthority,
    airport_heliport_apronareausage_pt_rouwoq.usage as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_rfhanw.*) AS timeinterval
  from master_join master_join_vvsint
  join shared.timesheet_view shared_timesheet_lat_rfhanw on master_join_vvsint.target_id = shared_timesheet_lat_rfhanw.id
  where master_join_vvsint.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_gqyabm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ruvkpc.*) AS annotation
  from master_join master_join_cskhuc
  join notes.note_view notes_note_lat_ruvkpc on master_join_cskhuc.target_id = notes_note_lat_ruvkpc.id
  where master_join_cskhuc.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_ivhlbm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fsiutv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fsiutv.title AS varchar), '(' || organisation_organisationauthority_lat_fsiutv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fsiutv.href
  )) as specialdateauthority  from master_join master_join_bwqksr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fsiutv on master_join_bwqksr.target_id = organisation_organisationauthority_lat_fsiutv.id
  where master_join_bwqksr.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_zlhwcs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_ffkwxt.id) as usage
  from master_join master_join_azdrbf
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_ffkwxt on master_join_azdrbf.target_id = airport_heliport_apronareausage_lat_ffkwxt.id
  where master_join_azdrbf.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_rouwoq on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['shared.timesheet_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id,
    procedure.circlingrestriction_pt.nilreason AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_rffntt.id) AS sectordescription,
    geometry_surface_view_peuymk.geom AS restrictionarea_geom,
    geometry_surface_view_peuymk.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_xosjss.timeinterval as timeinterval,
    notes_note_view_ulbbgo.annotation as annotation,
    organisation_organisationauthority_pt_fsonzq.specialdateauthority as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_rffntt on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_rffntt.id
left join geometry.surface_view geometry_surface_view_peuymk on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_peuymk.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zfyhxb.*) AS timeinterval
  from master_join master_join_pmltfa
  join shared.timesheet_view shared_timesheet_lat_zfyhxb on master_join_pmltfa.target_id = shared_timesheet_lat_zfyhxb.id
  where master_join_pmltfa.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_xosjss on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fypidc.*) AS annotation
  from master_join master_join_ywofve
  join notes.note_view notes_note_lat_fypidc on master_join_ywofve.target_id = notes_note_lat_fypidc.id
  where master_join_ywofve.source_id = procedure.circlingrestriction.id
) as notes_note_view_ulbbgo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wldilm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wldilm.title AS varchar), '(' || organisation_organisationauthority_lat_wldilm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wldilm.href
  )) as specialdateauthority  from master_join master_join_odbqjt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wldilm on master_join_odbqjt.target_id = organisation_organisationauthority_lat_wldilm.id
  where master_join_odbqjt.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_fsonzq on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id,
    airport_heliport.conditioncombination_pt.nilreason AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_vijbcw.timeinterval as timeinterval,
    notes_note_view_hlnrsh.annotation as annotation,
    organisation_organisationauthority_pt_dkxsce.specialdateauthority as specialdateauthority,
    shared_meteorology_pt_qmqskp.weather as weather,
    shared_aircraftcharacteristic_pt_qflzfq.aircraft as aircraft,
    shared_flightcharacteristic_pt_gfbbhc.flight as flight,
    airport_heliport_conditioncombination_pt_usffhl.subcondition as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_aojpwt.*) AS timeinterval
  from master_join master_join_atnfju
  join shared.timesheet_view shared_timesheet_lat_aojpwt on master_join_atnfju.target_id = shared_timesheet_lat_aojpwt.id
  where master_join_atnfju.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_vijbcw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kxdmrr.*) AS annotation
  from master_join master_join_bqgnrs
  join notes.note_view notes_note_lat_kxdmrr on master_join_bqgnrs.target_id = notes_note_lat_kxdmrr.id
  where master_join_bqgnrs.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_hlnrsh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vpcvds.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vpcvds.title AS varchar), '(' || organisation_organisationauthority_lat_vpcvds.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vpcvds.href
  )) as specialdateauthority  from master_join master_join_fojwkr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vpcvds on master_join_fojwkr.target_id = organisation_organisationauthority_lat_vpcvds.id
  where master_join_fojwkr.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_dkxsce on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_mewumv.id) as weather
  from master_join master_join_rxfkrs
  join shared.meteorology_pt shared_meteorology_lat_mewumv on master_join_rxfkrs.target_id = shared_meteorology_lat_mewumv.id
  where master_join_rxfkrs.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_qmqskp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_razmjs.id) as aircraft
  from master_join master_join_bbvqqu
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_razmjs on master_join_bbvqqu.target_id = shared_aircraftcharacteristic_lat_razmjs.id
  where master_join_bbvqqu.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_qflzfq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_wmgmwy.id) as flight
  from master_join master_join_lycpgm
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_wmgmwy on master_join_lycpgm.target_id = shared_flightcharacteristic_lat_wmgmwy.id
  where master_join_lycpgm.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_gfbbhc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_rjqywm.id) as subcondition
  from master_join master_join_naitwp
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_rjqywm on master_join_naitwp.target_id = airport_heliport_conditioncombination_lat_rjqywm.id
  where master_join_naitwp.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_usffhl on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id,
    routes.flightconditioncombination_pt.nilreason AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')') as logicaloperator,
    shared_timesheet_view_ydazes.timeinterval as timeinterval,
    notes_note_view_chrfaz.annotation as annotation,
    organisation_organisationauthority_pt_vimafz.specialdateauthority as specialdateauthority,
    routes_flightconditionelement_pt_hszvpe.element as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_zyebge.*) AS timeinterval
  from master_join master_join_btouiu
  join shared.timesheet_view shared_timesheet_lat_zyebge on master_join_btouiu.target_id = shared_timesheet_lat_zyebge.id
  where master_join_btouiu.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_ydazes on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yfjidi.*) AS annotation
  from master_join master_join_wnawds
  join notes.note_view notes_note_lat_yfjidi on master_join_wnawds.target_id = notes_note_lat_yfjidi.id
  where master_join_wnawds.source_id = routes.flightconditioncombination.id
) as notes_note_view_chrfaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kcekbc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kcekbc.title AS varchar), '(' || organisation_organisationauthority_lat_kcekbc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kcekbc.href
  )) as specialdateauthority  from master_join master_join_slmrar
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kcekbc on master_join_slmrar.target_id = organisation_organisationauthority_lat_kcekbc.id
  where master_join_slmrar.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_vimafz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_hutkta.id) as element
  from master_join master_join_quwlyc
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_hutkta on master_join_quwlyc.target_id = routes_flightconditionelement_lat_hutkta.id
  where master_join_quwlyc.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_hszvpe on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id,
    airport_heliport.groundlightingavailability_pt.nilreason AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_nnirya.timeinterval as timeinterval,
    notes_note_view_tvhetj.annotation as annotation,
    organisation_organisationauthority_pt_ardfix.specialdateauthority as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gfxjok.*) AS timeinterval
  from master_join master_join_tupkyx
  join shared.timesheet_view shared_timesheet_lat_gfxjok on master_join_tupkyx.target_id = shared_timesheet_lat_gfxjok.id
  where master_join_tupkyx.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_nnirya on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oumavq.*) AS annotation
  from master_join master_join_jvfqjw
  join notes.note_view notes_note_lat_oumavq on master_join_jvfqjw.target_id = notes_note_lat_oumavq.id
  where master_join_jvfqjw.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_tvhetj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zsgtlg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zsgtlg.title AS varchar), '(' || organisation_organisationauthority_lat_zsgtlg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zsgtlg.href
  )) as specialdateauthority  from master_join master_join_bmexsq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zsgtlg on master_join_bmexsq.target_id = organisation_organisationauthority_lat_zsgtlg.id
  where master_join_bmexsq.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_ardfix on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id,
    shared.lightelementstatus_pt.nilreason AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')') as status,
    shared_timesheet_view_kedchb.timeinterval as timeinterval,
    notes_note_view_gfigdu.annotation as annotation,
    organisation_organisationauthority_pt_izpknx.specialdateauthority as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hkopjd.*) AS timeinterval
  from master_join master_join_rkkkmf
  join shared.timesheet_view shared_timesheet_lat_hkopjd on master_join_rkkkmf.target_id = shared_timesheet_lat_hkopjd.id
  where master_join_rkkkmf.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_kedchb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zipmfg.*) AS annotation
  from master_join master_join_eexcnl
  join notes.note_view notes_note_lat_zipmfg on master_join_eexcnl.target_id = notes_note_lat_zipmfg.id
  where master_join_eexcnl.source_id = shared.lightelementstatus.id
) as notes_note_view_gfigdu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ynvgsr.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ynvgsr.title AS varchar), '(' || organisation_organisationauthority_lat_ynvgsr.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ynvgsr.href
  )) as specialdateauthority  from master_join master_join_yxzvmp
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ynvgsr on master_join_yxzvmp.target_id = organisation_organisationauthority_lat_ynvgsr.id
  where master_join_yxzvmp.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_izpknx on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')') as warning,
    shared_timesheet_view_kabnen.timeinterval as timeinterval,
    notes_note_view_uflszc.annotation as annotation,
    organisation_organisationauthority_pt_hccyxy.specialdateauthority as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_qybwny.usage as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_khglpm.*) AS timeinterval
  from master_join master_join_wjbfmz
  join shared.timesheet_view shared_timesheet_lat_khglpm on master_join_wjbfmz.target_id = shared_timesheet_lat_khglpm.id
  where master_join_wjbfmz.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_kabnen on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wjpmgq.*) AS annotation
  from master_join master_join_hfpcgx
  join notes.note_view notes_note_lat_wjpmgq on master_join_hfpcgx.target_id = notes_note_lat_wjpmgq.id
  where master_join_hfpcgx.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_uflszc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tcfpjy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tcfpjy.title AS varchar), '(' || organisation_organisationauthority_lat_tcfpjy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tcfpjy.href
  )) as specialdateauthority  from master_join master_join_kdahzq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tcfpjy on master_join_kdahzq.target_id = organisation_organisationauthority_lat_tcfpjy.id
  where master_join_kdahzq.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_hccyxy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_bzpsut.id) as usage
  from master_join master_join_psmwfo
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_bzpsut on master_join_psmwfo.target_id = airport_heliport_manoeuvringareausage_lat_bzpsut.id
  where master_join_psmwfo.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_qybwny on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')') as monitored,
    shared_timesheet_view_cpzbmt.timeinterval as timeinterval,
    notes_note_view_anekst.annotation as annotation,
    organisation_organisationauthority_pt_pqjpkn.specialdateauthority as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dnlfro.*) AS timeinterval
  from master_join master_join_xlokbh
  join shared.timesheet_view shared_timesheet_lat_dnlfro on master_join_xlokbh.target_id = shared_timesheet_lat_dnlfro.id
  where master_join_xlokbh.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_cpzbmt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eizvkv.*) AS annotation
  from master_join master_join_nrqnef
  join notes.note_view notes_note_lat_eizvkv on master_join_nrqnef.target_id = notes_note_lat_eizvkv.id
  where master_join_nrqnef.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_anekst on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ygwxeu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ygwxeu.title AS varchar), '(' || organisation_organisationauthority_lat_ygwxeu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ygwxeu.href
  )) as specialdateauthority  from master_join master_join_chcthv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ygwxeu on master_join_chcthv.target_id = organisation_organisationauthority_lat_ygwxeu.id
  where master_join_chcthv.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_pqjpkn on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id,
    navaids_points.navaidoperationalstatus_pt.nilreason AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')') as signaltype,
    shared_timesheet_view_goxwte.timeinterval as timeinterval,
    notes_note_view_dpimou.annotation as annotation,
    organisation_organisationauthority_pt_imtsve.specialdateauthority as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jamhea.*) AS timeinterval
  from master_join master_join_rgamjl
  join shared.timesheet_view shared_timesheet_lat_jamhea on master_join_rgamjl.target_id = shared_timesheet_lat_jamhea.id
  where master_join_rgamjl.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_goxwte on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjghrt.*) AS annotation
  from master_join master_join_ksudac
  join notes.note_view notes_note_lat_rjghrt on master_join_ksudac.target_id = notes_note_lat_rjghrt.id
  where master_join_ksudac.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_dpimou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rgzdjh.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rgzdjh.title AS varchar), '(' || organisation_organisationauthority_lat_rgzdjh.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rgzdjh.href
  )) as specialdateauthority  from master_join master_join_tggnqm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rgzdjh on master_join_tggnqm.target_id = organisation_organisationauthority_lat_rgzdjh.id
  where master_join_tggnqm.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_imtsve on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id,
    shared.onlinecontact_pt.nilreason AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')') as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')') as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')') as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')') as email,
    shared_timesheet_view_rjnuvu.timeinterval as timeinterval,
    notes_note_view_eixfvb.annotation as annotation,
    organisation_organisationauthority_pt_fkwtvz.specialdateauthority as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nhggxq.*) AS timeinterval
  from master_join master_join_nqtzrc
  join shared.timesheet_view shared_timesheet_lat_nhggxq on master_join_nqtzrc.target_id = shared_timesheet_lat_nhggxq.id
  where master_join_nqtzrc.source_id = shared.onlinecontact.id
) as shared_timesheet_view_rjnuvu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fkoioj.*) AS annotation
  from master_join master_join_nogbjb
  join notes.note_view notes_note_lat_fkoioj on master_join_nogbjb.target_id = notes_note_lat_fkoioj.id
  where master_join_nogbjb.source_id = shared.onlinecontact.id
) as notes_note_view_eixfvb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dydsdg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dydsdg.title AS varchar), '(' || organisation_organisationauthority_lat_dydsdg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dydsdg.href
  )) as specialdateauthority  from master_join master_join_ssdayc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dydsdg on master_join_ssdayc.target_id = organisation_organisationauthority_lat_dydsdg.id
  where master_join_ssdayc.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_fkwtvz on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id,
    shared.postaladdress_pt.nilreason AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')') as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')') as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')') as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')') as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')') as country,
    shared_timesheet_view_gfbhkl.timeinterval as timeinterval,
    notes_note_view_qnxngy.annotation as annotation,
    organisation_organisationauthority_pt_ggdjan.specialdateauthority as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lajhet.*) AS timeinterval
  from master_join master_join_lgnzas
  join shared.timesheet_view shared_timesheet_lat_lajhet on master_join_lgnzas.target_id = shared_timesheet_lat_lajhet.id
  where master_join_lgnzas.source_id = shared.postaladdress.id
) as shared_timesheet_view_gfbhkl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bmqbqb.*) AS annotation
  from master_join master_join_bfgtbs
  join notes.note_view notes_note_lat_bmqbqb on master_join_bfgtbs.target_id = notes_note_lat_bmqbqb.id
  where master_join_bfgtbs.source_id = shared.postaladdress.id
) as notes_note_view_qnxngy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_shidjk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_shidjk.title AS varchar), '(' || organisation_organisationauthority_lat_shidjk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_shidjk.href
  )) as specialdateauthority  from master_join master_join_hqpmgx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_shidjk on master_join_hqpmgx.target_id = organisation_organisationauthority_lat_shidjk.id
  where master_join_hqpmgx.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_ggdjan on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id,
    procedure.procedureavailability_pt.nilreason AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')') as status,
    shared_timesheet_view_sebfzm.timeinterval as timeinterval,
    notes_note_view_zcxccw.annotation as annotation,
    organisation_organisationauthority_pt_ficxwr.specialdateauthority as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bdzaui.*) AS timeinterval
  from master_join master_join_raibgh
  join shared.timesheet_view shared_timesheet_lat_bdzaui on master_join_raibgh.target_id = shared_timesheet_lat_bdzaui.id
  where master_join_raibgh.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_sebfzm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_budqtc.*) AS annotation
  from master_join master_join_rewohc
  join notes.note_view notes_note_lat_budqtc on master_join_rewohc.target_id = notes_note_lat_budqtc.id
  where master_join_rewohc.source_id = procedure.procedureavailability.id
) as notes_note_view_zcxccw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zknfty.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zknfty.title AS varchar), '(' || organisation_organisationauthority_lat_zknfty.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zknfty.href
  )) as specialdateauthority  from master_join master_join_usvxra
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zknfty on master_join_usvxra.target_id = organisation_organisationauthority_lat_zknfty.id
  where master_join_usvxra.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_ficxwr on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id,
    service.radiocommunicationoperationalstatus_pt.nilreason AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_modozb.timeinterval as timeinterval,
    notes_note_view_mutzes.annotation as annotation,
    organisation_organisationauthority_pt_jrrjux.specialdateauthority as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_svlmfy.*) AS timeinterval
  from master_join master_join_sgtasc
  join shared.timesheet_view shared_timesheet_lat_svlmfy on master_join_sgtasc.target_id = shared_timesheet_lat_svlmfy.id
  where master_join_sgtasc.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_modozb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kdjlow.*) AS annotation
  from master_join master_join_kfcnps
  join notes.note_view notes_note_lat_kdjlow on master_join_kfcnps.target_id = notes_note_lat_kdjlow.id
  where master_join_kfcnps.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_mutzes on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_htempg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_htempg.title AS varchar), '(' || organisation_organisationauthority_lat_htempg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_htempg.href
  )) as specialdateauthority  from master_join master_join_aedtkd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_htempg on master_join_aedtkd.target_id = organisation_organisationauthority_lat_htempg.id
  where master_join_aedtkd.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_jrrjux on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id,
    routes.routeavailability_pt.nilreason AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')') as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')') as status,
    shared_timesheet_view_eozrsr.timeinterval as timeinterval,
    notes_note_view_przsdr.annotation as annotation,
    organisation_organisationauthority_pt_ffqgnh.specialdateauthority as specialdateauthority,
    shared_airspacelayer_pt_xbpnse.levels as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ipmkvr.*) AS timeinterval
  from master_join master_join_hmtxnr
  join shared.timesheet_view shared_timesheet_lat_ipmkvr on master_join_hmtxnr.target_id = shared_timesheet_lat_ipmkvr.id
  where master_join_hmtxnr.source_id = routes.routeavailability.id
) as shared_timesheet_view_eozrsr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dnveeg.*) AS annotation
  from master_join master_join_jtpxpn
  join notes.note_view notes_note_lat_dnveeg on master_join_jtpxpn.target_id = notes_note_lat_dnveeg.id
  where master_join_jtpxpn.source_id = routes.routeavailability.id
) as notes_note_view_przsdr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_iljchy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_iljchy.title AS varchar), '(' || organisation_organisationauthority_lat_iljchy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_iljchy.href
  )) as specialdateauthority  from master_join master_join_ocbsez
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_iljchy on master_join_ocbsez.target_id = organisation_organisationauthority_lat_iljchy.id
  where master_join_ocbsez.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_ffqgnh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_tnelyc.id) as levels
  from master_join master_join_cccpjg
  join shared.airspacelayer_pt shared_airspacelayer_lat_tnelyc on master_join_cccpjg.target_id = shared_airspacelayer_lat_tnelyc.id
  where master_join_cccpjg.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_xbpnse on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')') as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')') as distanceaccuracy,
    shared_timesheet_view_iueqdm.timeinterval as timeinterval,
    notes_note_view_judtqg.annotation as annotation,
    organisation_organisationauthority_pt_oumwkf.specialdateauthority as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gsjosh.*) AS timeinterval
  from master_join master_join_eibpzj
  join shared.timesheet_view shared_timesheet_lat_gsjosh on master_join_eibpzj.target_id = shared_timesheet_lat_gsjosh.id
  where master_join_eibpzj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_iueqdm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iebksc.*) AS annotation
  from master_join master_join_hgrxre
  join notes.note_view notes_note_lat_iebksc on master_join_hgrxre.target_id = notes_note_lat_iebksc.id
  where master_join_hgrxre.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_judtqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wkhwzl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wkhwzl.title AS varchar), '(' || organisation_organisationauthority_lat_wkhwzl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wkhwzl.href
  )) as specialdateauthority  from master_join master_join_iyerua
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wkhwzl on master_join_iyerua.target_id = organisation_organisationauthority_lat_wkhwzl.id
  where master_join_iyerua.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_oumwkf on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id,
    service.serviceoperationalstatus_pt.nilreason AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_biukdt.timeinterval as timeinterval,
    notes_note_view_trrxji.annotation as annotation,
    organisation_organisationauthority_pt_rpgbiw.specialdateauthority as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ucabcq.*) AS timeinterval
  from master_join master_join_eiuanx
  join shared.timesheet_view shared_timesheet_lat_ucabcq on master_join_eiuanx.target_id = shared_timesheet_lat_ucabcq.id
  where master_join_eiuanx.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_biukdt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbvjpy.*) AS annotation
  from master_join master_join_fdugsp
  join notes.note_view notes_note_lat_gbvjpy on master_join_fdugsp.target_id = notes_note_lat_gbvjpy.id
  where master_join_fdugsp.source_id = service.serviceoperationalstatus.id
) as notes_note_view_trrxji on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ajwcye.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ajwcye.title AS varchar), '(' || organisation_organisationauthority_lat_ajwcye.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ajwcye.href
  )) as specialdateauthority  from master_join master_join_qjnrzn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ajwcye on master_join_qjnrzn.target_id = organisation_organisationauthority_lat_ajwcye.id
  where master_join_qjnrzn.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_rpgbiw on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id,
    navaids_points.specialnavigationstationstatus_pt.nilreason AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_fqeqzn.timeinterval as timeinterval,
    notes_note_view_otwgvu.annotation as annotation,
    organisation_organisationauthority_pt_sgkhch.specialdateauthority as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ffjyoz.*) AS timeinterval
  from master_join master_join_kecxwt
  join shared.timesheet_view shared_timesheet_lat_ffjyoz on master_join_kecxwt.target_id = shared_timesheet_lat_ffjyoz.id
  where master_join_kecxwt.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_fqeqzn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jqygbn.*) AS annotation
  from master_join master_join_sgpjku
  join notes.note_view notes_note_lat_jqygbn on master_join_sgpjku.target_id = notes_note_lat_jqygbn.id
  where master_join_sgpjku.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_otwgvu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_efmjnm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_efmjnm.title AS varchar), '(' || organisation_organisationauthority_lat_efmjnm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_efmjnm.href
  )) as specialdateauthority  from master_join master_join_jslqxc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_efmjnm on master_join_jslqxc.target_id = organisation_organisationauthority_lat_efmjnm.id
  where master_join_jslqxc.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_sgkhch on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id,
    shared.telephonecontact_pt.nilreason AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')') as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')') as facsimile,
    shared_timesheet_view_dqsdjb.timeinterval as timeinterval,
    notes_note_view_rhhygs.annotation as annotation,
    organisation_organisationauthority_pt_ezhquq.specialdateauthority as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cqjfie.*) AS timeinterval
  from master_join master_join_baawem
  join shared.timesheet_view shared_timesheet_lat_cqjfie on master_join_baawem.target_id = shared_timesheet_lat_cqjfie.id
  where master_join_baawem.source_id = shared.telephonecontact.id
) as shared_timesheet_view_dqsdjb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hlezfw.*) AS annotation
  from master_join master_join_vucvqp
  join notes.note_view notes_note_lat_hlezfw on master_join_vucvqp.target_id = notes_note_lat_hlezfw.id
  where master_join_vucvqp.source_id = shared.telephonecontact.id
) as notes_note_view_rhhygs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_maeden.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_maeden.title AS varchar), '(' || organisation_organisationauthority_lat_maeden.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_maeden.href
  )) as specialdateauthority  from master_join master_join_rceshd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_maeden on master_join_rceshd.target_id = organisation_organisationauthority_lat_maeden.id
  where master_join_rceshd.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_ezhquq on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id,
    organisation.unitavailability_pt.nilreason AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')') as operationalstatus,
    shared_timesheet_view_qfbxzu.timeinterval as timeinterval,
    notes_note_view_zyjmmq.annotation as annotation,
    organisation_organisationauthority_pt_midfcy.specialdateauthority as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_navagp.*) AS timeinterval
  from master_join master_join_kwjugw
  join shared.timesheet_view shared_timesheet_lat_navagp on master_join_kwjugw.target_id = shared_timesheet_lat_navagp.id
  where master_join_kwjugw.source_id = organisation.unitavailability.id
) as shared_timesheet_view_qfbxzu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfvtsb.*) AS annotation
  from master_join master_join_eigzbk
  join notes.note_view notes_note_lat_gfvtsb on master_join_eigzbk.target_id = notes_note_lat_gfvtsb.id
  where master_join_eigzbk.source_id = organisation.unitavailability.id
) as notes_note_view_zyjmmq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_aihuoi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_aihuoi.title AS varchar), '(' || organisation_organisationauthority_lat_aihuoi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_aihuoi.href
  )) as specialdateauthority  from master_join master_join_oqeype
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_aihuoi on master_join_oqeype.target_id = organisation_organisationauthority_lat_aihuoi.id
  where master_join_oqeype.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_midfcy on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id,
    obstacles.verticalstructurelightingstatus_pt.nilreason AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')') as status,
    shared_timesheet_view_zekxsg.timeinterval as timeinterval,
    notes_note_view_kcvthu.annotation as annotation,
    organisation_organisationauthority_pt_wubvmp.specialdateauthority as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_razivy.*) AS timeinterval
  from master_join master_join_cuycnl
  join shared.timesheet_view shared_timesheet_lat_razivy on master_join_cuycnl.target_id = shared_timesheet_lat_razivy.id
  where master_join_cuycnl.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_zekxsg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evdhum.*) AS annotation
  from master_join master_join_gbrdnl
  join notes.note_view notes_note_lat_evdhum on master_join_gbrdnl.target_id = notes_note_lat_evdhum.id
  where master_join_gbrdnl.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_kcvthu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zntogc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zntogc.title AS varchar), '(' || organisation_organisationauthority_lat_zntogc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zntogc.href
  )) as specialdateauthority  from master_join master_join_ebzvgo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zntogc on master_join_ebzvgo.target_id = organisation_organisationauthority_lat_zntogc.id
  where master_join_ebzvgo.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_wubvmp on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id,
    obstacles.verticalstructurepart_pt.nilreason AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')') as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')') as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')') as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')') as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')') as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')') as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')') as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')') as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')') as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')') as verticalextentaccuracy,
    geometry_elevatedpoint_view_tfxufm.geom AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_tfxufm.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_tfxufm.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_tfxufm.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_tfxufm.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_tfxufm.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_tfxufm.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_tfxufm.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_gbcfer.geom AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_gbcfer.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_gbcfer.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_gbcfer.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_gbcfer.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_gbcfer.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_yzydoy.geom AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_yzydoy.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_yzydoy.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_yzydoy.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_yzydoy.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_yzydoy.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_afwyii.timeinterval as timeinterval,
    notes_note_view_ervmet.annotation as annotation,
    organisation_organisationauthority_pt_krmqhf.specialdateauthority as specialdateauthority,
    shared_lightelement_pt_ercioa.lighting as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tfxufm on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_tfxufm.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_gbcfer on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_gbcfer.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_yzydoy on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_yzydoy.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_xyawtw.*) AS timeinterval
  from master_join master_join_bkmerx
  join shared.timesheet_view shared_timesheet_lat_xyawtw on master_join_bkmerx.target_id = shared_timesheet_lat_xyawtw.id
  where master_join_bkmerx.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_afwyii on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdqszy.*) AS annotation
  from master_join master_join_yrtikm
  join notes.note_view notes_note_lat_mdqszy on master_join_yrtikm.target_id = notes_note_lat_mdqszy.id
  where master_join_yrtikm.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_ervmet on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ohqslk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ohqslk.title AS varchar), '(' || organisation_organisationauthority_lat_ohqslk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ohqslk.href
  )) as specialdateauthority  from master_join master_join_pwyjza
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ohqslk on master_join_pwyjza.target_id = organisation_organisationauthority_lat_ohqslk.id
  where master_join_pwyjza.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_krmqhf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_uzvgjt.id) as lighting
  from master_join master_join_wetbgm
  join shared.lightelement_pt shared_lightelement_lat_uzvgjt on master_join_wetbgm.target_id = shared_lightelement_lat_uzvgjt.id
  where master_join_wetbgm.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_ercioa on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id,
    airport_heliport.workareaactivity_pt.nilreason AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')') as isactive,
    shared_timesheet_view_cfuayk.timeinterval as timeinterval,
    notes_note_view_ancyme.annotation as annotation,
    organisation_organisationauthority_pt_akfwuy.specialdateauthority as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ttljpx.*) AS timeinterval
  from master_join master_join_hewmka
  join shared.timesheet_view shared_timesheet_lat_ttljpx on master_join_hewmka.target_id = shared_timesheet_lat_ttljpx.id
  where master_join_hewmka.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_cfuayk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ywsrhj.*) AS annotation
  from master_join master_join_vpnmws
  join notes.note_view notes_note_lat_ywsrhj on master_join_vpnmws.target_id = notes_note_lat_ywsrhj.id
  where master_join_vpnmws.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_ancyme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wylqbz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wylqbz.title AS varchar), '(' || organisation_organisationauthority_lat_wylqbz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wylqbz.href
  )) as specialdateauthority  from master_join master_join_veefzc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wylqbz on master_join_veefzc.target_id = organisation_organisationauthority_lat_wylqbz.id
  where master_join_veefzc.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_akfwuy on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.postaladdress_view', 'notes.note_view', 'shared.onlinecontact_view', 'shared.telephonecontact_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id,
    airport_heliport.airportheliportusage_pt.nilreason AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_sptjrx.id) AS selection,
    notes_note_view_expbvc.annotation as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_sptjrx on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_sptjrx.id
left join lateral(
  select
  from master_join master_join_plpwmw
  join shared.contactinformation_view shared_contactinformation_lat_icccsu on master_join_plpwmw.target_id = shared_contactinformation_lat_icccsu.id
  where master_join_plpwmw.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_ilnesp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xdguce.*) AS annotation
  from master_join master_join_dtefmw
  join notes.note_view notes_note_lat_xdguce on master_join_dtefmw.target_id = notes_note_lat_xdguce.id
  where master_join_dtefmw.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_expbvc on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id,
    airport_heliport.apronareausage_pt.nilreason AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_yimpyg.id) AS selection,
    notes_note_view_hxukfr.annotation as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_yimpyg on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_yimpyg.id
left join lateral(
  select
  from master_join master_join_xqefrk
  join shared.contactinformation_view shared_contactinformation_lat_bylmtk on master_join_xqefrk.target_id = shared_contactinformation_lat_bylmtk.id
  where master_join_xqefrk.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_lrjauj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgcezs.*) AS annotation
  from master_join master_join_howdtm
  join notes.note_view notes_note_lat_lgcezs on master_join_howdtm.target_id = notes_note_lat_lgcezs.id
  where master_join_howdtm.source_id = airport_heliport.apronareausage.id
) as notes_note_view_hxukfr on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id,
    routes.flightrestrictionroute_pt.nilreason AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')') as priorpermission,
    routes_flightroutingelement_pt_wwyvfd.routeelement as routeelement,
    notes_note_view_prbmqt.annotation as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_pdodct.id) as routeelement
  from master_join master_join_lqjrke
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_pdodct on master_join_lqjrke.target_id = routes_flightroutingelement_lat_pdodct.id
  where master_join_lqjrke.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_wwyvfd on TRUE
left join lateral(
  select
  from master_join master_join_tacfxs
  join shared.contactinformation_view shared_contactinformation_lat_zqxqxk on master_join_tacfxs.target_id = shared_contactinformation_lat_zqxqxk.id
  where master_join_tacfxs.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_zqgdro on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jnjhiv.*) AS annotation
  from master_join master_join_tyxgpr
  join notes.note_view notes_note_lat_jnjhiv on master_join_tyxgpr.target_id = notes_note_lat_jnjhiv.id
  where master_join_tyxgpr.source_id = routes.flightrestrictionroute.id
) as notes_note_view_prbmqt on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id,
    airport_heliport.manoeuvringareausage_pt.nilreason AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')') as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')') as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_rmnowl.id) AS selection,
    notes_note_view_bsyufk.annotation as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_rmnowl on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_rmnowl.id
left join lateral(
  select
  from master_join master_join_ftfxgg
  join shared.contactinformation_view shared_contactinformation_lat_tsnezl on master_join_ftfxgg.target_id = shared_contactinformation_lat_tsnezl.id
  where master_join_ftfxgg.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_pmkijf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrvuiz.*) AS annotation
  from master_join master_join_ybgrmv
  join notes.note_view notes_note_lat_mrvuiz on master_join_ybgrmv.target_id = notes_note_lat_mrvuiz.id
  where master_join_ybgrmv.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_bsyufk on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['routes.routeavailability_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    aerial_refuelling.aerialrefuelling.id,
    aerial_refuelling.aerialrefuelling_ts.id as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier,
    aerial_refuelling.aerialrefuelling_ts.interpretation,
    aerial_refuelling.aerialrefuelling_ts.sequence_number,
    aerial_refuelling.aerialrefuelling_ts.correction_number,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')') as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')') as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')') as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')') as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')') as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')') as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')') as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')') as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')') as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')') as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')') as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_cgywuk.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_cgywuk.nilreason[1] || ')') AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_cgywuk.href AS oppositetrack_href,
    routes_routeavailability_view_qwfmnk.availability as availability,
    airspace_airspace_pt_lomvhk.protectingairspace as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_tkpcei.track as track,
    aerial_refuelling_aerialrefuellinganchor_view_lvxfhq.anchor as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_saocmq.managingorganisation as managingorganisation,
    notes_note_view_scehew.annotation as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_cgywuk on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_cgywuk.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_xpvpss.*) as availability
  from master_join master_join_ovaskg
  join routes.routeavailability_view routes_routeavailability_lat_xpvpss on master_join_ovaskg.target_id = routes_routeavailability_lat_xpvpss.id
  where master_join_ovaskg.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_qwfmnk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_npfkfv.id,
      'title', coalesce(cast(airspace_airspace_lat_npfkfv.title AS varchar), '(' || airspace_airspace_lat_npfkfv.nilreason[1] || ')'),
      'href', airspace_airspace_lat_npfkfv.href
  )) as protectingairspace  from master_join master_join_uqjkte
  join airspace.airspace_pt airspace_airspace_lat_npfkfv on master_join_uqjkte.target_id = airspace_airspace_lat_npfkfv.id
  where master_join_uqjkte.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_lomvhk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_rcqnbi.*) as track
  from master_join master_join_ojkgli
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_rcqnbi on master_join_ojkgli.target_id = aerial_refuelling_aerialrefuellingtrack_lat_rcqnbi.id
  where master_join_ojkgli.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_tkpcei on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_naccvk.*) as anchor
  from master_join master_join_mfauhs
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_naccvk on master_join_mfauhs.target_id = aerial_refuelling_aerialrefuellinganchor_lat_naccvk.id
  where master_join_mfauhs.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_lvxfhq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_kommnb.*) as managingorganisation
  from master_join master_join_vjvazj
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_kommnb on master_join_vjvazj.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_kommnb.id
  where master_join_vjvazj.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_saocmq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lymwfj.*) AS annotation
  from master_join master_join_vgtxgr
  join notes.note_view notes_note_lat_lymwfj on master_join_vgtxgr.target_id = notes_note_lat_lymwfj.id
  where master_join_vgtxgr.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_scehew on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.aeronauticalgroundlight.id,
    navaids_points.aeronauticalgroundlight_ts.id as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier,
    navaids_points.aeronauticalgroundlight_ts.interpretation,
    navaids_points.aeronauticalgroundlight_ts.sequence_number,
    navaids_points.aeronauticalgroundlight_ts.correction_number,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')') as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')') as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_ddszar.title as varchar), '(' || obstacles_verticalstructure_pt_ddszar.nilreason[1] || ')') AS structurebeacon,
    obstacles_verticalstructure_pt_ddszar.href AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_awqpxc.title as varchar), '(' || airport_heliport_airportheliport_pt_awqpxc.nilreason[1] || ')') AS aerodromebeacon,
    airport_heliport_airportheliport_pt_awqpxc.href AS aerodromebeacon_href,
    geometry_elevatedpoint_view_ypihgt.geom AS location_geom,
    geometry_elevatedpoint_view_ypihgt.longitude AS location_longitude,
    geometry_elevatedpoint_view_ypihgt.latitude AS location_latitude,
    geometry_elevatedpoint_view_ypihgt.elevation AS location_elevation,
    geometry_elevatedpoint_view_ypihgt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ypihgt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ypihgt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ypihgt.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_cgskkd.annotation as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_ddszar on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_ddszar.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_awqpxc on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_awqpxc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ypihgt on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_ypihgt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbfrmd.*) AS annotation
  from master_join master_join_bpizkx
  join notes.note_view notes_note_lat_gbfrmd on master_join_bpizkx.target_id = notes_note_lat_gbfrmd.id
  where master_join_bpizkx.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_cgskkd on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.aircraftgroundservice.id,
    service.aircraftgroundservice_ts.id as ts_id,
    service.aircraftgroundservice_tsp.id as tsp_id,
    service.aircraftgroundservice.identifier,
    service.aircraftgroundservice_ts.interpretation,
    service.aircraftgroundservice_ts.sequence_number,
    service.aircraftgroundservice_ts.correction_number,
    service.aircraftgroundservice_ts.valid_time_begin,
    service.aircraftgroundservice_ts.valid_time_end,
    service.aircraftgroundservice_ts.feature_lifetime_begin,
    service.aircraftgroundservice_ts.feature_lifetime_end,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_iuhplc.geom AS location_geom,
    geometry_elevatedpoint_view_iuhplc.longitude AS location_longitude,
    geometry_elevatedpoint_view_iuhplc.latitude AS location_latitude,
    geometry_elevatedpoint_view_iuhplc.elevation AS location_elevation,
    geometry_elevatedpoint_view_iuhplc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_iuhplc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_iuhplc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_iuhplc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vrxipg.title as varchar), '(' || organisation_unit_pt_vrxipg.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_vrxipg.href AS serviceprovider_href,
    service_callsigndetail_view_qdebol.callsign as callsign,
    service_radiocommunicationchannel_pt_yrneru.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_kkyowu.availability as availability,
    notes_note_view_eyxooh.annotation as annotation,
    airport_heliport_airportheliport_pt_bemqkz.airportheliport as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_iuhplc on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_iuhplc.id
left join organisation.unit_pt organisation_unit_pt_vrxipg on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_vrxipg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_cybxgl.*) as callsign
  from master_join master_join_ctxwji
  join service.callsigndetail_view service_callsigndetail_lat_cybxgl on master_join_ctxwji.target_id = service_callsigndetail_lat_cybxgl.id
  where master_join_ctxwji.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_qdebol on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qmdkvi.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qmdkvi.title AS varchar), '(' || service_radiocommunicationchannel_lat_qmdkvi.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qmdkvi.href
  )) as radiocommunication  from master_join master_join_cowqej
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qmdkvi on master_join_cowqej.target_id = service_radiocommunicationchannel_lat_qmdkvi.id
  where master_join_cowqej.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_yrneru on TRUE
left join lateral(
  select
  from master_join master_join_khjkrp
  join shared.contactinformation_view shared_contactinformation_lat_nhuekv on master_join_khjkrp.target_id = shared_contactinformation_lat_nhuekv.id
  where master_join_khjkrp.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_rkwdas on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_xyycpu.*) as availability
  from master_join master_join_manbzg
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_xyycpu on master_join_manbzg.target_id = service_serviceoperationalstatus_lat_xyycpu.id
  where master_join_manbzg.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_kkyowu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fpkqqm.*) AS annotation
  from master_join master_join_mbetew
  join notes.note_view notes_note_lat_fpkqqm on master_join_mbetew.target_id = notes_note_lat_fpkqqm.id
  where master_join_mbetew.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_eyxooh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_emewgz.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_emewgz.title AS varchar), '(' || airport_heliport_airportheliport_lat_emewgz.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_emewgz.href
  )) as airportheliport  from master_join master_join_gingxb
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_emewgz on master_join_gingxb.target_id = airport_heliport_airportheliport_lat_emewgz.id
  where master_join_gingxb.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_bemqkz on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.aircraftstandcontamination_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.aircraftstand.id,
    airport_heliport.aircraftstand_ts.id as ts_id,
    airport_heliport.aircraftstand_tsp.id as tsp_id,
    airport_heliport.aircraftstand.identifier,
    airport_heliport.aircraftstand_ts.interpretation,
    airport_heliport.aircraftstand_ts.sequence_number,
    airport_heliport.aircraftstand_ts.correction_number,
    airport_heliport.aircraftstand_ts.valid_time_begin,
    airport_heliport.aircraftstand_ts.valid_time_end,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin,
    airport_heliport.aircraftstand_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')') as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_trmzax.*) AS surfaceproperties,
    geometry_elevatedpoint_view_fnlygy.geom AS location_geom,
    geometry_elevatedpoint_view_fnlygy.longitude AS location_longitude,
    geometry_elevatedpoint_view_fnlygy.latitude AS location_latitude,
    geometry_elevatedpoint_view_fnlygy.elevation AS location_elevation,
    geometry_elevatedpoint_view_fnlygy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fnlygy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fnlygy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fnlygy.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_jupdhg.title as varchar), '(' || airport_heliport_apronelement_pt_jupdhg.nilreason[1] || ')') AS apronlocation,
    airport_heliport_apronelement_pt_jupdhg.href AS apronlocation_href,
    geometry_elevatedsurface_view_ovktsp.geom AS extent_geom,
    geometry_elevatedsurface_view_ovktsp.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ovktsp.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ovktsp.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ovktsp.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ovktsp.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_xlpdrc.contaminant as contaminant,
    notes_note_view_gmzzpm.annotation as annotation,
    airport_heliport_apronareaavailability_view_fvumcq.availability as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_trmzax on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_trmzax.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fnlygy on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_fnlygy.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_jupdhg on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_jupdhg.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ovktsp on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_ovktsp.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_rujjul.*) as contaminant
  from master_join master_join_bomyoh
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_rujjul on master_join_bomyoh.target_id = airport_heliport_aircraftstandcontamination_lat_rujjul.id
  where master_join_bomyoh.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_xlpdrc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jzarll.*) AS annotation
  from master_join master_join_gcwyno
  join notes.note_view notes_note_lat_jzarll on master_join_gcwyno.target_id = notes_note_lat_jzarll.id
  where master_join_gcwyno.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_gmzzpm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_utcflx.*) as availability
  from master_join master_join_nndprv
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_utcflx on master_join_nndprv.target_id = airport_heliport_apronareaavailability_lat_utcflx.id
  where master_join_nndprv.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_fvumcq on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportclearanceservice.id,
    service.airportclearanceservice_ts.id as ts_id,
    service.airportclearanceservice_tsp.id as tsp_id,
    service.airportclearanceservice.identifier,
    service.airportclearanceservice_ts.interpretation,
    service.airportclearanceservice_ts.sequence_number,
    service.airportclearanceservice_ts.correction_number,
    service.airportclearanceservice_ts.valid_time_begin,
    service.airportclearanceservice_ts.valid_time_end,
    service.airportclearanceservice_ts.feature_lifetime_begin,
    service.airportclearanceservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')') as snowplan,
    geometry_elevatedpoint_view_muifvh.geom AS location_geom,
    geometry_elevatedpoint_view_muifvh.longitude AS location_longitude,
    geometry_elevatedpoint_view_muifvh.latitude AS location_latitude,
    geometry_elevatedpoint_view_muifvh.elevation AS location_elevation,
    geometry_elevatedpoint_view_muifvh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_muifvh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_muifvh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_muifvh.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_tusgoc.title as varchar), '(' || organisation_unit_pt_tusgoc.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_tusgoc.href AS serviceprovider_href,
    service_callsigndetail_view_mxgxyu.callsign as callsign,
    service_radiocommunicationchannel_pt_ilujsy.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_flbiph.availability as availability,
    notes_note_view_yxvpbe.annotation as annotation,
    airport_heliport_airportheliport_pt_cdqrjf.airportheliport as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_muifvh on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_muifvh.id
left join organisation.unit_pt organisation_unit_pt_tusgoc on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_tusgoc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_zeglgj.*) as callsign
  from master_join master_join_npwrxp
  join service.callsigndetail_view service_callsigndetail_lat_zeglgj on master_join_npwrxp.target_id = service_callsigndetail_lat_zeglgj.id
  where master_join_npwrxp.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_mxgxyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ksurrc.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ksurrc.title AS varchar), '(' || service_radiocommunicationchannel_lat_ksurrc.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ksurrc.href
  )) as radiocommunication  from master_join master_join_orsdkj
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ksurrc on master_join_orsdkj.target_id = service_radiocommunicationchannel_lat_ksurrc.id
  where master_join_orsdkj.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_ilujsy on TRUE
left join lateral(
  select
  from master_join master_join_wwraot
  join shared.contactinformation_view shared_contactinformation_lat_gsjler on master_join_wwraot.target_id = shared_contactinformation_lat_gsjler.id
  where master_join_wwraot.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_rkhnxr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hhbhbh.*) as availability
  from master_join master_join_dptbtv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hhbhbh on master_join_dptbtv.target_id = service_serviceoperationalstatus_lat_hhbhbh.id
  where master_join_dptbtv.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_flbiph on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ddhcfg.*) AS annotation
  from master_join master_join_siilyx
  join notes.note_view notes_note_lat_ddhcfg on master_join_siilyx.target_id = notes_note_lat_ddhcfg.id
  where master_join_siilyx.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_yxvpbe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wkxzkm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wkxzkm.title AS varchar), '(' || airport_heliport_airportheliport_lat_wkxzkm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wkxzkm.href
  )) as airportheliport  from master_join master_join_ifvvpj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wkxzkm on master_join_ifvvpj.target_id = airport_heliport_airportheliport_lat_wkxzkm.id
  where master_join_ifvvpj.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_cdqrjf on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliportcollocation.id,
    airport_heliport.airportheliportcollocation_ts.id as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id as tsp_id,
    airport_heliport.airportheliportcollocation.identifier,
    airport_heliport.airportheliportcollocation_ts.interpretation,
    airport_heliport.airportheliportcollocation_ts.sequence_number,
    airport_heliport.airportheliportcollocation_ts.correction_number,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin,
    airport_heliport.airportheliportcollocation_ts.valid_time_end,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_gqcttl.title as varchar), '(' || airport_heliport_airportheliport_pt_gqcttl.nilreason[1] || ')') AS hostairport,
    airport_heliport_airportheliport_pt_gqcttl.href AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_texhgd.title as varchar), '(' || airport_heliport_airportheliport_pt_texhgd.nilreason[1] || ')') AS dependentairport,
    airport_heliport_airportheliport_pt_texhgd.href AS dependentairport_href,
    notes_note_view_xvjdul.annotation as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gqcttl on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_gqcttl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_texhgd on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_texhgd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fnxfvt.*) AS annotation
  from master_join master_join_vwulnh
  join notes.note_view notes_note_lat_fnxfvt on master_join_vwulnh.target_id = notes_note_lat_fnxfvt.id
  where master_join_vwulnh.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_xvjdul on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['shared.contactinformation_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.airportheliportavailability_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportheliport.id,
    airport_heliport.airportheliport_ts.id as ts_id,
    airport_heliport.airportheliport_tsp.id as tsp_id,
    airport_heliport.airportheliport.identifier,
    airport_heliport.airportheliport_ts.interpretation,
    airport_heliport.airportheliport_ts.sequence_number,
    airport_heliport.airportheliport_ts.correction_number,
    airport_heliport.airportheliport_ts.valid_time_begin,
    airport_heliport.airportheliport_ts.valid_time_end,
    airport_heliport.airportheliport_ts.feature_lifetime_begin,
    airport_heliport.airportheliport_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')') as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')') as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')') as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')') as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')') as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')') as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')') as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')') as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')') as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')') as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')') as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')') as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')') as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')') as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')') as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')') as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_ldkvoy.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_tiodbt.geom AS arp_geom,
    geometry_elevatedpoint_view_tiodbt.longitude AS arp_longitude,
    geometry_elevatedpoint_view_tiodbt.latitude AS arp_latitude,
    geometry_elevatedpoint_view_tiodbt.elevation AS arp_elevation,
    geometry_elevatedpoint_view_tiodbt.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_tiodbt.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_tiodbt.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_tiodbt.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_hghxle.geom AS aviationboundary_geom,
    geometry_elevatedsurface_view_hghxle.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_hghxle.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_hghxle.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_hghxle.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_hghxle.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_adeobe.contaminant as contaminant,
    airport_heliport_city_view_nnrhca.servedcity as servedcity,
    airport_heliport_altimetersource_pt_hddxyg.altimetersource as altimetersource,
    airport_heliport_airportheliportavailability_view_zmgsgr.availability as availability,
    notes_note_view_rvyrwv.annotation as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_ldkvoy on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_ldkvoy.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tiodbt on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_tiodbt.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hghxle on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_hghxle.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_kcmjab.*) as contaminant
  from master_join master_join_nqxvyp
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_kcmjab on master_join_nqxvyp.target_id = airport_heliport_airportheliportcontamination_lat_kcmjab.id
  where master_join_nqxvyp.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_adeobe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_cqwnwq.*) as servedcity
  from master_join master_join_emfzer
  join airport_heliport.city_view airport_heliport_city_lat_cqwnwq on master_join_emfzer.target_id = airport_heliport_city_lat_cqwnwq.id
  where master_join_emfzer.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_nnrhca on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_xvulpd.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_xvulpd.title AS varchar), '(' || airport_heliport_altimetersource_lat_xvulpd.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_xvulpd.href
  )) as altimetersource  from master_join master_join_xzxpwm
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_xvulpd on master_join_xzxpwm.target_id = airport_heliport_altimetersource_lat_xvulpd.id
  where master_join_xzxpwm.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_hddxyg on TRUE
left join lateral(
  select
  from master_join master_join_lbdbhi
  join shared.contactinformation_view shared_contactinformation_lat_ckeljb on master_join_lbdbhi.target_id = shared_contactinformation_lat_ckeljb.id
  where master_join_lbdbhi.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_lumlis on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_hrdlns.*) as availability
  from master_join master_join_oxnhfr
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_hrdlns on master_join_oxnhfr.target_id = airport_heliport_airportheliportavailability_lat_hrdlns.id
  where master_join_oxnhfr.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_zmgsgr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbaufp.*) AS annotation
  from master_join master_join_ieemdx
  join notes.note_view notes_note_lat_fbaufp on master_join_ieemdx.target_id = notes_note_lat_fbaufp.id
  where master_join_ieemdx.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_rvyrwv on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airporthotspot.id,
    airport_heliport.airporthotspot_ts.id as ts_id,
    airport_heliport.airporthotspot_tsp.id as tsp_id,
    airport_heliport.airporthotspot.identifier,
    airport_heliport.airporthotspot_ts.interpretation,
    airport_heliport.airporthotspot_ts.sequence_number,
    airport_heliport.airporthotspot_ts.correction_number,
    airport_heliport.airporthotspot_ts.valid_time_begin,
    airport_heliport.airporthotspot_ts.valid_time_end,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin,
    airport_heliport.airporthotspot_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')') as instruction,
    geometry_elevatedsurface_view_kmtpcf.geom AS area_geom,
    geometry_elevatedsurface_view_kmtpcf.elevation AS area_elevation,
    geometry_elevatedsurface_view_kmtpcf.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_kmtpcf.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_kmtpcf.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_kmtpcf.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_jfglal.title as varchar), '(' || airport_heliport_airportheliport_pt_jfglal.nilreason[1] || ')') AS affectedairport,
    airport_heliport_airportheliport_pt_jfglal.href AS affectedairport_href,
    notes_note_view_pulqsg.annotation as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kmtpcf on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_kmtpcf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jfglal on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_jfglal.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvrrga.*) AS annotation
  from master_join master_join_qkcnsp
  join notes.note_view notes_note_lat_xvrrga on master_join_qkcnsp.target_id = notes_note_lat_xvrrga.id
  where master_join_qkcnsp.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_pulqsg on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.airportprotectionareamarking.id,
    airport_heliport.airportprotectionareamarking_ts.id as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier,
    airport_heliport.airportprotectionareamarking_ts.interpretation,
    airport_heliport.airportprotectionareamarking_ts.sequence_number,
    airport_heliport.airportprotectionareamarking_ts.correction_number,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')') as markinglocation,
    airport_heliport_markingelement_view_lutwvy.element as element,
    notes_note_view_yebjlg.annotation as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rquxyt.*) as element
  from master_join master_join_jitdnc
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rquxyt on master_join_jitdnc.target_id = airport_heliport_markingelement_lat_rquxyt.id
  where master_join_jitdnc.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_lutwvy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykfrso.*) AS annotation
  from master_join master_join_wiqxmf
  join notes.note_view notes_note_lat_ykfrso on master_join_wiqxmf.target_id = notes_note_lat_ykfrso.id
  where master_join_wiqxmf.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_yebjlg on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.oil_view', 'service.oxygen_view', 'service.fuel_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'service.nitrogen_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airportsuppliesservice.id,
    service.airportsuppliesservice_ts.id as ts_id,
    service.airportsuppliesservice_tsp.id as tsp_id,
    service.airportsuppliesservice.identifier,
    service.airportsuppliesservice_ts.interpretation,
    service.airportsuppliesservice_ts.sequence_number,
    service.airportsuppliesservice_ts.correction_number,
    service.airportsuppliesservice_ts.valid_time_begin,
    service.airportsuppliesservice_ts.valid_time_end,
    service.airportsuppliesservice_ts.feature_lifetime_begin,
    service.airportsuppliesservice_ts.feature_lifetime_end,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')') as name,
    geometry_elevatedpoint_view_bjyusl.geom AS location_geom,
    geometry_elevatedpoint_view_bjyusl.longitude AS location_longitude,
    geometry_elevatedpoint_view_bjyusl.latitude AS location_latitude,
    geometry_elevatedpoint_view_bjyusl.elevation AS location_elevation,
    geometry_elevatedpoint_view_bjyusl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bjyusl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bjyusl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bjyusl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kyvkcl.title as varchar), '(' || organisation_unit_pt_kyvkcl.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_kyvkcl.href AS serviceprovider_href,
    service_callsigndetail_view_bslgbd.callsign as callsign,
    service_radiocommunicationchannel_pt_oojcer.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_yucjqn.availability as availability,
    notes_note_view_aunmjp.annotation as annotation,
    airport_heliport_airportheliport_pt_xrfthw.airportheliport as airportheliport,
    service_fuel_view_mbixaw.fuelsupply as fuelsupply,
    service_oil_view_yagkek.oilsupply as oilsupply,
    service_nitrogen_view_xxztbt.nitrogensupply as nitrogensupply,
    service_oxygen_view_rpruyg.oxygensupply as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bjyusl on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_bjyusl.id
left join organisation.unit_pt organisation_unit_pt_kyvkcl on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_kyvkcl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_vslflp.*) as callsign
  from master_join master_join_jsiuua
  join service.callsigndetail_view service_callsigndetail_lat_vslflp on master_join_jsiuua.target_id = service_callsigndetail_lat_vslflp.id
  where master_join_jsiuua.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_bslgbd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xhkpjn.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xhkpjn.title AS varchar), '(' || service_radiocommunicationchannel_lat_xhkpjn.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xhkpjn.href
  )) as radiocommunication  from master_join master_join_cdirva
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xhkpjn on master_join_cdirva.target_id = service_radiocommunicationchannel_lat_xhkpjn.id
  where master_join_cdirva.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_oojcer on TRUE
left join lateral(
  select
  from master_join master_join_wkshjp
  join shared.contactinformation_view shared_contactinformation_lat_rkyclo on master_join_wkshjp.target_id = shared_contactinformation_lat_rkyclo.id
  where master_join_wkshjp.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_vxlxuo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_wfsekt.*) as availability
  from master_join master_join_tinqin
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_wfsekt on master_join_tinqin.target_id = service_serviceoperationalstatus_lat_wfsekt.id
  where master_join_tinqin.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_yucjqn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_inwbnt.*) AS annotation
  from master_join master_join_dfkved
  join notes.note_view notes_note_lat_inwbnt on master_join_dfkved.target_id = notes_note_lat_inwbnt.id
  where master_join_dfkved.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_aunmjp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_buivkp.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_buivkp.title AS varchar), '(' || airport_heliport_airportheliport_lat_buivkp.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_buivkp.href
  )) as airportheliport  from master_join master_join_mjjfwj
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_buivkp on master_join_mjjfwj.target_id = airport_heliport_airportheliport_lat_buivkp.id
  where master_join_mjjfwj.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_xrfthw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_nxzthq.*) as fuelsupply
  from master_join master_join_igkwzz
  join service.fuel_view service_fuel_lat_nxzthq on master_join_igkwzz.target_id = service_fuel_lat_nxzthq.id
  where master_join_igkwzz.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_mbixaw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_wpehvp.*) as oilsupply
  from master_join master_join_sgtlwq
  join service.oil_view service_oil_lat_wpehvp on master_join_sgtlwq.target_id = service_oil_lat_wpehvp.id
  where master_join_sgtlwq.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_yagkek on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_vhcczh.*) as nitrogensupply
  from master_join master_join_mmnufn
  join service.nitrogen_view service_nitrogen_lat_vhcczh on master_join_mmnufn.target_id = service_nitrogen_lat_vhcczh.id
  where master_join_mmnufn.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_xxztbt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_xpzyas.*) as oxygensupply
  from master_join master_join_lnxyzt
  join service.oxygen_view service_oxygen_lat_xpzyas on master_join_lnxyzt.target_id = service_oxygen_lat_xpzyas.id
  where master_join_lnxyzt.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_rpruyg on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.airspacebordercrossing.id,
    routes.airspacebordercrossing_ts.id as ts_id,
    routes.airspacebordercrossing_tsp.id as tsp_id,
    routes.airspacebordercrossing.identifier,
    routes.airspacebordercrossing_ts.interpretation,
    routes.airspacebordercrossing_ts.sequence_number,
    routes.airspacebordercrossing_ts.correction_number,
    routes.airspacebordercrossing_ts.valid_time_begin,
    routes.airspacebordercrossing_ts.valid_time_end,
    routes.airspacebordercrossing_ts.feature_lifetime_begin,
    routes.airspacebordercrossing_ts.feature_lifetime_end,
    coalesce(cast(airspace_airspace_pt_gokvgy.title as varchar), '(' || airspace_airspace_pt_gokvgy.nilreason[1] || ')') AS exitedairspace,
    airspace_airspace_pt_gokvgy.href AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_bmkqhs.title as varchar), '(' || airspace_airspace_pt_bmkqhs.nilreason[1] || ')') AS enteredairspace,
    airspace_airspace_pt_bmkqhs.href AS enteredairspace_href,
    notes_note_view_tbnjkl.annotation as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_gokvgy on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_gokvgy.id
left join airspace.airspace_pt airspace_airspace_pt_bmkqhs on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_bmkqhs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwtgsf.*) AS annotation
  from master_join master_join_dulbso
  join notes.note_view notes_note_lat_qwtgsf on master_join_dulbso.target_id = notes_note_lat_qwtgsf.id
  where master_join_dulbso.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_tbnjkl on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspaceactivation_view', 'airspace.airspacegeometrycomponent_view', 'notes.note_view', 'airspace.airspacelayerclass_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.airspace.id,
    airspace.airspace_ts.id as ts_id,
    airspace.airspace_tsp.id as tsp_id,
    airspace.airspace.identifier,
    airspace.airspace_ts.interpretation,
    airspace.airspace_ts.sequence_number,
    airspace.airspace_ts.correction_number,
    airspace.airspace_ts.valid_time_begin,
    airspace.airspace_ts.valid_time_end,
    airspace.airspace_ts.feature_lifetime_begin,
    airspace.airspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')') as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')') as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')') as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')') as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')') as upperlowerseparation,
    coalesce(cast(routes_route_pt_hpqgzt.title as varchar), '(' || routes_route_pt_hpqgzt.nilreason[1] || ')') AS protectedroute,
    routes_route_pt_hpqgzt.href AS protectedroute_href,
    airspace_airspacelayerclass_view_dxalpy.clazz as clazz,
    airspace_airspacegeometrycomponent_view_bdjxds.geometrycomponent as geometrycomponent,
    airspace_airspaceactivation_view_kgomcy.activation as activation,
    notes_note_view_dbobmq.annotation as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_hpqgzt on airspace.airspace_ts.protectedroute_id = routes_route_pt_hpqgzt.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_szwtam.*) as clazz
  from master_join master_join_wxuoje
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_szwtam on master_join_wxuoje.target_id = airspace_airspacelayerclass_lat_szwtam.id
  where master_join_wxuoje.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_dxalpy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_cvnpnj.*) as geometrycomponent
  from master_join master_join_ynzcnl
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_cvnpnj on master_join_ynzcnl.target_id = airspace_airspacegeometrycomponent_lat_cvnpnj.id
  where master_join_ynzcnl.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_bdjxds on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_jiudqf.*) as activation
  from master_join master_join_ozyjkn
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_jiudqf on master_join_ozyjkn.target_id = airspace_airspaceactivation_lat_jiudqf.id
  where master_join_ozyjkn.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_kgomcy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_htkqqw.*) AS annotation
  from master_join master_join_sxciuj
  join notes.note_view notes_note_lat_htkqqw on master_join_sxciuj.target_id = notes_note_lat_htkqqw.id
  where master_join_sxciuj.source_id = airspace.airspace_ts.id
) as notes_note_view_dbobmq on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficcontrolservice.id,
    service.airtrafficcontrolservice_ts.id as ts_id,
    service.airtrafficcontrolservice_tsp.id as tsp_id,
    service.airtrafficcontrolservice.identifier,
    service.airtrafficcontrolservice_ts.interpretation,
    service.airtrafficcontrolservice_ts.sequence_number,
    service.airtrafficcontrolservice_ts.correction_number,
    service.airtrafficcontrolservice_ts.valid_time_begin,
    service.airtrafficcontrolservice_ts.valid_time_end,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin,
    service.airtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_kxrume.geom AS location_geom,
    geometry_elevatedpoint_view_kxrume.longitude AS location_longitude,
    geometry_elevatedpoint_view_kxrume.latitude AS location_latitude,
    geometry_elevatedpoint_view_kxrume.elevation AS location_elevation,
    geometry_elevatedpoint_view_kxrume.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kxrume.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kxrume.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kxrume.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_yujctx.title as varchar), '(' || organisation_unit_pt_yujctx.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_yujctx.href AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_jrraif.title as varchar), '(' || navaids_points_directionfinder_pt_jrraif.nilreason[1] || ')') AS aircraftlocator,
    navaids_points_directionfinder_pt_jrraif.href AS aircraftlocator_href,
    service_callsigndetail_view_xirwps.callsign as callsign,
    service_radiocommunicationchannel_pt_dagbrd.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_qkksaf.availability as availability,
    notes_note_view_wszemt.annotation as annotation,
    airport_heliport_airportheliport_pt_jhxrez.clientairport as clientairport,
    airspace_airspace_pt_uvblxj.clientairspace as clientairspace,
    routes_routeportion_view_sxfpqz.clientroute as clientroute,
    holding_holdingpattern_pt_bvmvrb.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_apgnrv.clientaerialrefuelling as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kxrume on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_kxrume.id
left join organisation.unit_pt organisation_unit_pt_yujctx on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_yujctx.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_jrraif on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_jrraif.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_nccruu.*) as callsign
  from master_join master_join_qtzeaa
  join service.callsigndetail_view service_callsigndetail_lat_nccruu on master_join_qtzeaa.target_id = service_callsigndetail_lat_nccruu.id
  where master_join_qtzeaa.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_xirwps on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_lokksp.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_lokksp.title AS varchar), '(' || service_radiocommunicationchannel_lat_lokksp.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_lokksp.href
  )) as radiocommunication  from master_join master_join_revwve
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_lokksp on master_join_revwve.target_id = service_radiocommunicationchannel_lat_lokksp.id
  where master_join_revwve.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_dagbrd on TRUE
left join lateral(
  select
  from master_join master_join_xrtari
  join shared.contactinformation_view shared_contactinformation_lat_qfmdro on master_join_xrtari.target_id = shared_contactinformation_lat_qfmdro.id
  where master_join_xrtari.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_pwoixh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_cxeazr.*) as availability
  from master_join master_join_qldmbk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_cxeazr on master_join_qldmbk.target_id = service_serviceoperationalstatus_lat_cxeazr.id
  where master_join_qldmbk.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_qkksaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_krywdg.*) AS annotation
  from master_join master_join_gjqyvm
  join notes.note_view notes_note_lat_krywdg on master_join_gjqyvm.target_id = notes_note_lat_krywdg.id
  where master_join_gjqyvm.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_wszemt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_drjrhl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_drjrhl.title AS varchar), '(' || airport_heliport_airportheliport_lat_drjrhl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_drjrhl.href
  )) as clientairport  from master_join master_join_asrygv
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_drjrhl on master_join_asrygv.target_id = airport_heliport_airportheliport_lat_drjrhl.id
  where master_join_asrygv.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_jhxrez on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_pnvsss.id,
      'title', coalesce(cast(airspace_airspace_lat_pnvsss.title AS varchar), '(' || airspace_airspace_lat_pnvsss.nilreason[1] || ')'),
      'href', airspace_airspace_lat_pnvsss.href
  )) as clientairspace  from master_join master_join_gpoycz
  join airspace.airspace_pt airspace_airspace_lat_pnvsss on master_join_gpoycz.target_id = airspace_airspace_lat_pnvsss.id
  where master_join_gpoycz.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_uvblxj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_hwsvvq.*) as clientroute
  from master_join master_join_ucijof
  join routes.routeportion_view routes_routeportion_lat_hwsvvq on master_join_ucijof.target_id = routes_routeportion_lat_hwsvvq.id
  where master_join_ucijof.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_sxfpqz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_yqiyst.id,
      'title', coalesce(cast(holding_holdingpattern_lat_yqiyst.title AS varchar), '(' || holding_holdingpattern_lat_yqiyst.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_yqiyst.href
  )) as clientholding  from master_join master_join_zgfdah
  join holding.holdingpattern_pt holding_holdingpattern_lat_yqiyst on master_join_zgfdah.target_id = holding_holdingpattern_lat_yqiyst.id
  where master_join_zgfdah.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_bvmvrb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_zuvnbg.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_zuvnbg.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_zuvnbg.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_zuvnbg.href
  )) as clientaerialrefuelling  from master_join master_join_sjfbvv
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_zuvnbg on master_join_sjfbvv.target_id = aerial_refuelling_aerialrefuelling_lat_zuvnbg.id
  where master_join_sjfbvv.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_apgnrv on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.airtrafficmanagementservice.id,
    service.airtrafficmanagementservice_ts.id as ts_id,
    service.airtrafficmanagementservice_tsp.id as tsp_id,
    service.airtrafficmanagementservice.identifier,
    service.airtrafficmanagementservice_ts.interpretation,
    service.airtrafficmanagementservice_ts.sequence_number,
    service.airtrafficmanagementservice_ts.correction_number,
    service.airtrafficmanagementservice_ts.valid_time_begin,
    service.airtrafficmanagementservice_ts.valid_time_end,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin,
    service.airtrafficmanagementservice_ts.feature_lifetime_end,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_mxxvdi.geom AS location_geom,
    geometry_elevatedpoint_view_mxxvdi.longitude AS location_longitude,
    geometry_elevatedpoint_view_mxxvdi.latitude AS location_latitude,
    geometry_elevatedpoint_view_mxxvdi.elevation AS location_elevation,
    geometry_elevatedpoint_view_mxxvdi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mxxvdi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mxxvdi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mxxvdi.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uhappz.title as varchar), '(' || organisation_unit_pt_uhappz.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_uhappz.href AS serviceprovider_href,
    service_callsigndetail_view_inrymf.callsign as callsign,
    service_radiocommunicationchannel_pt_spqhem.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_jjqdfm.availability as availability,
    notes_note_view_shnudy.annotation as annotation,
    airspace_airspace_pt_mohnsy.clientairspace as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_rpbxda.clientaerialrefuelling as clientaerialrefuelling,
    routes_routeportion_view_dbinxm.clientroute as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mxxvdi on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_mxxvdi.id
left join organisation.unit_pt organisation_unit_pt_uhappz on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_uhappz.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_fogtgc.*) as callsign
  from master_join master_join_bpvyns
  join service.callsigndetail_view service_callsigndetail_lat_fogtgc on master_join_bpvyns.target_id = service_callsigndetail_lat_fogtgc.id
  where master_join_bpvyns.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_inrymf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_tatmrh.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_tatmrh.title AS varchar), '(' || service_radiocommunicationchannel_lat_tatmrh.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_tatmrh.href
  )) as radiocommunication  from master_join master_join_cmbumx
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_tatmrh on master_join_cmbumx.target_id = service_radiocommunicationchannel_lat_tatmrh.id
  where master_join_cmbumx.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_spqhem on TRUE
left join lateral(
  select
  from master_join master_join_finewb
  join shared.contactinformation_view shared_contactinformation_lat_pmhorx on master_join_finewb.target_id = shared_contactinformation_lat_pmhorx.id
  where master_join_finewb.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_wlkzsq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_cwnrij.*) as availability
  from master_join master_join_ucxhva
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_cwnrij on master_join_ucxhva.target_id = service_serviceoperationalstatus_lat_cwnrij.id
  where master_join_ucxhva.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_jjqdfm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qrtjyd.*) AS annotation
  from master_join master_join_lfjqjz
  join notes.note_view notes_note_lat_qrtjyd on master_join_lfjqjz.target_id = notes_note_lat_qrtjyd.id
  where master_join_lfjqjz.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_shnudy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_hpaafi.id,
      'title', coalesce(cast(airspace_airspace_lat_hpaafi.title AS varchar), '(' || airspace_airspace_lat_hpaafi.nilreason[1] || ')'),
      'href', airspace_airspace_lat_hpaafi.href
  )) as clientairspace  from master_join master_join_dyqged
  join airspace.airspace_pt airspace_airspace_lat_hpaafi on master_join_dyqged.target_id = airspace_airspace_lat_hpaafi.id
  where master_join_dyqged.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_mohnsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_pnasgn.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_pnasgn.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_pnasgn.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_pnasgn.href
  )) as clientaerialrefuelling  from master_join master_join_kxmzic
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_pnasgn on master_join_kxmzic.target_id = aerial_refuelling_aerialrefuelling_lat_pnasgn.id
  where master_join_kxmzic.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_rpbxda on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_seznhn.*) as clientroute
  from master_join master_join_kofnlk
  join routes.routeportion_view routes_routeportion_lat_seznhn on master_join_kofnlk.target_id = routes_routeportion_lat_seznhn.id
  where master_join_kofnlk.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_dbinxm on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.altimetersource.id,
    airport_heliport.altimetersource_ts.id as ts_id,
    airport_heliport.altimetersource_tsp.id as tsp_id,
    airport_heliport.altimetersource.identifier,
    airport_heliport.altimetersource_ts.interpretation,
    airport_heliport.altimetersource_ts.sequence_number,
    airport_heliport.altimetersource_ts.correction_number,
    airport_heliport.altimetersource_ts.valid_time_begin,
    airport_heliport.altimetersource_ts.valid_time_end,
    airport_heliport.altimetersource_ts.feature_lifetime_begin,
    airport_heliport.altimetersource_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')') as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')') as isprimary,
    airport_heliport_altimetersourcestatus_view_myeaxt.availability as availability,
    notes_note_view_mokxhy.annotation as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_ddqeoz.*) as availability
  from master_join master_join_apgpgi
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_ddqeoz on master_join_apgpgi.target_id = airport_heliport_altimetersourcestatus_lat_ddqeoz.id
  where master_join_apgpgi.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_myeaxt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uudhyy.*) AS annotation
  from master_join master_join_qixaug
  join notes.note_view notes_note_lat_uudhyy on master_join_qixaug.target_id = notes_note_lat_uudhyy.id
  where master_join_qixaug.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_mokxhy on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.angleindication.id,
    navaids_points.angleindication_ts.id as ts_id,
    navaids_points.angleindication_tsp.id as tsp_id,
    navaids_points.angleindication.identifier,
    navaids_points.angleindication_ts.interpretation,
    navaids_points.angleindication_ts.sequence_number,
    navaids_points.angleindication_ts.correction_number,
    navaids_points.angleindication_ts.valid_time_begin,
    navaids_points.angleindication_ts.valid_time_end,
    navaids_points.angleindication_ts.feature_lifetime_begin,
    navaids_points.angleindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')') as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')') as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')') as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_rzfqod.title as varchar), '(' || navaids_points_designatedpoint_pt_rzfqod.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_rzfqod.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_emngbu.title as varchar), '(' || navaids_points_designatedpoint_pt_emngbu.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_emngbu.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_iirsom.title as varchar), '(' || navaids_points_navaid_pt_iirsom.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_iirsom.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sjxkrq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sjxkrq.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_sjxkrq.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tpjcks.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tpjcks.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tpjcks.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_njlgkv.title as varchar), '(' || airport_heliport_airportheliport_pt_njlgkv.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_njlgkv.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_rbmkgw.geom AS pointchoiceposition_geom,
    geometry_point_view_rbmkgw.longitude AS pointchoiceposition_longitude,
    geometry_point_view_rbmkgw.latitude AS pointchoiceposition_latitude,
    geometry_point_view_rbmkgw.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_vxnmwi.annotation as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_rzfqod on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_rzfqod.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_emngbu on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_emngbu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_iirsom on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_iirsom.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sjxkrq on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sjxkrq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tpjcks on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tpjcks.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_njlgkv on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_njlgkv.id
left join geometry.point_view geometry_point_view_rbmkgw on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_rbmkgw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gauope.*) AS annotation
  from master_join master_join_yvmkfc
  join notes.note_view notes_note_lat_gauope on master_join_yvmkfc.target_id = notes_note_lat_gauope.id
  where master_join_yvmkfc.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_vxnmwi on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.approachlightingsystem.id,
    airport_heliport.approachlightingsystem_ts.id as ts_id,
    airport_heliport.approachlightingsystem_tsp.id as tsp_id,
    airport_heliport.approachlightingsystem.identifier,
    airport_heliport.approachlightingsystem_ts.interpretation,
    airport_heliport.approachlightingsystem_ts.sequence_number,
    airport_heliport.approachlightingsystem_ts.correction_number,
    airport_heliport.approachlightingsystem_ts.valid_time_begin,
    airport_heliport.approachlightingsystem_ts.valid_time_end,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')') as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')') as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')') as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_xmncon.title as varchar), '(' || airport_heliport_runwaydirection_pt_xmncon.nilreason[1] || ')') AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_xmncon.href AS servedrunwaydirection_href,
    shared_lightelement_view_bzyuqi.element as element,
    airport_heliport_groundlightingavailability_view_gfpxln.availability as availability,
    notes_note_view_fehvxg.annotation as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_xmncon on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_xmncon.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_fxjzrz.*) as element
  from master_join master_join_wiqitg
  join shared.lightelement_view shared_lightelement_lat_fxjzrz on master_join_wiqitg.target_id = shared_lightelement_lat_fxjzrz.id
  where master_join_wiqitg.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_bzyuqi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ujgcjn.*) as availability
  from master_join master_join_pncehw
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ujgcjn on master_join_pncehw.target_id = airport_heliport_groundlightingavailability_lat_ujgcjn.id
  where master_join_pncehw.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_gfpxln on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wkivol.*) AS annotation
  from master_join master_join_cmwpfu
  join notes.note_view notes_note_lat_wkivol on master_join_cmwpfu.target_id = notes_note_lat_wkivol.id
  where master_join_cmwpfu.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_fehvxg on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronelement.id,
    airport_heliport.apronelement_ts.id as ts_id,
    airport_heliport.apronelement_tsp.id as tsp_id,
    airport_heliport.apronelement.identifier,
    airport_heliport.apronelement_ts.interpretation,
    airport_heliport.apronelement_ts.sequence_number,
    airport_heliport.apronelement_ts.correction_number,
    airport_heliport.apronelement_ts.valid_time_begin,
    airport_heliport.apronelement_ts.valid_time_end,
    airport_heliport.apronelement_ts.feature_lifetime_begin,
    airport_heliport.apronelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')') as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')') as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')') as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')') as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport_apron_pt_ljedjc.title as varchar), '(' || airport_heliport_apron_pt_ljedjc.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_ljedjc.href AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ywybnb.*) AS surfaceproperties,
    geometry_elevatedsurface_view_sdmpqs.geom AS extent_geom,
    geometry_elevatedsurface_view_sdmpqs.elevation AS extent_elevation,
    geometry_elevatedsurface_view_sdmpqs.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_sdmpqs.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_sdmpqs.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_sdmpqs.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_gzcsxm.supplyservice as supplyservice,
    notes_note_view_lltmyo.annotation as annotation,
    airport_heliport_apronareaavailability_view_lfusxt.availability as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ljedjc on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_ljedjc.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ywybnb on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ywybnb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_sdmpqs on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_sdmpqs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_duvaml.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_duvaml.title AS varchar), '(' || service_airportsuppliesservice_lat_duvaml.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_duvaml.href
  )) as supplyservice  from master_join master_join_afbnvp
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_duvaml on master_join_afbnvp.target_id = service_airportsuppliesservice_lat_duvaml.id
  where master_join_afbnvp.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_gzcsxm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vteglp.*) AS annotation
  from master_join master_join_pnjhim
  join notes.note_view notes_note_lat_vteglp on master_join_pnjhim.target_id = notes_note_lat_vteglp.id
  where master_join_pnjhim.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_lltmyo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_tuuibh.*) as availability
  from master_join master_join_ukgmlw
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_tuuibh on master_join_ukgmlw.target_id = airport_heliport_apronareaavailability_lat_tuuibh.id
  where master_join_ukgmlw.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_lfusxt on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronlightsystem.id,
    airport_heliport.apronlightsystem_ts.id as ts_id,
    airport_heliport.apronlightsystem_tsp.id as tsp_id,
    airport_heliport.apronlightsystem.identifier,
    airport_heliport.apronlightsystem_ts.interpretation,
    airport_heliport.apronlightsystem_ts.sequence_number,
    airport_heliport.apronlightsystem_ts.correction_number,
    airport_heliport.apronlightsystem_ts.valid_time_begin,
    airport_heliport.apronlightsystem_ts.valid_time_end,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_apron_pt_oeeuqq.title as varchar), '(' || airport_heliport_apron_pt_oeeuqq.nilreason[1] || ')') AS lightedapron,
    airport_heliport_apron_pt_oeeuqq.href AS lightedapron_href,
    shared_lightelement_view_zksfpa.element as element,
    airport_heliport_groundlightingavailability_view_sbikzu.availability as availability,
    notes_note_view_cedmpl.annotation as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_oeeuqq on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_oeeuqq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ljwtqt.*) as element
  from master_join master_join_dlmebd
  join shared.lightelement_view shared_lightelement_lat_ljwtqt on master_join_dlmebd.target_id = shared_lightelement_lat_ljwtqt.id
  where master_join_dlmebd.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_zksfpa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ktmelf.*) as availability
  from master_join master_join_hzxxip
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ktmelf on master_join_hzxxip.target_id = airport_heliport_groundlightingavailability_lat_ktmelf.id
  where master_join_hzxxip.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_sbikzu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tmojyn.*) AS annotation
  from master_join master_join_hpapcb
  join notes.note_view notes_note_lat_tmojyn on master_join_hpapcb.target_id = notes_note_lat_tmojyn.id
  where master_join_hpapcb.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_cedmpl on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apronmarking.id,
    airport_heliport.apronmarking_ts.id as ts_id,
    airport_heliport.apronmarking_tsp.id as tsp_id,
    airport_heliport.apronmarking.identifier,
    airport_heliport.apronmarking_ts.interpretation,
    airport_heliport.apronmarking_ts.sequence_number,
    airport_heliport.apronmarking_ts.correction_number,
    airport_heliport.apronmarking_ts.valid_time_begin,
    airport_heliport.apronmarking_ts.valid_time_end,
    airport_heliport.apronmarking_ts.feature_lifetime_begin,
    airport_heliport.apronmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_vctsfa.title as varchar), '(' || airport_heliport_apron_pt_vctsfa.nilreason[1] || ')') AS markedapron,
    airport_heliport_apron_pt_vctsfa.href AS markedapron_href,
    airport_heliport_markingelement_view_qkhlaw.element as element,
    notes_note_view_bukwgf.annotation as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_vctsfa on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_vctsfa.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_rmtxtj.*) as element
  from master_join master_join_novcjs
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_rmtxtj on master_join_novcjs.target_id = airport_heliport_markingelement_lat_rmtxtj.id
  where master_join_novcjs.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_qkhlaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vqxgvk.*) AS annotation
  from master_join master_join_shqjhn
  join notes.note_view notes_note_lat_vqxgvk on master_join_shqjhn.target_id = notes_note_lat_vqxgvk.id
  where master_join_shqjhn.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_bukwgf on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.apron.id,
    airport_heliport.apron_ts.id as ts_id,
    airport_heliport.apron_tsp.id as tsp_id,
    airport_heliport.apron.identifier,
    airport_heliport.apron_ts.interpretation,
    airport_heliport.apron_ts.sequence_number,
    airport_heliport.apron_ts.correction_number,
    airport_heliport.apron_ts.valid_time_begin,
    airport_heliport.apron_ts.valid_time_end,
    airport_heliport.apron_ts.feature_lifetime_begin,
    airport_heliport.apron_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')') as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')') as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jqzjob.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_tcforg.title as varchar), '(' || airport_heliport_airportheliport_pt_tcforg.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_tcforg.href AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_gigscf.contaminant as contaminant,
    notes_note_view_udextc.annotation as annotation,
    airport_heliport_apronareaavailability_view_dmhtjd.availability as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jqzjob on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jqzjob.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tcforg on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_tcforg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_ifplrl.*) as contaminant
  from master_join master_join_tanowy
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_ifplrl on master_join_tanowy.target_id = airport_heliport_aproncontamination_lat_ifplrl.id
  where master_join_tanowy.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_gigscf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vmtfpw.*) AS annotation
  from master_join master_join_weiqwb
  join notes.note_view notes_note_lat_vmtfpw on master_join_weiqwb.target_id = notes_note_lat_vmtfpw.id
  where master_join_weiqwb.source_id = airport_heliport.apron_ts.id
) as notes_note_view_udextc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_rcynlw.*) as availability
  from master_join master_join_sfoyay
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_rcynlw on master_join_sfoyay.target_id = airport_heliport_apronareaavailability_lat_rcynlw.id
  where master_join_sfoyay.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_dmhtjd on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['geometry.elevatedcurve_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.arrestinggear.id,
    airport_heliport.arrestinggear_ts.id as ts_id,
    airport_heliport.arrestinggear_tsp.id as tsp_id,
    airport_heliport.arrestinggear.identifier,
    airport_heliport.arrestinggear_ts.interpretation,
    airport_heliport.arrestinggear_ts.sequence_number,
    airport_heliport.arrestinggear_ts.correction_number,
    airport_heliport.arrestinggear_ts.valid_time_begin,
    airport_heliport.arrestinggear_ts.valid_time_end,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin,
    airport_heliport.arrestinggear_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')') as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')') as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')') as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')') as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_uoyrnv.*) AS surfaceproperties,
    geometry_elevatedcurve_view_hevufp.geom AS extentcurveextent_geom,
    geometry_elevatedcurve_view_hevufp.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_hevufp.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_hevufp.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_hevufp.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_hevufp.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_vaoglw.geom AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_vaoglw.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_vaoglw.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_vaoglw.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_vaoglw.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_vaoglw.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_fxumaq.geom AS extentpointextent_geom,
    geometry_elevatedpoint_view_fxumaq.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_fxumaq.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_fxumaq.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_fxumaq.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_fxumaq.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_fxumaq.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_fxumaq.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_peikvf.runwaydirection as runwaydirection,
    notes_note_view_hcqtnu.annotation as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_uoyrnv on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_uoyrnv.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_hevufp on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_hevufp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vaoglw on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_vaoglw.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fxumaq on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_fxumaq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_ljlpkd.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_ljlpkd.title AS varchar), '(' || airport_heliport_runwaydirection_lat_ljlpkd.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_ljlpkd.href
  )) as runwaydirection  from master_join master_join_zpcxqy
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_ljlpkd on master_join_zpcxqy.target_id = airport_heliport_runwaydirection_lat_ljlpkd.id
  where master_join_zpcxqy.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_peikvf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rncshm.*) AS annotation
  from master_join master_join_tpyolr
  join notes.note_view notes_note_lat_rncshm on master_join_tpyolr.target_id = notes_note_lat_rncshm.id
  where master_join_tpyolr.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_hcqtnu on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalfeederleg.id,
    procedure.arrivalfeederleg_ts.id as ts_id,
    procedure.arrivalfeederleg_tsp.id as tsp_id,
    procedure.arrivalfeederleg.identifier,
    procedure.arrivalfeederleg_ts.interpretation,
    procedure.arrivalfeederleg_ts.sequence_number,
    procedure.arrivalfeederleg_ts.correction_number,
    procedure.arrivalfeederleg_ts.valid_time_begin,
    procedure.arrivalfeederleg_ts.valid_time_end,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin,
    procedure.arrivalfeederleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yvovnk.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_oivxnn.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_txjlje.*) AS arccentre,
    geometry_curve_view_ixjugu.geom AS trajectory_geom,
    geometry_curve_view_ixjugu.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_vjsjlw.title as varchar), '(' || navaids_points_angleindication_pt_vjsjlw.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_vjsjlw.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jkcspd.title as varchar), '(' || navaids_points_distanceindication_pt_jkcspd.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_jkcspd.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_wkqldf.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_qpjipz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_qpjipz.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_qpjipz.href AS approach_href,
    shared_aircraftcharacteristic_view_gtkbrs.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_annwxk.designsurface as designsurface,
    notes_note_view_lwtxjd.annotation as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yvovnk on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_yvovnk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_oivxnn on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_oivxnn.id
left join geometry.curve_view geometry_curve_view_ixjugu on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_ixjugu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_txjlje on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_txjlje.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vjsjlw on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_vjsjlw.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jkcspd on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_jkcspd.id
left join procedure.holdinguse_view procedure_holdinguse_view_wkqldf on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_wkqldf.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_qpjipz on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_qpjipz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qvqmdh.*) as aircraftcategory
  from master_join master_join_zfbnpm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qvqmdh on master_join_zfbnpm.target_id = shared_aircraftcharacteristic_lat_qvqmdh.id
  where master_join_zfbnpm.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_gtkbrs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_rtyljh.*) as designsurface
  from master_join master_join_kszzgl
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_rtyljh on master_join_kszzgl.target_id = shared_obstacleassessmentarea_lat_rtyljh.id
  where master_join_kszzgl.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_annwxk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xebite.*) AS annotation
  from master_join master_join_qkojsg
  join notes.note_view notes_note_lat_xebite on master_join_qkojsg.target_id = notes_note_lat_xebite.id
  where master_join_qkojsg.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_lwtxjd on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.arrivalleg.id,
    procedure.arrivalleg_ts.id as ts_id,
    procedure.arrivalleg_tsp.id as tsp_id,
    procedure.arrivalleg.identifier,
    procedure.arrivalleg_ts.interpretation,
    procedure.arrivalleg_ts.sequence_number,
    procedure.arrivalleg_ts.correction_number,
    procedure.arrivalleg_ts.valid_time_begin,
    procedure.arrivalleg_ts.valid_time_end,
    procedure.arrivalleg_ts.feature_lifetime_begin,
    procedure.arrivalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_twapxb.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mrisai.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tzikjz.*) AS arccentre,
    geometry_curve_view_arjkuv.geom AS trajectory_geom,
    geometry_curve_view_arjkuv.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_iaxkhu.title as varchar), '(' || navaids_points_angleindication_pt_iaxkhu.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_iaxkhu.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_fwsbgb.title as varchar), '(' || navaids_points_distanceindication_pt_fwsbgb.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_fwsbgb.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_ugqtxf.*) AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_pplnvl.title as varchar), '(' || procedure_standardinstrumentarrival_pt_pplnvl.nilreason[1] || ')') AS arrival,
    procedure_standardinstrumentarrival_pt_pplnvl.href AS arrival_href,
    shared_aircraftcharacteristic_view_lvotyi.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_pgrqwf.designsurface as designsurface,
    notes_note_view_rvqjbk.annotation as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_twapxb on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_twapxb.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mrisai on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_mrisai.id
left join geometry.curve_view geometry_curve_view_arjkuv on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_arjkuv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tzikjz on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_tzikjz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_iaxkhu on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_iaxkhu.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_fwsbgb on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_fwsbgb.id
left join procedure.holdinguse_view procedure_holdinguse_view_ugqtxf on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_ugqtxf.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_pplnvl on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_pplnvl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jvfaub.*) as aircraftcategory
  from master_join master_join_quhcao
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_jvfaub on master_join_quhcao.target_id = shared_aircraftcharacteristic_lat_jvfaub.id
  where master_join_quhcao.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_lvotyi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_euidhl.*) as designsurface
  from master_join master_join_huihrr
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_euidhl on master_join_huihrr.target_id = shared_obstacleassessmentarea_lat_euidhl.id
  where master_join_huihrr.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_pgrqwf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mzeebz.*) AS annotation
  from master_join master_join_bkgtvs
  join notes.note_view notes_note_lat_mzeebz on master_join_bkgtvs.target_id = notes_note_lat_mzeebz.id
  where master_join_bkgtvs.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_rvqjbk on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.authorityforairspace.id,
    airspace.authorityforairspace_ts.id as ts_id,
    airspace.authorityforairspace_tsp.id as tsp_id,
    airspace.authorityforairspace.identifier,
    airspace.authorityforairspace_ts.interpretation,
    airspace.authorityforairspace_ts.sequence_number,
    airspace.authorityforairspace_ts.correction_number,
    airspace.authorityforairspace_ts.valid_time_begin,
    airspace.authorityforairspace_ts.valid_time_end,
    airspace.authorityforairspace_ts.feature_lifetime_begin,
    airspace.authorityforairspace_ts.feature_lifetime_end,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation_organisationauthority_pt_elmhtp.title as varchar), '(' || organisation_organisationauthority_pt_elmhtp.nilreason[1] || ')') AS responsibleorganisation,
    organisation_organisationauthority_pt_elmhtp.href AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_lwndce.title as varchar), '(' || airspace_airspace_pt_lwndce.nilreason[1] || ')') AS assignedairspace,
    airspace_airspace_pt_lwndce.href AS assignedairspace_href,
    notes_note_view_btpsbr.annotation as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_elmhtp on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_elmhtp.id
left join airspace.airspace_pt airspace_airspace_pt_lwndce on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_lwndce.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xcubdf.*) AS annotation
  from master_join master_join_zvlfvv
  join notes.note_view notes_note_lat_xcubdf on master_join_zvlfvv.target_id = notes_note_lat_xcubdf.id
  where master_join_zvlfvv.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_btpsbr on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.azimuth.id,
    navaids_points.azimuth_ts.id as ts_id,
    navaids_points.azimuth_tsp.id as tsp_id,
    navaids_points.azimuth.identifier,
    navaids_points.azimuth_ts.interpretation,
    navaids_points.azimuth_ts.sequence_number,
    navaids_points.azimuth_ts.correction_number,
    navaids_points.azimuth_ts.valid_time_begin,
    navaids_points.azimuth_ts.valid_time_end,
    navaids_points.azimuth_ts.feature_lifetime_begin,
    navaids_points.azimuth_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')') as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')') as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')') as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')') as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')') as channel,
    geometry_elevatedpoint_view_kvjbff.geom AS location_geom,
    geometry_elevatedpoint_view_kvjbff.longitude AS location_longitude,
    geometry_elevatedpoint_view_kvjbff.latitude AS location_latitude,
    geometry_elevatedpoint_view_kvjbff.elevation AS location_elevation,
    geometry_elevatedpoint_view_kvjbff.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kvjbff.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kvjbff.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kvjbff.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ijngqf.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_ehpkii.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_rxdejg.availability as availability,
    notes_note_view_gafaxi.annotation as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kvjbff on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_kvjbff.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_flxdnd.*) as authority
  from master_join master_join_nrvjwf
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_flxdnd on master_join_nrvjwf.target_id = navaids_points_authorityfornavaidequipment_lat_flxdnd.id
  where master_join_nrvjwf.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_ijngqf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_yvltgz.*) as monitoring
  from master_join master_join_valsus
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_yvltgz on master_join_valsus.target_id = navaids_points_navaidequipmentmonitoring_lat_yvltgz.id
  where master_join_valsus.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ehpkii on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vicnip.*) as availability
  from master_join master_join_gcmgdx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vicnip on master_join_gcmgdx.target_id = navaids_points_navaidoperationalstatus_lat_vicnip.id
  where master_join_gcmgdx.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_rxdejg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jhecqq.*) AS annotation
  from master_join master_join_eutxji
  join notes.note_view notes_note_lat_jhecqq on master_join_eutxji.target_id = notes_note_lat_jhecqq.id
  where master_join_eutxji.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_gafaxi on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['routes.routeportion_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.changeoverpoint.id,
    routes.changeoverpoint_ts.id as ts_id,
    routes.changeoverpoint_tsp.id as tsp_id,
    routes.changeoverpoint.identifier,
    routes.changeoverpoint_ts.interpretation,
    routes.changeoverpoint_ts.sequence_number,
    routes.changeoverpoint_ts.correction_number,
    routes.changeoverpoint_ts.valid_time_begin,
    routes.changeoverpoint_ts.valid_time_end,
    routes.changeoverpoint_ts.feature_lifetime_begin,
    routes.changeoverpoint_ts.feature_lifetime_end,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_ssxejv.title as varchar), '(' || navaids_points_designatedpoint_pt_ssxejv.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ssxejv.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wwmrkd.title as varchar), '(' || navaids_points_navaid_pt_wwmrkd.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_wwmrkd.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ktysoc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ktysoc.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_ktysoc.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rdaflq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rdaflq.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rdaflq.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jaqmjh.title as varchar), '(' || airport_heliport_airportheliport_pt_jaqmjh.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_jaqmjh.href AS locationairportreferencepoint_href,
    geometry_point_view_skntxw.geom AS locationposition_geom,
    geometry_point_view_skntxw.longitude AS locationposition_longitude,
    geometry_point_view_skntxw.latitude AS locationposition_latitude,
    geometry_point_view_skntxw.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_ytqaai.*) AS applicablerouteportion,
    notes_note_view_ihhxba.annotation as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ssxejv on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ssxejv.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wwmrkd on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_wwmrkd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ktysoc on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ktysoc.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rdaflq on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rdaflq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jaqmjh on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_jaqmjh.id
left join geometry.point_view geometry_point_view_skntxw on routes.changeoverpoint_ts.location_position_id = geometry_point_view_skntxw.id
left join routes.routeportion_view routes_routeportion_view_ytqaai on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_ytqaai.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ixzgvf.*) AS annotation
  from master_join master_join_yyakhp
  join notes.note_view notes_note_lat_ixzgvf on master_join_yyakhp.target_id = notes_note_lat_ixzgvf.id
  where master_join_yyakhp.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_ihhxba on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointins.id,
    navaids_points.checkpointins_ts.id as ts_id,
    navaids_points.checkpointins_tsp.id as tsp_id,
    navaids_points.checkpointins.identifier,
    navaids_points.checkpointins_ts.interpretation,
    navaids_points.checkpointins_ts.sequence_number,
    navaids_points.checkpointins_ts.correction_number,
    navaids_points.checkpointins_ts.valid_time_begin,
    navaids_points.checkpointins_ts.valid_time_end,
    navaids_points.checkpointins_ts.feature_lifetime_begin,
    navaids_points.checkpointins_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_hopsro.geom AS position_geom,
    geometry_elevatedpoint_view_hopsro.longitude AS position_longitude,
    geometry_elevatedpoint_view_hopsro.latitude AS position_latitude,
    geometry_elevatedpoint_view_hopsro.elevation AS position_elevation,
    geometry_elevatedpoint_view_hopsro.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_hopsro.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_hopsro.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_hopsro.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_gxapid.title as varchar), '(' || airport_heliport_airportheliport_pt_gxapid.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_gxapid.href AS airportheliport_href,
    notes_note_view_elsldv.annotation as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hopsro on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_hopsro.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gxapid on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_gxapid.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rekkbi.*) AS annotation
  from master_join master_join_uikhnv
  join notes.note_view notes_note_lat_rekkbi on master_join_uikhnv.target_id = notes_note_lat_rekkbi.id
  where master_join_uikhnv.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_elsldv on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.checkpointvor.id,
    navaids_points.checkpointvor_ts.id as ts_id,
    navaids_points.checkpointvor_tsp.id as tsp_id,
    navaids_points.checkpointvor.identifier,
    navaids_points.checkpointvor_ts.interpretation,
    navaids_points.checkpointvor_ts.sequence_number,
    navaids_points.checkpointvor_ts.correction_number,
    navaids_points.checkpointvor_ts.valid_time_begin,
    navaids_points.checkpointvor_ts.valid_time_end,
    navaids_points.checkpointvor_ts.feature_lifetime_begin,
    navaids_points.checkpointvor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')') as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')') as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')') as distance,
    geometry_elevatedpoint_view_vtmmqy.geom AS position_geom,
    geometry_elevatedpoint_view_vtmmqy.longitude AS position_longitude,
    geometry_elevatedpoint_view_vtmmqy.latitude AS position_latitude,
    geometry_elevatedpoint_view_vtmmqy.elevation AS position_elevation,
    geometry_elevatedpoint_view_vtmmqy.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_vtmmqy.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_vtmmqy.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_vtmmqy.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_uctxsp.title as varchar), '(' || airport_heliport_airportheliport_pt_uctxsp.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_uctxsp.href AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_icnayy.title as varchar), '(' || navaids_points_vor_pt_icnayy.nilreason[1] || ')') AS checkpointfacility,
    navaids_points_vor_pt_icnayy.href AS checkpointfacility_href,
    notes_note_view_etcqqb.annotation as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vtmmqy on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_vtmmqy.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_uctxsp on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_uctxsp.id
left join navaids_points.vor_pt navaids_points_vor_pt_icnayy on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_icnayy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ontavj.*) AS annotation
  from master_join master_join_abfymg
  join notes.note_view notes_note_lat_ontavj on master_join_abfymg.target_id = notes_note_lat_ontavj.id
  where master_join_abfymg.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_etcqqb on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'geometry.surface_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    public.circlingarea.id,
    public.circlingarea_ts.id as ts_id,
    public.circlingarea_tsp.id as tsp_id,
    public.circlingarea.identifier,
    public.circlingarea_ts.interpretation,
    public.circlingarea_ts.sequence_number,
    public.circlingarea_ts.correction_number,
    public.circlingarea_ts.valid_time_begin,
    public.circlingarea_ts.valid_time_end,
    public.circlingarea_ts.feature_lifetime_begin,
    public.circlingarea_ts.feature_lifetime_end,
    geometry_surface_view_aycluw.geom AS extent_geom,
    geometry_surface_view_aycluw.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_vuagvm.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_vuagvm.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_vuagvm.href AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_mukxpd.*) AS aircraftcategory,
    procedure_approachcondition_view_qoafjm.condition as condition,
    shared_obstacleassessmentarea_view_qpnepb.designsurface as designsurface,
    notes_note_view_oxtiwt.annotation as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_aycluw on public.circlingarea_ts.extent_id = geometry_surface_view_aycluw.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_vuagvm on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_vuagvm.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_mukxpd on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_mukxpd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_tfkvez.*) as condition
  from master_join master_join_yreuwl
  join procedure.approachcondition_view procedure_approachcondition_lat_tfkvez on master_join_yreuwl.target_id = procedure_approachcondition_lat_tfkvez.id
  where master_join_yreuwl.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_qoafjm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ortzug.*) as designsurface
  from master_join master_join_oqpgtq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ortzug on master_join_oqpgtq.target_id = shared_obstacleassessmentarea_lat_ortzug.id
  where master_join_oqpgtq.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_qpnepb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nizhlj.*) AS annotation
  from master_join master_join_otcqfr
  join notes.note_view notes_note_lat_nizhlj on master_join_otcqfr.target_id = notes_note_lat_nizhlj.id
  where master_join_otcqfr.source_id = public.circlingarea_ts.id
) as notes_note_view_oxtiwt on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingareamarking.id,
    airport_heliport.deicingareamarking_ts.id as ts_id,
    airport_heliport.deicingareamarking_tsp.id as tsp_id,
    airport_heliport.deicingareamarking.identifier,
    airport_heliport.deicingareamarking_ts.interpretation,
    airport_heliport.deicingareamarking_ts.sequence_number,
    airport_heliport.deicingareamarking_ts.correction_number,
    airport_heliport.deicingareamarking_ts.valid_time_begin,
    airport_heliport.deicingareamarking_ts.valid_time_end,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_wymtqc.title as varchar), '(' || airport_heliport_deicingarea_pt_wymtqc.nilreason[1] || ')') AS markeddeicingarea,
    airport_heliport_deicingarea_pt_wymtqc.href AS markeddeicingarea_href,
    airport_heliport_markingelement_view_caydfa.element as element,
    notes_note_view_rdussi.annotation as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_wymtqc on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_wymtqc.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fujsnz.*) as element
  from master_join master_join_sjlthb
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fujsnz on master_join_sjlthb.target_id = airport_heliport_markingelement_lat_fujsnz.id
  where master_join_sjlthb.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_caydfa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwsiyz.*) AS annotation
  from master_join master_join_jqboxj
  join notes.note_view notes_note_lat_nwsiyz on master_join_jqboxj.target_id = notes_note_lat_nwsiyz.id
  where master_join_jqboxj.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_rdussi on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.deicingarea.id,
    airport_heliport.deicingarea_ts.id as ts_id,
    airport_heliport.deicingarea_tsp.id as tsp_id,
    airport_heliport.deicingarea.identifier,
    airport_heliport.deicingarea_ts.interpretation,
    airport_heliport.deicingarea_ts.sequence_number,
    airport_heliport.deicingarea_ts.correction_number,
    airport_heliport.deicingarea_ts.valid_time_begin,
    airport_heliport.deicingarea_ts.valid_time_end,
    airport_heliport.deicingarea_ts.feature_lifetime_begin,
    airport_heliport.deicingarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_apron_pt_dbcacs.title as varchar), '(' || airport_heliport_apron_pt_dbcacs.nilreason[1] || ')') AS associatedapron,
    airport_heliport_apron_pt_dbcacs.href AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_lbqxgf.title as varchar), '(' || airport_heliport_taxiway_pt_lbqxgf.nilreason[1] || ')') AS taxiwaylocation,
    airport_heliport_taxiway_pt_lbqxgf.href AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_dltwdn.title as varchar), '(' || airport_heliport_aircraftstand_pt_dltwdn.nilreason[1] || ')') AS standlocation,
    airport_heliport_aircraftstand_pt_dltwdn.href AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_kfwgoz.*) AS surfaceproperties,
    geometry_elevatedsurface_view_qgzbtn.geom AS extent_geom,
    geometry_elevatedsurface_view_qgzbtn.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qgzbtn.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qgzbtn.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qgzbtn.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qgzbtn.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_rmzgwb.annotation as annotation,
    airport_heliport_apronareaavailability_view_fguxif.availability as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_dbcacs on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_dbcacs.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_lbqxgf on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_lbqxgf.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_dltwdn on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_dltwdn.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_kfwgoz on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_kfwgoz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qgzbtn on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_qgzbtn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vradvx.*) AS annotation
  from master_join master_join_unrtrm
  join notes.note_view notes_note_lat_vradvx on master_join_unrtrm.target_id = notes_note_lat_vradvx.id
  where master_join_unrtrm.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_rmzgwb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_kjcfbu.*) as availability
  from master_join master_join_legcdz
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_kjcfbu on master_join_legcdz.target_id = airport_heliport_apronareaavailability_lat_kjcfbu.id
  where master_join_legcdz.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_fguxif on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.departureleg.id,
    procedure.departureleg_ts.id as ts_id,
    procedure.departureleg_tsp.id as tsp_id,
    procedure.departureleg.identifier,
    procedure.departureleg_ts.interpretation,
    procedure.departureleg_ts.sequence_number,
    procedure.departureleg_ts.correction_number,
    procedure.departureleg_ts.valid_time_begin,
    procedure.departureleg_ts.valid_time_end,
    procedure.departureleg_ts.feature_lifetime_begin,
    procedure.departureleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_cijzgn.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_orhllt.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xupoip.*) AS arccentre,
    geometry_curve_view_xmfhcv.geom AS trajectory_geom,
    geometry_curve_view_xmfhcv.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_gloadf.title as varchar), '(' || navaids_points_angleindication_pt_gloadf.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_gloadf.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jsetyd.title as varchar), '(' || navaids_points_distanceindication_pt_jsetyd.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_jsetyd.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_kygbdg.*) AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_yfujpi.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_yfujpi.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_yfujpi.href AS departure_href,
    shared_aircraftcharacteristic_view_ldjlab.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_djfpfu.designsurface as designsurface,
    notes_note_view_igogzy.annotation as annotation,
    procedure_departurearrivalcondition_view_umqoam.condition as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_cijzgn on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_cijzgn.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_orhllt on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_orhllt.id
left join geometry.curve_view geometry_curve_view_xmfhcv on procedure.departureleg_ts.trajectory_id = geometry_curve_view_xmfhcv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xupoip on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_xupoip.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_gloadf on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_gloadf.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jsetyd on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_jsetyd.id
left join procedure.holdinguse_view procedure_holdinguse_view_kygbdg on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_kygbdg.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_yfujpi on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_yfujpi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ololzw.*) as aircraftcategory
  from master_join master_join_czqkgg
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ololzw on master_join_czqkgg.target_id = shared_aircraftcharacteristic_lat_ololzw.id
  where master_join_czqkgg.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_ldjlab on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_dkvjzt.*) as designsurface
  from master_join master_join_jfdsjq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_dkvjzt on master_join_jfdsjq.target_id = shared_obstacleassessmentarea_lat_dkvjzt.id
  where master_join_jfdsjq.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_djfpfu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppvbin.*) AS annotation
  from master_join master_join_imyxig
  join notes.note_view notes_note_lat_ppvbin on master_join_imyxig.target_id = notes_note_lat_ppvbin.id
  where master_join_imyxig.source_id = procedure.departureleg_ts.id
) as notes_note_view_igogzy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_iasyvk.*) as condition
  from master_join master_join_ashnlt
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_iasyvk on master_join_ashnlt.target_id = procedure_departurearrivalcondition_lat_iasyvk.id
  where master_join_ashnlt.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_umqoam on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.designatedpoint.id,
    navaids_points.designatedpoint_ts.id as ts_id,
    navaids_points.designatedpoint_tsp.id as tsp_id,
    navaids_points.designatedpoint.identifier,
    navaids_points.designatedpoint_ts.interpretation,
    navaids_points.designatedpoint_ts.sequence_number,
    navaids_points.designatedpoint_ts.correction_number,
    navaids_points.designatedpoint_ts.valid_time_begin,
    navaids_points.designatedpoint_ts.valid_time_end,
    navaids_points.designatedpoint_ts.feature_lifetime_begin,
    navaids_points.designatedpoint_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')') as name,
    geometry_point_view_xwiyup.geom AS location_geom,
    geometry_point_view_xwiyup.longitude AS location_longitude,
    geometry_point_view_xwiyup.latitude AS location_latitude,
    geometry_point_view_xwiyup.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sbsnxg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sbsnxg.nilreason[1] || ')') AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_sbsnxg.href AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fdjmkh.title as varchar), '(' || airport_heliport_airportheliport_pt_fdjmkh.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_fdjmkh.href AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dtvhbz.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dtvhbz.nilreason[1] || ')') AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dtvhbz.href AS runwaypoint_href,
    notes_note_view_havezm.annotation as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_xwiyup on navaids_points.designatedpoint_ts.location_id = geometry_point_view_xwiyup.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sbsnxg on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_sbsnxg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fdjmkh on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_fdjmkh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dtvhbz on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dtvhbz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_djsndc.*) AS annotation
  from master_join master_join_gdzpeh
  join notes.note_view notes_note_lat_djsndc on master_join_gdzpeh.target_id = notes_note_lat_djsndc.id
  where master_join_gdzpeh.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_havezm on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.directionfinder.id,
    navaids_points.directionfinder_ts.id as ts_id,
    navaids_points.directionfinder_tsp.id as tsp_id,
    navaids_points.directionfinder.identifier,
    navaids_points.directionfinder_ts.interpretation,
    navaids_points.directionfinder_ts.sequence_number,
    navaids_points.directionfinder_ts.correction_number,
    navaids_points.directionfinder_ts.valid_time_begin,
    navaids_points.directionfinder_ts.valid_time_end,
    navaids_points.directionfinder_ts.feature_lifetime_begin,
    navaids_points.directionfinder_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')') as doppler,
    geometry_elevatedpoint_view_hzsktz.geom AS location_geom,
    geometry_elevatedpoint_view_hzsktz.longitude AS location_longitude,
    geometry_elevatedpoint_view_hzsktz.latitude AS location_latitude,
    geometry_elevatedpoint_view_hzsktz.elevation AS location_elevation,
    geometry_elevatedpoint_view_hzsktz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_hzsktz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_hzsktz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_hzsktz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ldebnw.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_gebfuu.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_fpmczh.availability as availability,
    notes_note_view_blvnli.annotation as annotation,
    service_informationservice_pt_eirddf.informationprovision as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hzsktz on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_hzsktz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ksoomz.*) as authority
  from master_join master_join_twjtgb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ksoomz on master_join_twjtgb.target_id = navaids_points_authorityfornavaidequipment_lat_ksoomz.id
  where master_join_twjtgb.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_ldebnw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bgvsll.*) as monitoring
  from master_join master_join_hwpvrx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bgvsll on master_join_hwpvrx.target_id = navaids_points_navaidequipmentmonitoring_lat_bgvsll.id
  where master_join_hwpvrx.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_gebfuu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fdbhta.*) as availability
  from master_join master_join_strdke
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fdbhta on master_join_strdke.target_id = navaids_points_navaidoperationalstatus_lat_fdbhta.id
  where master_join_strdke.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_fpmczh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_snojzz.*) AS annotation
  from master_join master_join_ecklcn
  join notes.note_view notes_note_lat_snojzz on master_join_ecklcn.target_id = notes_note_lat_snojzz.id
  where master_join_ecklcn.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_blvnli on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_dkuvie.id,
      'title', coalesce(cast(service_informationservice_lat_dkuvie.title AS varchar), '(' || service_informationservice_lat_dkuvie.nilreason[1] || ')'),
      'href', service_informationservice_lat_dkuvie.href
  )) as informationprovision  from master_join master_join_gukmwk
  join service.informationservice_pt service_informationservice_lat_dkuvie on master_join_gukmwk.target_id = service_informationservice_lat_dkuvie.id
  where master_join_gukmwk.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_eirddf on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.distanceindication.id,
    navaids_points.distanceindication_ts.id as ts_id,
    navaids_points.distanceindication_tsp.id as tsp_id,
    navaids_points.distanceindication.identifier,
    navaids_points.distanceindication_ts.interpretation,
    navaids_points.distanceindication_ts.sequence_number,
    navaids_points.distanceindication_ts.correction_number,
    navaids_points.distanceindication_ts.valid_time_begin,
    navaids_points.distanceindication_ts.valid_time_end,
    navaids_points.distanceindication_ts.feature_lifetime_begin,
    navaids_points.distanceindication_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')') as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')') as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_odkwrt.title as varchar), '(' || navaids_points_designatedpoint_pt_odkwrt.nilreason[1] || ')') AS fix,
    navaids_points_designatedpoint_pt_odkwrt.href AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nglniy.title as varchar), '(' || navaids_points_designatedpoint_pt_nglniy.nilreason[1] || ')') AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_nglniy.href AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nyxqbv.title as varchar), '(' || navaids_points_navaid_pt_nyxqbv.nilreason[1] || ')') AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_nyxqbv.href AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_phrgbw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_phrgbw.nilreason[1] || ')') AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_phrgbw.href AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uwyjct.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uwyjct.nilreason[1] || ')') AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uwyjct.href AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cxehfd.title as varchar), '(' || airport_heliport_airportheliport_pt_cxehfd.nilreason[1] || ')') AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_cxehfd.href AS pointchoiceairportreferencepoint_href,
    geometry_point_view_syyrjc.geom AS pointchoiceposition_geom,
    geometry_point_view_syyrjc.longitude AS pointchoiceposition_longitude,
    geometry_point_view_syyrjc.latitude AS pointchoiceposition_latitude,
    geometry_point_view_syyrjc.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_thqndn.annotation as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_odkwrt on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_odkwrt.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nglniy on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nglniy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nyxqbv on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_nyxqbv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_phrgbw on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_phrgbw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uwyjct on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uwyjct.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cxehfd on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_cxehfd.id
left join geometry.point_view geometry_point_view_syyrjc on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_syyrjc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jxjlue.*) AS annotation
  from master_join master_join_jprour
  join notes.note_view notes_note_lat_jxjlue on master_join_jprour.target_id = notes_note_lat_jxjlue.id
  where master_join_jprour.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_thqndn on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.dme.id,
    navaids_points.dme_ts.id as ts_id,
    navaids_points.dme_tsp.id as tsp_id,
    navaids_points.dme.identifier,
    navaids_points.dme_ts.interpretation,
    navaids_points.dme_ts.sequence_number,
    navaids_points.dme_ts.correction_number,
    navaids_points.dme_ts.valid_time_begin,
    navaids_points.dme_ts.valid_time_end,
    navaids_points.dme_ts.feature_lifetime_begin,
    navaids_points.dme_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')') as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')') as displace,
    geometry_elevatedpoint_view_eyexeg.geom AS location_geom,
    geometry_elevatedpoint_view_eyexeg.longitude AS location_longitude,
    geometry_elevatedpoint_view_eyexeg.latitude AS location_latitude,
    geometry_elevatedpoint_view_eyexeg.elevation AS location_elevation,
    geometry_elevatedpoint_view_eyexeg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_eyexeg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_eyexeg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_eyexeg.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_rcofme.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_eizywo.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_qiidga.availability as availability,
    notes_note_view_onrnog.annotation as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_eyexeg on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_eyexeg.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ecanug.*) as authority
  from master_join master_join_klqhcd
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ecanug on master_join_klqhcd.target_id = navaids_points_authorityfornavaidequipment_lat_ecanug.id
  where master_join_klqhcd.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_rcofme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ryspvo.*) as monitoring
  from master_join master_join_upjulz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ryspvo on master_join_upjulz.target_id = navaids_points_navaidequipmentmonitoring_lat_ryspvo.id
  where master_join_upjulz.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_eizywo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lrdkkr.*) as availability
  from master_join master_join_gjcpdd
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_lrdkkr on master_join_gjcpdd.target_id = navaids_points_navaidoperationalstatus_lat_lrdkkr.id
  where master_join_gjcpdd.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_qiidga on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mktmjj.*) AS annotation
  from master_join master_join_ajhbbt
  join notes.note_view notes_note_lat_mktmjj on master_join_ajhbbt.target_id = notes_note_lat_mktmjj.id
  where master_join_ajhbbt.source_id = navaids_points.dme_ts.id
) as notes_note_view_onrnog on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.elevation.id,
    navaids_points.elevation_ts.id as ts_id,
    navaids_points.elevation_tsp.id as tsp_id,
    navaids_points.elevation.identifier,
    navaids_points.elevation_ts.interpretation,
    navaids_points.elevation_ts.sequence_number,
    navaids_points.elevation_ts.correction_number,
    navaids_points.elevation_ts.valid_time_begin,
    navaids_points.elevation_ts.valid_time_end,
    navaids_points.elevation_ts.feature_lifetime_begin,
    navaids_points.elevation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')') as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')') as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')') as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    geometry_elevatedpoint_view_kywqpg.geom AS location_geom,
    geometry_elevatedpoint_view_kywqpg.longitude AS location_longitude,
    geometry_elevatedpoint_view_kywqpg.latitude AS location_latitude,
    geometry_elevatedpoint_view_kywqpg.elevation AS location_elevation,
    geometry_elevatedpoint_view_kywqpg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kywqpg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kywqpg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kywqpg.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_atqidb.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_yrojty.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_mzvlyu.availability as availability,
    notes_note_view_lrcijp.annotation as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kywqpg on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_kywqpg.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_pvgbqq.*) as authority
  from master_join master_join_zcskyr
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_pvgbqq on master_join_zcskyr.target_id = navaids_points_authorityfornavaidequipment_lat_pvgbqq.id
  where master_join_zcskyr.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_atqidb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qundwb.*) as monitoring
  from master_join master_join_btdrfl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qundwb on master_join_btdrfl.target_id = navaids_points_navaidequipmentmonitoring_lat_qundwb.id
  where master_join_btdrfl.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_yrojty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dzlnle.*) as availability
  from master_join master_join_lataes
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dzlnle on master_join_lataes.target_id = navaids_points_navaidoperationalstatus_lat_dzlnle.id
  where master_join_lataes.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_mzvlyu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_veeglt.*) AS annotation
  from master_join master_join_whmvip
  join notes.note_view notes_note_lat_veeglt on master_join_whmvip.target_id = notes_note_lat_veeglt.id
  where master_join_whmvip.source_id = navaids_points.elevation_ts.id
) as notes_note_view_lrcijp on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['geometry.point_view', 'public.fasdatablock_view', 'procedure.holdinguse_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.finalleg.id,
    procedure.finalleg_ts.id as ts_id,
    procedure.finalleg_tsp.id as tsp_id,
    procedure.finalleg.identifier,
    procedure.finalleg_ts.interpretation,
    procedure.finalleg_ts.sequence_number,
    procedure.finalleg_ts.correction_number,
    procedure.finalleg_ts.valid_time_begin,
    procedure.finalleg_ts.valid_time_end,
    procedure.finalleg_ts.feature_lifetime_begin,
    procedure.finalleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')') as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')') as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')') as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')') as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')') as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')') as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')') as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')') as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')') as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bjlruk.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ovadan.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_afdnyi.*) AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ujpjkt.*) AS visualdescentpoint,
    geometry_curve_view_evugsr.geom AS trajectory_geom,
    geometry_curve_view_evugsr.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_pbdpnx.title as varchar), '(' || navaids_points_angleindication_pt_pbdpnx.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_pbdpnx.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ifrgqz.title as varchar), '(' || navaids_points_distanceindication_pt_ifrgqz.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_ifrgqz.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_hhqmpt.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_euwuhg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_euwuhg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_euwuhg.href AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_njauzc.title as varchar), '(' || navaids_points_designatedpoint_pt_njauzc.nilreason[1] || ')') AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_njauzc.href AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wwcakp.title as varchar), '(' || navaids_points_navaid_pt_wwcakp.nilreason[1] || ')') AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_wwcakp.href AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kuyapi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kuyapi.nilreason[1] || ')') AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_kuyapi.href AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_aszxqq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_aszxqq.nilreason[1] || ')') AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_aszxqq.href AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hjxkdw.title as varchar), '(' || airport_heliport_airportheliport_pt_hjxkdw.nilreason[1] || ')') AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_hjxkdw.href AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_xcugmt.geom AS finalpathalignmentpointposition_geom,
    geometry_point_view_xcugmt.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_xcugmt.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_xcugmt.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_fsqxud.*) AS fasdata,
    shared_aircraftcharacteristic_view_hmscrv.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_ahlcua.designsurface as designsurface,
    notes_note_view_gejszx.annotation as annotation,
    procedure_approachcondition_view_luiubu.condition as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bjlruk on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_bjlruk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ovadan on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ovadan.id
left join geometry.curve_view geometry_curve_view_evugsr on procedure.finalleg_ts.trajectory_id = geometry_curve_view_evugsr.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_afdnyi on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_afdnyi.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_pbdpnx on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_pbdpnx.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ifrgqz on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_ifrgqz.id
left join procedure.holdinguse_view procedure_holdinguse_view_hhqmpt on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_hhqmpt.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_euwuhg on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_euwuhg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_njauzc on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_njauzc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wwcakp on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_wwcakp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kuyapi on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kuyapi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_aszxqq on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_aszxqq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hjxkdw on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_hjxkdw.id
left join geometry.point_view geometry_point_view_xcugmt on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_xcugmt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ujpjkt on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_ujpjkt.id
left join public.fasdatablock_view public_fasdatablock_view_fsqxud on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_fsqxud.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_dfnfez.*) as aircraftcategory
  from master_join master_join_qynzku
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_dfnfez on master_join_qynzku.target_id = shared_aircraftcharacteristic_lat_dfnfez.id
  where master_join_qynzku.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_hmscrv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fubxyz.*) as designsurface
  from master_join master_join_ubvmdn
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fubxyz on master_join_ubvmdn.target_id = shared_obstacleassessmentarea_lat_fubxyz.id
  where master_join_ubvmdn.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_ahlcua on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wjglvn.*) AS annotation
  from master_join master_join_cxkxsx
  join notes.note_view notes_note_lat_wjglvn on master_join_cxkxsx.target_id = notes_note_lat_wjglvn.id
  where master_join_cxkxsx.source_id = procedure.finalleg_ts.id
) as notes_note_view_gejszx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_nrcfvl.*) as condition
  from master_join master_join_tkhhpv
  join procedure.approachcondition_view procedure_approachcondition_lat_nrcfvl on master_join_tkhhpv.target_id = procedure_approachcondition_lat_nrcfvl.id
  where master_join_tkhhpv.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_luiubu on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.firefightingservice.id,
    service.firefightingservice_ts.id as ts_id,
    service.firefightingservice_tsp.id as tsp_id,
    service.firefightingservice.identifier,
    service.firefightingservice_ts.interpretation,
    service.firefightingservice_ts.sequence_number,
    service.firefightingservice_ts.correction_number,
    service.firefightingservice_ts.valid_time_begin,
    service.firefightingservice_ts.valid_time_end,
    service.firefightingservice_ts.feature_lifetime_begin,
    service.firefightingservice_ts.feature_lifetime_end,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')') as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')') as standard,
    geometry_elevatedpoint_view_kknnsb.geom AS location_geom,
    geometry_elevatedpoint_view_kknnsb.longitude AS location_longitude,
    geometry_elevatedpoint_view_kknnsb.latitude AS location_latitude,
    geometry_elevatedpoint_view_kknnsb.elevation AS location_elevation,
    geometry_elevatedpoint_view_kknnsb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kknnsb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kknnsb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kknnsb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_gvpelq.title as varchar), '(' || organisation_unit_pt_gvpelq.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_gvpelq.href AS serviceprovider_href,
    service_callsigndetail_view_leworj.callsign as callsign,
    service_radiocommunicationchannel_pt_hwxxpy.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_ircvqu.availability as availability,
    notes_note_view_hfkvjr.annotation as annotation,
    airport_heliport_airportheliport_pt_zqumqr.airportheliport as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kknnsb on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_kknnsb.id
left join organisation.unit_pt organisation_unit_pt_gvpelq on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_gvpelq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_atpsuw.*) as callsign
  from master_join master_join_fizxbp
  join service.callsigndetail_view service_callsigndetail_lat_atpsuw on master_join_fizxbp.target_id = service_callsigndetail_lat_atpsuw.id
  where master_join_fizxbp.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_leworj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_tosbir.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_tosbir.title AS varchar), '(' || service_radiocommunicationchannel_lat_tosbir.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_tosbir.href
  )) as radiocommunication  from master_join master_join_kvisne
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_tosbir on master_join_kvisne.target_id = service_radiocommunicationchannel_lat_tosbir.id
  where master_join_kvisne.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_hwxxpy on TRUE
left join lateral(
  select
  from master_join master_join_gflhrs
  join shared.contactinformation_view shared_contactinformation_lat_cwmlto on master_join_gflhrs.target_id = shared_contactinformation_lat_cwmlto.id
  where master_join_gflhrs.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_myupdi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ealrwx.*) as availability
  from master_join master_join_maoscf
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ealrwx on master_join_maoscf.target_id = service_serviceoperationalstatus_lat_ealrwx.id
  where master_join_maoscf.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_ircvqu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wckngq.*) AS annotation
  from master_join master_join_xaprfx
  join notes.note_view notes_note_lat_wckngq on master_join_xaprfx.target_id = notes_note_lat_wckngq.id
  where master_join_xaprfx.source_id = service.firefightingservice_ts.id
) as notes_note_view_hfkvjr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ldeeqw.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ldeeqw.title AS varchar), '(' || airport_heliport_airportheliport_lat_ldeeqw.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ldeeqw.href
  )) as airportheliport  from master_join master_join_ldwind
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ldeeqw on master_join_ldwind.target_id = airport_heliport_airportheliport_lat_ldeeqw.id
  where master_join_ldwind.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_zqumqr on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['routes.flightconditioncombination_view', 'notes.note_view', 'routes.flightrestrictionroute_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.flightrestriction.id,
    routes.flightrestriction_ts.id as ts_id,
    routes.flightrestriction_tsp.id as tsp_id,
    routes.flightrestriction.identifier,
    routes.flightrestriction_ts.interpretation,
    routes.flightrestriction_ts.sequence_number,
    routes.flightrestriction_ts.correction_number,
    routes.flightrestriction_ts.valid_time_begin,
    routes.flightrestriction_ts.valid_time_end,
    routes.flightrestriction_ts.feature_lifetime_begin,
    routes.flightrestriction_ts.feature_lifetime_end,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')') as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')') as instruction,
    to_jsonb(routes_flightconditioncombination_view_xdtjfp.*) AS flight,
    routes_flightrestrictionroute_view_trizrw.regulatedroute as regulatedroute,
    notes_note_view_zyjtkj.annotation as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_xdtjfp on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_xdtjfp.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_xwtdbm.*) as regulatedroute
  from master_join master_join_pnqgrl
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_xwtdbm on master_join_pnqgrl.target_id = routes_flightrestrictionroute_lat_xwtdbm.id
  where master_join_pnqgrl.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_trizrw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jxdfzv.*) AS annotation
  from master_join master_join_eeajbw
  join notes.note_view notes_note_lat_jxdfzv on master_join_eeajbw.target_id = notes_note_lat_jxdfzv.id
  where master_join_eeajbw.source_id = routes.flightrestriction_ts.id
) as notes_note_view_zyjtkj on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.floatingdocksite.id,
    airport_heliport.floatingdocksite_ts.id as ts_id,
    airport_heliport.floatingdocksite_tsp.id as tsp_id,
    airport_heliport.floatingdocksite.identifier,
    airport_heliport.floatingdocksite_ts.interpretation,
    airport_heliport.floatingdocksite_ts.sequence_number,
    airport_heliport.floatingdocksite_ts.correction_number,
    airport_heliport.floatingdocksite_ts.valid_time_begin,
    airport_heliport.floatingdocksite_ts.valid_time_end,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_nhsqyy.geom AS extent_geom,
    geometry_elevatedsurface_view_nhsqyy.elevation AS extent_elevation,
    geometry_elevatedsurface_view_nhsqyy.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_nhsqyy.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_nhsqyy.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_nhsqyy.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ezokec.annotation as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nhsqyy on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_nhsqyy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wdiwqb.*) AS annotation
  from master_join master_join_jesyam
  join notes.note_view notes_note_lat_wdiwqb on master_join_jesyam.target_id = notes_note_lat_wdiwqb.id
  where master_join_jesyam.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_ezokec on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airspace.geoborder.id,
    airspace.geoborder_ts.id as ts_id,
    airspace.geoborder_tsp.id as tsp_id,
    airspace.geoborder.identifier,
    airspace.geoborder_ts.interpretation,
    airspace.geoborder_ts.sequence_number,
    airspace.geoborder_ts.correction_number,
    airspace.geoborder_ts.valid_time_begin,
    airspace.geoborder_ts.valid_time_end,
    airspace.geoborder_ts.feature_lifetime_begin,
    airspace.geoborder_ts.feature_lifetime_end,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')') as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')') as type,
    geometry_curve_view_ghgepi.geom AS border_geom,
    geometry_curve_view_ghgepi.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_swurdz.annotation as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_ghgepi on airspace.geoborder_ts.border_id = geometry_curve_view_ghgepi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bbouyh.*) AS annotation
  from master_join master_join_ghaoxe
  join notes.note_view notes_note_lat_bbouyh on master_join_ghaoxe.target_id = notes_note_lat_bbouyh.id
  where master_join_ghaoxe.source_id = airspace.geoborder_ts.id
) as notes_note_view_swurdz on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.glidepath.id,
    navaids_points.glidepath_ts.id as ts_id,
    navaids_points.glidepath_tsp.id as tsp_id,
    navaids_points.glidepath.identifier,
    navaids_points.glidepath_ts.interpretation,
    navaids_points.glidepath_ts.sequence_number,
    navaids_points.glidepath_ts.correction_number,
    navaids_points.glidepath_ts.valid_time_begin,
    navaids_points.glidepath_ts.valid_time_end,
    navaids_points.glidepath_ts.feature_lifetime_begin,
    navaids_points.glidepath_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')') as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')') as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')') as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')') as rdhaccuracy,
    geometry_elevatedpoint_view_obirza.geom AS location_geom,
    geometry_elevatedpoint_view_obirza.longitude AS location_longitude,
    geometry_elevatedpoint_view_obirza.latitude AS location_latitude,
    geometry_elevatedpoint_view_obirza.elevation AS location_elevation,
    geometry_elevatedpoint_view_obirza.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_obirza.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_obirza.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_obirza.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_dmngjk.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_etbqyb.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_rbbcnj.availability as availability,
    notes_note_view_olqkxx.annotation as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_obirza on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_obirza.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nqooix.*) as authority
  from master_join master_join_skqmam
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nqooix on master_join_skqmam.target_id = navaids_points_authorityfornavaidequipment_lat_nqooix.id
  where master_join_skqmam.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_dmngjk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zeqlab.*) as monitoring
  from master_join master_join_mpwomx
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zeqlab on master_join_mpwomx.target_id = navaids_points_navaidequipmentmonitoring_lat_zeqlab.id
  where master_join_mpwomx.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_etbqyb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_zbgisy.*) as availability
  from master_join master_join_ndxlib
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_zbgisy on master_join_ndxlib.target_id = navaids_points_navaidoperationalstatus_lat_zbgisy.id
  where master_join_ndxlib.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_rbbcnj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dftyvu.*) AS annotation
  from master_join master_join_flxunr
  join notes.note_view notes_note_lat_dftyvu on master_join_flxunr.target_id = notes_note_lat_dftyvu.id
  where master_join_flxunr.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_olqkxx on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.groundtrafficcontrolservice.id,
    service.groundtrafficcontrolservice_ts.id as ts_id,
    service.groundtrafficcontrolservice_tsp.id as tsp_id,
    service.groundtrafficcontrolservice.identifier,
    service.groundtrafficcontrolservice_ts.interpretation,
    service.groundtrafficcontrolservice_ts.sequence_number,
    service.groundtrafficcontrolservice_ts.correction_number,
    service.groundtrafficcontrolservice_ts.valid_time_begin,
    service.groundtrafficcontrolservice_ts.valid_time_end,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')') as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')') as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')') as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_afkvmz.geom AS location_geom,
    geometry_elevatedpoint_view_afkvmz.longitude AS location_longitude,
    geometry_elevatedpoint_view_afkvmz.latitude AS location_latitude,
    geometry_elevatedpoint_view_afkvmz.elevation AS location_elevation,
    geometry_elevatedpoint_view_afkvmz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_afkvmz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_afkvmz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_afkvmz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_mmkpqn.title as varchar), '(' || organisation_unit_pt_mmkpqn.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_mmkpqn.href AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jrczdt.title as varchar), '(' || airport_heliport_airportheliport_pt_jrczdt.nilreason[1] || ')') AS clientairport,
    airport_heliport_airportheliport_pt_jrczdt.href AS clientairport_href,
    service_callsigndetail_view_unvxos.callsign as callsign,
    service_radiocommunicationchannel_pt_fazupy.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_dsygej.availability as availability,
    notes_note_view_vusscd.annotation as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_afkvmz on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_afkvmz.id
left join organisation.unit_pt organisation_unit_pt_mmkpqn on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_mmkpqn.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jrczdt on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_jrczdt.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_goxoae.*) as callsign
  from master_join master_join_vxibcy
  join service.callsigndetail_view service_callsigndetail_lat_goxoae on master_join_vxibcy.target_id = service_callsigndetail_lat_goxoae.id
  where master_join_vxibcy.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_unvxos on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mcodsr.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mcodsr.title AS varchar), '(' || service_radiocommunicationchannel_lat_mcodsr.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mcodsr.href
  )) as radiocommunication  from master_join master_join_nwlvso
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mcodsr on master_join_nwlvso.target_id = service_radiocommunicationchannel_lat_mcodsr.id
  where master_join_nwlvso.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_fazupy on TRUE
left join lateral(
  select
  from master_join master_join_ffbqhn
  join shared.contactinformation_view shared_contactinformation_lat_cjadqa on master_join_ffbqhn.target_id = shared_contactinformation_lat_cjadqa.id
  where master_join_ffbqhn.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_pweyfc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_tddcbo.*) as availability
  from master_join master_join_gakfbk
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_tddcbo on master_join_gakfbk.target_id = service_serviceoperationalstatus_lat_tddcbo.id
  where master_join_gakfbk.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_dsygej on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_alqqey.*) AS annotation
  from master_join master_join_gxuoru
  join notes.note_view notes_note_lat_alqqey on master_join_gxuoru.target_id = notes_note_lat_alqqey.id
  where master_join_gxuoru.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_vusscd on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinelightsystem.id,
    airport_heliport.guidancelinelightsystem_ts.id as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier,
    airport_heliport.guidancelinelightsystem_ts.interpretation,
    airport_heliport.guidancelinelightsystem_ts.sequence_number,
    airport_heliport.guidancelinelightsystem_ts.correction_number,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_jzawup.title as varchar), '(' || airport_heliport_guidanceline_pt_jzawup.nilreason[1] || ')') AS lightedguidanceline,
    airport_heliport_guidanceline_pt_jzawup.href AS lightedguidanceline_href,
    shared_lightelement_view_uvnkcp.element as element,
    airport_heliport_groundlightingavailability_view_ecnuih.availability as availability,
    notes_note_view_vmbnov.annotation as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jzawup on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_jzawup.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_jpissu.*) as element
  from master_join master_join_rnkrdd
  join shared.lightelement_view shared_lightelement_lat_jpissu on master_join_rnkrdd.target_id = shared_lightelement_lat_jpissu.id
  where master_join_rnkrdd.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_uvnkcp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_oidlqq.*) as availability
  from master_join master_join_tjfkfh
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_oidlqq on master_join_tjfkfh.target_id = airport_heliport_groundlightingavailability_lat_oidlqq.id
  where master_join_tjfkfh.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ecnuih on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_khsndp.*) AS annotation
  from master_join master_join_hpxzsi
  join notes.note_view notes_note_lat_khsndp on master_join_hpxzsi.target_id = notes_note_lat_khsndp.id
  where master_join_hpxzsi.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_vmbnov on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidancelinemarking.id,
    airport_heliport.guidancelinemarking_ts.id as ts_id,
    airport_heliport.guidancelinemarking_tsp.id as tsp_id,
    airport_heliport.guidancelinemarking.identifier,
    airport_heliport.guidancelinemarking_ts.interpretation,
    airport_heliport.guidancelinemarking_ts.sequence_number,
    airport_heliport.guidancelinemarking_ts.correction_number,
    airport_heliport.guidancelinemarking_ts.valid_time_begin,
    airport_heliport.guidancelinemarking_ts.valid_time_end,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_ejgrlt.title as varchar), '(' || airport_heliport_guidanceline_pt_ejgrlt.nilreason[1] || ')') AS markedguidanceline,
    airport_heliport_guidanceline_pt_ejgrlt.href AS markedguidanceline_href,
    airport_heliport_markingelement_view_dvwbkq.element as element,
    notes_note_view_acltah.annotation as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_ejgrlt on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_ejgrlt.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_oakmfs.*) as element
  from master_join master_join_nleagd
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_oakmfs on master_join_nleagd.target_id = airport_heliport_markingelement_lat_oakmfs.id
  where master_join_nleagd.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_dvwbkq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_onaztu.*) AS annotation
  from master_join master_join_dwqdhx
  join notes.note_view notes_note_lat_onaztu on master_join_dwqdhx.target_id = notes_note_lat_onaztu.id
  where master_join_dwqdhx.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_acltah on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.guidanceline.id,
    airport_heliport.guidanceline_ts.id as ts_id,
    airport_heliport.guidanceline_tsp.id as tsp_id,
    airport_heliport.guidanceline.identifier,
    airport_heliport.guidanceline_ts.interpretation,
    airport_heliport.guidanceline_ts.sequence_number,
    airport_heliport.guidanceline_ts.correction_number,
    airport_heliport.guidanceline_ts.valid_time_begin,
    airport_heliport.guidanceline_ts.valid_time_end,
    airport_heliport.guidanceline_ts.feature_lifetime_begin,
    airport_heliport.guidanceline_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')') as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')') as maxspeed,
    geometry_elevatedcurve_view_iqanmv.geom AS extent_geom,
    geometry_elevatedcurve_view_iqanmv.elevation AS extent_elevation,
    geometry_elevatedcurve_view_iqanmv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_iqanmv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_iqanmv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_iqanmv.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_fyqhcp.connectedtouchdownliftoff as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_zigikb.connectedrunwaycentrelinepoint as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_hghluj.connectedapron as connectedapron,
    airport_heliport_aircraftstand_pt_bxojxr.connectedstand as connectedstand,
    airport_heliport_taxiway_pt_vexznr.connectedtaxiway as connectedtaxiway,
    notes_note_view_datfif.annotation as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_iqanmv on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_iqanmv.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_reanwr.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_reanwr.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_reanwr.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_reanwr.href
  )) as connectedtouchdownliftoff  from master_join master_join_lrwjmm
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_reanwr on master_join_lrwjmm.target_id = airport_heliport_touchdownliftoff_lat_reanwr.id
  where master_join_lrwjmm.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_fyqhcp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_altdqv.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_altdqv.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_altdqv.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_altdqv.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_njwnaw
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_altdqv on master_join_njwnaw.target_id = airport_heliport_runwaycentrelinepoint_lat_altdqv.id
  where master_join_njwnaw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_zigikb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_uavgqu.id,
      'title', coalesce(cast(airport_heliport_apron_lat_uavgqu.title AS varchar), '(' || airport_heliport_apron_lat_uavgqu.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_uavgqu.href
  )) as connectedapron  from master_join master_join_flqiyt
  join airport_heliport.apron_pt airport_heliport_apron_lat_uavgqu on master_join_flqiyt.target_id = airport_heliport_apron_lat_uavgqu.id
  where master_join_flqiyt.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_hghluj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_uqtdik.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_uqtdik.title AS varchar), '(' || airport_heliport_aircraftstand_lat_uqtdik.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_uqtdik.href
  )) as connectedstand  from master_join master_join_lccxxi
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_uqtdik on master_join_lccxxi.target_id = airport_heliport_aircraftstand_lat_uqtdik.id
  where master_join_lccxxi.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_bxojxr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_cmviip.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_cmviip.title AS varchar), '(' || airport_heliport_taxiway_lat_cmviip.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_cmviip.href
  )) as connectedtaxiway  from master_join master_join_veqihq
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_cmviip on master_join_veqihq.target_id = airport_heliport_taxiway_lat_cmviip.id
  where master_join_veqihq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_vexznr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgizpj.*) AS annotation
  from master_join master_join_nkhusn
  join notes.note_view notes_note_lat_lgizpj on master_join_nkhusn.target_id = notes_note_lat_lgizpj.id
  where master_join_nkhusn.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_datfif on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.holdingassessment.id,
    shared.holdingassessment_ts.id as ts_id,
    shared.holdingassessment_tsp.id as tsp_id,
    shared.holdingassessment.identifier,
    shared.holdingassessment_ts.interpretation,
    shared.holdingassessment_ts.sequence_number,
    shared.holdingassessment_ts.correction_number,
    shared.holdingassessment_ts.valid_time_begin,
    shared.holdingassessment_ts.valid_time_end,
    shared.holdingassessment_ts.feature_lifetime_begin,
    shared.holdingassessment_ts.feature_lifetime_end,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')') as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')') as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')') as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')') as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_bpfznm.title as varchar), '(' || holding_unplannedholding_pt_bpfznm.nilreason[1] || ')') AS unplannedholding,
    holding_unplannedholding_pt_bpfznm.href AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_bntjsr.title as varchar), '(' || holding_holdingpattern_pt_bntjsr.nilreason[1] || ')') AS assessedholdingpattern,
    holding_holdingpattern_pt_bntjsr.href AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_yjsmtk.obstacleassessment as obstacleassessment,
    notes_note_view_vbldyq.annotation as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_bpfznm on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_bpfznm.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_bntjsr on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_bntjsr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_emrfmv.*) as obstacleassessment
  from master_join master_join_nbelsm
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_emrfmv on master_join_nbelsm.target_id = shared_obstacleassessmentarea_lat_emrfmv.id
  where master_join_nbelsm.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_yjsmtk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eonwny.*) AS annotation
  from master_join master_join_sfvbfl
  join notes.note_view notes_note_lat_eonwny on master_join_sfvbfl.target_id = notes_note_lat_eonwny.id
  where master_join_sfvbfl.source_id = shared.holdingassessment_ts.id
) as notes_note_view_vbldyq on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatterndistance_view', 'geometry.curve_view', 'holding.holdingpatternduration_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.holdingpattern.id,
    holding.holdingpattern_ts.id as ts_id,
    holding.holdingpattern_tsp.id as tsp_id,
    holding.holdingpattern.identifier,
    holding.holdingpattern_ts.interpretation,
    holding.holdingpattern_ts.sequence_number,
    holding.holdingpattern_ts.correction_number,
    holding.holdingpattern_ts.valid_time_begin,
    holding.holdingpattern_ts.valid_time_end,
    holding.holdingpattern_ts.feature_lifetime_begin,
    holding.holdingpattern_ts.feature_lifetime_end,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')') as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')') as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')') as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')') as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')') as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')') as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_mfgssi.*) AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_ctrbsy.*) AS outboundlegspanenddistance,
    geometry_curve_view_ijiwuk.geom AS extent_geom,
    geometry_curve_view_ijiwuk.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_glpree.annotation as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_mfgssi on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_mfgssi.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_ctrbsy on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_ctrbsy.id
left join geometry.curve_view geometry_curve_view_ijiwuk on holding.holdingpattern_ts.extent_id = geometry_curve_view_ijiwuk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xkyidg.*) AS annotation
  from master_join master_join_bghfkd
  join notes.note_view notes_note_lat_xkyidg on master_join_bghfkd.target_id = notes_note_lat_xkyidg.id
  where master_join_bghfkd.source_id = holding.holdingpattern_ts.id
) as notes_note_view_glpree on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.informationservice.id,
    service.informationservice_ts.id as ts_id,
    service.informationservice_tsp.id as tsp_id,
    service.informationservice.identifier,
    service.informationservice_ts.interpretation,
    service.informationservice_ts.sequence_number,
    service.informationservice_ts.correction_number,
    service.informationservice_ts.valid_time_begin,
    service.informationservice_ts.valid_time_end,
    service.informationservice_ts.feature_lifetime_begin,
    service.informationservice_ts.feature_lifetime_end,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')') as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')') as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')') as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')') as recorded,
    geometry_elevatedpoint_view_pamfwf.geom AS location_geom,
    geometry_elevatedpoint_view_pamfwf.longitude AS location_longitude,
    geometry_elevatedpoint_view_pamfwf.latitude AS location_latitude,
    geometry_elevatedpoint_view_pamfwf.elevation AS location_elevation,
    geometry_elevatedpoint_view_pamfwf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pamfwf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pamfwf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pamfwf.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uiblol.title as varchar), '(' || organisation_unit_pt_uiblol.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_uiblol.href AS serviceprovider_href,
    service_callsigndetail_view_aulybu.callsign as callsign,
    service_radiocommunicationchannel_pt_igzlwt.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_chvwdp.availability as availability,
    notes_note_view_bkmgkj.annotation as annotation,
    navaids_points_vor_pt_dbijpr.navaidbroadcast as navaidbroadcast,
    airspace_airspace_pt_lpijin.clientairspace as clientairspace,
    airport_heliport_airportheliport_pt_vcgftr.clientairport as clientairport,
    routes_routeportion_view_ctvegc.clientroute as clientroute,
    holding_holdingpattern_pt_drpapi.clientholding as clientholding,
    aerial_refuelling_aerialrefuelling_pt_zvoguz.clientaerialrefuelling as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pamfwf on service.informationservice_ts.location_id = geometry_elevatedpoint_view_pamfwf.id
left join organisation.unit_pt organisation_unit_pt_uiblol on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_uiblol.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_sjyldg.*) as callsign
  from master_join master_join_mlszry
  join service.callsigndetail_view service_callsigndetail_lat_sjyldg on master_join_mlszry.target_id = service_callsigndetail_lat_sjyldg.id
  where master_join_mlszry.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_aulybu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bxukib.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bxukib.title AS varchar), '(' || service_radiocommunicationchannel_lat_bxukib.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bxukib.href
  )) as radiocommunication  from master_join master_join_snczfe
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bxukib on master_join_snczfe.target_id = service_radiocommunicationchannel_lat_bxukib.id
  where master_join_snczfe.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_igzlwt on TRUE
left join lateral(
  select
  from master_join master_join_qyupgb
  join shared.contactinformation_view shared_contactinformation_lat_gxutop on master_join_qyupgb.target_id = shared_contactinformation_lat_gxutop.id
  where master_join_qyupgb.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_exqpeb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ydeics.*) as availability
  from master_join master_join_qfufza
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ydeics on master_join_qfufza.target_id = service_serviceoperationalstatus_lat_ydeics.id
  where master_join_qfufza.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_chvwdp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cemlti.*) AS annotation
  from master_join master_join_lvcsna
  join notes.note_view notes_note_lat_cemlti on master_join_lvcsna.target_id = notes_note_lat_cemlti.id
  where master_join_lvcsna.source_id = service.informationservice_ts.id
) as notes_note_view_bkmgkj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_szuqql.id,
      'title', coalesce(cast(navaids_points_vor_lat_szuqql.title AS varchar), '(' || navaids_points_vor_lat_szuqql.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_szuqql.href
  )) as navaidbroadcast  from master_join master_join_npusrf
  join navaids_points.vor_pt navaids_points_vor_lat_szuqql on master_join_npusrf.target_id = navaids_points_vor_lat_szuqql.id
  where master_join_npusrf.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_dbijpr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_zidtxf.id,
      'title', coalesce(cast(airspace_airspace_lat_zidtxf.title AS varchar), '(' || airspace_airspace_lat_zidtxf.nilreason[1] || ')'),
      'href', airspace_airspace_lat_zidtxf.href
  )) as clientairspace  from master_join master_join_eobrmd
  join airspace.airspace_pt airspace_airspace_lat_zidtxf on master_join_eobrmd.target_id = airspace_airspace_lat_zidtxf.id
  where master_join_eobrmd.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_lpijin on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_afudek.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_afudek.title AS varchar), '(' || airport_heliport_airportheliport_lat_afudek.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_afudek.href
  )) as clientairport  from master_join master_join_nhrlao
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_afudek on master_join_nhrlao.target_id = airport_heliport_airportheliport_lat_afudek.id
  where master_join_nhrlao.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_vcgftr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_pvsbqb.*) as clientroute
  from master_join master_join_dkujih
  join routes.routeportion_view routes_routeportion_lat_pvsbqb on master_join_dkujih.target_id = routes_routeportion_lat_pvsbqb.id
  where master_join_dkujih.source_id = service.informationservice_ts.id
) as routes_routeportion_view_ctvegc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_deiunp.id,
      'title', coalesce(cast(holding_holdingpattern_lat_deiunp.title AS varchar), '(' || holding_holdingpattern_lat_deiunp.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_deiunp.href
  )) as clientholding  from master_join master_join_hkpxvr
  join holding.holdingpattern_pt holding_holdingpattern_lat_deiunp on master_join_hkpxvr.target_id = holding_holdingpattern_lat_deiunp.id
  where master_join_hkpxvr.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_drpapi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_pgzgum.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_pgzgum.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_pgzgum.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_pgzgum.href
  )) as clientaerialrefuelling  from master_join master_join_rupvea
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_pgzgum on master_join_rupvea.target_id = aerial_refuelling_aerialrefuelling_lat_pgzgum.id
  where master_join_rupvea.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_zvoguz on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.initialleg.id,
    procedure.initialleg_ts.id as ts_id,
    procedure.initialleg_tsp.id as tsp_id,
    procedure.initialleg.identifier,
    procedure.initialleg_ts.interpretation,
    procedure.initialleg_ts.sequence_number,
    procedure.initialleg_ts.correction_number,
    procedure.initialleg_ts.valid_time_begin,
    procedure.initialleg_ts.valid_time_end,
    procedure.initialleg_ts.feature_lifetime_begin,
    procedure.initialleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vokcmq.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jjpynr.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zfirrm.*) AS arccentre,
    geometry_curve_view_kjegjf.geom AS trajectory_geom,
    geometry_curve_view_kjegjf.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_yxyjdk.title as varchar), '(' || navaids_points_angleindication_pt_yxyjdk.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_yxyjdk.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_fzeykw.title as varchar), '(' || navaids_points_distanceindication_pt_fzeykw.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_fzeykw.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_zpgyan.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ppaqhg.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ppaqhg.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_ppaqhg.href AS approach_href,
    shared_aircraftcharacteristic_view_wkthze.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_ogviir.designsurface as designsurface,
    notes_note_view_wknhsi.annotation as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vokcmq on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vokcmq.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jjpynr on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_jjpynr.id
left join geometry.curve_view geometry_curve_view_kjegjf on procedure.initialleg_ts.trajectory_id = geometry_curve_view_kjegjf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zfirrm on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zfirrm.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_yxyjdk on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_yxyjdk.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_fzeykw on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_fzeykw.id
left join procedure.holdinguse_view procedure_holdinguse_view_zpgyan on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_zpgyan.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ppaqhg on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_ppaqhg.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hdzrmx.*) as aircraftcategory
  from master_join master_join_ylnlbm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_hdzrmx on master_join_ylnlbm.target_id = shared_aircraftcharacteristic_lat_hdzrmx.id
  where master_join_ylnlbm.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_wkthze on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qjitdr.*) as designsurface
  from master_join master_join_hxejod
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qjitdr on master_join_hxejod.target_id = shared_obstacleassessmentarea_lat_qjitdr.id
  where master_join_hxejod.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_ogviir on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gbzvxs.*) AS annotation
  from master_join master_join_oaurzr
  join notes.note_view notes_note_lat_gbzvxs on master_join_oaurzr.target_id = notes_note_lat_gbzvxs.id
  where master_join_oaurzr.source_id = procedure.initialleg_ts.id
) as notes_note_view_wknhsi on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.missedapproachgroup_view', 'shared.aircraftcharacteristic_view', 'procedure.finalprofile_view', 'procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'notes.note_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.instrumentapproachprocedure.id,
    procedure.instrumentapproachprocedure_ts.id as ts_id,
    procedure.instrumentapproachprocedure_tsp.id as tsp_id,
    procedure.instrumentapproachprocedure.identifier,
    procedure.instrumentapproachprocedure_ts.interpretation,
    procedure.instrumentapproachprocedure_ts.sequence_number,
    procedure.instrumentapproachprocedure_ts.correction_number,
    procedure.instrumentapproachprocedure_ts.valid_time_begin,
    procedure.instrumentapproachprocedure_ts.valid_time_end,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')') as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')') as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')') as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')') as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')') as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')') as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')') as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')') as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')') as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_lzpkff.title as varchar), '(' || navaids_points_navaid_pt_lzpkff.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_lzpkff.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_waecjl.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_waecjl.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_waecjl.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_nidbpe.title as varchar), '(' || surveillance_radarsystem_pt_nidbpe.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_nidbpe.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_evbwvm.title as varchar), '(' || procedure_safealtitudearea_pt_evbwvm.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_evbwvm.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_rcggqj.*) AS landing,
    to_jsonb(procedure_finalprofile_view_cylhug.*) AS finalprofile,
    procedure_procedureavailability_view_xekkzj.availability as availability,
    airport_heliport_airportheliport_pt_omvcxn.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_khcrwm.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_avidnh.flighttransition as flighttransition,
    notes_note_view_hplkqd.annotation as annotation,
    procedure_missedapproachgroup_view_vaagsk.missedinstruction as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lzpkff on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_lzpkff.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_waecjl on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_waecjl.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_nidbpe on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_nidbpe.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_evbwvm on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_evbwvm.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_rcggqj on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_rcggqj.id
left join procedure.finalprofile_view procedure_finalprofile_view_cylhug on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_cylhug.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_xhqpeo.*) as availability
  from master_join master_join_qmdlzc
  join procedure.procedureavailability_view procedure_procedureavailability_lat_xhqpeo on master_join_qmdlzc.target_id = procedure_procedureavailability_lat_xhqpeo.id
  where master_join_qmdlzc.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_xekkzj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_vazizj.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_vazizj.title AS varchar), '(' || airport_heliport_airportheliport_lat_vazizj.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_vazizj.href
  )) as airportheliport  from master_join master_join_xnadzx
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_vazizj on master_join_xnadzx.target_id = airport_heliport_airportheliport_lat_vazizj.id
  where master_join_xnadzx.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_omvcxn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vgeety.*) as aircraftcharacteristic
  from master_join master_join_xwxppm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_vgeety on master_join_xwxppm.target_id = shared_aircraftcharacteristic_lat_vgeety.id
  where master_join_xwxppm.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_khcrwm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_tvhwtt.*) as flighttransition
  from master_join master_join_mgyedx
  join procedure.proceduretransition_view procedure_proceduretransition_lat_tvhwtt on master_join_mgyedx.target_id = procedure_proceduretransition_lat_tvhwtt.id
  where master_join_mgyedx.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_avidnh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pcgzhx.*) AS annotation
  from master_join master_join_flrmff
  join notes.note_view notes_note_lat_pcgzhx on master_join_flrmff.target_id = notes_note_lat_pcgzhx.id
  where master_join_flrmff.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_hplkqd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_dnyxop.*) as missedinstruction
  from master_join master_join_bldyka
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_dnyxop on master_join_bldyka.target_id = procedure_missedapproachgroup_lat_dnyxop.id
  where master_join_bldyka.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_vaagsk on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.intermediateleg.id,
    procedure.intermediateleg_ts.id as ts_id,
    procedure.intermediateleg_tsp.id as tsp_id,
    procedure.intermediateleg.identifier,
    procedure.intermediateleg_ts.interpretation,
    procedure.intermediateleg_ts.sequence_number,
    procedure.intermediateleg_ts.correction_number,
    procedure.intermediateleg_ts.valid_time_begin,
    procedure.intermediateleg_ts.valid_time_end,
    procedure.intermediateleg_ts.feature_lifetime_begin,
    procedure.intermediateleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ufwzcu.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_iuzggc.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_svakqx.*) AS arccentre,
    geometry_curve_view_cacfcc.geom AS trajectory_geom,
    geometry_curve_view_cacfcc.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_cwvxvp.title as varchar), '(' || navaids_points_angleindication_pt_cwvxvp.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_cwvxvp.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_qxdcjf.title as varchar), '(' || navaids_points_distanceindication_pt_qxdcjf.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_qxdcjf.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_mevhce.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_knfruz.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_knfruz.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_knfruz.href AS approach_href,
    shared_aircraftcharacteristic_view_ohbqfd.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_gfqrzi.designsurface as designsurface,
    notes_note_view_rvxbjl.annotation as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ufwzcu on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_ufwzcu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_iuzggc on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_iuzggc.id
left join geometry.curve_view geometry_curve_view_cacfcc on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_cacfcc.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_svakqx on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_svakqx.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_cwvxvp on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_cwvxvp.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_qxdcjf on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_qxdcjf.id
left join procedure.holdinguse_view procedure_holdinguse_view_mevhce on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_mevhce.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_knfruz on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_knfruz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_nzilon.*) as aircraftcategory
  from master_join master_join_tchrqy
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_nzilon on master_join_tchrqy.target_id = shared_aircraftcharacteristic_lat_nzilon.id
  where master_join_tchrqy.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_ohbqfd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_begexl.*) as designsurface
  from master_join master_join_bpsinc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_begexl on master_join_bpsinc.target_id = shared_obstacleassessmentarea_lat_begexl.id
  where master_join_bpsinc.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_gfqrzi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpugxi.*) AS annotation
  from master_join master_join_jioohf
  join notes.note_view notes_note_lat_wpugxi on master_join_jioohf.target_id = notes_note_lat_wpugxi.id
  where master_join_jioohf.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_rvxbjl on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.localizer.id,
    navaids_points.localizer_ts.id as ts_id,
    navaids_points.localizer_tsp.id as tsp_id,
    navaids_points.localizer.identifier,
    navaids_points.localizer_ts.interpretation,
    navaids_points.localizer_ts.sequence_number,
    navaids_points.localizer_ts.correction_number,
    navaids_points.localizer_ts.valid_time_begin,
    navaids_points.localizer_ts.valid_time_end,
    navaids_points.localizer_ts.feature_lifetime_begin,
    navaids_points.localizer_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')') as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')') as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')') as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')') as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_kjvzjb.geom AS location_geom,
    geometry_elevatedpoint_view_kjvzjb.longitude AS location_longitude,
    geometry_elevatedpoint_view_kjvzjb.latitude AS location_latitude,
    geometry_elevatedpoint_view_kjvzjb.elevation AS location_elevation,
    geometry_elevatedpoint_view_kjvzjb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kjvzjb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kjvzjb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kjvzjb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_iqtpqt.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_kpvsvh.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_crisqa.availability as availability,
    notes_note_view_uucydq.annotation as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kjvzjb on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_kjvzjb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_iirjre.*) as authority
  from master_join master_join_papcbd
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_iirjre on master_join_papcbd.target_id = navaids_points_authorityfornavaidequipment_lat_iirjre.id
  where master_join_papcbd.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_iqtpqt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zhjlpq.*) as monitoring
  from master_join master_join_phzcqp
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zhjlpq on master_join_phzcqp.target_id = navaids_points_navaidequipmentmonitoring_lat_zhjlpq.id
  where master_join_phzcqp.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_kpvsvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fqmyyq.*) as availability
  from master_join master_join_majcis
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fqmyyq on master_join_majcis.target_id = navaids_points_navaidoperationalstatus_lat_fqmyyq.id
  where master_join_majcis.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_crisqa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_euqlrl.*) AS annotation
  from master_join master_join_bhnaiy
  join notes.note_view notes_note_lat_euqlrl on master_join_bhnaiy.target_id = notes_note_lat_euqlrl.id
  where master_join_bhnaiy.source_id = navaids_points.localizer_ts.id
) as notes_note_view_uucydq on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.markerbeacon.id,
    navaids_points.markerbeacon_ts.id as ts_id,
    navaids_points.markerbeacon_tsp.id as tsp_id,
    navaids_points.markerbeacon.identifier,
    navaids_points.markerbeacon_ts.interpretation,
    navaids_points.markerbeacon_ts.sequence_number,
    navaids_points.markerbeacon_ts.correction_number,
    navaids_points.markerbeacon_ts.valid_time_begin,
    navaids_points.markerbeacon_ts.valid_time_end,
    navaids_points.markerbeacon_ts.feature_lifetime_begin,
    navaids_points.markerbeacon_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')') as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')') as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_zbqxab.geom AS location_geom,
    geometry_elevatedpoint_view_zbqxab.longitude AS location_longitude,
    geometry_elevatedpoint_view_zbqxab.latitude AS location_latitude,
    geometry_elevatedpoint_view_zbqxab.elevation AS location_elevation,
    geometry_elevatedpoint_view_zbqxab.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zbqxab.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zbqxab.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zbqxab.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ppeker.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_rumdzo.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_zuxgdw.availability as availability,
    notes_note_view_jtgnts.annotation as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zbqxab on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_zbqxab.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_rzokzs.*) as authority
  from master_join master_join_uqmwyn
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_rzokzs on master_join_uqmwyn.target_id = navaids_points_authorityfornavaidequipment_lat_rzokzs.id
  where master_join_uqmwyn.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_ppeker on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_joeupf.*) as monitoring
  from master_join master_join_gchyrh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_joeupf on master_join_gchyrh.target_id = navaids_points_navaidequipmentmonitoring_lat_joeupf.id
  where master_join_gchyrh.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_rumdzo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ffxpyy.*) as availability
  from master_join master_join_abrgfj
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ffxpyy on master_join_abrgfj.target_id = navaids_points_navaidoperationalstatus_lat_ffxpyy.id
  where master_join_abrgfj.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_zuxgdw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rgsnmx.*) AS annotation
  from master_join master_join_xabysu
  join notes.note_view notes_note_lat_rgsnmx on master_join_xabysu.target_id = notes_note_lat_rgsnmx.id
  where master_join_xabysu.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_jtgnts on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.markingbuoy.id,
    airport_heliport.markingbuoy_ts.id as ts_id,
    airport_heliport.markingbuoy_tsp.id as tsp_id,
    airport_heliport.markingbuoy.identifier,
    airport_heliport.markingbuoy_ts.interpretation,
    airport_heliport.markingbuoy_ts.sequence_number,
    airport_heliport.markingbuoy_ts.correction_number,
    airport_heliport.markingbuoy_ts.valid_time_begin,
    airport_heliport.markingbuoy_ts.valid_time_end,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin,
    airport_heliport.markingbuoy_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_oulcpn.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_oulcpn.nilreason[1] || ')') AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_oulcpn.href AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_mpvjzq.geom AS location_geom,
    geometry_elevatedpoint_view_mpvjzq.longitude AS location_longitude,
    geometry_elevatedpoint_view_mpvjzq.latitude AS location_latitude,
    geometry_elevatedpoint_view_mpvjzq.elevation AS location_elevation,
    geometry_elevatedpoint_view_mpvjzq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mpvjzq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mpvjzq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mpvjzq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_wcqppg.annotation as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_oulcpn on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_oulcpn.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mpvjzq on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_mpvjzq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sngzde.*) AS annotation
  from master_join master_join_tttepw
  join notes.note_view notes_note_lat_sngzde on master_join_tttepw.target_id = notes_note_lat_sngzde.id
  where master_join_tttepw.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_wcqppg on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['procedure.holdinguse_view', 'procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.missedapproachleg.id,
    procedure.missedapproachleg_ts.id as ts_id,
    procedure.missedapproachleg_tsp.id as tsp_id,
    procedure.missedapproachleg.identifier,
    procedure.missedapproachleg_ts.interpretation,
    procedure.missedapproachleg_ts.sequence_number,
    procedure.missedapproachleg_ts.correction_number,
    procedure.missedapproachleg_ts.valid_time_begin,
    procedure.missedapproachleg_ts.valid_time_end,
    procedure.missedapproachleg_ts.feature_lifetime_begin,
    procedure.missedapproachleg_ts.feature_lifetime_end,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')') as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')') as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')') as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')') as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')') as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')') as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')') as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')') as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')') as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')') as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')') as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')') as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')') as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')') as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')') as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')') as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')') as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')') as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')') as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')') as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')') as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')') as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jylffe.*) AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xeccjx.*) AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bahbsk.*) AS arccentre,
    geometry_curve_view_ibahia.geom AS trajectory_geom,
    geometry_curve_view_ibahia.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ddrtiq.title as varchar), '(' || navaids_points_angleindication_pt_ddrtiq.nilreason[1] || ')') AS angle,
    navaids_points_angleindication_pt_ddrtiq.href AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_wzlyxs.title as varchar), '(' || navaids_points_distanceindication_pt_wzlyxs.nilreason[1] || ')') AS distance,
    navaids_points_distanceindication_pt_wzlyxs.href AS distance_href,
    to_jsonb(procedure_holdinguse_view_wlpnuu.*) AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_gbqrni.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_gbqrni.nilreason[1] || ')') AS approach,
    procedure_instrumentapproachprocedure_pt_gbqrni.href AS approach_href,
    shared_aircraftcharacteristic_view_nqjubw.aircraftcategory as aircraftcategory,
    shared_obstacleassessmentarea_view_hpqqvo.designsurface as designsurface,
    notes_note_view_qjpulf.annotation as annotation,
    procedure_approachcondition_view_hgoqql.condition as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jylffe on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_jylffe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xeccjx on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_xeccjx.id
left join geometry.curve_view geometry_curve_view_ibahia on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_ibahia.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bahbsk on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_bahbsk.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ddrtiq on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_ddrtiq.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_wzlyxs on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_wzlyxs.id
left join procedure.holdinguse_view procedure_holdinguse_view_wlpnuu on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_wlpnuu.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_gbqrni on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_gbqrni.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_yvfbpl.*) as aircraftcategory
  from master_join master_join_egedps
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_yvfbpl on master_join_egedps.target_id = shared_aircraftcharacteristic_lat_yvfbpl.id
  where master_join_egedps.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_nqjubw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ehzjoc.*) as designsurface
  from master_join master_join_dotcfy
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ehzjoc on master_join_dotcfy.target_id = shared_obstacleassessmentarea_lat_ehzjoc.id
  where master_join_dotcfy.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_hpqqvo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wzqjhb.*) AS annotation
  from master_join master_join_hjwcxe
  join notes.note_view notes_note_lat_wzqjhb on master_join_hjwcxe.target_id = notes_note_lat_wzqjhb.id
  where master_join_hjwcxe.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_qjpulf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_phcbkg.*) as condition
  from master_join master_join_shtwny
  join procedure.approachcondition_view procedure_approachcondition_lat_phcbkg on master_join_shtwny.target_id = procedure_approachcondition_lat_phcbkg.id
  where master_join_shtwny.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_hgoqql on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view', 'navaids_points.navaidcomponent_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.navaid.id,
    navaids_points.navaid_ts.id as ts_id,
    navaids_points.navaid_tsp.id as tsp_id,
    navaids_points.navaid.identifier,
    navaids_points.navaid_ts.interpretation,
    navaids_points.navaid_ts.sequence_number,
    navaids_points.navaid_ts.correction_number,
    navaids_points.navaid_ts.valid_time_begin,
    navaids_points.navaid_ts.valid_time_end,
    navaids_points.navaid_ts.feature_lifetime_begin,
    navaids_points.navaid_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')') as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')') as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')') as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')') as integritylevel,
    geometry_elevatedpoint_view_aptpju.geom AS location_geom,
    geometry_elevatedpoint_view_aptpju.longitude AS location_longitude,
    geometry_elevatedpoint_view_aptpju.latitude AS location_latitude,
    geometry_elevatedpoint_view_aptpju.elevation AS location_elevation,
    geometry_elevatedpoint_view_aptpju.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aptpju.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aptpju.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aptpju.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_mmtsbe.touchdownliftoff as touchdownliftoff,
    navaids_points_navaidcomponent_view_zqghpr.navaidequipment as navaidequipment,
    airport_heliport_runwaydirection_pt_tdxekm.runwaydirection as runwaydirection,
    airport_heliport_airportheliport_pt_btxoev.servedairport as servedairport,
    navaids_points_navaidoperationalstatus_view_uicppp.availability as availability,
    notes_note_view_zkzhbr.annotation as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aptpju on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_aptpju.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_vibmgt.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_vibmgt.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_vibmgt.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_vibmgt.href
  )) as touchdownliftoff  from master_join master_join_moihpv
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_vibmgt on master_join_moihpv.target_id = airport_heliport_touchdownliftoff_lat_vibmgt.id
  where master_join_moihpv.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_mmtsbe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_gigdlr.*) as navaidequipment
  from master_join master_join_mhdxcl
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_gigdlr on master_join_mhdxcl.target_id = navaids_points_navaidcomponent_lat_gigdlr.id
  where master_join_mhdxcl.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_zqghpr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_elnrgc.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_elnrgc.title AS varchar), '(' || airport_heliport_runwaydirection_lat_elnrgc.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_elnrgc.href
  )) as runwaydirection  from master_join master_join_pkioxi
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_elnrgc on master_join_pkioxi.target_id = airport_heliport_runwaydirection_lat_elnrgc.id
  where master_join_pkioxi.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_tdxekm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lhlnkd.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lhlnkd.title AS varchar), '(' || airport_heliport_airportheliport_lat_lhlnkd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lhlnkd.href
  )) as servedairport  from master_join master_join_ssxkjd
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lhlnkd on master_join_ssxkjd.target_id = airport_heliport_airportheliport_lat_lhlnkd.id
  where master_join_ssxkjd.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_btxoev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_raiija.*) as availability
  from master_join master_join_ypltzq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_raiija on master_join_ypltzq.target_id = navaids_points_navaidoperationalstatus_lat_raiija.id
  where master_join_ypltzq.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_uicppp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cqrldi.*) AS annotation
  from master_join master_join_vsuawa
  join notes.note_view notes_note_lat_cqrldi on master_join_vsuawa.target_id = notes_note_lat_cqrldi.id
  where master_join_vsuawa.source_id = navaids_points.navaid_ts.id
) as notes_note_view_zkzhbr on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarearestriction.id,
    procedure.navigationarearestriction_ts.id as ts_id,
    procedure.navigationarearestriction_tsp.id as tsp_id,
    procedure.navigationarearestriction.identifier,
    procedure.navigationarearestriction_ts.interpretation,
    procedure.navigationarearestriction_ts.sequence_number,
    procedure.navigationarearestriction_ts.correction_number,
    procedure.navigationarearestriction_ts.valid_time_begin,
    procedure.navigationarearestriction_ts.valid_time_end,
    procedure.navigationarearestriction_ts.feature_lifetime_begin,
    procedure.navigationarearestriction_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')') as type,
    to_jsonb(shared_obstacleassessmentarea_view_afumwm.*) AS designsurface,
    to_jsonb(shared_circlesector_view_pupqhd.*) AS sectordefinition,
    notes_note_view_sufxza.annotation as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_afumwm on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_afumwm.id
left join shared.circlesector_view shared_circlesector_view_pupqhd on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_pupqhd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrzijt.*) AS annotation
  from master_join master_join_zigkxh
  join notes.note_view notes_note_lat_yrzijt on master_join_zigkxh.target_id = notes_note_lat_yrzijt.id
  where master_join_zigkxh.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_sufxza on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['procedure.navigationareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.navigationarea.id,
    procedure.navigationarea_ts.id as ts_id,
    procedure.navigationarea_tsp.id as tsp_id,
    procedure.navigationarea.identifier,
    procedure.navigationarea_ts.interpretation,
    procedure.navigationarea_ts.sequence_number,
    procedure.navigationarea_ts.correction_number,
    procedure.navigationarea_ts.valid_time_begin,
    procedure.navigationarea_ts.valid_time_end,
    procedure.navigationarea_ts.feature_lifetime_begin,
    procedure.navigationarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')') as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')') as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')') as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_yzkset.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_yzkset.nilreason[1] || ')') AS departure,
    procedure_standardinstrumentdeparture_pt_yzkset.href AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_izxzgi.title as varchar), '(' || navaids_points_designatedpoint_pt_izxzgi.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_izxzgi.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vjcuka.title as varchar), '(' || navaids_points_navaid_pt_vjcuka.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_vjcuka.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hrewoi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hrewoi.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_hrewoi.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_tmkwpb.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_tmkwpb.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_tmkwpb.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_eebkjk.title as varchar), '(' || airport_heliport_airportheliport_pt_eebkjk.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_eebkjk.href AS centrepointairportreferencepoint_href,
    geometry_point_view_hniryp.geom AS centrepointposition_geom,
    geometry_point_view_hniryp.longitude AS centrepointposition_longitude,
    geometry_point_view_hniryp.latitude AS centrepointposition_latitude,
    geometry_point_view_hniryp.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_icqigi.sector as sector,
    notes_note_view_vermln.annotation as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_yzkset on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_yzkset.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_izxzgi on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_izxzgi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vjcuka on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_vjcuka.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hrewoi on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hrewoi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_tmkwpb on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_tmkwpb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eebkjk on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_eebkjk.id
left join geometry.point_view geometry_point_view_hniryp on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_hniryp.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_ovkuhe.*) as sector
  from master_join master_join_itrwtq
  join procedure.navigationareasector_view procedure_navigationareasector_lat_ovkuhe on master_join_itrwtq.target_id = procedure_navigationareasector_lat_ovkuhe.id
  where master_join_itrwtq.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_icqigi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mzblop.*) AS annotation
  from master_join master_join_rocfuq
  join notes.note_view notes_note_lat_mzblop on master_join_rocfuq.target_id = notes_note_lat_mzblop.id
  where master_join_rocfuq.source_id = procedure.navigationarea_ts.id
) as notes_note_view_vermln on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.ndb.id,
    navaids_points.ndb_ts.id as ts_id,
    navaids_points.ndb_tsp.id as tsp_id,
    navaids_points.ndb.identifier,
    navaids_points.ndb_ts.interpretation,
    navaids_points.ndb_ts.sequence_number,
    navaids_points.ndb_ts.correction_number,
    navaids_points.ndb_ts.valid_time_begin,
    navaids_points.ndb_ts.valid_time_end,
    navaids_points.ndb_ts.feature_lifetime_begin,
    navaids_points.ndb_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')') as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')') as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_tsnkfm.geom AS location_geom,
    geometry_elevatedpoint_view_tsnkfm.longitude AS location_longitude,
    geometry_elevatedpoint_view_tsnkfm.latitude AS location_latitude,
    geometry_elevatedpoint_view_tsnkfm.elevation AS location_elevation,
    geometry_elevatedpoint_view_tsnkfm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tsnkfm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tsnkfm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tsnkfm.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_sfkggk.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_xxmzcm.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_jtfeae.availability as availability,
    notes_note_view_ppjsgx.annotation as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tsnkfm on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_tsnkfm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_txqzba.*) as authority
  from master_join master_join_uqfnxy
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_txqzba on master_join_uqfnxy.target_id = navaids_points_authorityfornavaidequipment_lat_txqzba.id
  where master_join_uqfnxy.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_sfkggk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_bpdpti.*) as monitoring
  from master_join master_join_kpxcsu
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_bpdpti on master_join_kpxcsu.target_id = navaids_points_navaidequipmentmonitoring_lat_bpdpti.id
  where master_join_kpxcsu.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xxmzcm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_jlpdil.*) as availability
  from master_join master_join_flxjmp
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_jlpdil on master_join_flxjmp.target_id = navaids_points_navaidoperationalstatus_lat_jlpdil.id
  where master_join_flxjmp.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_jtfeae on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjixij.*) AS annotation
  from master_join master_join_nafusj
  join notes.note_view notes_note_lat_bjixij on master_join_nafusj.target_id = notes_note_lat_bjixij.id
  where master_join_nafusj.source_id = navaids_points.ndb_ts.id
) as notes_note_view_ppjsgx on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.nonmovementarea.id,
    airport_heliport.nonmovementarea_ts.id as ts_id,
    airport_heliport.nonmovementarea_tsp.id as tsp_id,
    airport_heliport.nonmovementarea.identifier,
    airport_heliport.nonmovementarea_ts.interpretation,
    airport_heliport.nonmovementarea_ts.sequence_number,
    airport_heliport.nonmovementarea_ts.correction_number,
    airport_heliport.nonmovementarea_ts.valid_time_begin,
    airport_heliport.nonmovementarea_ts.valid_time_end,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport_airportheliport_pt_oevmfp.title as varchar), '(' || airport_heliport_airportheliport_pt_oevmfp.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_oevmfp.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_bwxmhd.geom AS extent_geom,
    geometry_elevatedsurface_view_bwxmhd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_bwxmhd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_bwxmhd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_bwxmhd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_bwxmhd.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_zvdvln.annotation as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oevmfp on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_oevmfp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bwxmhd on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_bwxmhd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_euqyhz.*) AS annotation
  from master_join master_join_psdcbe
  join notes.note_view notes_note_lat_euqyhz on master_join_psdcbe.target_id = notes_note_lat_euqyhz.id
  where master_join_psdcbe.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_zvdvln on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.obstaclearea.id,
    obstacles.obstaclearea_ts.id as ts_id,
    obstacles.obstaclearea_tsp.id as tsp_id,
    obstacles.obstaclearea.identifier,
    obstacles.obstaclearea_ts.interpretation,
    obstacles.obstaclearea_ts.sequence_number,
    obstacles.obstaclearea_ts.correction_number,
    obstacles.obstaclearea_ts.valid_time_begin,
    obstacles.obstaclearea_ts.valid_time_end,
    obstacles.obstaclearea_ts.feature_lifetime_begin,
    obstacles.obstaclearea_ts.feature_lifetime_end,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')') as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_igkeej.title as varchar), '(' || airport_heliport_airportheliport_pt_igkeej.nilreason[1] || ')') AS referenceownerairport,
    airport_heliport_airportheliport_pt_igkeej.href AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_hpdlul.title as varchar), '(' || airport_heliport_runwaydirection_pt_hpdlul.nilreason[1] || ')') AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_hpdlul.href AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_gwwjjq.title as varchar), '(' || organisation_organisationauthority_pt_gwwjjq.nilreason[1] || ')') AS referenceownerorganisation,
    organisation_organisationauthority_pt_gwwjjq.href AS referenceownerorganisation_href,
    geometry_surface_view_nuyowm.geom AS surfaceextent_geom,
    geometry_surface_view_nuyowm.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_zhcmsm.obstacle as obstacle,
    notes_note_view_vgjklo.annotation as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_igkeej on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_igkeej.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_hpdlul on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_hpdlul.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gwwjjq on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_gwwjjq.id
left join geometry.surface_view geometry_surface_view_nuyowm on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_nuyowm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_nzhhdb.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_nzhhdb.title AS varchar), '(' || obstacles_verticalstructure_lat_nzhhdb.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_nzhhdb.href
  )) as obstacle  from master_join master_join_ikixpy
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_nzhhdb on master_join_ikixpy.target_id = obstacles_verticalstructure_lat_nzhhdb.id
  where master_join_ikixpy.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_zhcmsm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvliom.*) AS annotation
  from master_join master_join_aegtfg
  join notes.note_view notes_note_lat_bvliom on master_join_aegtfg.target_id = notes_note_lat_bvliom.id
  where master_join_aegtfg.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_vgjklo on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['notes.note_view', 'shared.contactinformation_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.organisationauthority.id,
    organisation.organisationauthority_ts.id as ts_id,
    organisation.organisationauthority_tsp.id as tsp_id,
    organisation.organisationauthority.identifier,
    organisation.organisationauthority_ts.interpretation,
    organisation.organisationauthority_ts.sequence_number,
    organisation.organisationauthority_ts.correction_number,
    organisation.organisationauthority_ts.valid_time_begin,
    organisation.organisationauthority_ts.valid_time_end,
    organisation.organisationauthority_ts.feature_lifetime_begin,
    organisation.organisationauthority_ts.feature_lifetime_end,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')') as military,
    organisation_organisationauthorityassociation_view_xutxxb.relatedorganisationauthority as relatedorganisationauthority,
    notes_note_view_xjbkqs.annotation as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_qlgydu
  join shared.contactinformation_view shared_contactinformation_lat_yewhgj on master_join_qlgydu.target_id = shared_contactinformation_lat_yewhgj.id
  where master_join_qlgydu.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_dvxgfn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_pyzwdw.*) as relatedorganisationauthority
  from master_join master_join_vziyaa
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_pyzwdw on master_join_vziyaa.target_id = organisation_organisationauthorityassociation_lat_pyzwdw.id
  where master_join_vziyaa.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_xutxxb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zszmmw.*) AS annotation
  from master_join master_join_yxtanj
  join notes.note_view notes_note_lat_zszmmw on master_join_yxtanj.target_id = notes_note_lat_zszmmw.id
  where master_join_yxtanj.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_xjbkqs on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.passengerloadingbridge.id,
    airport_heliport.passengerloadingbridge_ts.id as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id as tsp_id,
    airport_heliport.passengerloadingbridge.identifier,
    airport_heliport.passengerloadingbridge_ts.interpretation,
    airport_heliport.passengerloadingbridge_ts.sequence_number,
    airport_heliport.passengerloadingbridge_ts.correction_number,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin,
    airport_heliport.passengerloadingbridge_ts.valid_time_end,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')') as type,
    geometry_elevatedsurface_view_gmgaif.geom AS extent_geom,
    geometry_elevatedsurface_view_gmgaif.elevation AS extent_elevation,
    geometry_elevatedsurface_view_gmgaif.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_gmgaif.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_gmgaif.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_gmgaif.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_vmwsqz.associatedstand as associatedstand,
    notes_note_view_boxthm.annotation as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gmgaif on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_gmgaif.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_yocqhb.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_yocqhb.title AS varchar), '(' || airport_heliport_aircraftstand_lat_yocqhb.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_yocqhb.href
  )) as associatedstand  from master_join master_join_hrefbb
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_yocqhb on master_join_hrefbb.target_id = airport_heliport_aircraftstand_lat_yocqhb.id
  where master_join_hrefbb.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_vmwsqz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pukizi.*) AS annotation
  from master_join master_join_uhpeae
  join notes.note_view notes_note_lat_pukizi on master_join_uhpeae.target_id = notes_note_lat_pukizi.id
  where master_join_uhpeae.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_boxthm on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.passengerservice.id,
    service.passengerservice_ts.id as ts_id,
    service.passengerservice_tsp.id as tsp_id,
    service.passengerservice.identifier,
    service.passengerservice_ts.interpretation,
    service.passengerservice_ts.sequence_number,
    service.passengerservice_ts.correction_number,
    service.passengerservice_ts.valid_time_begin,
    service.passengerservice_ts.valid_time_end,
    service.passengerservice_ts.feature_lifetime_begin,
    service.passengerservice_ts.feature_lifetime_end,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_frmoyt.geom AS location_geom,
    geometry_elevatedpoint_view_frmoyt.longitude AS location_longitude,
    geometry_elevatedpoint_view_frmoyt.latitude AS location_latitude,
    geometry_elevatedpoint_view_frmoyt.elevation AS location_elevation,
    geometry_elevatedpoint_view_frmoyt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_frmoyt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_frmoyt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_frmoyt.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_exblbl.title as varchar), '(' || organisation_unit_pt_exblbl.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_exblbl.href AS serviceprovider_href,
    service_callsigndetail_view_xzxrjj.callsign as callsign,
    service_radiocommunicationchannel_pt_vebfga.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_sghzne.availability as availability,
    notes_note_view_eychmu.annotation as annotation,
    airport_heliport_airportheliport_pt_vpgzft.airportheliport as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_frmoyt on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_frmoyt.id
left join organisation.unit_pt organisation_unit_pt_exblbl on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_exblbl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_rkcowd.*) as callsign
  from master_join master_join_siqgfq
  join service.callsigndetail_view service_callsigndetail_lat_rkcowd on master_join_siqgfq.target_id = service_callsigndetail_lat_rkcowd.id
  where master_join_siqgfq.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_xzxrjj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_saoeje.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_saoeje.title AS varchar), '(' || service_radiocommunicationchannel_lat_saoeje.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_saoeje.href
  )) as radiocommunication  from master_join master_join_tsilfs
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_saoeje on master_join_tsilfs.target_id = service_radiocommunicationchannel_lat_saoeje.id
  where master_join_tsilfs.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_vebfga on TRUE
left join lateral(
  select
  from master_join master_join_fwezhi
  join shared.contactinformation_view shared_contactinformation_lat_xqbkpv on master_join_fwezhi.target_id = shared_contactinformation_lat_xqbkpv.id
  where master_join_fwezhi.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_xwqosx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jggpwl.*) as availability
  from master_join master_join_smshve
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_jggpwl on master_join_smshve.target_id = service_serviceoperationalstatus_lat_jggpwl.id
  where master_join_smshve.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_sghzne on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jywdxu.*) AS annotation
  from master_join master_join_mzqkbp
  join notes.note_view notes_note_lat_jywdxu on master_join_mzqkbp.target_id = notes_note_lat_jywdxu.id
  where master_join_mzqkbp.source_id = service.passengerservice_ts.id
) as notes_note_view_eychmu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wqvsur.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wqvsur.title AS varchar), '(' || airport_heliport_airportheliport_lat_wqvsur.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wqvsur.href
  )) as airportheliport  from master_join master_join_ejviou
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wqvsur on master_join_ejviou.target_id = airport_heliport_airportheliport_lat_wqvsur.id
  where master_join_ejviou.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_vpgzft on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['notes.note_view', 'airport_heliport.lightactivation_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.pilotcontrolledlighting.id,
    service.pilotcontrolledlighting_ts.id as ts_id,
    service.pilotcontrolledlighting_tsp.id as tsp_id,
    service.pilotcontrolledlighting.identifier,
    service.pilotcontrolledlighting_ts.interpretation,
    service.pilotcontrolledlighting_ts.sequence_number,
    service.pilotcontrolledlighting_ts.correction_number,
    service.pilotcontrolledlighting_ts.valid_time_begin,
    service.pilotcontrolledlighting_ts.valid_time_end,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin,
    service.pilotcontrolledlighting_ts.feature_lifetime_end,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')') as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')') as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')') as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')') as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')') as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')') as radiofrequency,
    airport_heliport_lightactivation_view_ornqis.controlledlightintensity as controlledlightintensity,
    notes_note_view_ukzvmy.annotation as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_jrbasj.*) as controlledlightintensity
  from master_join master_join_agpsyi
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_jrbasj on master_join_agpsyi.target_id = airport_heliport_lightactivation_lat_jrbasj.id
  where master_join_agpsyi.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_ornqis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ohlsum.*) AS annotation
  from master_join master_join_zodnyc
  join notes.note_view notes_note_lat_ohlsum on master_join_zodnyc.target_id = notes_note_lat_ohlsum.id
  where master_join_zodnyc.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_ukzvmy on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.reflector_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.precisionapproachradar.id,
    surveillance.precisionapproachradar_ts.id as ts_id,
    surveillance.precisionapproachradar_tsp.id as tsp_id,
    surveillance.precisionapproachradar.identifier,
    surveillance.precisionapproachradar_ts.interpretation,
    surveillance.precisionapproachradar_ts.sequence_number,
    surveillance.precisionapproachradar_ts.correction_number,
    surveillance.precisionapproachradar_ts.valid_time_begin,
    surveillance.precisionapproachradar_ts.valid_time_end,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin,
    surveillance.precisionapproachradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')') as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')') as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')') as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    geometry_elevatedpoint_view_acjymu.geom AS location_geom,
    geometry_elevatedpoint_view_acjymu.longitude AS location_longitude,
    geometry_elevatedpoint_view_acjymu.latitude AS location_latitude,
    geometry_elevatedpoint_view_acjymu.elevation AS location_elevation,
    geometry_elevatedpoint_view_acjymu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_acjymu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_acjymu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_acjymu.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_bcqtap.annotation as annotation,
    surveillance_reflector_view_rhohec.reflector as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_acjymu on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_acjymu.id
left join lateral(
  select
  from master_join master_join_fxdumd
  join shared.contactinformation_view shared_contactinformation_lat_eybpqg on master_join_fxdumd.target_id = shared_contactinformation_lat_eybpqg.id
  where master_join_fxdumd.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_trucln on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kyhtfk.*) AS annotation
  from master_join master_join_mfmykq
  join notes.note_view notes_note_lat_kyhtfk on master_join_mfmykq.target_id = notes_note_lat_kyhtfk.id
  where master_join_mfmykq.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_bcqtap on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_vfxcnx.*) as reflector
  from master_join master_join_ennrpw
  join surveillance.reflector_view surveillance_reflector_lat_vfxcnx on master_join_ennrpw.target_id = surveillance_reflector_lat_vfxcnx.id
  where master_join_ennrpw.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_rhohec on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.primarysurveillanceradar.id,
    surveillance.primarysurveillanceradar_ts.id as ts_id,
    surveillance.primarysurveillanceradar_tsp.id as tsp_id,
    surveillance.primarysurveillanceradar.identifier,
    surveillance.primarysurveillanceradar_ts.interpretation,
    surveillance.primarysurveillanceradar_ts.sequence_number,
    surveillance.primarysurveillanceradar_ts.correction_number,
    surveillance.primarysurveillanceradar_ts.valid_time_begin,
    surveillance.primarysurveillanceradar_ts.valid_time_end,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_yuyekn.geom AS location_geom,
    geometry_elevatedpoint_view_yuyekn.longitude AS location_longitude,
    geometry_elevatedpoint_view_yuyekn.latitude AS location_latitude,
    geometry_elevatedpoint_view_yuyekn.elevation AS location_elevation,
    geometry_elevatedpoint_view_yuyekn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yuyekn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yuyekn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yuyekn.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_vlmdlf.annotation as annotation,
    surveillance_surveillancegroundstation_view_zjswkc.groundstation as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yuyekn on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_yuyekn.id
left join lateral(
  select
  from master_join master_join_guaqai
  join shared.contactinformation_view shared_contactinformation_lat_cmeouc on master_join_guaqai.target_id = shared_contactinformation_lat_cmeouc.id
  where master_join_guaqai.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_gedbbi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ibzykk.*) AS annotation
  from master_join master_join_gcnyrm
  join notes.note_view notes_note_lat_ibzykk on master_join_gcnyrm.target_id = notes_note_lat_ibzykk.id
  where master_join_gcnyrm.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_vlmdlf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_pgtdwp.*) as groundstation
  from master_join master_join_cwiart
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_pgtdwp on master_join_cwiart.target_id = surveillance_surveillancegroundstation_lat_pgtdwp.id
  where master_join_cwiart.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_zjswkc on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.proceduredme.id,
    procedure.proceduredme_ts.id as ts_id,
    procedure.proceduredme_tsp.id as tsp_id,
    procedure.proceduredme.identifier,
    procedure.proceduredme_ts.interpretation,
    procedure.proceduredme_ts.sequence_number,
    procedure.proceduredme_ts.correction_number,
    procedure.proceduredme_ts.valid_time_begin,
    procedure.proceduredme_ts.valid_time_end,
    procedure.proceduredme_ts.feature_lifetime_begin,
    procedure.proceduredme_ts.feature_lifetime_end,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_jhzggc.title as varchar), '(' || navaids_points_dme_pt_jhzggc.nilreason[1] || ')') AS dme,
    navaids_points_dme_pt_jhzggc.href AS dme_href,
    notes_note_view_gfwwze.annotation as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_jhzggc on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_jhzggc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oyfjte.*) AS annotation
  from master_join master_join_zpbtkm
  join notes.note_view notes_note_lat_oyfjte on master_join_zpbtkm.target_id = notes_note_lat_oyfjte.id
  where master_join_zpbtkm.source_id = procedure.proceduredme_ts.id
) as notes_note_view_gfwwze on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.radarsystem.id,
    surveillance.radarsystem_ts.id as ts_id,
    surveillance.radarsystem_tsp.id as tsp_id,
    surveillance.radarsystem.identifier,
    surveillance.radarsystem_ts.interpretation,
    surveillance.radarsystem_ts.sequence_number,
    surveillance.radarsystem_ts.correction_number,
    surveillance.radarsystem_ts.valid_time_begin,
    surveillance.radarsystem_ts.valid_time_end,
    surveillance.radarsystem_ts.feature_lifetime_begin,
    surveillance.radarsystem_ts.feature_lifetime_end,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')') as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')') as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')') as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_oiebys.title as varchar), '(' || airport_heliport_airportheliport_pt_oiebys.nilreason[1] || ')') AS airportheliport,
    airport_heliport_airportheliport_pt_oiebys.href AS airportheliport_href,
    geometry_elevatedpoint_view_poqqrm.geom AS location_geom,
    geometry_elevatedpoint_view_poqqrm.longitude AS location_longitude,
    geometry_elevatedpoint_view_poqqrm.latitude AS location_latitude,
    geometry_elevatedpoint_view_poqqrm.elevation AS location_elevation,
    geometry_elevatedpoint_view_poqqrm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_poqqrm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_poqqrm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_poqqrm.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_oleqfl.radarequipment as radarequipment,
    organisation_organisationauthority_pt_kjjzbb.office as office,
    airport_heliport_runway_pt_koduzv.parrunway as parrunway,
    notes_note_view_qfgyjh.annotation as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_oiebys on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_oiebys.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_poqqrm on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_poqqrm.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_arxzhq.*) as radarequipment
  from master_join master_join_mirran
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_arxzhq on master_join_mirran.target_id = surveillance_radarcomponent_lat_arxzhq.id
  where master_join_mirran.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_oleqfl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vmqocv.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vmqocv.title AS varchar), '(' || organisation_organisationauthority_lat_vmqocv.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vmqocv.href
  )) as office  from master_join master_join_dcxymk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vmqocv on master_join_dcxymk.target_id = organisation_organisationauthority_lat_vmqocv.id
  where master_join_dcxymk.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_kjjzbb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_metplv.id,
      'title', coalesce(cast(airport_heliport_runway_lat_metplv.title AS varchar), '(' || airport_heliport_runway_lat_metplv.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_metplv.href
  )) as parrunway  from master_join master_join_yacdzz
  join airport_heliport.runway_pt airport_heliport_runway_lat_metplv on master_join_yacdzz.target_id = airport_heliport_runway_lat_metplv.id
  where master_join_yacdzz.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_koduzv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqngop.*) AS annotation
  from master_join master_join_qyoguv
  join notes.note_view notes_note_lat_sqngop on master_join_qyoguv.target_id = notes_note_lat_sqngop.id
  where master_join_qyoguv.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_qfgyjh on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.radiocommunicationchannel.id,
    service.radiocommunicationchannel_ts.id as ts_id,
    service.radiocommunicationchannel_tsp.id as tsp_id,
    service.radiocommunicationchannel.identifier,
    service.radiocommunicationchannel_ts.interpretation,
    service.radiocommunicationchannel_ts.sequence_number,
    service.radiocommunicationchannel_ts.correction_number,
    service.radiocommunicationchannel_ts.valid_time_begin,
    service.radiocommunicationchannel_ts.valid_time_end,
    service.radiocommunicationchannel_ts.feature_lifetime_begin,
    service.radiocommunicationchannel_ts.feature_lifetime_end,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')') as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')') as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')') as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')') as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')') as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')') as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')') as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')') as frequencyreception,
    geometry_elevatedpoint_view_fydueh.geom as location_geom,
    geometry_elevatedpoint_view_fydueh.attr as location,
    service_radiocommunicationoperationalstatus_view_fyvoum.availability as availability,
    notes_note_view_phbdyr.annotation as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_aygpkz.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_aygpkz.id,
      'longitude', geometry_elevatedpoint_lat_aygpkz.longitude,
      'latitude', geometry_elevatedpoint_lat_aygpkz.latitude,
      'elevation', geometry_elevatedpoint_lat_aygpkz.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_aygpkz.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_aygpkz.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_aygpkz.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_aygpkz.horizontalAccuracy
    )) AS attr
  from master_join master_join_kbslcp
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_aygpkz on master_join_kbslcp.target_id = geometry_elevatedpoint_lat_aygpkz.id
  where master_join_kbslcp.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_fydueh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_omdfkq.*) as availability
  from master_join master_join_yenjul
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_omdfkq on master_join_yenjul.target_id = service_radiocommunicationoperationalstatus_lat_omdfkq.id
  where master_join_yenjul.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_fyvoum on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xbjsjs.*) AS annotation
  from master_join master_join_wbnvlm
  join notes.note_view notes_note_lat_xbjsjs on master_join_wbnvlm.target_id = notes_note_lat_xbjsjs.id
  where master_join_wbnvlm.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_phbdyr on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['notes.note_view', 'geometry.surface_view', 'shared.circlesector_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.radiofrequencyarea.id,
    shared.radiofrequencyarea_ts.id as ts_id,
    shared.radiofrequencyarea_tsp.id as tsp_id,
    shared.radiofrequencyarea.identifier,
    shared.radiofrequencyarea_ts.interpretation,
    shared.radiofrequencyarea_ts.sequence_number,
    shared.radiofrequencyarea_ts.correction_number,
    shared.radiofrequencyarea_ts.valid_time_begin,
    shared.radiofrequencyarea_ts.valid_time_end,
    shared.radiofrequencyarea_ts.feature_lifetime_begin,
    shared.radiofrequencyarea_ts.feature_lifetime_end,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')') as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')') as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_jaxkds.title as varchar), '(' || service_radiocommunicationchannel_pt_jaxkds.nilreason[1] || ')') AS equipmentfrequency,
    service_radiocommunicationchannel_pt_jaxkds.href AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_wjabza.title as varchar), '(' || navaids_points_specialnavigationstation_pt_wjabza.nilreason[1] || ')') AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_wjabza.href AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_gsptbf.title as varchar), '(' || surveillance_precisionapproachradar_pt_gsptbf.nilreason[1] || ')') AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_gsptbf.href AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_aejvux.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_aejvux.nilreason[1] || ')') AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_aejvux.href AS equipmentradar_href,
    shared_circlesector_view_uwckds.sector as sector,
    geometry_surface_view_sgprkc.geom as extent_geom,
    geometry_surface_view_sgprkc.attr as extent,
    notes_note_view_xrmhkk.annotation as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_jaxkds on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_jaxkds.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_wjabza on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_wjabza.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_gsptbf on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_gsptbf.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_aejvux on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_aejvux.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_vzckwh.*) as sector
  from master_join master_join_nrqezz
  join shared.circlesector_view shared_circlesector_lat_vzckwh on master_join_nrqezz.target_id = shared_circlesector_lat_vzckwh.id
  where master_join_nrqezz.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_uwckds on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_zrkpyu.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_zrkpyu.id,
      'horizontalAccuracy', geometry_surface_lat_zrkpyu.horizontalAccuracy
    )) AS attr
  from master_join master_join_izkcid
  join geometry.surface_view geometry_surface_lat_zrkpyu on master_join_izkcid.target_id = geometry_surface_lat_zrkpyu.id
  where master_join_izkcid.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_sgprkc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hmjcsg.*) AS annotation
  from master_join master_join_balbdb
  join notes.note_view notes_note_lat_hmjcsg on master_join_balbdb.target_id = notes_note_lat_hmjcsg.id
  where master_join_balbdb.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_xrmhkk on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.road.id,
    airport_heliport.road_ts.id as ts_id,
    airport_heliport.road_tsp.id as tsp_id,
    airport_heliport.road.identifier,
    airport_heliport.road_ts.interpretation,
    airport_heliport.road_ts.sequence_number,
    airport_heliport.road_ts.correction_number,
    airport_heliport.road_ts.valid_time_begin,
    airport_heliport.road_ts.valid_time_end,
    airport_heliport.road_ts.feature_lifetime_begin,
    airport_heliport.road_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_tmwvwd.title as varchar), '(' || airport_heliport_airportheliport_pt_tmwvwd.nilreason[1] || ')') AS associatedairport,
    airport_heliport_airportheliport_pt_tmwvwd.href AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ujhtpi.*) AS surfaceproperties,
    geometry_elevatedsurface_view_gxmgqs.geom AS surfaceextent_geom,
    geometry_elevatedsurface_view_gxmgqs.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_gxmgqs.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_gxmgqs.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_gxmgqs.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_gxmgqs.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_lqieui.accessiblestand as accessiblestand,
    notes_note_view_irdcuo.annotation as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tmwvwd on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_tmwvwd.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ujhtpi on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ujhtpi.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gxmgqs on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_gxmgqs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_fyumzo.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_fyumzo.title AS varchar), '(' || airport_heliport_aircraftstand_lat_fyumzo.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_fyumzo.href
  )) as accessiblestand  from master_join master_join_nqvpph
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_fyumzo on master_join_nqvpph.target_id = airport_heliport_aircraftstand_lat_fyumzo.id
  where master_join_nqvpph.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_lqieui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nfivtt.*) AS annotation
  from master_join master_join_xszosp
  join notes.note_view notes_note_lat_nfivtt on master_join_xszosp.target_id = notes_note_lat_nfivtt.id
  where master_join_xszosp.source_id = airport_heliport.road_ts.id
) as notes_note_view_irdcuo on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routedme.id,
    routes.routedme_ts.id as ts_id,
    routes.routedme_tsp.id as tsp_id,
    routes.routedme.identifier,
    routes.routedme_ts.interpretation,
    routes.routedme_ts.sequence_number,
    routes.routedme_ts.correction_number,
    routes.routedme_ts.valid_time_begin,
    routes.routedme_ts.valid_time_end,
    routes.routedme_ts.feature_lifetime_begin,
    routes.routedme_ts.feature_lifetime_end,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')') as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')') as satisfactory,
    coalesce(cast(navaids_points_dme_pt_vjqwpk.title as varchar), '(' || navaids_points_dme_pt_vjqwpk.nilreason[1] || ')') AS referenceddme,
    navaids_points_dme_pt_vjqwpk.href AS referenceddme_href,
    to_jsonb(routes_routeportion_view_wseknd.*) AS applicablerouteportion,
    notes_note_view_jomcun.annotation as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_vjqwpk on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_vjqwpk.id
left join routes.routeportion_view routes_routeportion_view_wseknd on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_wseknd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hufjqt.*) AS annotation
  from master_join master_join_hfslnh
  join notes.note_view notes_note_lat_hufjqt on master_join_hfslnh.target_id = notes_note_lat_hufjqt.id
  where master_join_hfslnh.source_id = routes.routedme_ts.id
) as notes_note_view_jomcun on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['routes.routeavailability_view', 'navaids_points.enroutesegmentpoint_view', 'shared.obstacleassessmentarea_view', 'notes.note_view', 'geometry.curve_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.routesegment.id,
    routes.routesegment_ts.id as ts_id,
    routes.routesegment_tsp.id as tsp_id,
    routes.routesegment.identifier,
    routes.routesegment_ts.interpretation,
    routes.routesegment_ts.sequence_number,
    routes.routesegment_ts.correction_number,
    routes.routesegment_ts.valid_time_begin,
    routes.routesegment_ts.valid_time_end,
    routes.routesegment_ts.feature_lifetime_begin,
    routes.routesegment_ts.feature_lifetime_end,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')') as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')') as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')') as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')') as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')') as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')') as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')') as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')') as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')') as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')') as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')') as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')') as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')') as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')') as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')') as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')') as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')') as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')') as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')') as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')') as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')') as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')') as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')') as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')') as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_wdrevg.*) AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_krnkpa.*) AS end,
    coalesce(cast(routes_route_pt_syfuci.title as varchar), '(' || routes_route_pt_syfuci.nilreason[1] || ')') AS routeformed,
    routes_route_pt_syfuci.href AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_tnfkbh.*) AS evaluationarea,
    geometry_curve_view_dtlvvb.geom AS curveextent_geom,
    geometry_curve_view_dtlvvb.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_afwvyg.availability as availability,
    notes_note_view_btqzun.annotation as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_wdrevg on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_wdrevg.id
left join routes.route_pt routes_route_pt_syfuci on routes.routesegment_ts.routeformed_id = routes_route_pt_syfuci.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_tnfkbh on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_tnfkbh.id
left join geometry.curve_view geometry_curve_view_dtlvvb on routes.routesegment_ts.curveextent_id = geometry_curve_view_dtlvvb.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_krnkpa on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_krnkpa.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_inegga.*) as availability
  from master_join master_join_unkgmk
  join routes.routeavailability_view routes_routeavailability_lat_inegga on master_join_unkgmk.target_id = routes_routeavailability_lat_inegga.id
  where master_join_unkgmk.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_afwvyg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tcgemt.*) AS annotation
  from master_join master_join_nlepoj
  join notes.note_view notes_note_lat_tcgemt on master_join_nlepoj.target_id = notes_note_lat_tcgemt.id
  where master_join_nlepoj.source_id = routes.routesegment_ts.id
) as notes_note_view_btqzun on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    routes.route.id,
    routes.route_ts.id as ts_id,
    routes.route_tsp.id as tsp_id,
    routes.route.identifier,
    routes.route_ts.interpretation,
    routes.route_ts.sequence_number,
    routes.route_ts.correction_number,
    routes.route_ts.valid_time_begin,
    routes.route_ts.valid_time_end,
    routes.route_ts.feature_lifetime_begin,
    routes.route_ts.feature_lifetime_end,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')') as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')') as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')') as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')') as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')') as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')') as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')') as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')') as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')') as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')') as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_ouggpj.title as varchar), '(' || organisation_organisationauthority_pt_ouggpj.nilreason[1] || ')') AS userorganisation,
    organisation_organisationauthority_pt_ouggpj.href AS userorganisation_href,
    notes_note_view_gkgsxm.annotation as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ouggpj on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_ouggpj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cogqqt.*) AS annotation
  from master_join master_join_tglnyr
  join notes.note_view notes_note_lat_cogqqt on master_join_tglnyr.target_id = notes_note_lat_cogqqt.id
  where master_join_tglnyr.source_id = routes.route_ts.id
) as notes_note_view_gkgsxm on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    rules_procedures.rulesprocedures.id,
    rules_procedures.rulesprocedures_ts.id as ts_id,
    rules_procedures.rulesprocedures_tsp.id as tsp_id,
    rules_procedures.rulesprocedures.identifier,
    rules_procedures.rulesprocedures_ts.interpretation,
    rules_procedures.rulesprocedures_ts.sequence_number,
    rules_procedures.rulesprocedures_ts.correction_number,
    rules_procedures.rulesprocedures_ts.valid_time_begin,
    rules_procedures.rulesprocedures_ts.valid_time_end,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')') as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')') as title,
    airport_heliport_airportheliport_pt_yqnqbv.affectedlocation as affectedlocation,
    airspace_airspace_pt_omdfup.affectedarea as affectedarea,
    notes_note_view_sobapt.annotation as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_paylcg.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_paylcg.title AS varchar), '(' || airport_heliport_airportheliport_lat_paylcg.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_paylcg.href
  )) as affectedlocation  from master_join master_join_mriaqe
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_paylcg on master_join_mriaqe.target_id = airport_heliport_airportheliport_lat_paylcg.id
  where master_join_mriaqe.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_yqnqbv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_rzfbex.id,
      'title', coalesce(cast(airspace_airspace_lat_rzfbex.title AS varchar), '(' || airspace_airspace_lat_rzfbex.nilreason[1] || ')'),
      'href', airspace_airspace_lat_rzfbex.href
  )) as affectedarea  from master_join master_join_zzkenj
  join airspace.airspace_pt airspace_airspace_lat_rzfbex on master_join_zzkenj.target_id = airspace_airspace_lat_rzfbex.id
  where master_join_zzkenj.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_omdfup on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hvtclf.*) AS annotation
  from master_join master_join_mjescz
  join notes.note_view notes_note_lat_hvtclf on master_join_mjescz.target_id = notes_note_lat_hvtclf.id
  where master_join_mjescz.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_sobapt on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayblastpad.id,
    airport_heliport.runwayblastpad_ts.id as ts_id,
    airport_heliport.runwayblastpad_tsp.id as tsp_id,
    airport_heliport.runwayblastpad.identifier,
    airport_heliport.runwayblastpad_ts.interpretation,
    airport_heliport.runwayblastpad_ts.sequence_number,
    airport_heliport.runwayblastpad_ts.correction_number,
    airport_heliport.runwayblastpad_ts.valid_time_begin,
    airport_heliport.runwayblastpad_ts.valid_time_end,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_ioriyx.title as varchar), '(' || airport_heliport_runwaydirection_pt_ioriyx.nilreason[1] || ')') AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_ioriyx.href AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_ilixig.geom AS extent_geom,
    geometry_elevatedsurface_view_ilixig.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ilixig.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ilixig.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ilixig.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ilixig.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qvypiu.*) AS surfaceproperties,
    notes_note_view_ybvvkg.annotation as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ioriyx on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_ioriyx.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ilixig on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_ilixig.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qvypiu on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qvypiu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_llffxu.*) AS annotation
  from master_join master_join_dqcctz
  join notes.note_view notes_note_lat_llffxu on master_join_dqcctz.target_id = notes_note_lat_llffxu.id
  where master_join_dqcctz.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_ybvvkg on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['geometry.elevatedpoint_view', 'airport_heliport.navaidequipmentdistance_view', 'airport_heliport.runwaydeclareddistance_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaycentrelinepoint.id,
    airport_heliport.runwaycentrelinepoint_ts.id as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier,
    airport_heliport.runwaycentrelinepoint_ts.interpretation,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number,
    airport_heliport.runwaycentrelinepoint_ts.correction_number,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')') as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')') as designator,
    geometry_elevatedpoint_view_eedyio.geom AS location_geom,
    geometry_elevatedpoint_view_eedyio.longitude AS location_longitude,
    geometry_elevatedpoint_view_eedyio.latitude AS location_latitude,
    geometry_elevatedpoint_view_eedyio.elevation AS location_elevation,
    geometry_elevatedpoint_view_eedyio.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_eedyio.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_eedyio.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_eedyio.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_rmgyye.title as varchar), '(' || airport_heliport_runwaydirection_pt_rmgyye.nilreason[1] || ')') AS onrunway,
    airport_heliport_runwaydirection_pt_rmgyye.href AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_qphomc.associateddeclareddistance as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_sooqer.navaidequipment as navaidequipment,
    notes_note_view_lnudmn.annotation as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_eedyio on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_eedyio.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_rmgyye on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_rmgyye.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_usnnaw.*) as associateddeclareddistance
  from master_join master_join_pdkazl
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_usnnaw on master_join_pdkazl.target_id = airport_heliport_runwaydeclareddistance_lat_usnnaw.id
  where master_join_pdkazl.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_qphomc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_rantim.*) as navaidequipment
  from master_join master_join_vqtzbj
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_rantim on master_join_vqtzbj.target_id = airport_heliport_navaidequipmentdistance_lat_rantim.id
  where master_join_vqtzbj.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_sooqer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrzwtb.*) AS annotation
  from master_join master_join_juqmsa
  join notes.note_view notes_note_lat_mrzwtb on master_join_juqmsa.target_id = notes_note_lat_mrzwtb.id
  where master_join_juqmsa.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_lnudmn on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirectionlightsystem.id,
    airport_heliport.runwaydirectionlightsystem_ts.id as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_ebtugv.title as varchar), '(' || airport_heliport_runwaydirection_pt_ebtugv.nilreason[1] || ')') AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_ebtugv.href AS associatedrunwaydirection_href,
    shared_lightelement_view_amldmr.element as element,
    airport_heliport_groundlightingavailability_view_apfeaq.availability as availability,
    notes_note_view_mbwrcq.annotation as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ebtugv on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_ebtugv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_qvjzyj.*) as element
  from master_join master_join_nasmua
  join shared.lightelement_view shared_lightelement_lat_qvjzyj on master_join_nasmua.target_id = shared_lightelement_lat_qvjzyj.id
  where master_join_nasmua.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_amldmr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_sehrhw.*) as availability
  from master_join master_join_mifyfa
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_sehrhw on master_join_mifyfa.target_id = airport_heliport_groundlightingavailability_lat_sehrhw.id
  where master_join_mifyfa.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_apfeaq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_krhgcb.*) AS annotation
  from master_join master_join_vgjxtn
  join notes.note_view notes_note_lat_krhgcb on master_join_vgjxtn.target_id = notes_note_lat_krhgcb.id
  where master_join_vgjxtn.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_mbwrcq on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaydirection.id,
    airport_heliport.runwaydirection_ts.id as ts_id,
    airport_heliport.runwaydirection_tsp.id as tsp_id,
    airport_heliport.runwaydirection.identifier,
    airport_heliport.runwaydirection_ts.interpretation,
    airport_heliport.runwaydirection_ts.sequence_number,
    airport_heliport.runwaydirection_ts.correction_number,
    airport_heliport.runwaydirection_ts.valid_time_begin,
    airport_heliport.runwaydirection_ts.valid_time_end,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin,
    airport_heliport.runwaydirection_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')') as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')') as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')') as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')') as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')') as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')') as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')') as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')') as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')') as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_qdfckl.title as varchar), '(' || airport_heliport_runway_pt_qdfckl.nilreason[1] || ')') AS usedrunway,
    airport_heliport_runway_pt_qdfckl.href AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_ygnoqh.title as varchar), '(' || airport_heliport_runwayelement_pt_ygnoqh.nilreason[1] || ')') AS startingelement,
    airport_heliport_runwayelement_pt_ygnoqh.href AS startingelement_href,
    notes_note_view_gjhjzb.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_atbocm.availability as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_qdfckl on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_qdfckl.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_ygnoqh on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_ygnoqh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ulguuf.*) AS annotation
  from master_join master_join_rkqlsh
  join notes.note_view notes_note_lat_ulguuf on master_join_rkqlsh.target_id = notes_note_lat_ulguuf.id
  where master_join_rkqlsh.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_gjhjzb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_mdzdlc.*) as availability
  from master_join master_join_rpyuzp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_mdzdlc on master_join_rpyuzp.target_id = airport_heliport_manoeuvringareaavailability_lat_mdzdlc.id
  where master_join_rpyuzp.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_atbocm on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayelement.id,
    airport_heliport.runwayelement_ts.id as ts_id,
    airport_heliport.runwayelement_tsp.id as tsp_id,
    airport_heliport.runwayelement.identifier,
    airport_heliport.runwayelement_ts.interpretation,
    airport_heliport.runwayelement_ts.sequence_number,
    airport_heliport.runwayelement_ts.correction_number,
    airport_heliport.runwayelement_ts.valid_time_begin,
    airport_heliport.runwayelement_ts.valid_time_end,
    airport_heliport.runwayelement_ts.feature_lifetime_begin,
    airport_heliport.runwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_iwtmci.*) AS surfaceproperties,
    geometry_elevatedsurface_view_poyrrl.geom AS extent_geom,
    geometry_elevatedsurface_view_poyrrl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_poyrrl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_poyrrl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_poyrrl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_poyrrl.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_pzzekj.associatedrunway as associatedrunway,
    notes_note_view_wuqvzi.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_kvpfja.availability as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_iwtmci on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_iwtmci.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_poyrrl on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_poyrrl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_gwrjsj.id,
      'title', coalesce(cast(airport_heliport_runway_lat_gwrjsj.title AS varchar), '(' || airport_heliport_runway_lat_gwrjsj.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_gwrjsj.href
  )) as associatedrunway  from master_join master_join_mflvqp
  join airport_heliport.runway_pt airport_heliport_runway_lat_gwrjsj on master_join_mflvqp.target_id = airport_heliport_runway_lat_gwrjsj.id
  where master_join_mflvqp.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_pzzekj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tzjemv.*) AS annotation
  from master_join master_join_yjtfav
  join notes.note_view notes_note_lat_tzjemv on master_join_yjtfav.target_id = notes_note_lat_tzjemv.id
  where master_join_yjtfav.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_wuqvzi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_sovlyv.*) as availability
  from master_join master_join_axguiw
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_sovlyv on master_join_axguiw.target_id = airport_heliport_manoeuvringareaavailability_lat_sovlyv.id
  where master_join_axguiw.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_kvpfja on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwaymarking.id,
    airport_heliport.runwaymarking_ts.id as ts_id,
    airport_heliport.runwaymarking_tsp.id as tsp_id,
    airport_heliport.runwaymarking.identifier,
    airport_heliport.runwaymarking_ts.interpretation,
    airport_heliport.runwaymarking_ts.sequence_number,
    airport_heliport.runwaymarking_ts.correction_number,
    airport_heliport.runwaymarking_ts.valid_time_begin,
    airport_heliport.runwaymarking_ts.valid_time_end,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin,
    airport_heliport.runwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_ojerhj.title as varchar), '(' || airport_heliport_runway_pt_ojerhj.nilreason[1] || ')') AS markedrunway,
    airport_heliport_runway_pt_ojerhj.href AS markedrunway_href,
    airport_heliport_markingelement_view_socwnp.element as element,
    notes_note_view_dpqray.annotation as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_ojerhj on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_ojerhj.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_gyyrzs.*) as element
  from master_join master_join_gehgbf
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_gyyrzs on master_join_gehgbf.target_id = airport_heliport_markingelement_lat_gyyrzs.id
  where master_join_gehgbf.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_socwnp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fmspqn.*) AS annotation
  from master_join master_join_kentiy
  join notes.note_view notes_note_lat_fmspqn on master_join_kentiy.target_id = notes_note_lat_fmspqn.id
  where master_join_kentiy.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_dpqray on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarealightsystem.id,
    airport_heliport.runwayprotectarealightsystem_ts.id as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_qbjfdw.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_qbjfdw.nilreason[1] || ')') AS lightedarea,
    airport_heliport_runwayprotectarea_pt_qbjfdw.href AS lightedarea_href,
    shared_lightelement_view_agovdd.element as element,
    airport_heliport_groundlightingavailability_view_rizpoa.availability as availability,
    notes_note_view_ajcqfa.annotation as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_qbjfdw on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_qbjfdw.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hokixb.*) as element
  from master_join master_join_qixycs
  join shared.lightelement_view shared_lightelement_lat_hokixb on master_join_qixycs.target_id = shared_lightelement_lat_hokixb.id
  where master_join_qixycs.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_agovdd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tiymit.*) as availability
  from master_join master_join_aarehn
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tiymit on master_join_aarehn.target_id = airport_heliport_groundlightingavailability_lat_tiymit.id
  where master_join_aarehn.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_rizpoa on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jeojug.*) AS annotation
  from master_join master_join_ohhofx
  join notes.note_view notes_note_lat_jeojug on master_join_ohhofx.target_id = notes_note_lat_jeojug.id
  where master_join_ohhofx.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_ajcqfa on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayprotectarea.id,
    airport_heliport.runwayprotectarea_ts.id as ts_id,
    airport_heliport.runwayprotectarea_tsp.id as tsp_id,
    airport_heliport.runwayprotectarea.identifier,
    airport_heliport.runwayprotectarea_ts.interpretation,
    airport_heliport.runwayprotectarea_ts.sequence_number,
    airport_heliport.runwayprotectarea_ts.correction_number,
    airport_heliport.runwayprotectarea_ts.valid_time_begin,
    airport_heliport.runwayprotectarea_ts.valid_time_end,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rerpvh.*) AS surfaceproperties,
    geometry_elevatedsurface_view_copnpl.geom AS extent_geom,
    geometry_elevatedsurface_view_copnpl.elevation AS extent_elevation,
    geometry_elevatedsurface_view_copnpl.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_copnpl.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_copnpl.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_copnpl.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_ongxed.title as varchar), '(' || airport_heliport_runwaydirection_pt_ongxed.nilreason[1] || ')') AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_ongxed.href AS protectedrunwaydirection_href,
    notes_note_view_nojoyx.annotation as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rerpvh on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rerpvh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_copnpl on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_copnpl.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ongxed on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_ongxed.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_peroyb.*) AS annotation
  from master_join master_join_kvcdki
  join notes.note_view notes_note_lat_peroyb on master_join_kvcdki.target_id = notes_note_lat_peroyb.id
  where master_join_kvcdki.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_nojoyx on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['airport_heliport.runwaysectioncontamination_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runway.id,
    airport_heliport.runway_ts.id as ts_id,
    airport_heliport.runway_tsp.id as tsp_id,
    airport_heliport.runway.identifier,
    airport_heliport.runway_ts.interpretation,
    airport_heliport.runway_ts.sequence_number,
    airport_heliport.runway_ts.correction_number,
    airport_heliport.runway_ts.valid_time_begin,
    airport_heliport.runway_ts.valid_time_end,
    airport_heliport.runway_ts.feature_lifetime_begin,
    airport_heliport.runway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')') as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')') as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')') as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')') as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')') as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')') as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')') as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')') as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xtmszx.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_suufhb.title as varchar), '(' || airport_heliport_airportheliport_pt_suufhb.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_suufhb.href AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_tmcvfu.overallcontaminant as overallcontaminant,
    notes_note_view_dxgpnl.annotation as annotation,
    airport_heliport_runwaysectioncontamination_view_dyalpf.areacontaminant as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xtmszx on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xtmszx.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_suufhb on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_suufhb.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_uykgam.*) as overallcontaminant
  from master_join master_join_qzzuvt
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_uykgam on master_join_qzzuvt.target_id = airport_heliport_runwaycontamination_lat_uykgam.id
  where master_join_qzzuvt.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_tmcvfu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ofqtyv.*) AS annotation
  from master_join master_join_nhvdxk
  join notes.note_view notes_note_lat_ofqtyv on master_join_nhvdxk.target_id = notes_note_lat_ofqtyv.id
  where master_join_nhvdxk.source_id = airport_heliport.runway_ts.id
) as notes_note_view_dxgpnl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_xlztys.*) as areacontaminant
  from master_join master_join_zjpqih
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_xlztys on master_join_zjpqih.target_id = airport_heliport_runwaysectioncontamination_lat_xlztys.id
  where master_join_zjpqih.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_dyalpf on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.runwayvisualrange.id,
    airport_heliport.runwayvisualrange_ts.id as ts_id,
    airport_heliport.runwayvisualrange_tsp.id as tsp_id,
    airport_heliport.runwayvisualrange.identifier,
    airport_heliport.runwayvisualrange_ts.interpretation,
    airport_heliport.runwayvisualrange_ts.sequence_number,
    airport_heliport.runwayvisualrange_ts.correction_number,
    airport_heliport.runwayvisualrange_ts.valid_time_begin,
    airport_heliport.runwayvisualrange_ts.valid_time_end,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')') as readingposition,
    geometry_elevatedpoint_view_yyxtan.geom AS location_geom,
    geometry_elevatedpoint_view_yyxtan.longitude AS location_longitude,
    geometry_elevatedpoint_view_yyxtan.latitude AS location_latitude,
    geometry_elevatedpoint_view_yyxtan.elevation AS location_elevation,
    geometry_elevatedpoint_view_yyxtan.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yyxtan.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yyxtan.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yyxtan.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_lstfni.associatedrunwaydirection as associatedrunwaydirection,
    notes_note_view_qsjjmj.annotation as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yyxtan on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_yyxtan.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_uoqtot.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_uoqtot.title AS varchar), '(' || airport_heliport_runwaydirection_lat_uoqtot.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_uoqtot.href
  )) as associatedrunwaydirection  from master_join master_join_qccbqp
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_uoqtot on master_join_qccbqp.target_id = airport_heliport_runwaydirection_lat_uoqtot.id
  where master_join_qccbqp.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_lstfni on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_litvkl.*) AS annotation
  from master_join master_join_qtbwky
  join notes.note_view notes_note_lat_litvkl on master_join_qtbwky.target_id = notes_note_lat_litvkl.id
  where master_join_qtbwky.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_qsjjmj on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['procedure.safealtitudeareasector_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.safealtitudearea.id,
    procedure.safealtitudearea_ts.id as ts_id,
    procedure.safealtitudearea_tsp.id as tsp_id,
    procedure.safealtitudearea.identifier,
    procedure.safealtitudearea_ts.interpretation,
    procedure.safealtitudearea_ts.sequence_number,
    procedure.safealtitudearea_ts.correction_number,
    procedure.safealtitudearea_ts.valid_time_begin,
    procedure.safealtitudearea_ts.valid_time_end,
    procedure.safealtitudearea_ts.feature_lifetime_begin,
    procedure.safealtitudearea_ts.feature_lifetime_end,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')') as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_nfpagc.title as varchar), '(' || navaids_points_designatedpoint_pt_nfpagc.nilreason[1] || ')') AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nfpagc.href AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_vznojy.title as varchar), '(' || navaids_points_navaid_pt_vznojy.nilreason[1] || ')') AS centrepointnavaidsystem,
    navaids_points_navaid_pt_vznojy.href AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fsahez.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fsahez.nilreason[1] || ')') AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_fsahez.href AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zpvicr.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zpvicr.nilreason[1] || ')') AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zpvicr.href AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_osbrom.title as varchar), '(' || airport_heliport_airportheliport_pt_osbrom.nilreason[1] || ')') AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_osbrom.href AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_vspdez.location as location,
    geometry_point_view_qhitrs.geom AS centrepointposition_geom,
    geometry_point_view_qhitrs.longitude AS centrepointposition_longitude,
    geometry_point_view_qhitrs.latitude AS centrepointposition_latitude,
    geometry_point_view_qhitrs.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_oeydoc.sector as sector,
    notes_note_view_mzvtda.annotation as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nfpagc on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nfpagc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_vznojy on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_vznojy.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fsahez on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fsahez.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zpvicr on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zpvicr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_osbrom on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_osbrom.id
left join geometry.point_view geometry_point_view_qhitrs on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_qhitrs.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_qexqem.*) as sector
  from master_join master_join_jkufyc
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_qexqem on master_join_jkufyc.target_id = procedure_safealtitudeareasector_lat_qexqem.id
  where master_join_jkufyc.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_oeydoc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_bkxpsu.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_bkxpsu.title AS varchar), '(' || airport_heliport_airportheliport_lat_bkxpsu.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_bkxpsu.href
  )) as location  from master_join master_join_ojbqwc
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_bkxpsu on master_join_ojbqwc.target_id = airport_heliport_airportheliport_lat_bkxpsu.id
  where master_join_ojbqwc.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_vspdez on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_swphrp.*) AS annotation
  from master_join master_join_trpynv
  join notes.note_view notes_note_lat_swphrp on master_join_trpynv.target_id = notes_note_lat_swphrp.id
  where master_join_trpynv.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_mzvtda on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.sdf.id,
    navaids_points.sdf_ts.id as ts_id,
    navaids_points.sdf_tsp.id as tsp_id,
    navaids_points.sdf.identifier,
    navaids_points.sdf_ts.interpretation,
    navaids_points.sdf_ts.sequence_number,
    navaids_points.sdf_ts.correction_number,
    navaids_points.sdf_ts.valid_time_begin,
    navaids_points.sdf_ts.valid_time_end,
    navaids_points.sdf_ts.feature_lifetime_begin,
    navaids_points.sdf_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')') as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')') as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_brmakt.geom AS location_geom,
    geometry_elevatedpoint_view_brmakt.longitude AS location_longitude,
    geometry_elevatedpoint_view_brmakt.latitude AS location_latitude,
    geometry_elevatedpoint_view_brmakt.elevation AS location_elevation,
    geometry_elevatedpoint_view_brmakt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_brmakt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_brmakt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_brmakt.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_scbjwx.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_gnjpjf.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_lnjdok.availability as availability,
    notes_note_view_sqmunf.annotation as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_brmakt on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_brmakt.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jhkjae.*) as authority
  from master_join master_join_cjvlpj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jhkjae on master_join_cjvlpj.target_id = navaids_points_authorityfornavaidequipment_lat_jhkjae.id
  where master_join_cjvlpj.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_scbjwx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vgibiy.*) as monitoring
  from master_join master_join_qqpmhh
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vgibiy on master_join_qqpmhh.target_id = navaids_points_navaidequipmentmonitoring_lat_vgibiy.id
  where master_join_qqpmhh.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_gnjpjf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dfgukm.*) as availability
  from master_join master_join_kijwrx
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dfgukm on master_join_kijwrx.target_id = navaids_points_navaidoperationalstatus_lat_dfgukm.id
  where master_join_kijwrx.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_lnjdok on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwcwsl.*) AS annotation
  from master_join master_join_vliujy
  join notes.note_view notes_note_lat_nwcwsl on master_join_vliujy.target_id = notes_note_lat_nwcwsl.id
  where master_join_vliujy.source_id = navaids_points.sdf_ts.id
) as notes_note_view_sqmunf on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanelandingarea.id,
    airport_heliport.seaplanelandingarea_ts.id as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id as tsp_id,
    airport_heliport.seaplanelandingarea.identifier,
    airport_heliport.seaplanelandingarea_ts.interpretation,
    airport_heliport.seaplanelandingarea_ts.sequence_number,
    airport_heliport.seaplanelandingarea_ts.correction_number,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin,
    airport_heliport.seaplanelandingarea_ts.valid_time_end,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_kalhql.geom AS extent_geom,
    geometry_elevatedsurface_view_kalhql.elevation AS extent_elevation,
    geometry_elevatedsurface_view_kalhql.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_kalhql.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_kalhql.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_kalhql.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_gpqlbg.rampsite as rampsite,
    airport_heliport_floatingdocksite_pt_aseiwv.docksite as docksite,
    notes_note_view_dtioqz.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_egbjco.availability as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_kalhql on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_kalhql.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_rifmba.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_rifmba.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_rifmba.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_rifmba.href
  )) as rampsite  from master_join master_join_zmamcx
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_rifmba on master_join_zmamcx.target_id = airport_heliport_seaplanerampsite_lat_rifmba.id
  where master_join_zmamcx.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_gpqlbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_pnilqj.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_pnilqj.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_pnilqj.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_pnilqj.href
  )) as docksite  from master_join master_join_blqdwu
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_pnilqj on master_join_blqdwu.target_id = airport_heliport_floatingdocksite_lat_pnilqj.id
  where master_join_blqdwu.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_aseiwv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zaupzc.*) AS annotation
  from master_join master_join_rpdpox
  join notes.note_view notes_note_lat_zaupzc on master_join_rpdpox.target_id = notes_note_lat_zaupzc.id
  where master_join_rpdpox.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_dtioqz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_hhiwcc.*) as availability
  from master_join master_join_grvvny
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_hhiwcc on master_join_grvvny.target_id = airport_heliport_manoeuvringareaavailability_lat_hhiwcc.id
  where master_join_grvvny.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_egbjco on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.seaplanerampsite.id,
    airport_heliport.seaplanerampsite_ts.id as ts_id,
    airport_heliport.seaplanerampsite_tsp.id as tsp_id,
    airport_heliport.seaplanerampsite.identifier,
    airport_heliport.seaplanerampsite_ts.interpretation,
    airport_heliport.seaplanerampsite_ts.sequence_number,
    airport_heliport.seaplanerampsite_ts.correction_number,
    airport_heliport.seaplanerampsite_ts.valid_time_begin,
    airport_heliport.seaplanerampsite_ts.valid_time_end,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end,
    geometry_elevatedsurface_view_vkvuyv.geom AS extent_geom,
    geometry_elevatedsurface_view_vkvuyv.elevation AS extent_elevation,
    geometry_elevatedsurface_view_vkvuyv.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_vkvuyv.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_vkvuyv.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_vkvuyv.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_itzdbr.geom AS centreline_geom,
    geometry_elevatedcurve_view_itzdbr.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_itzdbr.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_itzdbr.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_itzdbr.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_itzdbr.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_qjoobk.annotation as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_vkvuyv on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_vkvuyv.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_itzdbr on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_itzdbr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gtscnq.*) AS annotation
  from master_join master_join_krnyon
  join notes.note_view notes_note_lat_gtscnq on master_join_krnyon.target_id = notes_note_lat_gtscnq.id
  where master_join_krnyon.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_qjoobk on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'routes.routeportion_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    service.searchrescueservice.id,
    service.searchrescueservice_ts.id as ts_id,
    service.searchrescueservice_tsp.id as tsp_id,
    service.searchrescueservice.identifier,
    service.searchrescueservice_ts.interpretation,
    service.searchrescueservice_ts.sequence_number,
    service.searchrescueservice_ts.correction_number,
    service.searchrescueservice_ts.valid_time_begin,
    service.searchrescueservice_ts.valid_time_end,
    service.searchrescueservice_ts.feature_lifetime_begin,
    service.searchrescueservice_ts.feature_lifetime_end,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')') as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')') as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')') as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')') as type,
    geometry_elevatedpoint_view_pqetwv.geom AS location_geom,
    geometry_elevatedpoint_view_pqetwv.longitude AS location_longitude,
    geometry_elevatedpoint_view_pqetwv.latitude AS location_latitude,
    geometry_elevatedpoint_view_pqetwv.elevation AS location_elevation,
    geometry_elevatedpoint_view_pqetwv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pqetwv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pqetwv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pqetwv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_yxawwc.title as varchar), '(' || organisation_unit_pt_yxawwc.nilreason[1] || ')') AS serviceprovider,
    organisation_unit_pt_yxawwc.href AS serviceprovider_href,
    service_callsigndetail_view_ucjytr.callsign as callsign,
    service_radiocommunicationchannel_pt_kfuzcp.radiocommunication as radiocommunication,
    service_serviceoperationalstatus_view_pphsoy.availability as availability,
    notes_note_view_jtxwzc.annotation as annotation,
    airspace_airspace_pt_ylgsaz.clientairspace as clientairspace,
    routes_routeportion_view_esxbyc.clientroute as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pqetwv on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_pqetwv.id
left join organisation.unit_pt organisation_unit_pt_yxawwc on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_yxawwc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_fjnzuz.*) as callsign
  from master_join master_join_qtsovl
  join service.callsigndetail_view service_callsigndetail_lat_fjnzuz on master_join_qtsovl.target_id = service_callsigndetail_lat_fjnzuz.id
  where master_join_qtsovl.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_ucjytr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_oiyrpr.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_oiyrpr.title AS varchar), '(' || service_radiocommunicationchannel_lat_oiyrpr.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_oiyrpr.href
  )) as radiocommunication  from master_join master_join_ivwblf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_oiyrpr on master_join_ivwblf.target_id = service_radiocommunicationchannel_lat_oiyrpr.id
  where master_join_ivwblf.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_kfuzcp on TRUE
left join lateral(
  select
  from master_join master_join_qrnwav
  join shared.contactinformation_view shared_contactinformation_lat_cdnfsq on master_join_qrnwav.target_id = shared_contactinformation_lat_cdnfsq.id
  where master_join_qrnwav.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_kbnwdx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_neyqzm.*) as availability
  from master_join master_join_mscwxe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_neyqzm on master_join_mscwxe.target_id = service_serviceoperationalstatus_lat_neyqzm.id
  where master_join_mscwxe.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_pphsoy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lbjshl.*) AS annotation
  from master_join master_join_hcekyc
  join notes.note_view notes_note_lat_lbjshl on master_join_hcekyc.target_id = notes_note_lat_lbjshl.id
  where master_join_hcekyc.source_id = service.searchrescueservice_ts.id
) as notes_note_view_jtxwzc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_zhnngw.id,
      'title', coalesce(cast(airspace_airspace_lat_zhnngw.title AS varchar), '(' || airspace_airspace_lat_zhnngw.nilreason[1] || ')'),
      'href', airspace_airspace_lat_zhnngw.href
  )) as clientairspace  from master_join master_join_xwfzsw
  join airspace.airspace_pt airspace_airspace_lat_zhnngw on master_join_xwfzsw.target_id = airspace_airspace_lat_zhnngw.id
  where master_join_xwfzsw.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_ylgsaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_spwbrh.*) as clientroute
  from master_join master_join_pxjyuv
  join routes.routeportion_view routes_routeportion_lat_spwbrh on master_join_pxjyuv.target_id = routes_routeportion_lat_spwbrh.id
  where master_join_pxjyuv.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_esxbyc on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    surveillance.secondarysurveillanceradar.id,
    surveillance.secondarysurveillanceradar_ts.id as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id as tsp_id,
    surveillance.secondarysurveillanceradar.identifier,
    surveillance.secondarysurveillanceradar_ts.interpretation,
    surveillance.secondarysurveillanceradar_ts.sequence_number,
    surveillance.secondarysurveillanceradar_ts.correction_number,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin,
    surveillance.secondarysurveillanceradar_ts.valid_time_end,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')') as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')') as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')') as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')') as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')') as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')') as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')') as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')') as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')') as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')') as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')') as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')') as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')') as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')') as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')') as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')') as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')') as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')') as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')') as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')') as verticalcoveragedistance,
    geometry_elevatedpoint_view_klocsq.geom AS location_geom,
    geometry_elevatedpoint_view_klocsq.longitude AS location_longitude,
    geometry_elevatedpoint_view_klocsq.latitude AS location_latitude,
    geometry_elevatedpoint_view_klocsq.elevation AS location_elevation,
    geometry_elevatedpoint_view_klocsq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_klocsq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_klocsq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_klocsq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_lsuwcp.annotation as annotation,
    surveillance_surveillancegroundstation_view_clhfzz.groundstation as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_klocsq on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_klocsq.id
left join lateral(
  select
  from master_join master_join_ffwiza
  join shared.contactinformation_view shared_contactinformation_lat_kfheay on master_join_ffwiza.target_id = shared_contactinformation_lat_kfheay.id
  where master_join_ffwiza.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_xieinb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_khergt.*) AS annotation
  from master_join master_join_uchsmq
  join notes.note_view notes_note_lat_khergt on master_join_uchsmq.target_id = notes_note_lat_khergt.id
  where master_join_uchsmq.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_lsuwcp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_ajfchv.*) as groundstation
  from master_join master_join_gnfgem
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_ajfchv on master_join_gnfgem.target_id = surveillance_surveillancegroundstation_lat_ajfchv.id
  where master_join_gnfgem.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_clhfzz on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.significantpointinairspace.id,
    navaids_points.significantpointinairspace_ts.id as ts_id,
    navaids_points.significantpointinairspace_tsp.id as tsp_id,
    navaids_points.significantpointinairspace.identifier,
    navaids_points.significantpointinairspace_ts.interpretation,
    navaids_points.significantpointinairspace_ts.sequence_number,
    navaids_points.significantpointinairspace_ts.correction_number,
    navaids_points.significantpointinairspace_ts.valid_time_begin,
    navaids_points.significantpointinairspace_ts.valid_time_end,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')') as relativelocation,
    coalesce(cast(airspace_airspace_pt_shmnaf.title as varchar), '(' || airspace_airspace_pt_shmnaf.nilreason[1] || ')') AS containingairspace,
    airspace_airspace_pt_shmnaf.href AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ebgfxz.title as varchar), '(' || navaids_points_designatedpoint_pt_ebgfxz.nilreason[1] || ')') AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ebgfxz.href AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_uphnmi.title as varchar), '(' || navaids_points_navaid_pt_uphnmi.nilreason[1] || ')') AS locationnavaidsystem,
    navaids_points_navaid_pt_uphnmi.href AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_niixgd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_niixgd.nilreason[1] || ')') AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_niixgd.href AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uumimf.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uumimf.nilreason[1] || ')') AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uumimf.href AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_raokha.title as varchar), '(' || airport_heliport_airportheliport_pt_raokha.nilreason[1] || ')') AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_raokha.href AS locationairportreferencepoint_href,
    geometry_point_view_pbozfz.geom AS locationposition_geom,
    geometry_point_view_pbozfz.longitude AS locationposition_longitude,
    geometry_point_view_pbozfz.latitude AS locationposition_latitude,
    geometry_point_view_pbozfz.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_jdtzen.annotation as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_shmnaf on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_shmnaf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ebgfxz on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ebgfxz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uphnmi on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_uphnmi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_niixgd on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_niixgd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uumimf on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uumimf.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_raokha on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_raokha.id
left join geometry.point_view geometry_point_view_pbozfz on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_pbozfz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zlcvla.*) AS annotation
  from master_join master_join_loekru
  join notes.note_view notes_note_lat_zlcvla on master_join_loekru.target_id = notes_note_lat_zlcvla.id
  where master_join_loekru.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_jdtzen on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.specialdate.id,
    shared.specialdate_ts.id as ts_id,
    shared.specialdate_tsp.id as tsp_id,
    shared.specialdate.identifier,
    shared.specialdate_ts.interpretation,
    shared.specialdate_ts.sequence_number,
    shared.specialdate_ts.correction_number,
    shared.specialdate_ts.valid_time_begin,
    shared.specialdate_ts.valid_time_end,
    shared.specialdate_ts.feature_lifetime_begin,
    shared.specialdate_ts.feature_lifetime_end,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')') as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')') as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')') as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation_organisationauthority_pt_gtqcau.title as varchar), '(' || organisation_organisationauthority_pt_gtqcau.nilreason[1] || ')') AS authority,
    organisation_organisationauthority_pt_gtqcau.href AS authority_href,
    notes_note_view_tcafil.annotation as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gtqcau on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_gtqcau.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lpnunx.*) AS annotation
  from master_join master_join_bihkvf
  join notes.note_view notes_note_lat_lpnunx on master_join_bihkvf.target_id = notes_note_lat_lpnunx.id
  where master_join_bihkvf.source_id = shared.specialdate_ts.id
) as notes_note_view_tcafil on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['navaids_points.authorityforspecialnavigationstation_view', 'notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationstation.id,
    navaids_points.specialnavigationstation_ts.id as ts_id,
    navaids_points.specialnavigationstation_tsp.id as tsp_id,
    navaids_points.specialnavigationstation.identifier,
    navaids_points.specialnavigationstation_ts.interpretation,
    navaids_points.specialnavigationstation_ts.sequence_number,
    navaids_points.specialnavigationstation_ts.correction_number,
    navaids_points.specialnavigationstation_ts.valid_time_begin,
    navaids_points.specialnavigationstation_ts.valid_time_end,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')') as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')') as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_nezfut.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_nezfut.nilreason[1] || ')') AS systemchain,
    navaids_points_specialnavigationsystem_pt_nezfut.href AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_lfyjwg.*) AS responsibleorganisation,
    geometry_elevatedpoint_view_hayuwh.geom AS position_geom,
    geometry_elevatedpoint_view_hayuwh.longitude AS position_longitude,
    geometry_elevatedpoint_view_hayuwh.latitude AS position_latitude,
    geometry_elevatedpoint_view_hayuwh.elevation AS position_elevation,
    geometry_elevatedpoint_view_hayuwh.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_hayuwh.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_hayuwh.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_hayuwh.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_sxvsyc.availability as availability,
    notes_note_view_ldtzxe.annotation as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_nezfut on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_nezfut.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_lfyjwg on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_lfyjwg.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_hayuwh on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_hayuwh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_avsxpw.*) as availability
  from master_join master_join_lbdqvi
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_avsxpw on master_join_lbdqvi.target_id = navaids_points_specialnavigationstationstatus_lat_avsxpw.id
  where master_join_lbdqvi.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_sxvsyc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvbqpn.*) AS annotation
  from master_join master_join_hdaddx
  join notes.note_view notes_note_lat_xvbqpn on master_join_hdaddx.target_id = notes_note_lat_xvbqpn.id
  where master_join_hdaddx.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_ldtzxe on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.specialnavigationsystem.id,
    navaids_points.specialnavigationsystem_ts.id as ts_id,
    navaids_points.specialnavigationsystem_tsp.id as tsp_id,
    navaids_points.specialnavigationsystem.identifier,
    navaids_points.specialnavigationsystem_ts.interpretation,
    navaids_points.specialnavigationsystem_ts.sequence_number,
    navaids_points.specialnavigationsystem_ts.correction_number,
    navaids_points.specialnavigationsystem_ts.valid_time_begin,
    navaids_points.specialnavigationsystem_ts.valid_time_end,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')') as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_fvdstm.*) AS responsibleorganisation,
    notes_note_view_hdykbp.annotation as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_fvdstm on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_fvdstm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ieaiio.*) AS annotation
  from master_join master_join_sypmwm
  join notes.note_view notes_note_lat_ieaiio on master_join_sypmwm.target_id = notes_note_lat_ieaiio.id
  where master_join_sypmwm.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_hdykbp on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'notes.note_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentarrival.id,
    procedure.standardinstrumentarrival_ts.id as ts_id,
    procedure.standardinstrumentarrival_tsp.id as tsp_id,
    procedure.standardinstrumentarrival.identifier,
    procedure.standardinstrumentarrival_ts.interpretation,
    procedure.standardinstrumentarrival_ts.sequence_number,
    procedure.standardinstrumentarrival_ts.correction_number,
    procedure.standardinstrumentarrival_ts.valid_time_begin,
    procedure.standardinstrumentarrival_ts.valid_time_end,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points_navaid_pt_lyftzj.title as varchar), '(' || navaids_points_navaid_pt_lyftzj.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_lyftzj.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_xqxhpr.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_xqxhpr.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_xqxhpr.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ofbedb.title as varchar), '(' || surveillance_radarsystem_pt_ofbedb.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_ofbedb.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_pbhdxj.title as varchar), '(' || procedure_safealtitudearea_pt_pbhdxj.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_pbhdxj.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_mdswcy.*) AS arrival,
    procedure_procedureavailability_view_nmkvou.availability as availability,
    airport_heliport_airportheliport_pt_izouuy.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_peausp.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_bljpsu.flighttransition as flighttransition,
    notes_note_view_fxcowc.annotation as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lyftzj on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_lyftzj.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_xqxhpr on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_xqxhpr.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ofbedb on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ofbedb.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_pbhdxj on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_pbhdxj.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_mdswcy on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_mdswcy.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_uuorfc.*) as availability
  from master_join master_join_uzfxqk
  join procedure.procedureavailability_view procedure_procedureavailability_lat_uuorfc on master_join_uzfxqk.target_id = procedure_procedureavailability_lat_uuorfc.id
  where master_join_uzfxqk.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_nmkvou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_rvdxja.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_rvdxja.title AS varchar), '(' || airport_heliport_airportheliport_lat_rvdxja.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_rvdxja.href
  )) as airportheliport  from master_join master_join_lzkcet
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_rvdxja on master_join_lzkcet.target_id = airport_heliport_airportheliport_lat_rvdxja.id
  where master_join_lzkcet.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_izouuy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vywevk.*) as aircraftcharacteristic
  from master_join master_join_qipupu
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_vywevk on master_join_qipupu.target_id = shared_aircraftcharacteristic_lat_vywevk.id
  where master_join_qipupu.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_peausp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_xkjkjv.*) as flighttransition
  from master_join master_join_qleyvo
  join procedure.proceduretransition_view procedure_proceduretransition_lat_xkjkjv on master_join_qleyvo.target_id = procedure_proceduretransition_lat_xkjkjv.id
  where master_join_qleyvo.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_bljpsu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wvjewb.*) AS annotation
  from master_join master_join_xlxogv
  join notes.note_view notes_note_lat_wvjewb on master_join_xlxogv.target_id = notes_note_lat_wvjewb.id
  where master_join_xlxogv.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_fxcowc on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['shared.aircraftcharacteristic_view', 'procedure.procedureavailability_view', 'procedure.landingtakeoffareacollection_view', 'notes.note_view', 'procedure.proceduretransition_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.standardinstrumentdeparture.id,
    procedure.standardinstrumentdeparture_ts.id as ts_id,
    procedure.standardinstrumentdeparture_tsp.id as tsp_id,
    procedure.standardinstrumentdeparture.identifier,
    procedure.standardinstrumentdeparture_ts.interpretation,
    procedure.standardinstrumentdeparture_ts.sequence_number,
    procedure.standardinstrumentdeparture_ts.correction_number,
    procedure.standardinstrumentdeparture_ts.valid_time_begin,
    procedure.standardinstrumentdeparture_ts.valid_time_end,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')') as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')') as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')') as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')') as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')') as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')') as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')') as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')') as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_ftzzqt.title as varchar), '(' || navaids_points_navaid_pt_ftzzqt.nilreason[1] || ')') AS guidancefacilitynavaid,
    navaids_points_navaid_pt_ftzzqt.href AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_rfiqrk.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_rfiqrk.nilreason[1] || ')') AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_rfiqrk.href AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_kztzuu.title as varchar), '(' || surveillance_radarsystem_pt_kztzuu.nilreason[1] || ')') AS guidancefacilityradar,
    surveillance_radarsystem_pt_kztzuu.href AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_jfbilv.title as varchar), '(' || procedure_safealtitudearea_pt_jfbilv.nilreason[1] || ')') AS safealtitude,
    procedure_safealtitudearea_pt_jfbilv.href AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_sybzji.*) AS takeoff,
    procedure_procedureavailability_view_kpankq.availability as availability,
    airport_heliport_airportheliport_pt_gdjbob.airportheliport as airportheliport,
    shared_aircraftcharacteristic_view_whrsmy.aircraftcharacteristic as aircraftcharacteristic,
    procedure_proceduretransition_view_ygkddn.flighttransition as flighttransition,
    notes_note_view_ereafh.annotation as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ftzzqt on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_ftzzqt.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_rfiqrk on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_rfiqrk.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_kztzuu on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_kztzuu.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_jfbilv on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_jfbilv.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_sybzji on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_sybzji.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_cgfegm.*) as availability
  from master_join master_join_fraabj
  join procedure.procedureavailability_view procedure_procedureavailability_lat_cgfegm on master_join_fraabj.target_id = procedure_procedureavailability_lat_cgfegm.id
  where master_join_fraabj.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_kpankq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_iyuyyk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_iyuyyk.title AS varchar), '(' || airport_heliport_airportheliport_lat_iyuyyk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_iyuyyk.href
  )) as airportheliport  from master_join master_join_mtobom
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_iyuyyk on master_join_mtobom.target_id = airport_heliport_airportheliport_lat_iyuyyk.id
  where master_join_mtobom.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_gdjbob on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xczjve.*) as aircraftcharacteristic
  from master_join master_join_saeilz
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xczjve on master_join_saeilz.target_id = shared_aircraftcharacteristic_lat_xczjve.id
  where master_join_saeilz.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_whrsmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_fhjvru.*) as flighttransition
  from master_join master_join_rqmjns
  join procedure.proceduretransition_view procedure_proceduretransition_lat_fhjvru on master_join_rqmjns.target_id = procedure_proceduretransition_lat_fhjvru.id
  where master_join_rqmjns.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_ygkddn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rklwce.*) AS annotation
  from master_join master_join_gmrjlt
  join notes.note_view notes_note_lat_rklwce on master_join_gmrjlt.target_id = notes_note_lat_rklwce.id
  where master_join_gmrjlt.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_ereafh on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelcolumn.id,
    shared.standardlevelcolumn_ts.id as ts_id,
    shared.standardlevelcolumn_tsp.id as tsp_id,
    shared.standardlevelcolumn.identifier,
    shared.standardlevelcolumn_ts.interpretation,
    shared.standardlevelcolumn_ts.sequence_number,
    shared.standardlevelcolumn_ts.correction_number,
    shared.standardlevelcolumn_ts.valid_time_begin,
    shared.standardlevelcolumn_ts.valid_time_end,
    shared.standardlevelcolumn_ts.feature_lifetime_begin,
    shared.standardlevelcolumn_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')') as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')') as separation,
    coalesce(cast(shared_standardleveltable_pt_psxsoi.title as varchar), '(' || shared_standardleveltable_pt_psxsoi.nilreason[1] || ')') AS leveltable,
    shared_standardleveltable_pt_psxsoi.href AS leveltable_href,
    shared_standardlevel_view_twvhju.level as level,
    notes_note_view_bwmbdf.annotation as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_psxsoi on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_psxsoi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_lhlgtx.*) as level
  from master_join master_join_zmjfgc
  join shared.standardlevel_view shared_standardlevel_lat_lhlgtx on master_join_zmjfgc.target_id = shared_standardlevel_lat_lhlgtx.id
  where master_join_zmjfgc.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_twvhju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rsxuqy.*) AS annotation
  from master_join master_join_jtvgro
  join notes.note_view notes_note_lat_rsxuqy on master_join_jtvgro.target_id = notes_note_lat_rsxuqy.id
  where master_join_jtvgro.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_bwmbdf on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardlevelsector.id,
    shared.standardlevelsector_ts.id as ts_id,
    shared.standardlevelsector_tsp.id as tsp_id,
    shared.standardlevelsector.identifier,
    shared.standardlevelsector_ts.interpretation,
    shared.standardlevelsector_ts.sequence_number,
    shared.standardlevelsector_ts.correction_number,
    shared.standardlevelsector_ts.valid_time_begin,
    shared.standardlevelsector_ts.valid_time_end,
    shared.standardlevelsector_ts.feature_lifetime_begin,
    shared.standardlevelsector_ts.feature_lifetime_end,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')') as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')') as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')') as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')') as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_btahay.title as varchar), '(' || shared_standardlevelcolumn_pt_btahay.nilreason[1] || ')') AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_btahay.href AS applicablelevelcolumn_href,
    airspace_airspace_pt_dsanne.applicableairspace as applicableairspace,
    notes_note_view_vcffjn.annotation as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_btahay on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_btahay.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_bilfew.id,
      'title', coalesce(cast(airspace_airspace_lat_bilfew.title AS varchar), '(' || airspace_airspace_lat_bilfew.nilreason[1] || ')'),
      'href', airspace_airspace_lat_bilfew.href
  )) as applicableairspace  from master_join master_join_ogjfbt
  join airspace.airspace_pt airspace_airspace_lat_bilfew on master_join_ogjfbt.target_id = airspace_airspace_lat_bilfew.id
  where master_join_ogjfbt.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_dsanne on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zwryqq.*) AS annotation
  from master_join master_join_onzqsj
  join notes.note_view notes_note_lat_zwryqq on master_join_onzqsj.target_id = notes_note_lat_zwryqq.id
  where master_join_onzqsj.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_vcffjn on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    shared.standardleveltable.id,
    shared.standardleveltable_ts.id as ts_id,
    shared.standardleveltable_tsp.id as tsp_id,
    shared.standardleveltable.identifier,
    shared.standardleveltable_ts.interpretation,
    shared.standardleveltable_ts.sequence_number,
    shared.standardleveltable_ts.correction_number,
    shared.standardleveltable_ts.valid_time_begin,
    shared.standardleveltable_ts.valid_time_end,
    shared.standardleveltable_ts.feature_lifetime_begin,
    shared.standardleveltable_ts.feature_lifetime_end,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')') as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')') as standardicao,
    notes_note_view_pszgch.annotation as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edzibw.*) AS annotation
  from master_join master_join_awrdtu
  join notes.note_view notes_note_lat_edzibw on master_join_awrdtu.target_id = notes_note_lat_edzibw.id
  where master_join_awrdtu.source_id = shared.standardleveltable_ts.id
) as notes_note_view_pszgch on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.standmarking.id,
    airport_heliport.standmarking_ts.id as ts_id,
    airport_heliport.standmarking_tsp.id as tsp_id,
    airport_heliport.standmarking.identifier,
    airport_heliport.standmarking_ts.interpretation,
    airport_heliport.standmarking_ts.sequence_number,
    airport_heliport.standmarking_ts.correction_number,
    airport_heliport.standmarking_ts.valid_time_begin,
    airport_heliport.standmarking_ts.valid_time_end,
    airport_heliport.standmarking_ts.feature_lifetime_begin,
    airport_heliport.standmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_nexjtt.title as varchar), '(' || airport_heliport_aircraftstand_pt_nexjtt.nilreason[1] || ')') AS markedstand,
    airport_heliport_aircraftstand_pt_nexjtt.href AS markedstand_href,
    airport_heliport_markingelement_view_lqerxe.element as element,
    notes_note_view_sjzidw.annotation as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_nexjtt on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_nexjtt.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_jetwzp.*) as element
  from master_join master_join_mmxqem
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_jetwzp on master_join_mmxqem.target_id = airport_heliport_markingelement_lat_jetwzp.id
  where master_join_mmxqem.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_lqerxe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jzskbd.*) AS annotation
  from master_join master_join_guzkwj
  join notes.note_view notes_note_lat_jzskbd on master_join_guzkwj.target_id = notes_note_lat_jzskbd.id
  where master_join_guzkwj.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_sjzidw on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.surveycontrolpoint.id,
    airport_heliport.surveycontrolpoint_ts.id as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id as tsp_id,
    airport_heliport.surveycontrolpoint.identifier,
    airport_heliport.surveycontrolpoint_ts.interpretation,
    airport_heliport.surveycontrolpoint_ts.sequence_number,
    airport_heliport.surveycontrolpoint_ts.correction_number,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin,
    airport_heliport.surveycontrolpoint_ts.valid_time_end,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_vibdza.title as varchar), '(' || airport_heliport_airportheliport_pt_vibdza.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_vibdza.href AS associatedairportheliport_href,
    geometry_elevatedpoint_view_yaumkd.geom AS location_geom,
    geometry_elevatedpoint_view_yaumkd.longitude AS location_longitude,
    geometry_elevatedpoint_view_yaumkd.latitude AS location_latitude,
    geometry_elevatedpoint_view_yaumkd.elevation AS location_elevation,
    geometry_elevatedpoint_view_yaumkd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yaumkd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yaumkd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yaumkd.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xhyjpo.annotation as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vibdza on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_vibdza.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yaumkd on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_yaumkd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qqykus.*) AS annotation
  from master_join master_join_ylrzky
  join notes.note_view notes_note_lat_qqykus on master_join_ylrzky.target_id = notes_note_lat_qqykus.id
  where master_join_ylrzky.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_xhyjpo on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.tacan.id,
    navaids_points.tacan_ts.id as ts_id,
    navaids_points.tacan_tsp.id as tsp_id,
    navaids_points.tacan.identifier,
    navaids_points.tacan_ts.interpretation,
    navaids_points.tacan_ts.sequence_number,
    navaids_points.tacan_ts.correction_number,
    navaids_points.tacan_ts.valid_time_begin,
    navaids_points.tacan_ts.valid_time_end,
    navaids_points.tacan_ts.feature_lifetime_begin,
    navaids_points.tacan_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')') as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')') as declination,
    geometry_elevatedpoint_view_enhhkb.geom AS location_geom,
    geometry_elevatedpoint_view_enhhkb.longitude AS location_longitude,
    geometry_elevatedpoint_view_enhhkb.latitude AS location_latitude,
    geometry_elevatedpoint_view_enhhkb.elevation AS location_elevation,
    geometry_elevatedpoint_view_enhhkb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_enhhkb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_enhhkb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_enhhkb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_fmqjpq.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_awhaqn.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_fvsjpw.availability as availability,
    notes_note_view_eginsk.annotation as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_enhhkb on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_enhhkb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lzqmty.*) as authority
  from master_join master_join_rlrxqy
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lzqmty on master_join_rlrxqy.target_id = navaids_points_authorityfornavaidequipment_lat_lzqmty.id
  where master_join_rlrxqy.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_fmqjpq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lxeanf.*) as monitoring
  from master_join master_join_mekewt
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lxeanf on master_join_mekewt.target_id = navaids_points_navaidequipmentmonitoring_lat_lxeanf.id
  where master_join_mekewt.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_awhaqn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_gkcurj.*) as availability
  from master_join master_join_gcwuhf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_gkcurj on master_join_gcwuhf.target_id = navaids_points_navaidoperationalstatus_lat_gkcurj.id
  where master_join_gcwuhf.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_fvsjpw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yejzed.*) AS annotation
  from master_join master_join_deczzz
  join notes.note_view notes_note_lat_yejzed on master_join_deczzz.target_id = notes_note_lat_yejzed.id
  where master_join_deczzz.source_id = navaids_points.tacan_ts.id
) as notes_note_view_eginsk on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionlightsystem.id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_szayjh.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_szayjh.nilreason[1] || ')') AS taxiholding,
    airport_heliport_taxiholdingposition_pt_szayjh.href AS taxiholding_href,
    shared_lightelement_view_lrnzzy.element as element,
    airport_heliport_groundlightingavailability_view_bfjmps.availability as availability,
    notes_note_view_cxuhoc.annotation as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_szayjh on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_szayjh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_twgboe.*) as element
  from master_join master_join_egbxwc
  join shared.lightelement_view shared_lightelement_lat_twgboe on master_join_egbxwc.target_id = shared_lightelement_lat_twgboe.id
  where master_join_egbxwc.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_lrnzzy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_bjssfs.*) as availability
  from master_join master_join_qtoras
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_bjssfs on master_join_qtoras.target_id = airport_heliport_groundlightingavailability_lat_bjssfs.id
  where master_join_qtoras.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_bfjmps on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jrpqha.*) AS annotation
  from master_join master_join_puvuhr
  join notes.note_view notes_note_lat_jrpqha on master_join_puvuhr.target_id = notes_note_lat_jrpqha.id
  where master_join_puvuhr.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_cxuhoc on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingpositionmarking.id,
    airport_heliport.taxiholdingpositionmarking_ts.id as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_dubwkk.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_dubwkk.nilreason[1] || ')') AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_dubwkk.href AS markedtaxihold_href,
    airport_heliport_markingelement_view_hlswaf.element as element,
    notes_note_view_krivec.annotation as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_dubwkk on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_dubwkk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_agvvtu.*) as element
  from master_join master_join_vhsfud
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_agvvtu on master_join_vhsfud.target_id = airport_heliport_markingelement_lat_agvvtu.id
  where master_join_vhsfud.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_hlswaf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bdhpcd.*) AS annotation
  from master_join master_join_zpkmaf
  join notes.note_view notes_note_lat_bdhpcd on master_join_zpkmaf.target_id = notes_note_lat_bdhpcd.id
  where master_join_zpkmaf.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_krivec on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiholdingposition.id,
    airport_heliport.taxiholdingposition_ts.id as ts_id,
    airport_heliport.taxiholdingposition_tsp.id as tsp_id,
    airport_heliport.taxiholdingposition.identifier,
    airport_heliport.taxiholdingposition_ts.interpretation,
    airport_heliport.taxiholdingposition_ts.sequence_number,
    airport_heliport.taxiholdingposition_ts.correction_number,
    airport_heliport.taxiholdingposition_ts.valid_time_begin,
    airport_heliport.taxiholdingposition_ts.valid_time_end,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')') as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')') as status,
    coalesce(cast(airport_heliport_guidanceline_pt_okqcby.title as varchar), '(' || airport_heliport_guidanceline_pt_okqcby.nilreason[1] || ')') AS associatedguidanceline,
    airport_heliport_guidanceline_pt_okqcby.href AS associatedguidanceline_href,
    geometry_elevatedpoint_view_sbqpcm.geom AS location_geom,
    geometry_elevatedpoint_view_sbqpcm.longitude AS location_longitude,
    geometry_elevatedpoint_view_sbqpcm.latitude AS location_latitude,
    geometry_elevatedpoint_view_sbqpcm.elevation AS location_elevation,
    geometry_elevatedpoint_view_sbqpcm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sbqpcm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sbqpcm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sbqpcm.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_etsebf.protectedrunway as protectedrunway,
    notes_note_view_xflrwk.annotation as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_okqcby on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_okqcby.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sbqpcm on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_sbqpcm.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_fozbuh.id,
      'title', coalesce(cast(airport_heliport_runway_lat_fozbuh.title AS varchar), '(' || airport_heliport_runway_lat_fozbuh.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_fozbuh.href
  )) as protectedrunway  from master_join master_join_dzyrpe
  join airport_heliport.runway_pt airport_heliport_runway_lat_fozbuh on master_join_dzyrpe.target_id = airport_heliport_runway_lat_fozbuh.id
  where master_join_dzyrpe.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_etsebf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygqxpx.*) AS annotation
  from master_join master_join_jxtwdq
  join notes.note_view notes_note_lat_ygqxpx on master_join_jxtwdq.target_id = notes_note_lat_ygqxpx.id
  where master_join_jxtwdq.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_xflrwk on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwayelement.id,
    airport_heliport.taxiwayelement_ts.id as ts_id,
    airport_heliport.taxiwayelement_tsp.id as tsp_id,
    airport_heliport.taxiwayelement.identifier,
    airport_heliport.taxiwayelement_ts.interpretation,
    airport_heliport.taxiwayelement_ts.sequence_number,
    airport_heliport.taxiwayelement_ts.correction_number,
    airport_heliport.taxiwayelement_ts.valid_time_begin,
    airport_heliport.taxiwayelement_ts.valid_time_end,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')') as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')') as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qnbesy.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_wdjdzv.title as varchar), '(' || airport_heliport_taxiway_pt_wdjdzv.nilreason[1] || ')') AS associatedtaxiway,
    airport_heliport_taxiway_pt_wdjdzv.href AS associatedtaxiway_href,
    geometry_elevatedsurface_view_ycieoj.geom AS extent_geom,
    geometry_elevatedsurface_view_ycieoj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ycieoj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ycieoj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ycieoj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ycieoj.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_rbjzea.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_pcnfpb.availability as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qnbesy on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qnbesy.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_wdjdzv on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_wdjdzv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ycieoj on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_ycieoj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbijee.*) AS annotation
  from master_join master_join_ytvqhs
  join notes.note_view notes_note_lat_wbijee on master_join_ytvqhs.target_id = notes_note_lat_wbijee.id
  where master_join_ytvqhs.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_rbjzea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_blcsta.*) as availability
  from master_join master_join_hpgaaf
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_blcsta on master_join_hpgaaf.target_id = airport_heliport_manoeuvringareaavailability_lat_blcsta.id
  where master_join_hpgaaf.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_pcnfpb on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaylightsystem.id,
    airport_heliport.taxiwaylightsystem_ts.id as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier,
    airport_heliport.taxiwaylightsystem_ts.interpretation,
    airport_heliport.taxiwaylightsystem_ts.sequence_number,
    airport_heliport.taxiwaylightsystem_ts.correction_number,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_taxiway_pt_potrhm.title as varchar), '(' || airport_heliport_taxiway_pt_potrhm.nilreason[1] || ')') AS lightedtaxiway,
    airport_heliport_taxiway_pt_potrhm.href AS lightedtaxiway_href,
    shared_lightelement_view_rpnpil.element as element,
    airport_heliport_groundlightingavailability_view_ilwgul.availability as availability,
    notes_note_view_exevnc.annotation as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_potrhm on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_potrhm.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_niqgel.*) as element
  from master_join master_join_fmssrb
  join shared.lightelement_view shared_lightelement_lat_niqgel on master_join_fmssrb.target_id = shared_lightelement_lat_niqgel.id
  where master_join_fmssrb.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_rpnpil on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_raxrbc.*) as availability
  from master_join master_join_vcvyuc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_raxrbc on master_join_vcvyuc.target_id = airport_heliport_groundlightingavailability_lat_raxrbc.id
  where master_join_vcvyuc.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ilwgul on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ltnjse.*) AS annotation
  from master_join master_join_qrsavk
  join notes.note_view notes_note_lat_ltnjse on master_join_qrsavk.target_id = notes_note_lat_ltnjse.id
  where master_join_qrsavk.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_exevnc on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiwaymarking.id,
    airport_heliport.taxiwaymarking_ts.id as ts_id,
    airport_heliport.taxiwaymarking_tsp.id as tsp_id,
    airport_heliport.taxiwaymarking.identifier,
    airport_heliport.taxiwaymarking_ts.interpretation,
    airport_heliport.taxiwaymarking_ts.sequence_number,
    airport_heliport.taxiwaymarking_ts.correction_number,
    airport_heliport.taxiwaymarking_ts.valid_time_begin,
    airport_heliport.taxiwaymarking_ts.valid_time_end,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_esvlbo.title as varchar), '(' || airport_heliport_taxiway_pt_esvlbo.nilreason[1] || ')') AS markedtaxiway,
    airport_heliport_taxiway_pt_esvlbo.href AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_frxluy.title as varchar), '(' || airport_heliport_taxiwayelement_pt_frxluy.nilreason[1] || ')') AS markedelement,
    airport_heliport_taxiwayelement_pt_frxluy.href AS markedelement_href,
    airport_heliport_markingelement_view_fwtzav.element as element,
    notes_note_view_vupnhp.annotation as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_esvlbo on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_esvlbo.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_frxluy on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_frxluy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_kvthoh.*) as element
  from master_join master_join_mxzkqz
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_kvthoh on master_join_mxzkqz.target_id = airport_heliport_markingelement_lat_kvthoh.id
  where master_join_mxzkqz.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_fwtzav on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edrbpc.*) AS annotation
  from master_join master_join_rgllib
  join notes.note_view notes_note_lat_edrbpc on master_join_rgllib.target_id = notes_note_lat_edrbpc.id
  where master_join_rgllib.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_vupnhp on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['airport_heliport.taxiwaycontamination_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.taxiway.id,
    airport_heliport.taxiway_ts.id as ts_id,
    airport_heliport.taxiway_tsp.id as tsp_id,
    airport_heliport.taxiway.identifier,
    airport_heliport.taxiway_ts.interpretation,
    airport_heliport.taxiway_ts.sequence_number,
    airport_heliport.taxiway_ts.correction_number,
    airport_heliport.taxiway_ts.valid_time_begin,
    airport_heliport.taxiway_ts.valid_time_end,
    airport_heliport.taxiway_ts.feature_lifetime_begin,
    airport_heliport.taxiway_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')') as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xptxfv.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_iolswf.title as varchar), '(' || airport_heliport_airportheliport_pt_iolswf.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_iolswf.href AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_kvtmym.contaminant as contaminant,
    notes_note_view_mthzrm.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_awkhob.availability as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xptxfv on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xptxfv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_iolswf on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_iolswf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_znomtp.*) as contaminant
  from master_join master_join_mclwlr
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_znomtp on master_join_mclwlr.target_id = airport_heliport_taxiwaycontamination_lat_znomtp.id
  where master_join_mclwlr.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_kvtmym on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wtpsbx.*) AS annotation
  from master_join master_join_dykvwh
  join notes.note_view notes_note_lat_wtpsbx on master_join_dykvwh.target_id = notes_note_lat_wtpsbx.id
  where master_join_dykvwh.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_mthzrm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_mvxpuh.*) as availability
  from master_join master_join_xwvpwe
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_mvxpuh on master_join_xwvpwe.target_id = airport_heliport_manoeuvringareaavailability_lat_mvxpuh.id
  where master_join_xwvpwe.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_awkhob on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['geometry.point_view', 'procedure.terminalarrivalareasector_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    procedure.terminalarrivalarea.id,
    procedure.terminalarrivalarea_ts.id as ts_id,
    procedure.terminalarrivalarea_tsp.id as tsp_id,
    procedure.terminalarrivalarea.identifier,
    procedure.terminalarrivalarea_ts.interpretation,
    procedure.terminalarrivalarea_ts.sequence_number,
    procedure.terminalarrivalarea_ts.correction_number,
    procedure.terminalarrivalarea_ts.valid_time_begin,
    procedure.terminalarrivalarea_ts.valid_time_end,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin,
    procedure.terminalarrivalarea_ts.feature_lifetime_end,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')') as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')') as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')') as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_zgrhia.title as varchar), '(' || navaids_points_designatedpoint_pt_zgrhia.nilreason[1] || ')') AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_zgrhia.href AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ouufqt.title as varchar), '(' || navaids_points_designatedpoint_pt_ouufqt.nilreason[1] || ')') AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ouufqt.href AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_adarlf.title as varchar), '(' || navaids_points_navaid_pt_adarlf.nilreason[1] || ')') AS ifnavaidsystem,
    navaids_points_navaid_pt_adarlf.href AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_xfrapn.title as varchar), '(' || navaids_points_navaid_pt_xfrapn.nilreason[1] || ')') AS iafnavaidsystem,
    navaids_points_navaid_pt_xfrapn.href AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_lfyewi.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_lfyewi.nilreason[1] || ')') AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_lfyewi.href AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_uexleb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_uexleb.nilreason[1] || ')') AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_uexleb.href AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ewemio.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ewemio.nilreason[1] || ')') AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ewemio.href AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_mgebiw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_mgebiw.nilreason[1] || ')') AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_mgebiw.href AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_wrmghm.title as varchar), '(' || airport_heliport_airportheliport_pt_wrmghm.nilreason[1] || ')') AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_wrmghm.href AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_npzgaa.title as varchar), '(' || airport_heliport_airportheliport_pt_npzgaa.nilreason[1] || ')') AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_npzgaa.href AS iafairportreferencepoint_href,
    geometry_point_view_wwlxxv.geom AS ifposition_geom,
    geometry_point_view_wwlxxv.longitude AS ifposition_longitude,
    geometry_point_view_wwlxxv.latitude AS ifposition_latitude,
    geometry_point_view_wwlxxv.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_jibbrk.geom AS iafposition_geom,
    geometry_point_view_jibbrk.longitude AS iafposition_longitude,
    geometry_point_view_jibbrk.latitude AS iafposition_latitude,
    geometry_point_view_jibbrk.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_zjfekk.geom AS buffer_geom,
    geometry_surface_view_zjfekk.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ijzhmn.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ijzhmn.nilreason[1] || ')') AS approachrnav,
    procedure_instrumentapproachprocedure_pt_ijzhmn.href AS approachrnav_href,
    procedure_terminalarrivalareasector_view_equtii.sector as sector,
    notes_note_view_nrlmry.annotation as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zgrhia on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zgrhia.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_adarlf on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_adarlf.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_lfyewi on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_lfyewi.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ewemio on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ewemio.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_wrmghm on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_wrmghm.id
left join geometry.point_view geometry_point_view_wwlxxv on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_wwlxxv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ouufqt on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ouufqt.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xfrapn on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_xfrapn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_uexleb on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_uexleb.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_mgebiw on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_mgebiw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_npzgaa on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_npzgaa.id
left join geometry.point_view geometry_point_view_jibbrk on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_jibbrk.id
left join geometry.surface_view geometry_surface_view_zjfekk on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_zjfekk.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ijzhmn on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_ijzhmn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_paaxwi.*) as sector
  from master_join master_join_uhnamo
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_paaxwi on master_join_uhnamo.target_id = procedure_terminalarrivalareasector_lat_paaxwi.id
  where master_join_uhnamo.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_equtii on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mdppko.*) AS annotation
  from master_join master_join_kmqoel
  join notes.note_view notes_note_lat_mdppko on master_join_kmqoel.target_id = notes_note_lat_mdppko.id
  where master_join_kmqoel.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_nrlmry on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftofflightsystem.id,
    airport_heliport.touchdownliftofflightsystem_ts.id as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_obnhkx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_obnhkx.nilreason[1] || ')') AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_obnhkx.href AS lightedtouchdownliftoff_href,
    shared_lightelement_view_aqfzfm.element as element,
    airport_heliport_groundlightingavailability_view_blcdyk.availability as availability,
    notes_note_view_cexacj.annotation as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_obnhkx on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_obnhkx.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vcroqz.*) as element
  from master_join master_join_cwvfro
  join shared.lightelement_view shared_lightelement_lat_vcroqz on master_join_cwvfro.target_id = shared_lightelement_lat_vcroqz.id
  where master_join_cwvfro.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_aqfzfm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mliabq.*) as availability
  from master_join master_join_lbvtvi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mliabq on master_join_lbvtvi.target_id = airport_heliport_groundlightingavailability_lat_mliabq.id
  where master_join_lbvtvi.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_blcdyk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wgmhdx.*) AS annotation
  from master_join master_join_myhecn
  join notes.note_view notes_note_lat_wgmhdx on master_join_myhecn.target_id = notes_note_lat_wgmhdx.id
  where master_join_myhecn.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_cexacj on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffmarking.id,
    airport_heliport.touchdownliftoffmarking_ts.id as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier,
    airport_heliport.touchdownliftoffmarking_ts.interpretation,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number,
    airport_heliport.touchdownliftoffmarking_ts.correction_number,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')') as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')') as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_giffmv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_giffmv.nilreason[1] || ')') AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_giffmv.href AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_gsstxl.element as element,
    notes_note_view_oicked.annotation as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_giffmv on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_giffmv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_txiyqy.*) as element
  from master_join master_join_dpnfbg
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_txiyqy on master_join_dpnfbg.target_id = airport_heliport_markingelement_lat_txiyqy.id
  where master_join_dpnfbg.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_gsstxl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xszgmt.*) AS annotation
  from master_join master_join_jsleij
  join notes.note_view notes_note_lat_xszgmt on master_join_jsleij.target_id = notes_note_lat_xszgmt.id
  where master_join_jsleij.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_oicked on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoffsafearea.id,
    airport_heliport.touchdownliftoffsafearea_ts.id as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')') as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')') as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')') as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')') as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rcjjnd.*) AS surfaceproperties,
    geometry_elevatedsurface_view_qfweve.geom AS extent_geom,
    geometry_elevatedsurface_view_qfweve.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qfweve.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qfweve.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qfweve.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qfweve.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ogvoay.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ogvoay.nilreason[1] || ')') AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ogvoay.href AS protectedtouchdownliftoff_href,
    notes_note_view_kzkvnt.annotation as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rcjjnd on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rcjjnd.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qfweve on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_qfweve.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ogvoay on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ogvoay.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xdifsm.*) AS annotation
  from master_join master_join_jgemqv
  join notes.note_view notes_note_lat_xdifsm on master_join_jgemqv.target_id = notes_note_lat_xdifsm.id
  where master_join_jgemqv.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_kzkvnt on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view', 'airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.touchdownliftoff.id,
    airport_heliport.touchdownliftoff_ts.id as ts_id,
    airport_heliport.touchdownliftoff_tsp.id as tsp_id,
    airport_heliport.touchdownliftoff.identifier,
    airport_heliport.touchdownliftoff_ts.interpretation,
    airport_heliport.touchdownliftoff_ts.sequence_number,
    airport_heliport.touchdownliftoff_ts.correction_number,
    airport_heliport.touchdownliftoff_ts.valid_time_begin,
    airport_heliport.touchdownliftoff_ts.valid_time_end,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')') as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')') as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')') as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')') as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')') as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')') as width,
    geometry_elevatedpoint_view_yifywj.geom AS aimingpoint_geom,
    geometry_elevatedpoint_view_yifywj.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_yifywj.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_yifywj.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_yifywj.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_yifywj.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_yifywj.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_yifywj.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_xsccki.geom AS extent_geom,
    geometry_elevatedsurface_view_xsccki.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xsccki.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xsccki.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xsccki.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xsccki.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jbpznk.*) AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_bifktb.title as varchar), '(' || airport_heliport_airportheliport_pt_bifktb.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_bifktb.href AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_hwvepq.title as varchar), '(' || airport_heliport_runway_pt_hwvepq.nilreason[1] || ')') AS approachtakeoffarea,
    airport_heliport_runway_pt_hwvepq.href AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_pkeqva.contaminant as contaminant,
    notes_note_view_ntchyr.annotation as annotation,
    airport_heliport_manoeuvringareaavailability_view_utujbt.availability as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yifywj on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_yifywj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xsccki on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_xsccki.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jbpznk on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jbpznk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bifktb on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_bifktb.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_hwvepq on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_hwvepq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_qnrhwk.*) as contaminant
  from master_join master_join_eyumrn
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_qnrhwk on master_join_eyumrn.target_id = airport_heliport_touchdownliftoffcontamination_lat_qnrhwk.id
  where master_join_eyumrn.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_pkeqva on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ytlgfc.*) AS annotation
  from master_join master_join_cuhbsl
  join notes.note_view notes_note_lat_ytlgfc on master_join_cuhbsl.target_id = notes_note_lat_ytlgfc.id
  where master_join_cuhbsl.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_ntchyr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ttpekj.*) as availability
  from master_join master_join_yczgvd
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ttpekj on master_join_yczgvd.target_id = airport_heliport_manoeuvringareaavailability_lat_ttpekj.id
  where master_join_yczgvd.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_utujbt on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['shared.contactinformation_view', 'organisation.unitdependency_view', 'organisation.unitavailability_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    organisation.unit.id,
    organisation.unit_ts.id as ts_id,
    organisation.unit_tsp.id as tsp_id,
    organisation.unit.identifier,
    organisation.unit_ts.interpretation,
    organisation.unit_ts.sequence_number,
    organisation.unit_ts.correction_number,
    organisation.unit_ts.valid_time_begin,
    organisation.unit_ts.valid_time_end,
    organisation.unit_ts.feature_lifetime_begin,
    organisation.unit_ts.feature_lifetime_end,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')') as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')') as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')') as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')') as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')') as military,
    geometry_elevatedpoint_view_feotyr.geom AS position_geom,
    geometry_elevatedpoint_view_feotyr.longitude AS position_longitude,
    geometry_elevatedpoint_view_feotyr.latitude AS position_latitude,
    geometry_elevatedpoint_view_feotyr.elevation AS position_elevation,
    geometry_elevatedpoint_view_feotyr.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_feotyr.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_feotyr.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_feotyr.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_tvvxov.title as varchar), '(' || airport_heliport_airportheliport_pt_tvvxov.nilreason[1] || ')') AS airportlocation,
    airport_heliport_airportheliport_pt_tvvxov.href AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_jmqdjx.title as varchar), '(' || organisation_organisationauthority_pt_jmqdjx.nilreason[1] || ')') AS ownerorganisation,
    organisation_organisationauthority_pt_jmqdjx.href AS ownerorganisation_href,
    organisation_unitdependency_view_zxdnej.relatedunit as relatedunit,
    organisation_unitavailability_view_srxuer.availability as availability,
    notes_note_view_ergwey.annotation as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_feotyr on organisation.unit_ts.position_id = geometry_elevatedpoint_view_feotyr.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tvvxov on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_tvvxov.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jmqdjx on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_jmqdjx.id
left join lateral(
  select
  from master_join master_join_crroia
  join shared.contactinformation_view shared_contactinformation_lat_oexvrn on master_join_crroia.target_id = shared_contactinformation_lat_oexvrn.id
  where master_join_crroia.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_byakcq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_dmgwqu.*) as relatedunit
  from master_join master_join_zjclst
  join organisation.unitdependency_view organisation_unitdependency_lat_dmgwqu on master_join_zjclst.target_id = organisation_unitdependency_lat_dmgwqu.id
  where master_join_zjclst.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_zxdnej on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_txeklh.*) as availability
  from master_join master_join_hsiore
  join organisation.unitavailability_view organisation_unitavailability_lat_txeklh on master_join_hsiore.target_id = organisation_unitavailability_lat_txeklh.id
  where master_join_hsiore.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_srxuer on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gsljqk.*) AS annotation
  from master_join master_join_hqcukv
  join notes.note_view notes_note_lat_gsljqk on master_join_hqcukv.target_id = notes_note_lat_gsljqk.id
  where master_join_hqcukv.source_id = organisation.unit_ts.id
) as notes_note_view_ergwey on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    holding.unplannedholding.id,
    holding.unplannedholding_ts.id as ts_id,
    holding.unplannedholding_tsp.id as tsp_id,
    holding.unplannedholding.identifier,
    holding.unplannedholding_ts.interpretation,
    holding.unplannedholding_ts.sequence_number,
    holding.unplannedholding_ts.correction_number,
    holding.unplannedholding_ts.valid_time_begin,
    holding.unplannedholding_ts.valid_time_end,
    holding.unplannedholding_ts.feature_lifetime_begin,
    holding.unplannedholding_ts.feature_lifetime_end,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')') as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')') as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')') as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')') as authorizedaltitude,
    notes_note_view_kdefxx.annotation as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nozvsr.*) AS annotation
  from master_join master_join_dvskeh
  join notes.note_view notes_note_lat_nozvsr on master_join_dvskeh.target_id = notes_note_lat_nozvsr.id
  where master_join_dvskeh.source_id = holding.unplannedholding_ts.id
) as notes_note_view_kdefxx on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurelightingstatus_view', 'notes.note_view', 'obstacles.verticalstructurepart_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    obstacles.verticalstructure.id,
    obstacles.verticalstructure_ts.id as ts_id,
    obstacles.verticalstructure_tsp.id as tsp_id,
    obstacles.verticalstructure.identifier,
    obstacles.verticalstructure_ts.interpretation,
    obstacles.verticalstructure_ts.sequence_number,
    obstacles.verticalstructure_ts.correction_number,
    obstacles.verticalstructure_ts.valid_time_begin,
    obstacles.verticalstructure_ts.valid_time_end,
    obstacles.verticalstructure_ts.feature_lifetime_begin,
    obstacles.verticalstructure_ts.feature_lifetime_end,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')') as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')') as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')') as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')') as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')') as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')') as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')') as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')') as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')') as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')') as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_wrucpm.title as varchar), '(' || navaids_points_markerbeacon_pt_wrucpm.nilreason[1] || ')') AS marker,
    navaids_points_markerbeacon_pt_wrucpm.href AS marker_href,
    obstacles_verticalstructurepart_view_saxsmy.part as part,
    service_passengerservice_pt_dzkhnw.hostedpassengerservice as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_nbpomx.hostedspecialnavstation as hostedspecialnavstation,
    organisation_unit_pt_pqffat.hostedunit as hostedunit,
    organisation_organisationauthority_pt_dvlvky.hostedorganisation as hostedorganisation,
    notes_note_view_crrtqb.annotation as annotation,
    obstacles_verticalstructurelightingstatus_view_mryein.lightingavailability as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_wrucpm on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_wrucpm.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_tabqyx.*) as part
  from master_join master_join_cqvydj
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_tabqyx on master_join_cqvydj.target_id = obstacles_verticalstructurepart_lat_tabqyx.id
  where master_join_cqvydj.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_saxsmy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_pfjsik.id,
      'title', coalesce(cast(service_passengerservice_lat_pfjsik.title AS varchar), '(' || service_passengerservice_lat_pfjsik.nilreason[1] || ')'),
      'href', service_passengerservice_lat_pfjsik.href
  )) as hostedpassengerservice  from master_join master_join_vgxott
  join service.passengerservice_pt service_passengerservice_lat_pfjsik on master_join_vgxott.target_id = service_passengerservice_lat_pfjsik.id
  where master_join_vgxott.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_dzkhnw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_nxwbiv.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_nxwbiv.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_nxwbiv.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_nxwbiv.href
  )) as hostedspecialnavstation  from master_join master_join_izmkju
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_nxwbiv on master_join_izmkju.target_id = navaids_points_specialnavigationstation_lat_nxwbiv.id
  where master_join_izmkju.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_nbpomx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_ygyrpf.id,
      'title', coalesce(cast(organisation_unit_lat_ygyrpf.title AS varchar), '(' || organisation_unit_lat_ygyrpf.nilreason[1] || ')'),
      'href', organisation_unit_lat_ygyrpf.href
  )) as hostedunit  from master_join master_join_ofbdhn
  join organisation.unit_pt organisation_unit_lat_ygyrpf on master_join_ofbdhn.target_id = organisation_unit_lat_ygyrpf.id
  where master_join_ofbdhn.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_pqffat on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_byvxls.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_byvxls.title AS varchar), '(' || organisation_organisationauthority_lat_byvxls.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_byvxls.href
  )) as hostedorganisation  from master_join master_join_oycbdh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_byvxls on master_join_oycbdh.target_id = organisation_organisationauthority_lat_byvxls.id
  where master_join_oycbdh.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_dvlvky on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mrcvxp.*) AS annotation
  from master_join master_join_bwyump
  join notes.note_view notes_note_lat_mrcvxp on master_join_bwyump.target_id = notes_note_lat_mrcvxp.id
  where master_join_bwyump.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_crrtqb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_gsfile.*) as lightingavailability
  from master_join master_join_xizbet
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_gsfile on master_join_xizbet.target_id = obstacles_verticalstructurelightingstatus_lat_gsfile.id
  where master_join_xizbet.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_mryein on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['airport_heliport.groundlightingavailability_view', 'notes.note_view', 'shared.lightelement_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.visualglideslopeindicator.id,
    airport_heliport.visualglideslopeindicator_ts.id as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier,
    airport_heliport.visualglideslopeindicator_ts.interpretation,
    airport_heliport.visualglideslopeindicator_ts.sequence_number,
    airport_heliport.visualglideslopeindicator_ts.correction_number,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')') as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')') as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')') as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')') as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')') as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')') as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')') as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')') as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_tetgkn.title as varchar), '(' || airport_heliport_runwaydirection_pt_tetgkn.nilreason[1] || ')') AS runwaydirection,
    airport_heliport_runwaydirection_pt_tetgkn.href AS runwaydirection_href,
    shared_lightelement_view_ybkpmv.element as element,
    airport_heliport_groundlightingavailability_view_dhisqi.availability as availability,
    notes_note_view_peuwph.annotation as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_tetgkn on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_tetgkn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vsxctc.*) as element
  from master_join master_join_fynivo
  join shared.lightelement_view shared_lightelement_lat_vsxctc on master_join_fynivo.target_id = shared_lightelement_lat_vsxctc.id
  where master_join_fynivo.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_ybkpmv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_lqspuo.*) as availability
  from master_join master_join_synmiy
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_lqspuo on master_join_synmiy.target_id = airport_heliport_groundlightingavailability_lat_lqspuo.id
  where master_join_synmiy.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_dhisqi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_krzbcw.*) AS annotation
  from master_join master_join_lbgasn
  join notes.note_view notes_note_lat_krzbcw on master_join_lbgasn.target_id = notes_note_lat_krzbcw.id
  where master_join_lbgasn.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_peuwph on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view', 'navaids_points.navaidoperationalstatus_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    navaids_points.vor.id,
    navaids_points.vor_ts.id as ts_id,
    navaids_points.vor_tsp.id as tsp_id,
    navaids_points.vor.identifier,
    navaids_points.vor_ts.interpretation,
    navaids_points.vor_ts.sequence_number,
    navaids_points.vor_ts.correction_number,
    navaids_points.vor_ts.valid_time_begin,
    navaids_points.vor_ts.valid_time_end,
    navaids_points.vor_ts.feature_lifetime_begin,
    navaids_points.vor_ts.feature_lifetime_end,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')') as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')') as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')') as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')') as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')') as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')') as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')') as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')') as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')') as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')') as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')') as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')') as frequency,
    geometry_elevatedpoint_view_pgqbyz.geom AS location_geom,
    geometry_elevatedpoint_view_pgqbyz.longitude AS location_longitude,
    geometry_elevatedpoint_view_pgqbyz.latitude AS location_latitude,
    geometry_elevatedpoint_view_pgqbyz.elevation AS location_elevation,
    geometry_elevatedpoint_view_pgqbyz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pgqbyz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pgqbyz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pgqbyz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kqvxyu.authority as authority,
    navaids_points_navaidequipmentmonitoring_view_qyycmf.monitoring as monitoring,
    navaids_points_navaidoperationalstatus_view_frxqdi.availability as availability,
    notes_note_view_fbikqv.annotation as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pgqbyz on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_pgqbyz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_lcdmvy.*) as authority
  from master_join master_join_mjighq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_lcdmvy on master_join_mjighq.target_id = navaids_points_authorityfornavaidequipment_lat_lcdmvy.id
  where master_join_mjighq.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_kqvxyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ixkfdn.*) as monitoring
  from master_join master_join_yxrugn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ixkfdn on master_join_yxrugn.target_id = navaids_points_navaidequipmentmonitoring_lat_ixkfdn.id
  where master_join_yxrugn.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_qyycmf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ucdgpw.*) as availability
  from master_join master_join_cwbrsw
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ucdgpw on master_join_cwbrsw.target_id = navaids_points_navaidoperationalstatus_lat_ucdgpw.id
  where master_join_cwbrsw.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_frxqdi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fphefc.*) AS annotation
  from master_join master_join_icbhaf
  join notes.note_view notes_note_lat_fphefc on master_join_icbhaf.target_id = notes_note_lat_fphefc.id
  where master_join_icbhaf.source_id = navaids_points.vor_ts.id
) as notes_note_view_fbikqv on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.workareaactivity_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() OVER ())::integer AS row,
    airport_heliport.workarea.id,
    airport_heliport.workarea_ts.id as ts_id,
    airport_heliport.workarea_tsp.id as tsp_id,
    airport_heliport.workarea.identifier,
    airport_heliport.workarea_ts.interpretation,
    airport_heliport.workarea_ts.sequence_number,
    airport_heliport.workarea_ts.correction_number,
    airport_heliport.workarea_ts.valid_time_begin,
    airport_heliport.workarea_ts.valid_time_end,
    airport_heliport.workarea_ts.feature_lifetime_begin,
    airport_heliport.workarea_ts.feature_lifetime_end,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')') as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')') as type,
    coalesce(cast(airport_heliport_airportheliport_pt_tknmhy.title as varchar), '(' || airport_heliport_airportheliport_pt_tknmhy.nilreason[1] || ')') AS associatedairportheliport,
    airport_heliport_airportheliport_pt_tknmhy.href AS associatedairportheliport_href,
    geometry_elevatedsurface_view_oescbd.geom AS extent_geom,
    geometry_elevatedsurface_view_oescbd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_oescbd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_oescbd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_oescbd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_oescbd.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_qqcnxs.activation as activation,
    notes_note_view_ebtofp.annotation as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tknmhy on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_tknmhy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_oescbd on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_oescbd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_oeposx.*) as activation
  from master_join master_join_vnnnjz
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_oeposx on master_join_vnnnjz.target_id = airport_heliport_workareaactivity_lat_oeposx.id
  where master_join_vnnnjz.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_qqcnxs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dneayf.*) AS annotation
  from master_join master_join_eiogsy
  join notes.note_view notes_note_lat_dneayf on master_join_eiogsy.target_id = notes_note_lat_dneayf.id
  where master_join_eiogsy.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_ebtofp on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
