-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_fqqvzh.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ipgreb.*) AS annotation
  from master_join master_join_tuvhcu
  join notes.note_view notes_note_lat_ipgreb on master_join_tuvhcu.target_id = notes_note_lat_ipgreb.id
  where master_join_tuvhcu.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_fqqvzh on TRUE;
create index on shared.aircraftcharacteristic_view (id);
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_muiilz.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_xscqkk.layer::jsonb as layer,
    notes_note_view_uvorhu.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_iwzbwr.id) as criticalridge
  from master_join master_join_tncici
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_iwzbwr on master_join_tncici.target_id = airport_heliport_ridge_lat_iwzbwr.id
  where master_join_tncici.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_muiilz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_dixaef.id) as layer
  from master_join master_join_husafg
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_dixaef on master_join_husafg.target_id = airport_heliport_surfacecontaminationlayer_lat_dixaef.id
  where master_join_husafg.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_xscqkk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qhfjci.*) AS annotation
  from master_join master_join_awasus
  join notes.note_view notes_note_lat_qhfjci on master_join_awasus.target_id = notes_note_lat_qhfjci.id
  where master_join_awasus.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_uvorhu on TRUE;
create index on airport_heliport.aircraftstandcontamination_view (id);
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_sqmzog.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_krfwhz.layer::jsonb as layer,
    notes_note_view_idubpl.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_tccuim.id) as criticalridge
  from master_join master_join_mefhwr
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_tccuim on master_join_mefhwr.target_id = airport_heliport_ridge_lat_tccuim.id
  where master_join_mefhwr.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_sqmzog on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_sgjkzz.id) as layer
  from master_join master_join_cspijr
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_sgjkzz on master_join_cspijr.target_id = airport_heliport_surfacecontaminationlayer_lat_sgjkzz.id
  where master_join_cspijr.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_krfwhz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_reonxo.*) AS annotation
  from master_join master_join_evvgws
  join notes.note_view notes_note_lat_reonxo on master_join_evvgws.target_id = notes_note_lat_reonxo.id
  where master_join_evvgws.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_idubpl on TRUE;
create index on airport_heliport.airportheliportcontamination_view (id);
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_jeyiot.id)::jsonb AS theairspacevolume,
    notes_note_view_zotefd.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_jeyiot on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_jeyiot.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wnvncr.*) AS annotation
  from master_join master_join_vyciij
  join notes.note_view notes_note_lat_wnvncr on master_join_vyciij.target_id = notes_note_lat_wnvncr.id
  where master_join_vyciij.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_zotefd on TRUE;
create index on airspace.airspacegeometrycomponent_view (id);
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_hebnoi.title as varchar), '(' || shared_standardlevelcolumn_pt_hebnoi.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_hebnoi.href::text AS discretelevelseries_href,
    notes_note_view_uklslm.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_hebnoi on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_hebnoi.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_epednc.*) AS annotation
  from master_join master_join_ruwpnt
  join notes.note_view notes_note_lat_epednc on master_join_ruwpnt.target_id = notes_note_lat_epednc.id
  where master_join_ruwpnt.source_id = shared.airspacelayer.id
) as notes_note_view_uklslm on TRUE;
create index on shared.airspacelayer_view (id);
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_fcyzty.title as varchar), '(' || airspace_airspace_pt_fcyzty.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_fcyzty.href::text AS theairspace_href,
    notes_note_view_cjmehb.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_fcyzty on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_fcyzty.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tffiww.*) AS annotation
  from master_join master_join_nvvdlx
  join notes.note_view notes_note_lat_tffiww on master_join_nvvdlx.target_id = notes_note_lat_tffiww.id
  where master_join_nvvdlx.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_cjmehb on TRUE;
create index on airspace.airspacevolumedependency_view (id);
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_uivyfb.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvqlaf.*) AS annotation
  from master_join master_join_hseyzq
  join notes.note_view notes_note_lat_bvqlaf on master_join_hseyzq.target_id = notes_note_lat_bvqlaf.id
  where master_join_hseyzq.source_id = shared.altitudeadjustment.id
) as notes_note_view_uivyfb on TRUE;
create index on shared.altitudeadjustment_view (id);
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_rhuynu.title as varchar), '(' || navaids_points_angleindication_pt_rhuynu.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_rhuynu.href::text AS theangleindication_href,
    notes_note_view_zfdqja.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_rhuynu on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_rhuynu.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_spczsf.*) AS annotation
  from master_join master_join_plkyvc
  join notes.note_view notes_note_lat_spczsf on master_join_plkyvc.target_id = notes_note_lat_spczsf.id
  where master_join_plkyvc.source_id = navaids_points.angleuse.id
) as notes_note_view_zfdqja on TRUE;
create index on navaids_points.angleuse_view (id);
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_hnahtp.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xanktw.*) AS annotation
  from master_join master_join_osvwor
  join notes.note_view notes_note_lat_xanktw on master_join_osvwor.target_id = notes_note_lat_xanktw.id
  where master_join_osvwor.source_id = procedure.approachaltitudetable.id
) as notes_note_view_hnahtp on TRUE;
create index on procedure.approachaltitudetable_view (id);
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_xpmmqd.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_xdkutn.title as varchar), '(' || airport_heliport_altimetersource_pt_xdkutn.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_xdkutn.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_rqpdsn.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_hlzomc.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_xdfpep.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_rqtzci.designsurface::jsonb as designsurface,
    notes_note_view_tflmhe.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_xpmmqd on procedure.approachcondition.minimumset_id = procedure_minima_pt_xpmmqd.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_xdkutn on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_xdkutn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_hmnfje.id) as circlingrestriction
  from master_join master_join_zqdghc
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_hmnfje on master_join_zqdghc.target_id = procedure_circlingrestriction_lat_hmnfje.id
  where master_join_zqdghc.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_rqpdsn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_mzjsri.id) as aircraftcategory
  from master_join master_join_nvjmjp
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_mzjsri on master_join_nvjmjp.target_id = shared_aircraftcharacteristic_lat_mzjsri.id
  where master_join_nvjmjp.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_hlzomc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_qaypww.id) as landingarea
  from master_join master_join_thanie
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_qaypww on master_join_thanie.target_id = procedure_landingtakeoffareacollection_lat_qaypww.id
  where master_join_thanie.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_xdfpep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ssehqu.id) as designsurface
  from master_join master_join_uqamsc
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_ssehqu on master_join_uqamsc.target_id = shared_obstacleassessmentarea_lat_ssehqu.id
  where master_join_uqamsc.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_rqtzci on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nqazix.*) AS annotation
  from master_join master_join_vdyjxw
  join notes.note_view notes_note_lat_nqazix on master_join_vdyjxw.target_id = notes_note_lat_nqazix.id
  where master_join_vdyjxw.source_id = procedure.approachcondition.id
) as notes_note_view_tflmhe on TRUE;
create index on procedure.approachcondition_view (id);
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_qfyctj.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ghfelu.*) AS annotation
  from master_join master_join_mcjqsv
  join notes.note_view notes_note_lat_ghfelu on master_join_mcjqsv.target_id = notes_note_lat_ghfelu.id
  where master_join_mcjqsv.source_id = procedure.approachdistancetable.id
) as notes_note_view_qfyctj on TRUE;
create index on procedure.approachdistancetable_view (id);
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_dnyheg.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bqvere.*) AS annotation
  from master_join master_join_jdsnlr
  join notes.note_view notes_note_lat_bqvere on master_join_jdsnlr.target_id = notes_note_lat_bqvere.id
  where master_join_jdsnlr.source_id = procedure.approachtimingtable.id
) as notes_note_view_dnyheg on TRUE;
create index on procedure.approachtimingtable_view (id);
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_dzzrbd.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_qlcxks.layer::jsonb as layer,
    notes_note_view_wjgdal.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_qlsrjp.id) as criticalridge
  from master_join master_join_rstwkh
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_qlsrjp on master_join_rstwkh.target_id = airport_heliport_ridge_lat_qlsrjp.id
  where master_join_rstwkh.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_dzzrbd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_jayqfp.id) as layer
  from master_join master_join_oefyfb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_jayqfp on master_join_oefyfb.target_id = airport_heliport_surfacecontaminationlayer_lat_jayqfp.id
  where master_join_oefyfb.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_qlcxks on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dbfppr.*) AS annotation
  from master_join master_join_onjhcl
  join notes.note_view notes_note_lat_dbfppr on master_join_onjhcl.target_id = notes_note_lat_dbfppr.id
  where master_join_onjhcl.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_wjgdal on TRUE;
create index on airport_heliport.aproncontamination_view (id);
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ctwmxt.title as varchar), '(' || organisation_organisationauthority_pt_ctwmxt.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ctwmxt.href::text AS theorganisationauthority_href,
    notes_note_view_kbjouy.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ctwmxt on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_ctwmxt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfwtkk.*) AS annotation
  from master_join master_join_rebrvf
  join notes.note_view notes_note_lat_tfwtkk on master_join_rebrvf.target_id = notes_note_lat_tfwtkk.id
  where master_join_rebrvf.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_kbjouy on TRUE;
create index on aerial_refuelling.authorityforaerialrefuelling_view (id);
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ghdfvp.title as varchar), '(' || organisation_organisationauthority_pt_ghdfvp.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ghdfvp.href::text AS theorganisationauthority_href,
    notes_note_view_erugzw.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ghdfvp on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_ghdfvp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ojinqw.*) AS annotation
  from master_join master_join_owlhmo
  join notes.note_view notes_note_lat_ojinqw on master_join_owlhmo.target_id = notes_note_lat_ojinqw.id
  where master_join_owlhmo.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_erugzw on TRUE;
create index on navaids_points.authorityfornavaidequipment_view (id);
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_ncbpig.title as varchar), '(' || organisation_organisationauthority_pt_ncbpig.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_ncbpig.href::text AS theorganisationauthority_href,
    notes_note_view_mxdewh.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ncbpig on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_ncbpig.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wxsics.*) AS annotation
  from master_join master_join_wuvkmg
  join notes.note_view notes_note_lat_wxsics on master_join_wuvkmg.target_id = notes_note_lat_wxsics.id
  where master_join_wuvkmg.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_mxdewh on TRUE;
create index on navaids_points.authorityforspecialnavigationstation_view (id);
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_fipkla.title as varchar), '(' || organisation_organisationauthority_pt_fipkla.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_fipkla.href::text AS theorganisationauthority_href,
    notes_note_view_tnnxud.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_fipkla on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_fipkla.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tvsfgy.*) AS annotation
  from master_join master_join_wfywnl
  join notes.note_view notes_note_lat_tvsfgy on master_join_wfywnl.target_id = notes_note_lat_tvsfgy.id
  where master_join_wfywnl.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_tnnxud on TRUE;
create index on navaids_points.authorityforspecialnavigationsystem_view (id);
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_lmmeiw.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dgrmzv.*) AS annotation
  from master_join master_join_urgoyi
  join notes.note_view notes_note_lat_dgrmzv on master_join_urgoyi.target_id = notes_note_lat_dgrmzv.id
  where master_join_urgoyi.source_id = service.callsigndetail.id
) as notes_note_view_lmmeiw on TRUE;
create index on service.callsigndetail_view (id);
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_qykguz.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfdmzm.*) AS annotation
  from master_join master_join_rstmwa
  join notes.note_view notes_note_lat_tfdmzm on master_join_rstmwa.target_id = notes_note_lat_tfdmzm.id
  where master_join_rstmwa.source_id = shared.circlesector.id
) as notes_note_view_qykguz on TRUE;
create index on shared.circlesector_view (id);
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as name,
    notes_note_view_vprmyt.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zcnvdw.*) AS annotation
  from master_join master_join_sxnorr
  join notes.note_view notes_note_lat_zcnvdw on master_join_sxnorr.target_id = notes_note_lat_zcnvdw.id
  where master_join_sxnorr.source_id = airport_heliport.city.id
) as notes_note_view_vprmyt on TRUE;
create index on airport_heliport.city_view (id);
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_lcessm.id)::jsonb AS enginetype,
    notes_note_view_bszeyf.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_lcessm on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_lcessm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zgtkmk.*) AS annotation
  from master_join master_join_zjtumf
  join notes.note_view notes_note_lat_zgtkmk on master_join_zjtumf.target_id = notes_note_lat_zgtkmk.id
  where master_join_zjtumf.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_bszeyf on TRUE;
create index on procedure.departurearrivalcondition_view (id);
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_yuwixl.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_npfdjg.*) AS annotation
  from master_join master_join_svjmto
  join notes.note_view notes_note_lat_npfdjg on master_join_svjmto.target_id = notes_note_lat_npfdjg.id
  where master_join_svjmto.source_id = routes.directflightclass.id
) as notes_note_view_yuwixl on TRUE;
create index on routes.directflightclass_view (id);
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_uvvbce.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvcmwf.*) AS annotation
  from master_join master_join_cvocvs
  join notes.note_view notes_note_lat_xvcmwf on master_join_cvocvs.target_id = notes_note_lat_xvcmwf.id
  where master_join_cvocvs.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_uvvbce on TRUE;
create index on procedure.equipmentunavailableadjustmentcolumn_view (id);
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_xobazt.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_vttuyj.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_ottmce.id) as adjustmentinopcol
  from master_join master_join_hvcjys
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_ottmce on master_join_hvcjys.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_ottmce.id
  where master_join_hvcjys.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_xobazt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tantyz.*) AS annotation
  from master_join master_join_pxtcfs
  join notes.note_view notes_note_lat_tantyz on master_join_pxtcfs.target_id = notes_note_lat_tantyz.id
  where master_join_pxtcfs.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_vttuyj on TRUE;
create index on procedure.equipmentunavailableadjustment_view (id);
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_byhzcd.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbfpux.*) AS annotation
  from master_join master_join_ywunre
  join notes.note_view notes_note_lat_fbfpux on master_join_ywunre.target_id = notes_note_lat_fbfpux.id
  where master_join_ywunre.source_id = public.fasdatablock.id
) as notes_note_view_byhzcd on TRUE;
create index on public.fasdatablock_view (id);
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_unwvlu.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_seofto.distance::jsonb as distance,
    procedure_approachtimingtable_pt_ulxqui.timing::jsonb as timing,
    notes_note_view_fjjeae.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_hqsndf.id) as altitude
  from master_join master_join_izreqg
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_hqsndf on master_join_izreqg.target_id = procedure_approachaltitudetable_lat_hqsndf.id
  where master_join_izreqg.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_unwvlu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_idhynv.id) as distance
  from master_join master_join_oydumd
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_idhynv on master_join_oydumd.target_id = procedure_approachdistancetable_lat_idhynv.id
  where master_join_oydumd.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_seofto on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_ftjrrz.id) as timing
  from master_join master_join_pxkpqx
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_ftjrrz on master_join_pxkpqx.target_id = procedure_approachtimingtable_lat_ftjrrz.id
  where master_join_pxkpqx.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_ulxqui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wbwpct.*) AS annotation
  from master_join master_join_apqmbd
  join notes.note_view notes_note_lat_wbwpct on master_join_apqmbd.target_id = notes_note_lat_wbwpct.id
  where master_join_apqmbd.source_id = procedure.finalprofile.id
) as notes_note_view_fjjeae on TRUE;
create index on procedure.finalprofile_view (id);
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_iysemk.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kgmkca.*) AS annotation
  from master_join master_join_qnaind
  join notes.note_view notes_note_lat_kgmkca on master_join_qnaind.target_id = notes_note_lat_kgmkca.id
  where master_join_qnaind.source_id = shared.flightcharacteristic.id
) as notes_note_view_iysemk on TRUE;
create index on shared.flightcharacteristic_view (id);
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_dxhvth.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnnopm.*) AS annotation
  from master_join master_join_ogfhho
  join notes.note_view notes_note_lat_lnnopm on master_join_ogfhho.target_id = notes_note_lat_lnnopm.id
  where master_join_ogfhho.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_dxhvth on TRUE;
create index on routes.flightconditioncircumstance_view (id);
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_yqeikt.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukarwj.*) AS annotation
  from master_join master_join_bojgcm
  join notes.note_view notes_note_lat_ukarwj on master_join_bojgcm.target_id = notes_note_lat_ukarwj.id
  where master_join_bojgcm.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_yqeikt on TRUE;
create index on routes.flightrestrictionlevel_view (id);
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_hwhesa.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lbjlmz.*) AS annotation
  from master_join master_join_cmobrw
  join notes.note_view notes_note_lat_lbjlmz on master_join_cmobrw.target_id = notes_note_lat_lbjlmz.id
  where master_join_cmobrw.source_id = service.fuel.id
) as notes_note_view_hwhesa on TRUE;
create index on service.fuel_view (id);
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_mdahwd.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ewrsxx.*) AS annotation
  from master_join master_join_mjycqa
  join notes.note_view notes_note_lat_ewrsxx on master_join_mjycqa.target_id = notes_note_lat_ewrsxx.id
  where master_join_mjycqa.source_id = holding.holdingpatterndistance.id
) as notes_note_view_mdahwd on TRUE;
create index on holding.holdingpatterndistance_view (id);
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_wlmjrl.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rashns.*) AS annotation
  from master_join master_join_mqedfn
  join notes.note_view notes_note_lat_rashns on master_join_mqedfn.target_id = notes_note_lat_rashns.id
  where master_join_mqedfn.source_id = holding.holdingpatternduration.id
) as notes_note_view_wlmjrl on TRUE;
create index on holding.holdingpatternduration_view (id);
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_qpnppt.title as varchar), '(' || holding_holdingpattern_pt_qpnppt.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_qpnppt.href::text AS theholdingpattern_href,
    notes_note_view_xnovbf.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_qpnppt on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_qpnppt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dburxg.*) AS annotation
  from master_join master_join_hshlui
  join notes.note_view notes_note_lat_dburxg on master_join_hshlui.target_id = notes_note_lat_dburxg.id
  where master_join_hshlui.source_id = procedure.holdinguse.id
) as notes_note_view_xnovbf on TRUE;
create index on procedure.holdinguse_view (id);
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_btopmp.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_sjtati.tlof::jsonb as tlof,
    notes_note_view_gnklpb.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_gputxh.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_gputxh.title AS varchar), '(' || airport_heliport_runwaydirection_lat_gputxh.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_gputxh.href
  )) as runway  from master_join master_join_jzibvv
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_gputxh on master_join_jzibvv.target_id = airport_heliport_runwaydirection_lat_gputxh.id
  where master_join_jzibvv.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_btopmp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_rkewrx.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_rkewrx.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_rkewrx.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_rkewrx.href
  )) as tlof  from master_join master_join_ksjiet
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_rkewrx on master_join_ksjiet.target_id = airport_heliport_touchdownliftoff_lat_rkewrx.id
  where master_join_ksjiet.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_sjtati on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ezgeoh.*) AS annotation
  from master_join master_join_kepdkq
  join notes.note_view notes_note_lat_ezgeoh on master_join_kepdkq.target_id = notes_note_lat_ezgeoh.id
  where master_join_kepdkq.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_gnklpb on TRUE;
create index on procedure.landingtakeoffareacollection_view (id);
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_mqqhpw.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_katujj.*) AS annotation
  from master_join master_join_kncldy
  join notes.note_view notes_note_lat_katujj on master_join_kncldy.target_id = notes_note_lat_katujj.id
  where master_join_kncldy.source_id = airport_heliport.lightactivation.id
) as notes_note_view_mqqhpw on TRUE;
create index on airport_heliport.lightactivation_view (id);
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_amejpo.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uceqvb.*) AS annotation
  from master_join master_join_gmsmha
  join notes.note_view notes_note_lat_uceqvb on master_join_gmsmha.target_id = notes_note_lat_uceqvb.id
  where master_join_gmsmha.source_id = shared.meteorology.id
) as notes_note_view_amejpo on TRUE;
create index on shared.meteorology_view (id);
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_leedlh.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_hvalta.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_miphvi.id) as adjustmentinop
  from master_join master_join_wwxdra
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_miphvi on master_join_wwxdra.target_id = procedure_equipmentunavailableadjustment_lat_miphvi.id
  where master_join_wwxdra.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_leedlh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wozujm.*) AS annotation
  from master_join master_join_rdpuwr
  join notes.note_view notes_note_lat_wozujm on master_join_rdpuwr.target_id = notes_note_lat_wozujm.id
  where master_join_rdpuwr.source_id = procedure.minima.id
) as notes_note_view_hvalta on TRUE;
create index on procedure.minima_view (id);
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_pcovls.altimeter::jsonb as altimeter,
    notes_note_view_wtyjdo.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_inpzjh.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_inpzjh.title AS varchar), '(' || airport_heliport_altimetersource_lat_inpzjh.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_inpzjh.href
  )) as altimeter  from master_join master_join_dsdten
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_inpzjh on master_join_dsdten.target_id = airport_heliport_altimetersource_lat_inpzjh.id
  where master_join_dsdten.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_pcovls on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rglymz.*) AS annotation
  from master_join master_join_dewyzl
  join notes.note_view notes_note_lat_rglymz on master_join_dewyzl.target_id = notes_note_lat_rglymz.id
  where master_join_dewyzl.source_id = procedure.missedapproachgroup.id
) as notes_note_view_wtyjdo on TRUE;
create index on procedure.missedapproachgroup_view (id);
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    notes_note_view_rktlaj.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jeyegu.*) AS annotation
  from master_join master_join_zruqpz
  join notes.note_view notes_note_lat_jeyegu on master_join_zruqpz.target_id = notes_note_lat_jeyegu.id
  where master_join_zruqpz.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_rktlaj on TRUE;
create index on navaids_points.navaidcomponent_view (id);
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    notes_note_view_jfkeei.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dfwteb.*) AS annotation
  from master_join master_join_mvxkbn
  join notes.note_view notes_note_lat_dfwteb on master_join_mvxkbn.target_id = notes_note_lat_dfwteb.id
  where master_join_mvxkbn.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_jfkeei on TRUE;
create index on airport_heliport.navaidequipmentdistance_view (id);
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_qcubgz.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ymvzsq.*) AS annotation
  from master_join master_join_nszwri
  join notes.note_view notes_note_lat_ymvzsq on master_join_nszwri.target_id = notes_note_lat_ymvzsq.id
  where master_join_nszwri.source_id = service.nitrogen.id
) as notes_note_view_qcubgz on TRUE;
create index on service.nitrogen_view (id);
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_zvredz.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ukgsmq.*) AS annotation
  from master_join master_join_gfpiez
  join notes.note_view notes_note_lat_ukgsmq on master_join_gfpiez.target_id = notes_note_lat_ukgsmq.id
  where master_join_gfpiez.source_id = shared.obstacleplacement.id
) as notes_note_view_zvredz on TRUE;
create index on shared.obstacleplacement_view (id);
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_wihbms.title as varchar), '(' || obstacles_verticalstructure_pt_wihbms.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_wihbms.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_ikfhva.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_madpzj.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_xsflqc.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_wihbms on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_wihbms.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_uruutw.id) as adjustment
  from master_join master_join_exxmhz
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_uruutw on master_join_exxmhz.target_id = shared_altitudeadjustment_lat_uruutw.id
  where master_join_exxmhz.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_ikfhva on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_duvhmw.id) as obstacleplacement
  from master_join master_join_pshajr
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_duvhmw on master_join_pshajr.target_id = shared_obstacleplacement_lat_duvhmw.id
  where master_join_pshajr.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_madpzj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mphqip.*) AS annotation
  from master_join master_join_bpevsj
  join notes.note_view notes_note_lat_mphqip on master_join_bpevsj.target_id = notes_note_lat_mphqip.id
  where master_join_bpevsj.source_id = shared.obstruction.id
) as notes_note_view_xsflqc on TRUE;
create index on shared.obstruction_view (id);
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_unyibr.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srmwcb.*) AS annotation
  from master_join master_join_kircvb
  join notes.note_view notes_note_lat_srmwcb on master_join_kircvb.target_id = notes_note_lat_srmwcb.id
  where master_join_kircvb.source_id = service.oil.id
) as notes_note_view_unyibr on TRUE;
create index on service.oil_view (id);
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_chkpre.title as varchar), '(' || organisation_organisationauthority_pt_chkpre.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_chkpre.href::text AS theorganisationauthority_href,
    notes_note_view_zeujra.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_chkpre on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_chkpre.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_urhgwk.*) AS annotation
  from master_join master_join_ygijsv
  join notes.note_view notes_note_lat_urhgwk on master_join_ygijsv.target_id = notes_note_lat_urhgwk.id
  where master_join_ygijsv.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_zeujra on TRUE;
create index on organisation.organisationauthorityassociation_view (id);
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_tnzakh.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ugdfky.*) AS annotation
  from master_join master_join_tkasfz
  join notes.note_view notes_note_lat_ugdfky on master_join_tkasfz.target_id = notes_note_lat_ugdfky.id
  where master_join_tkasfz.source_id = service.oxygen.id
) as notes_note_view_tnzakh on TRUE;
create index on service.oxygen_view (id);
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    notes_note_view_wufqui.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vehnpr.*) AS annotation
  from master_join master_join_ponwnr
  join notes.note_view notes_note_lat_vehnpr on master_join_ponwnr.target_id = notes_note_lat_vehnpr.id
  where master_join_ponwnr.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_wufqui on TRUE;
create index on procedure.proceduretransitionleg_view (id);
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    notes_note_view_yvjztf.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rwgphg.*) AS annotation
  from master_join master_join_jwytud
  join notes.note_view notes_note_lat_rwgphg on master_join_jwytud.target_id = notes_note_lat_rwgphg.id
  where master_join_jwytud.source_id = surveillance.radarcomponent.id
) as notes_note_view_yvjztf on TRUE;
create index on surveillance.radarcomponent_view (id);
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_gibchs.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wvkrym.*) AS annotation
  from master_join master_join_bouryd
  join notes.note_view notes_note_lat_wvkrym on master_join_bouryd.target_id = notes_note_lat_wvkrym.id
  where master_join_bouryd.source_id = airport_heliport.ridge.id
) as notes_note_view_gibchs on TRUE;
create index on airport_heliport.ridge_view (id);
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_bwyppb.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ugadmc.layer::jsonb as layer,
    notes_note_view_pqwval.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_hecckq.id) as criticalridge
  from master_join master_join_rhsbwt
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_hecckq on master_join_rhsbwt.target_id = airport_heliport_ridge_lat_hecckq.id
  where master_join_rhsbwt.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_bwyppb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_vdkxub.id) as layer
  from master_join master_join_mlxhsr
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_vdkxub on master_join_mlxhsr.target_id = airport_heliport_surfacecontaminationlayer_lat_vdkxub.id
  where master_join_mlxhsr.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ugadmc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eeoonm.*) AS annotation
  from master_join master_join_itxycz
  join notes.note_view notes_note_lat_eeoonm on master_join_itxycz.target_id = notes_note_lat_eeoonm.id
  where master_join_itxycz.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_pqwval on TRUE;
create index on airport_heliport.runwaycontamination_view (id);
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_gdsbpd.declaredvalue::jsonb as declaredvalue,
    notes_note_view_ntescp.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_akmccw.id) as declaredvalue
  from master_join master_join_uqdqpj
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_akmccw on master_join_uqdqpj.target_id = airport_heliport_runwaydeclareddistancevalue_lat_akmccw.id
  where master_join_uqdqpj.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_gdsbpd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xseyqi.*) AS annotation
  from master_join master_join_pjxagr
  join notes.note_view notes_note_lat_xseyqi on master_join_pjxagr.target_id = notes_note_lat_xseyqi.id
  where master_join_pjxagr.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_ntescp on TRUE;
create index on airport_heliport.runwaydeclareddistance_view (id);
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_tysrlj.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_whjbxt.layer::jsonb as layer,
    notes_note_view_kggsky.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_zibggm.id) as criticalridge
  from master_join master_join_gkpavf
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_zibggm on master_join_gkpavf.target_id = airport_heliport_ridge_lat_zibggm.id
  where master_join_gkpavf.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_tysrlj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_qkyefo.id) as layer
  from master_join master_join_xvxtmj
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_qkyefo on master_join_xvxtmj.target_id = airport_heliport_surfacecontaminationlayer_lat_qkyefo.id
  where master_join_xvxtmj.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_whjbxt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ykkbht.*) AS annotation
  from master_join master_join_igigtr
  join notes.note_view notes_note_lat_ykkbht on master_join_igigtr.target_id = notes_note_lat_ykkbht.id
  where master_join_igigtr.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_kggsky on TRUE;
create index on airport_heliport.runwaysectioncontamination_view (id);
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_xqgdiu.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qsqdax.*) AS annotation
  from master_join master_join_tzdwol
  join notes.note_view notes_note_lat_qsqdax on master_join_tzdwol.target_id = notes_note_lat_qsqdax.id
  where master_join_tzdwol.source_id = procedure.sectordesign.id
) as notes_note_view_xqgdiu on TRUE;
create index on procedure.sectordesign_view (id);
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_fwdtng.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_munahi.*) AS annotation
  from master_join master_join_xkijlg
  join notes.note_view notes_note_lat_munahi on master_join_xkijlg.target_id = notes_note_lat_munahi.id
  where master_join_xkijlg.source_id = shared.standardlevel.id
) as notes_note_view_fwdtng on TRUE;
create index on shared.standardlevel_view (id);
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_pvzlnt.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jphupt.*) AS annotation
  from master_join master_join_zwgxie
  join notes.note_view notes_note_lat_jphupt on master_join_zwgxie.target_id = notes_note_lat_jphupt.id
  where master_join_zwgxie.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_pvzlnt on TRUE;
create index on airport_heliport.surfacecharacteristics_view (id);
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_nlvusa.title as varchar), '(' || organisation_unit_pt_nlvusa.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_nlvusa.href::text AS theunit_href,
    notes_note_view_aqehsw.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_nlvusa on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_nlvusa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uijbqn.*) AS annotation
  from master_join master_join_kzdarp
  join notes.note_view notes_note_lat_uijbqn on master_join_kzdarp.target_id = notes_note_lat_uijbqn.id
  where master_join_kzdarp.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_aqehsw on TRUE;
create index on surveillance.surveillancegroundstation_view (id);
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_slygqu.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_eugqir.layer::jsonb as layer,
    notes_note_view_wzsydh.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_izxpis.id) as criticalridge
  from master_join master_join_agultf
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_izxpis on master_join_agultf.target_id = airport_heliport_ridge_lat_izxpis.id
  where master_join_agultf.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_slygqu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_bleyei.id) as layer
  from master_join master_join_vsbozy
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_bleyei on master_join_vsbozy.target_id = airport_heliport_surfacecontaminationlayer_lat_bleyei.id
  where master_join_vsbozy.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_eugqir on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_huyupk.*) AS annotation
  from master_join master_join_sooiiu
  join notes.note_view notes_note_lat_huyupk on master_join_sooiiu.target_id = notes_note_lat_huyupk.id
  where master_join_sooiiu.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_wzsydh on TRUE;
create index on airport_heliport.taxiwaycontamination_view (id);
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_gpuffk.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_swququ.layer::jsonb as layer,
    notes_note_view_bacqky.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_gusrxa.id) as criticalridge
  from master_join master_join_cvnown
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_gusrxa on master_join_cvnown.target_id = airport_heliport_ridge_lat_gusrxa.id
  where master_join_cvnown.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_gpuffk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_wohxvx.id) as layer
  from master_join master_join_tydgit
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_wohxvx on master_join_tydgit.target_id = airport_heliport_surfacecontaminationlayer_lat_wohxvx.id
  where master_join_tydgit.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_swququ on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hkiygq.*) AS annotation
  from master_join master_join_sqorrs
  join notes.note_view notes_note_lat_hkiygq on master_join_sqorrs.target_id = notes_note_lat_hkiygq.id
  where master_join_sqorrs.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_bacqky on TRUE;
create index on airport_heliport.touchdownliftoffcontamination_view (id);
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_lwhlqx.title as varchar), '(' || organisation_unit_pt_lwhlqx.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_lwhlqx.href::text AS theunit_href,
    notes_note_view_xqyoon.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_lwhlqx on organisation.unitdependency.theunit_id = organisation_unit_pt_lwhlqx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbpsvd.*) AS annotation
  from master_join master_join_gkwxzm
  join notes.note_view notes_note_lat_vbpsvd on master_join_gkwxzm.target_id = notes_note_lat_vbpsvd.id
  where master_join_gkwxzm.source_id = organisation.unitdependency.id
) as notes_note_view_xqyoon on TRUE;
create index on organisation.unitdependency_view (id);
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_qlymes.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_qlymes.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_nzijhm.point::jsonb as point,
    shared_airspacelayer_pt_spgffm.verticalextent::jsonb as verticalextent,
    notes_note_view_wdsgxt.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_qlymes on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_qlymes.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_zsrxsd.id) as point
  from master_join master_join_kmgvtv
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_zsrxsd on master_join_kmgvtv.target_id = aerial_refuelling_aerialrefuellingpoint_lat_zsrxsd.id
  where master_join_kmgvtv.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_nzijhm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_mbphrz.id) as verticalextent
  from master_join master_join_ipecla
  join shared.airspacelayer_pt shared_airspacelayer_lat_mbphrz on master_join_ipecla.target_id = shared_airspacelayer_lat_mbphrz.id
  where master_join_ipecla.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_spgffm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qjrczx.*) AS annotation
  from master_join master_join_knjnzz
  join notes.note_view notes_note_lat_qjrczx on master_join_knjnzz.target_id = notes_note_lat_qjrczx.id
  where master_join_knjnzz.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_wdsgxt on TRUE;
create index on aerial_refuelling.aerialrefuellingtrack_view (id);
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_mxprpe.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_pkdwaw.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_pkdwaw.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_dqkmbp.transitionleg::jsonb as transitionleg,
    notes_note_view_yxemjh.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_mxprpe on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_mxprpe.id
left join geometry.curve_view geometry_curve_view_pkdwaw on procedure.proceduretransition.trajectory_id = geometry_curve_view_pkdwaw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_nwqrxv.id) as transitionleg
  from master_join master_join_dboiwr
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_nwqrxv on master_join_dboiwr.target_id = procedure_proceduretransitionleg_lat_nwqrxv.id
  where master_join_dboiwr.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_dqkmbp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uzegtw.*) AS annotation
  from master_join master_join_bdwqzf
  join notes.note_view notes_note_lat_uzegtw on master_join_bdwqzf.target_id = notes_note_lat_uzegtw.id
  where master_join_bdwqzf.source_id = procedure.proceduretransition.id
) as notes_note_view_yxemjh on TRUE;
create index on procedure.proceduretransition_view (id);
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_ruktjb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ruktjb.longitude AS location_longitude,
    geometry_elevatedpoint_view_ruktjb.latitude AS location_latitude,
    geometry_elevatedpoint_view_ruktjb.elevation AS location_elevation,
    geometry_elevatedpoint_view_ruktjb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ruktjb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ruktjb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ruktjb.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_juemkg.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_vjzhps.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ruktjb on shared.lightelement.location_id = geometry_elevatedpoint_view_ruktjb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rjatlv.*) AS annotation
  from master_join master_join_lvvhhi
  join notes.note_view notes_note_lat_rjatlv on master_join_lvvhhi.target_id = notes_note_lat_rjatlv.id
  where master_join_lvvhhi.source_id = shared.lightelement.id
) as notes_note_view_juemkg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_sywxhr.id) as availability
  from master_join master_join_ubgeda
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_sywxhr on master_join_ubgeda.target_id = shared_lightelementstatus_lat_sywxhr.id
  where master_join_ubgeda.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_vjzhps on TRUE;
create index on shared.lightelement_view (id);
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_uzxgku.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_uzxgku.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_uzxgku.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_uzxgku.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_uzxgku.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_uzxgku.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_uzxgku.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_uzxgku.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_smrmtp.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uzxgku on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_uzxgku.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vwvxmz.*) AS annotation
  from master_join master_join_wgknbc
  join notes.note_view notes_note_lat_vwvxmz on master_join_wgknbc.target_id = notes_note_lat_vwvxmz.id
  where master_join_wgknbc.source_id = surveillance.reflector.id
) as notes_note_view_smrmtp on TRUE;
create index on surveillance.reflector_view (id);
-- MarkingElementPropertyType
-- ['geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_rdiapl.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_rdiapl.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_rdiapl.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_rdiapl.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_rdiapl.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_rdiapl.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_xytnps.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_xytnps.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_xytnps.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_xytnps.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_xytnps.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_xytnps.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_qwjpcm.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_qwjpcm.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_qwjpcm.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_qwjpcm.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_qwjpcm.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_qwjpcm.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_qwjpcm.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_qwjpcm.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_gelmdd.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rdiapl on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_rdiapl.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_xytnps on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_xytnps.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qwjpcm on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_qwjpcm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mspzbv.*) AS annotation
  from master_join master_join_rlrnjr
  join notes.note_view notes_note_lat_mspzbv on master_join_rlrnjr.target_id = notes_note_lat_mspzbv.id
  where master_join_rlrnjr.source_id = airport_heliport.markingelement.id
) as notes_note_view_gelmdd on TRUE;
create index on airport_heliport.markingelement_view (id);
-- SurfaceContaminationLayerPropertyType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_izbiwg.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_izbiwg.attr::jsonb  as extent,
    notes_note_view_fkqpye.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_cnxgat.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_cnxgat.id,
      'elevation', geometry_elevatedsurface_lat_cnxgat.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_cnxgat.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_cnxgat.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_cnxgat.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_cnxgat.horizontalAccuracy
    )) AS attr
  from master_join master_join_obycjc
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_cnxgat on master_join_obycjc.target_id = geometry_elevatedsurface_lat_cnxgat.id
  where master_join_obycjc.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_izbiwg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lmcqys.*) AS annotation
  from master_join master_join_bicvuv
  join notes.note_view notes_note_lat_lmcqys on master_join_bicvuv.target_id = notes_note_lat_lmcqys.id
  where master_join_bicvuv.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_fkqpye on TRUE;
create index on airport_heliport.surfacecontaminationlayer_view (id);
-- AerialRefuellingPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_keygdg.title as varchar), '(' || navaids_points_designatedpoint_pt_keygdg.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_keygdg.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_mkwheu.title as varchar), '(' || navaids_points_navaid_pt_mkwheu.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_mkwheu.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jamzck.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jamzck.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_jamzck.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_umwwpt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_umwwpt.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_umwwpt.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_qxtyxd.title as varchar), '(' || airport_heliport_airportheliport_pt_qxtyxd.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_qxtyxd.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_jhjixm.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_jhjixm.longitude AS pointchoiceposition_longitude,
    geometry_point_view_jhjixm.latitude AS pointchoiceposition_latitude,
    geometry_point_view_jhjixm.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_uylnsh.title as varchar), '(' || shared_radiofrequencyarea_pt_uylnsh.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_uylnsh.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_ncvmzv.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_jnftxz.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_keygdg on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_keygdg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mkwheu on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_mkwheu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jamzck on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jamzck.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_umwwpt on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_umwwpt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qxtyxd on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_qxtyxd.id
left join geometry.point_view geometry_point_view_jhjixm on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_jhjixm.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_uylnsh on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_uylnsh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_jcmonn.id) as facilitymakeup
  from master_join master_join_tixnzb
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_jcmonn on master_join_tixnzb.target_id = navaids_points_pointreference_lat_jcmonn.id
  where master_join_tixnzb.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_ncvmzv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yqevfs.*) AS annotation
  from master_join master_join_fmkasu
  join notes.note_view notes_note_lat_yqevfs on master_join_fmkasu.target_id = notes_note_lat_yqevfs.id
  where master_join_fmkasu.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_jnftxz on TRUE;
create index on aerial_refuelling.aerialrefuellingpoint_view (id);
-- DirectFlightSegmentPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_xzsmil.title as varchar), '(' || navaids_points_designatedpoint_pt_xzsmil.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_xzsmil.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_bngowe.title as varchar), '(' || navaids_points_designatedpoint_pt_bngowe.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_bngowe.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_aoybxi.title as varchar), '(' || navaids_points_navaid_pt_aoybxi.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_aoybxi.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_whlxip.title as varchar), '(' || navaids_points_navaid_pt_whlxip.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_whlxip.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ypppdg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ypppdg.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_ypppdg.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qrifjn.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qrifjn.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_qrifjn.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kerxyg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kerxyg.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kerxyg.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_slbjmj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_slbjmj.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_slbjmj.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_szhvdf.title as varchar), '(' || airport_heliport_airportheliport_pt_szhvdf.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_szhvdf.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jmsofs.title as varchar), '(' || airport_heliport_airportheliport_pt_jmsofs.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_jmsofs.href::text AS startairportreferencepoint_href,
    geometry_point_view_nnxhnp.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_nnxhnp.longitude AS endposition_longitude,
    geometry_point_view_nnxhnp.latitude AS endposition_latitude,
    geometry_point_view_nnxhnp.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_qfnrby.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_qfnrby.longitude AS startposition_longitude,
    geometry_point_view_qfnrby.latitude AS startposition_latitude,
    geometry_point_view_qfnrby.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_djdwea.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xzsmil on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xzsmil.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_aoybxi on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_aoybxi.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ypppdg on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_ypppdg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kerxyg on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kerxyg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_szhvdf on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_szhvdf.id
left join geometry.point_view geometry_point_view_nnxhnp on routes.directflightsegment.end_position_id = geometry_point_view_nnxhnp.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_bngowe on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_bngowe.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_whlxip on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_whlxip.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qrifjn on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qrifjn.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_slbjmj on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_slbjmj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jmsofs on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_jmsofs.id
left join geometry.point_view geometry_point_view_qfnrby on routes.directflightsegment.start_position_id = geometry_point_view_qfnrby.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vzsudn.*) AS annotation
  from master_join master_join_afyuaj
  join notes.note_view notes_note_lat_vzsudn on master_join_afyuaj.target_id = notes_note_lat_vzsudn.id
  where master_join_afyuaj.source_id = routes.directflightsegment.id
) as notes_note_view_djdwea on TRUE;
create index on routes.directflightsegment_view (id);
-- EnRouteSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_ekzvob.title as varchar), '(' || navaids_points_designatedpoint_pt_ekzvob.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ekzvob.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_psauaq.title as varchar), '(' || navaids_points_navaid_pt_psauaq.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_psauaq.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_xnmaft.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_xnmaft.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_xnmaft.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ysnwoc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ysnwoc.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ysnwoc.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cfxtev.title as varchar), '(' || airport_heliport_airportheliport_pt_cfxtev.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_cfxtev.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bdbvae.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_bdbvae.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bdbvae.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bdbvae.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_fqkgdq.title as varchar), '(' || shared_radiofrequencyarea_pt_fqkgdq.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_fqkgdq.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_nhnimi.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_sckopf.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ekzvob on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ekzvob.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_psauaq on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_psauaq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_xnmaft on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_xnmaft.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ysnwoc on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ysnwoc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cfxtev on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_cfxtev.id
left join geometry.point_view geometry_point_view_bdbvae on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_bdbvae.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_fqkgdq on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_fqkgdq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_veluab.id) as facilitymakeup
  from master_join master_join_tmyjob
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_veluab on master_join_tmyjob.target_id = navaids_points_pointreference_lat_veluab.id
  where master_join_tmyjob.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_nhnimi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwqyia.*) AS annotation
  from master_join master_join_dhutfv
  join notes.note_view notes_note_lat_qwqyia on master_join_dhutfv.target_id = notes_note_lat_qwqyia.id
  where master_join_dhutfv.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_sckopf on TRUE;
create index on navaids_points.enroutesegmentpoint_view (id);
-- FlightConditionElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_elgsyz.title as varchar), '(' || airport_heliport_airportheliport_pt_elgsyz.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_elgsyz.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_dmwnjy.title as varchar), '(' || airport_heliport_airportheliport_pt_dmwnjy.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_dmwnjy.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_flkgwi.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_flkgwi.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_flkgwi.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_ykaxaj.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_xpopmr.title as varchar), '(' || organisation_organisationauthority_pt_xpopmr.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_xpopmr.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ensdfj.title as varchar), '(' || navaids_points_designatedpoint_pt_ensdfj.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ensdfj.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_jkurra.title as varchar), '(' || navaids_points_navaid_pt_jkurra.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_jkurra.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_isnava.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_isnava.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_isnava.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_jbjgsl.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_jbjgsl.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_jbjgsl.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_xsghvy.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_xsghvy.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_xsghvy.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_xsghvy.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_uvculm.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_rsoyfm.title as varchar), '(' || routes_airspacebordercrossing_pt_rsoyfm.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_rsoyfm.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_ivbine.title as varchar), '(' || airspace_airspace_pt_ivbine.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_ivbine.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_jpcpar.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_dcfwxk.title as varchar), '(' || procedure_standardinstrumentarrival_pt_dcfwxk.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_dcfwxk.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_onznvl.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_rzgrcr.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_ebktvh.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_ebktvh.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_ebktvh.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_tddolp.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_ewazhy.flightlevel::jsonb as flightlevel,
    notes_note_view_cwyosa.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_elgsyz on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_elgsyz.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_flkgwi on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_flkgwi.id
left join routes.routeportion_pt routes_routeportion_pt_ykaxaj on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_ykaxaj.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_xpopmr on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_xpopmr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ensdfj on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ensdfj.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jkurra on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_jkurra.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_isnava on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_isnava.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_jbjgsl on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_jbjgsl.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_dmwnjy on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_dmwnjy.id
left join geometry.point_view geometry_point_view_xsghvy on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_xsghvy.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_uvculm on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_uvculm.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_rsoyfm on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_rsoyfm.id
left join airspace.airspace_pt airspace_airspace_pt_ivbine on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_ivbine.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_jpcpar on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_jpcpar.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_dcfwxk on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_dcfwxk.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_onznvl on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_onznvl.id
left join shared.meteorology_pt shared_meteorology_pt_rzgrcr on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_rzgrcr.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_ebktvh on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_ebktvh.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_tddolp on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_tddolp.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_bpwpyl.id) as flightlevel
  from master_join master_join_bxhqaw
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_bpwpyl on master_join_bxhqaw.target_id = routes_flightrestrictionlevel_lat_bpwpyl.id
  where master_join_bxhqaw.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_ewazhy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_volrgp.*) AS annotation
  from master_join master_join_rzjmjo
  join notes.note_view notes_note_lat_volrgp on master_join_rzjmjo.target_id = notes_note_lat_volrgp.id
  where master_join_rzjmjo.source_id = routes.flightconditionelement.id
) as notes_note_view_cwyosa on TRUE;
create index on routes.flightconditionelement_view (id);
-- FlightRoutingElementPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_dbixzi.title as varchar), '(' || procedure_standardinstrumentarrival_pt_dbixzi.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_dbixzi.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_fmnqna.title as varchar), '(' || airspace_airspace_pt_fmnqna.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_fmnqna.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ffezkf.title as varchar), '(' || navaids_points_designatedpoint_pt_ffezkf.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ffezkf.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xfshhb.title as varchar), '(' || navaids_points_navaid_pt_xfshhb.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_xfshhb.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_dpfrbm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_dpfrbm.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_dpfrbm.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zjiivc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zjiivc.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zjiivc.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gynixp.title as varchar), '(' || airport_heliport_airportheliport_pt_gynixp.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_gynixp.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xjfpdz.title as varchar), '(' || airport_heliport_airportheliport_pt_xjfpdz.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_xjfpdz.href::text AS elementairportheliportelement_href,
    geometry_point_view_wargxj.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_wargxj.longitude AS pointelementposition_longitude,
    geometry_point_view_wargxj.latitude AS pointelementposition_latitude,
    geometry_point_view_wargxj.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_lktqdt.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_wqaezi.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_wqaezi.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_wqaezi.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_etbvzj.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_jxtpla.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_jxtpla.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_jxtpla.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_szjlbt.flightlevel::jsonb as flightlevel,
    notes_note_view_zljimt.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_dbixzi on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_dbixzi.id
left join airspace.airspace_pt airspace_airspace_pt_fmnqna on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_fmnqna.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ffezkf on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ffezkf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xfshhb on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_xfshhb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_dpfrbm on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_dpfrbm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zjiivc on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zjiivc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gynixp on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_gynixp.id
left join geometry.point_view geometry_point_view_wargxj on routes.flightroutingelement.pointelement_position_id = geometry_point_view_wargxj.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_lktqdt on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_lktqdt.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_wqaezi on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_wqaezi.id
left join routes.routeportion_pt routes_routeportion_pt_etbvzj on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_etbvzj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xjfpdz on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_xjfpdz.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_jxtpla on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_jxtpla.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_yirwwv.id) as flightlevel
  from master_join master_join_ybvket
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_yirwwv on master_join_ybvket.target_id = routes_flightrestrictionlevel_lat_yirwwv.id
  where master_join_ybvket.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_szjlbt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ftxvxe.*) AS annotation
  from master_join master_join_rkhnla
  join notes.note_view notes_note_lat_ftxvxe on master_join_rkhnla.target_id = notes_note_lat_ftxvxe.id
  where master_join_rkhnla.source_id = routes.flightroutingelement.id
) as notes_note_view_zljimt on TRUE;
create index on routes.flightroutingelement_view (id);
-- RoutePortionPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_nmiypk.title as varchar), '(' || navaids_points_designatedpoint_pt_nmiypk.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nmiypk.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ockpdx.title as varchar), '(' || navaids_points_designatedpoint_pt_ockpdx.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ockpdx.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_zqnocg.title as varchar), '(' || navaids_points_designatedpoint_pt_zqnocg.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_zqnocg.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fkczlm.title as varchar), '(' || navaids_points_navaid_pt_fkczlm.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_fkczlm.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_wlhvdu.title as varchar), '(' || navaids_points_navaid_pt_wlhvdu.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_wlhvdu.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_ryqoeh.title as varchar), '(' || navaids_points_navaid_pt_ryqoeh.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_ryqoeh.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bagbie.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bagbie.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_bagbie.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sbaauo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sbaauo.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_sbaauo.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vuqlkh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vuqlkh.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_vuqlkh.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_uyjnfw.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_uyjnfw.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_uyjnfw.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_yuehej.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_yuehej.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_yuehej.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qccyws.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qccyws.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qccyws.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gkcsfu.title as varchar), '(' || airport_heliport_airportheliport_pt_gkcsfu.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_gkcsfu.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_aarnqj.title as varchar), '(' || airport_heliport_airportheliport_pt_aarnqj.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_aarnqj.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ycvbdm.title as varchar), '(' || airport_heliport_airportheliport_pt_ycvbdm.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_ycvbdm.href::text AS endairportreferencepoint_href,
    geometry_point_view_svoszh.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_svoszh.longitude AS startposition_longitude,
    geometry_point_view_svoszh.latitude AS startposition_latitude,
    geometry_point_view_svoszh.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_zsakot.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_zsakot.longitude AS intermediatepointposition_longitude,
    geometry_point_view_zsakot.latitude AS intermediatepointposition_latitude,
    geometry_point_view_zsakot.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_zzprjd.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_zzprjd.longitude AS endposition_longitude,
    geometry_point_view_zzprjd.latitude AS endposition_latitude,
    geometry_point_view_zzprjd.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_cpzawv.title as varchar), '(' || routes_route_pt_cpzawv.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_cpzawv.href::text AS referencedroute_href,
    notes_note_view_dytvks.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nmiypk on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nmiypk.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fkczlm on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_fkczlm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bagbie on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bagbie.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_uyjnfw on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_uyjnfw.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gkcsfu on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_gkcsfu.id
left join geometry.point_view geometry_point_view_svoszh on routes.routeportion.start_position_id = geometry_point_view_svoszh.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ockpdx on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ockpdx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wlhvdu on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_wlhvdu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sbaauo on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_sbaauo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_yuehej on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_yuehej.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_aarnqj on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_aarnqj.id
left join geometry.point_view geometry_point_view_zsakot on routes.routeportion.intermediatepoint_position_id = geometry_point_view_zsakot.id
left join routes.route_pt routes_route_pt_cpzawv on routes.routeportion.referencedroute_id = routes_route_pt_cpzawv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zqnocg on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zqnocg.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ryqoeh on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_ryqoeh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vuqlkh on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vuqlkh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qccyws on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qccyws.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ycvbdm on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_ycvbdm.id
left join geometry.point_view geometry_point_view_zzprjd on routes.routeportion.end_position_id = geometry_point_view_zzprjd.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sipucm.*) AS annotation
  from master_join master_join_cckjtd
  join notes.note_view notes_note_lat_sipucm on master_join_cckjtd.target_id = notes_note_lat_sipucm.id
  where master_join_cckjtd.source_id = routes.routeportion.id
) as notes_note_view_dytvks on TRUE;
create index on routes.routeportion_view (id);
-- TerminalSegmentPointPropertyType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_vpfube.title as varchar), '(' || navaids_points_designatedpoint_pt_vpfube.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_vpfube.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_fqtcgn.title as varchar), '(' || navaids_points_navaid_pt_fqtcgn.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_fqtcgn.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_mptixt.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_mptixt.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_mptixt.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kdznxg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kdznxg.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kdznxg.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_blserm.title as varchar), '(' || airport_heliport_airportheliport_pt_blserm.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_blserm.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_pindmk.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_pindmk.longitude AS pointchoiceposition_longitude,
    geometry_point_view_pindmk.latitude AS pointchoiceposition_latitude,
    geometry_point_view_pindmk.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_fytjas.title as varchar), '(' || shared_radiofrequencyarea_pt_fytjas.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_fytjas.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_xpmkid.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_dcaitp.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_vpfube on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_vpfube.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_fqtcgn on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_fqtcgn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_mptixt on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_mptixt.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kdznxg on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kdznxg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_blserm on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_blserm.id
left join geometry.point_view geometry_point_view_pindmk on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_pindmk.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_fytjas on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_fytjas.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_auiggc.id) as facilitymakeup
  from master_join master_join_fiwjsw
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_auiggc on master_join_fiwjsw.target_id = navaids_points_pointreference_lat_auiggc.id
  where master_join_fiwjsw.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_xpmkid on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lajqvt.*) AS annotation
  from master_join master_join_evwgsk
  join notes.note_view notes_note_lat_lajqvt on master_join_evwgsk.target_id = notes_note_lat_lajqvt.id
  where master_join_evwgsk.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_dcaitp on TRUE;
create index on navaids_points.terminalsegmentpoint_view (id);
-- AerialRefuellingAnchorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_pfdzai.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_pfdzai.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_fzogai.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_mpcegr.point::jsonb as point,
    notes_note_view_kshmcs.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_pfdzai on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_pfdzai.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_iyzprt.id) as verticalextent
  from master_join master_join_mzptlo
  join shared.airspacelayer_pt shared_airspacelayer_lat_iyzprt on master_join_mzptlo.target_id = shared_airspacelayer_lat_iyzprt.id
  where master_join_mzptlo.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_fzogai on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_btwnjf.id) as point
  from master_join master_join_qqozuv
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_btwnjf on master_join_qqozuv.target_id = aerial_refuelling_aerialrefuellingpoint_lat_btwnjf.id
  where master_join_qqozuv.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_mpcegr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ygmoec.*) AS annotation
  from master_join master_join_vyzguh
  join notes.note_view notes_note_lat_ygmoec on master_join_vyzguh.target_id = notes_note_lat_ygmoec.id
  where master_join_vyzguh.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_kshmcs on TRUE;
create index on aerial_refuelling.aerialrefuellinganchor_view (id);
-- AirspaceVolumePropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_ewfkvl.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_ewfkvl.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_aqnepk.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_aqnepk.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_jfvpqg.id)::jsonb AS contributorairspace,
    notes_note_view_llyieh.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_ewfkvl on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_ewfkvl.id
left join geometry.curve_view geometry_curve_view_aqnepk on airspace.airspacevolume.centreline_id = geometry_curve_view_aqnepk.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_jfvpqg on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_jfvpqg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uqolgj.*) AS annotation
  from master_join master_join_qcbkxq
  join notes.note_view notes_note_lat_uqolgj on master_join_qcbkxq.target_id = notes_note_lat_uqolgj.id
  where master_join_qcbkxq.source_id = airspace.airspacevolume.id
) as notes_note_view_llyieh on TRUE;
create index on airspace.airspacevolume_view (id);
-- NavigationAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_ebucua.id)::jsonb AS sectordefinition,
    geometry_surface_view_avnbos.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_avnbos.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_hgiquz.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_icflzh.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_fcfzqd.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_ebucua on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_ebucua.id
left join geometry.surface_view geometry_surface_view_avnbos on procedure.navigationareasector.extent_id = geometry_surface_view_avnbos.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ssffac.id) as significantobstacle
  from master_join master_join_mfpbau
  join shared.obstruction_pt shared_obstruction_lat_ssffac on master_join_mfpbau.target_id = shared_obstruction_lat_ssffac.id
  where master_join_mfpbau.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_hgiquz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_swnkws.id) as sectorcriteria
  from master_join master_join_lvylqb
  join procedure.sectordesign_pt procedure_sectordesign_lat_swnkws on master_join_lvylqb.target_id = procedure_sectordesign_lat_swnkws.id
  where master_join_lvylqb.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_icflzh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vethwz.*) AS annotation
  from master_join master_join_jjzmou
  join notes.note_view notes_note_lat_vethwz on master_join_jjzmou.target_id = notes_note_lat_vethwz.id
  where master_join_jjzmou.source_id = procedure.navigationareasector.id
) as notes_note_view_fcfzqd on TRUE;
create index on procedure.navigationareasector_view (id);
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.surface_view', 'geometry.curve_view', 'notes.note_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_cbyfdn.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_cbyfdn.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_ootzqi.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_ootzqi.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_tfdxbp.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_xcebwz.significantobstacle::jsonb as significantobstacle,
    notes_note_view_hjpapk.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_cbyfdn on shared.obstacleassessmentarea.surface_id = geometry_surface_view_cbyfdn.id
left join geometry.curve_view geometry_curve_view_ootzqi on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_ootzqi.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_watduj.id) as aircraftcategory
  from master_join master_join_qkuqgh
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_watduj on master_join_qkuqgh.target_id = shared_aircraftcharacteristic_lat_watduj.id
  where master_join_qkuqgh.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_tfdxbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_cmsxcj.id) as significantobstacle
  from master_join master_join_xqkeou
  join shared.obstruction_pt shared_obstruction_lat_cmsxcj on master_join_xqkeou.target_id = shared_obstruction_lat_cmsxcj.id
  where master_join_xqkeou.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_xcebwz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bocrsd.*) AS annotation
  from master_join master_join_gcocsp
  join notes.note_view notes_note_lat_bocrsd on master_join_gcocsp.target_id = notes_note_lat_bocrsd.id
  where master_join_gcocsp.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_hjpapk on TRUE;
create index on shared.obstacleassessmentarea_view (id);
-- PointReferencePropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_wyxkvo.title as varchar), '(' || navaids_points_designatedpoint_pt_wyxkvo.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_wyxkvo.href::text AS point_href,
    geometry_surface_view_mksjfq.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_mksjfq.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_usmzdo.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_dptajt.facilitydistance::jsonb as facilitydistance,
    notes_note_view_ugxkjw.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_wyxkvo on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_wyxkvo.id
left join geometry.surface_view geometry_surface_view_mksjfq on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_mksjfq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_zyfkkr.id) as facilityangle
  from master_join master_join_odlgcl
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_zyfkkr on master_join_odlgcl.target_id = navaids_points_angleuse_lat_zyfkkr.id
  where master_join_odlgcl.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_usmzdo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_phlorr.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_phlorr.title AS varchar), '(' || navaids_points_distanceindication_lat_phlorr.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_phlorr.href
  )) as facilitydistance  from master_join master_join_cpkamt
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_phlorr on master_join_cpkamt.target_id = navaids_points_distanceindication_lat_phlorr.id
  where master_join_cpkamt.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_dptajt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drcazx.*) AS annotation
  from master_join master_join_yahfoy
  join notes.note_view notes_note_lat_drcazx on master_join_yahfoy.target_id = notes_note_lat_drcazx.id
  where master_join_yahfoy.source_id = navaids_points.pointreference.id
) as notes_note_view_ugxkjw on TRUE;
create index on navaids_points.pointreference_view (id);
-- SafeAltitudeAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_ptpedt.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_ptpedt.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_wcnigx.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_daddtl.significantobstacle::jsonb as significantobstacle,
    notes_note_view_hxrimv.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_ptpedt on procedure.safealtitudeareasector.extent_id = geometry_surface_view_ptpedt.id
left join shared.circlesector_pt shared_circlesector_pt_wcnigx on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_wcnigx.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_kzyypv.id) as significantobstacle
  from master_join master_join_sorndm
  join shared.obstruction_pt shared_obstruction_lat_kzyypv on master_join_sorndm.target_id = shared_obstruction_lat_kzyypv.id
  where master_join_sorndm.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_daddtl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tsbahs.*) AS annotation
  from master_join master_join_oobtfw
  join notes.note_view notes_note_lat_tsbahs on master_join_oobtfw.target_id = notes_note_lat_tsbahs.id
  where master_join_oobtfw.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_hxrimv on TRUE;
create index on procedure.safealtitudeareasector_view (id);
-- TerminalArrivalAreaSectorPropertyType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_lbnngu.id)::jsonb AS sectordefinition,
    geometry_surface_view_eongna.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_eongna.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_jmjnpc.significantobstacle::jsonb as significantobstacle,
    notes_note_view_lnprdm.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_lbnngu on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_lbnngu.id
left join geometry.surface_view geometry_surface_view_eongna on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_eongna.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_eyssod.id) as significantobstacle
  from master_join master_join_zltvvh
  join shared.obstruction_pt shared_obstruction_lat_eyssod on master_join_zltvvh.target_id = shared_obstruction_lat_eyssod.id
  where master_join_zltvvh.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_jmjnpc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yhgead.*) AS annotation
  from master_join master_join_gpwwmv
  join notes.note_view notes_note_lat_yhgead on master_join_gpwwmv.target_id = notes_note_lat_yhgead.id
  where master_join_gpwwmv.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_lnprdm on TRUE;
create index on procedure.terminalarrivalareasector_view (id);
-- AirportHeliportAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_xsktms.timeinterval::jsonb as timeinterval,
    notes_note_view_lvevfo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kziarf.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_stqhek.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_swraio.*) AS timeinterval
  from master_join master_join_rowpol
  join shared.timesheet_view shared_timesheet_lat_swraio on master_join_rowpol.target_id = shared_timesheet_lat_swraio.id
  where master_join_rowpol.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_xsktms on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xrziix.*) AS annotation
  from master_join master_join_ycbwus
  join notes.note_view notes_note_lat_xrziix on master_join_ycbwus.target_id = notes_note_lat_xrziix.id
  where master_join_ycbwus.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_lvevfo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ljxrhl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ljxrhl.title AS varchar), '(' || organisation_organisationauthority_lat_ljxrhl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ljxrhl.href
  )) as specialdateauthority  from master_join master_join_hhssim
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ljxrhl on master_join_hhssim.target_id = organisation_organisationauthority_lat_ljxrhl.id
  where master_join_hhssim.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_kziarf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_jnkwep.id) as usage
  from master_join master_join_xcmvtx
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_jnkwep on master_join_xcmvtx.target_id = airport_heliport_airportheliportusage_lat_jnkwep.id
  where master_join_xcmvtx.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_stqhek on TRUE;
create index on airport_heliport.airportheliportavailability_view (id);
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_gqbzwa.title as varchar), '(' || organisation_organisationauthority_pt_gqbzwa.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_gqbzwa.href::text AS theorganisationauthority_href,
    organisation_organisationauthority_pt_dhttqg.specialdateauthority::jsonb as specialdateauthority,
    shared_timesheet_view_bgujij.timeinterval::jsonb as timeinterval,
    notes_note_view_knpvks.annotation::jsonb as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gqbzwa on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_gqbzwa.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_otustl.*) AS timeinterval
  from master_join master_join_vrkjls
  join shared.timesheet_view shared_timesheet_lat_otustl on master_join_vrkjls.target_id = shared_timesheet_lat_otustl.id
  where master_join_vrkjls.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_bgujij on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bfbcec.*) AS annotation
  from master_join master_join_sbflgc
  join notes.note_view notes_note_lat_bfbcec on master_join_sbflgc.target_id = notes_note_lat_bfbcec.id
  where master_join_sbflgc.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_knpvks on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zldaqm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zldaqm.title AS varchar), '(' || organisation_organisationauthority_lat_zldaqm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zldaqm.href
  )) as specialdateauthority  from master_join master_join_psqrgo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zldaqm on master_join_psqrgo.target_id = organisation_organisationauthority_lat_zldaqm.id
  where master_join_psqrgo.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_dhttqg on TRUE;
create index on airport_heliport.airportheliportresponsibilityorganisation_view (id);
-- AirspaceActivationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_ubcfcc.timeinterval::jsonb as timeinterval,
    notes_note_view_zurmjd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tqnsso.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_xgmxfn.user::jsonb as user,
    shared_airspacelayer_pt_dltppa.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_izsvjl.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yuelkg.*) AS timeinterval
  from master_join master_join_bjibjg
  join shared.timesheet_view shared_timesheet_lat_yuelkg on master_join_bjibjg.target_id = shared_timesheet_lat_yuelkg.id
  where master_join_bjibjg.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_ubcfcc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gwxsye.*) AS annotation
  from master_join master_join_ogimkx
  join notes.note_view notes_note_lat_gwxsye on master_join_ogimkx.target_id = notes_note_lat_gwxsye.id
  where master_join_ogimkx.source_id = airspace.airspaceactivation.id
) as notes_note_view_zurmjd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_bvvorz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_bvvorz.title AS varchar), '(' || organisation_organisationauthority_lat_bvvorz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_bvvorz.href
  )) as specialdateauthority  from master_join master_join_ijvsmq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_bvvorz on master_join_ijvsmq.target_id = organisation_organisationauthority_lat_bvvorz.id
  where master_join_ijvsmq.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_tqnsso on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_yyjiee.id) as levels
  from master_join master_join_uqemhv
  join shared.airspacelayer_pt shared_airspacelayer_lat_yyjiee on master_join_uqemhv.target_id = shared_airspacelayer_lat_yyjiee.id
  where master_join_uqemhv.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_dltppa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_oihrjo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_oihrjo.title AS varchar), '(' || organisation_organisationauthority_lat_oihrjo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_oihrjo.href
  )) as user  from master_join master_join_guxxmk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_oihrjo on master_join_guxxmk.target_id = organisation_organisationauthority_lat_oihrjo.id
  where master_join_guxxmk.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_xgmxfn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_lamxpq.id) as aircraft
  from master_join master_join_nvlhrp
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_lamxpq on master_join_nvlhrp.target_id = shared_aircraftcharacteristic_lat_lamxpq.id
  where master_join_nvlhrp.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_izsvjl on TRUE;
create index on airspace.airspaceactivation_view (id);
-- AirspaceLayerClassPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_qtxrqk.timeinterval::jsonb as timeinterval,
    notes_note_view_cpkktn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tpzuwe.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_pkcwva.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tlvefs.*) AS timeinterval
  from master_join master_join_lsegaq
  join shared.timesheet_view shared_timesheet_lat_tlvefs on master_join_lsegaq.target_id = shared_timesheet_lat_tlvefs.id
  where master_join_lsegaq.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_qtxrqk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dxmioh.*) AS annotation
  from master_join master_join_pdovgk
  join notes.note_view notes_note_lat_dxmioh on master_join_pdovgk.target_id = notes_note_lat_dxmioh.id
  where master_join_pdovgk.source_id = airspace.airspacelayerclass.id
) as notes_note_view_cpkktn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wnkeer.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wnkeer.title AS varchar), '(' || organisation_organisationauthority_lat_wnkeer.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wnkeer.href
  )) as specialdateauthority  from master_join master_join_duiimg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wnkeer on master_join_duiimg.target_id = organisation_organisationauthority_lat_wnkeer.id
  where master_join_duiimg.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_tpzuwe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xqmdei.id) as associatedlevels
  from master_join master_join_ikrqna
  join shared.airspacelayer_pt shared_airspacelayer_lat_xqmdei on master_join_ikrqna.target_id = shared_airspacelayer_lat_xqmdei.id
  where master_join_ikrqna.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_pkcwva on TRUE;
create index on airspace.airspacelayerclass_view (id);
-- AltimeterSourceStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_qsuozt.timeinterval::jsonb as timeinterval,
    notes_note_view_gjabxf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lpzcdf.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yjutzc.*) AS timeinterval
  from master_join master_join_glyhcq
  join shared.timesheet_view shared_timesheet_lat_yjutzc on master_join_glyhcq.target_id = shared_timesheet_lat_yjutzc.id
  where master_join_glyhcq.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_qsuozt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_obvlsn.*) AS annotation
  from master_join master_join_jtzxmn
  join notes.note_view notes_note_lat_obvlsn on master_join_jtzxmn.target_id = notes_note_lat_obvlsn.id
  where master_join_jtzxmn.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_gjabxf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sdqxlg.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sdqxlg.title AS varchar), '(' || organisation_organisationauthority_lat_sdqxlg.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sdqxlg.href
  )) as specialdateauthority  from master_join master_join_iwzmcd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sdqxlg on master_join_iwzmcd.target_id = organisation_organisationauthority_lat_sdqxlg.id
  where master_join_iwzmcd.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_lpzcdf on TRUE;
create index on airport_heliport.altimetersourcestatus_view (id);
-- ApronAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_uagssj.timeinterval::jsonb as timeinterval,
    notes_note_view_lqscoz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_giyver.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_vrmecx.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ezdvmn.*) AS timeinterval
  from master_join master_join_cpxosl
  join shared.timesheet_view shared_timesheet_lat_ezdvmn on master_join_cpxosl.target_id = shared_timesheet_lat_ezdvmn.id
  where master_join_cpxosl.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_uagssj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qvkbjv.*) AS annotation
  from master_join master_join_qvqzaq
  join notes.note_view notes_note_lat_qvkbjv on master_join_qvqzaq.target_id = notes_note_lat_qvkbjv.id
  where master_join_qvqzaq.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_lqscoz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yacloo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yacloo.title AS varchar), '(' || organisation_organisationauthority_lat_yacloo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yacloo.href
  )) as specialdateauthority  from master_join master_join_tdblyi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yacloo on master_join_tdblyi.target_id = organisation_organisationauthority_lat_yacloo.id
  where master_join_tdblyi.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_giyver on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_uhyybu.id) as usage
  from master_join master_join_prvxuv
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_uhyybu on master_join_prvxuv.target_id = airport_heliport_apronareausage_lat_uhyybu.id
  where master_join_prvxuv.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_vrmecx on TRUE;
create index on airport_heliport.apronareaavailability_view (id);
-- CirclingRestrictionPropertyType
-- ['notes.note_view', 'geometry.surface_view', 'shared.timesheet_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_yjgdls.id)::jsonb AS sectordescription,
    geometry_surface_view_hdboqb.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_hdboqb.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_mqwxro.timeinterval::jsonb as timeinterval,
    notes_note_view_wyalob.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_fjjlhi.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_yjgdls on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_yjgdls.id
left join geometry.surface_view geometry_surface_view_hdboqb on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_hdboqb.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tufkfl.*) AS timeinterval
  from master_join master_join_yuzfaf
  join shared.timesheet_view shared_timesheet_lat_tufkfl on master_join_yuzfaf.target_id = shared_timesheet_lat_tufkfl.id
  where master_join_yuzfaf.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_mqwxro on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zzejti.*) AS annotation
  from master_join master_join_huzmph
  join notes.note_view notes_note_lat_zzejti on master_join_huzmph.target_id = notes_note_lat_zzejti.id
  where master_join_huzmph.source_id = procedure.circlingrestriction.id
) as notes_note_view_wyalob on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zpkehk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zpkehk.title AS varchar), '(' || organisation_organisationauthority_lat_zpkehk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zpkehk.href
  )) as specialdateauthority  from master_join master_join_nyzfpy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zpkehk on master_join_nyzfpy.target_id = organisation_organisationauthority_lat_zpkehk.id
  where master_join_nyzfpy.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_fjjlhi on TRUE;
create index on procedure.circlingrestriction_view (id);
-- ConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_mbbivw.timeinterval::jsonb as timeinterval,
    notes_note_view_wntzyo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jwcklk.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_amjlwj.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_xwufys.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_dldfic.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_ptuils.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lqrika.*) AS timeinterval
  from master_join master_join_rvrigc
  join shared.timesheet_view shared_timesheet_lat_lqrika on master_join_rvrigc.target_id = shared_timesheet_lat_lqrika.id
  where master_join_rvrigc.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_mbbivw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eklmjq.*) AS annotation
  from master_join master_join_tkjuag
  join notes.note_view notes_note_lat_eklmjq on master_join_tkjuag.target_id = notes_note_lat_eklmjq.id
  where master_join_tkjuag.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_wntzyo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_dgxknd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_dgxknd.title AS varchar), '(' || organisation_organisationauthority_lat_dgxknd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_dgxknd.href
  )) as specialdateauthority  from master_join master_join_snbosl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_dgxknd on master_join_snbosl.target_id = organisation_organisationauthority_lat_dgxknd.id
  where master_join_snbosl.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_jwcklk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_xsgfrk.id) as weather
  from master_join master_join_wwdmig
  join shared.meteorology_pt shared_meteorology_lat_xsgfrk on master_join_wwdmig.target_id = shared_meteorology_lat_xsgfrk.id
  where master_join_wwdmig.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_amjlwj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_unboil.id) as aircraft
  from master_join master_join_nnurdh
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_unboil on master_join_nnurdh.target_id = shared_aircraftcharacteristic_lat_unboil.id
  where master_join_nnurdh.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_xwufys on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_ovwinb.id) as flight
  from master_join master_join_dvppki
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_ovwinb on master_join_dvppki.target_id = shared_flightcharacteristic_lat_ovwinb.id
  where master_join_dvppki.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_dldfic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_fxneld.id) as subcondition
  from master_join master_join_zitrrd
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_fxneld on master_join_zitrrd.target_id = airport_heliport_conditioncombination_lat_fxneld.id
  where master_join_zitrrd.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_ptuils on TRUE;
create index on airport_heliport.conditioncombination_view (id);
-- FlightConditionCombinationPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_gbdvox.timeinterval::jsonb as timeinterval,
    notes_note_view_nsoeql.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xfomjn.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_hwbpts.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gbcsiv.*) AS timeinterval
  from master_join master_join_hufhmh
  join shared.timesheet_view shared_timesheet_lat_gbcsiv on master_join_hufhmh.target_id = shared_timesheet_lat_gbcsiv.id
  where master_join_hufhmh.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_gbdvox on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nplyvr.*) AS annotation
  from master_join master_join_vncgou
  join notes.note_view notes_note_lat_nplyvr on master_join_vncgou.target_id = notes_note_lat_nplyvr.id
  where master_join_vncgou.source_id = routes.flightconditioncombination.id
) as notes_note_view_nsoeql on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tdhbod.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tdhbod.title AS varchar), '(' || organisation_organisationauthority_lat_tdhbod.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tdhbod.href
  )) as specialdateauthority  from master_join master_join_erqlwk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tdhbod on master_join_erqlwk.target_id = organisation_organisationauthority_lat_tdhbod.id
  where master_join_erqlwk.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_xfomjn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_vsodqo.id) as element
  from master_join master_join_engdwp
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_vsodqo on master_join_engdwp.target_id = routes_flightconditionelement_lat_vsodqo.id
  where master_join_engdwp.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_hwbpts on TRUE;
create index on routes.flightconditioncombination_view (id);
-- GroundLightingAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_pyqpxs.timeinterval::jsonb as timeinterval,
    notes_note_view_xuiiqw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_dddvrt.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hnoozg.*) AS timeinterval
  from master_join master_join_rjxczn
  join shared.timesheet_view shared_timesheet_lat_hnoozg on master_join_rjxczn.target_id = shared_timesheet_lat_hnoozg.id
  where master_join_rjxczn.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_pyqpxs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dwsbxr.*) AS annotation
  from master_join master_join_xyqrbc
  join notes.note_view notes_note_lat_dwsbxr on master_join_xyqrbc.target_id = notes_note_lat_dwsbxr.id
  where master_join_xyqrbc.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_xuiiqw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_rsnhoy.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_rsnhoy.title AS varchar), '(' || organisation_organisationauthority_lat_rsnhoy.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_rsnhoy.href
  )) as specialdateauthority  from master_join master_join_hosirz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_rsnhoy on master_join_hosirz.target_id = organisation_organisationauthority_lat_rsnhoy.id
  where master_join_hosirz.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_dddvrt on TRUE;
create index on airport_heliport.groundlightingavailability_view (id);
-- LightElementStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_wwpjui.timeinterval::jsonb as timeinterval,
    notes_note_view_zirjhl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_tbhnyt.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wdgpgh.*) AS timeinterval
  from master_join master_join_acvqgj
  join shared.timesheet_view shared_timesheet_lat_wdgpgh on master_join_acvqgj.target_id = shared_timesheet_lat_wdgpgh.id
  where master_join_acvqgj.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_wwpjui on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ztbulo.*) AS annotation
  from master_join master_join_mvoeix
  join notes.note_view notes_note_lat_ztbulo on master_join_mvoeix.target_id = notes_note_lat_ztbulo.id
  where master_join_mvoeix.source_id = shared.lightelementstatus.id
) as notes_note_view_zirjhl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_eveuqc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_eveuqc.title AS varchar), '(' || organisation_organisationauthority_lat_eveuqc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_eveuqc.href
  )) as specialdateauthority  from master_join master_join_eocvqz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_eveuqc on master_join_eocvqz.target_id = organisation_organisationauthority_lat_eveuqc.id
  where master_join_eocvqz.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_tbhnyt on TRUE;
create index on shared.lightelementstatus_view (id);
-- ManoeuvringAreaAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_jxjcsy.timeinterval::jsonb as timeinterval,
    notes_note_view_psnuwt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mvitcb.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_wjrvaw.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nazoap.*) AS timeinterval
  from master_join master_join_bswths
  join shared.timesheet_view shared_timesheet_lat_nazoap on master_join_bswths.target_id = shared_timesheet_lat_nazoap.id
  where master_join_bswths.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_jxjcsy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tthulj.*) AS annotation
  from master_join master_join_hlzvpp
  join notes.note_view notes_note_lat_tthulj on master_join_hlzvpp.target_id = notes_note_lat_tthulj.id
  where master_join_hlzvpp.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_psnuwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_jelhln.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_jelhln.title AS varchar), '(' || organisation_organisationauthority_lat_jelhln.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_jelhln.href
  )) as specialdateauthority  from master_join master_join_sdmwfr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_jelhln on master_join_sdmwfr.target_id = organisation_organisationauthority_lat_jelhln.id
  where master_join_sdmwfr.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_mvitcb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_elksqy.id) as usage
  from master_join master_join_mheglp
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_elksqy on master_join_mheglp.target_id = airport_heliport_manoeuvringareausage_lat_elksqy.id
  where master_join_mheglp.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_wjrvaw on TRUE;
create index on airport_heliport.manoeuvringareaavailability_view (id);
-- NavaidEquipmentMonitoringPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_cqlkdk.timeinterval::jsonb as timeinterval,
    notes_note_view_laxuiy.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_orlymd.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_sgsrdx.*) AS timeinterval
  from master_join master_join_caefnj
  join shared.timesheet_view shared_timesheet_lat_sgsrdx on master_join_caefnj.target_id = shared_timesheet_lat_sgsrdx.id
  where master_join_caefnj.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_cqlkdk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_htkgyb.*) AS annotation
  from master_join master_join_hrdlrt
  join notes.note_view notes_note_lat_htkgyb on master_join_hrdlrt.target_id = notes_note_lat_htkgyb.id
  where master_join_hrdlrt.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_laxuiy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qqntww.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qqntww.title AS varchar), '(' || organisation_organisationauthority_lat_qqntww.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qqntww.href
  )) as specialdateauthority  from master_join master_join_gpdanl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qqntww on master_join_gpdanl.target_id = organisation_organisationauthority_lat_qqntww.id
  where master_join_gpdanl.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_orlymd on TRUE;
create index on navaids_points.navaidequipmentmonitoring_view (id);
-- NavaidOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_ufnqvv.timeinterval::jsonb as timeinterval,
    notes_note_view_gclbcf.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ilvezd.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tseiwx.*) AS timeinterval
  from master_join master_join_eycbwy
  join shared.timesheet_view shared_timesheet_lat_tseiwx on master_join_eycbwy.target_id = shared_timesheet_lat_tseiwx.id
  where master_join_eycbwy.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_ufnqvv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tddcmi.*) AS annotation
  from master_join master_join_dyllms
  join notes.note_view notes_note_lat_tddcmi on master_join_dyllms.target_id = notes_note_lat_tddcmi.id
  where master_join_dyllms.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_gclbcf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_srjcwp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_srjcwp.title AS varchar), '(' || organisation_organisationauthority_lat_srjcwp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_srjcwp.href
  )) as specialdateauthority  from master_join master_join_lmirbq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_srjcwp on master_join_lmirbq.target_id = organisation_organisationauthority_lat_srjcwp.id
  where master_join_lmirbq.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_ilvezd on TRUE;
create index on navaids_points.navaidoperationalstatus_view (id);
-- OnlineContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_iofups.timeinterval::jsonb as timeinterval,
    notes_note_view_ibprwv.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_puvrvn.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_bytkjl.*) AS timeinterval
  from master_join master_join_ibmyco
  join shared.timesheet_view shared_timesheet_lat_bytkjl on master_join_ibmyco.target_id = shared_timesheet_lat_bytkjl.id
  where master_join_ibmyco.source_id = shared.onlinecontact.id
) as shared_timesheet_view_iofups on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivivtp.*) AS annotation
  from master_join master_join_cqdqlb
  join notes.note_view notes_note_lat_ivivtp on master_join_cqdqlb.target_id = notes_note_lat_ivivtp.id
  where master_join_cqdqlb.source_id = shared.onlinecontact.id
) as notes_note_view_ibprwv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xikfks.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xikfks.title AS varchar), '(' || organisation_organisationauthority_lat_xikfks.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xikfks.href
  )) as specialdateauthority  from master_join master_join_hvixlc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xikfks on master_join_hvixlc.target_id = organisation_organisationauthority_lat_xikfks.id
  where master_join_hvixlc.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_puvrvn on TRUE;
create index on shared.onlinecontact_view (id);
-- PostalAddressPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_ubepxo.timeinterval::jsonb as timeinterval,
    notes_note_view_nuqzmn.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gmbssk.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_pebmaw.*) AS timeinterval
  from master_join master_join_yfifuf
  join shared.timesheet_view shared_timesheet_lat_pebmaw on master_join_yfifuf.target_id = shared_timesheet_lat_pebmaw.id
  where master_join_yfifuf.source_id = shared.postaladdress.id
) as shared_timesheet_view_ubepxo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ktdvoh.*) AS annotation
  from master_join master_join_phgckh
  join notes.note_view notes_note_lat_ktdvoh on master_join_phgckh.target_id = notes_note_lat_ktdvoh.id
  where master_join_phgckh.source_id = shared.postaladdress.id
) as notes_note_view_nuqzmn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zzbkud.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zzbkud.title AS varchar), '(' || organisation_organisationauthority_lat_zzbkud.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zzbkud.href
  )) as specialdateauthority  from master_join master_join_wpvtik
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zzbkud on master_join_wpvtik.target_id = organisation_organisationauthority_lat_zzbkud.id
  where master_join_wpvtik.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_gmbssk on TRUE;
create index on shared.postaladdress_view (id);
-- ProcedureAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_ogbewp.timeinterval::jsonb as timeinterval,
    notes_note_view_ceecbw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ksnjgx.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tucspi.*) AS timeinterval
  from master_join master_join_piktmm
  join shared.timesheet_view shared_timesheet_lat_tucspi on master_join_piktmm.target_id = shared_timesheet_lat_tucspi.id
  where master_join_piktmm.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_ogbewp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqxhnq.*) AS annotation
  from master_join master_join_mygcwz
  join notes.note_view notes_note_lat_aqxhnq on master_join_mygcwz.target_id = notes_note_lat_aqxhnq.id
  where master_join_mygcwz.source_id = procedure.procedureavailability.id
) as notes_note_view_ceecbw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lhrfxc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lhrfxc.title AS varchar), '(' || organisation_organisationauthority_lat_lhrfxc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lhrfxc.href
  )) as specialdateauthority  from master_join master_join_rflabg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lhrfxc on master_join_rflabg.target_id = organisation_organisationauthority_lat_lhrfxc.id
  where master_join_rflabg.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_ksnjgx on TRUE;
create index on procedure.procedureavailability_view (id);
-- RadioCommunicationOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_xemgdo.timeinterval::jsonb as timeinterval,
    notes_note_view_wvkgoz.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_uyoacz.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_pavmqv.*) AS timeinterval
  from master_join master_join_asayvc
  join shared.timesheet_view shared_timesheet_lat_pavmqv on master_join_asayvc.target_id = shared_timesheet_lat_pavmqv.id
  where master_join_asayvc.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_xemgdo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cxxgat.*) AS annotation
  from master_join master_join_tnvuuq
  join notes.note_view notes_note_lat_cxxgat on master_join_tnvuuq.target_id = notes_note_lat_cxxgat.id
  where master_join_tnvuuq.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_wvkgoz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_hnelyt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_hnelyt.title AS varchar), '(' || organisation_organisationauthority_lat_hnelyt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_hnelyt.href
  )) as specialdateauthority  from master_join master_join_bidusv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_hnelyt on master_join_bidusv.target_id = organisation_organisationauthority_lat_hnelyt.id
  where master_join_bidusv.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_uyoacz on TRUE;
create index on service.radiocommunicationoperationalstatus_view (id);
-- RouteAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_gjizpu.timeinterval::jsonb as timeinterval,
    notes_note_view_ejgaxs.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_iifskh.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_raxsqg.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qixwzv.*) AS timeinterval
  from master_join master_join_ilptpz
  join shared.timesheet_view shared_timesheet_lat_qixwzv on master_join_ilptpz.target_id = shared_timesheet_lat_qixwzv.id
  where master_join_ilptpz.source_id = routes.routeavailability.id
) as shared_timesheet_view_gjizpu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xbkoie.*) AS annotation
  from master_join master_join_vwxbak
  join notes.note_view notes_note_lat_xbkoie on master_join_vwxbak.target_id = notes_note_lat_xbkoie.id
  where master_join_vwxbak.source_id = routes.routeavailability.id
) as notes_note_view_ejgaxs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xofuxn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xofuxn.title AS varchar), '(' || organisation_organisationauthority_lat_xofuxn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xofuxn.href
  )) as specialdateauthority  from master_join master_join_hjllmv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xofuxn on master_join_hjllmv.target_id = organisation_organisationauthority_lat_xofuxn.id
  where master_join_hjllmv.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_iifskh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_tvzimr.id) as levels
  from master_join master_join_fwejqr
  join shared.airspacelayer_pt shared_airspacelayer_lat_tvzimr on master_join_fwejqr.target_id = shared_airspacelayer_lat_tvzimr.id
  where master_join_fwejqr.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_raxsqg on TRUE;
create index on routes.routeavailability_view (id);
-- RunwayDeclaredDistanceValuePropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_bidpxu.timeinterval::jsonb as timeinterval,
    notes_note_view_mtltwl.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_iquqqh.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ulktyi.*) AS timeinterval
  from master_join master_join_zgjfqn
  join shared.timesheet_view shared_timesheet_lat_ulktyi on master_join_zgjfqn.target_id = shared_timesheet_lat_ulktyi.id
  where master_join_zgjfqn.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_bidpxu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_srhlhc.*) AS annotation
  from master_join master_join_ajlspe
  join notes.note_view notes_note_lat_srhlhc on master_join_ajlspe.target_id = notes_note_lat_srhlhc.id
  where master_join_ajlspe.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_mtltwl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_klqptp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_klqptp.title AS varchar), '(' || organisation_organisationauthority_lat_klqptp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_klqptp.href
  )) as specialdateauthority  from master_join master_join_tukdao
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_klqptp on master_join_tukdao.target_id = organisation_organisationauthority_lat_klqptp.id
  where master_join_tukdao.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_iquqqh on TRUE;
create index on airport_heliport.runwaydeclareddistancevalue_view (id);
-- ServiceOperationalStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_tdwbwx.timeinterval::jsonb as timeinterval,
    notes_note_view_tifsou.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ciffnk.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_dltirs.*) AS timeinterval
  from master_join master_join_prdbrr
  join shared.timesheet_view shared_timesheet_lat_dltirs on master_join_prdbrr.target_id = shared_timesheet_lat_dltirs.id
  where master_join_prdbrr.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_tdwbwx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fqwzab.*) AS annotation
  from master_join master_join_eswloo
  join notes.note_view notes_note_lat_fqwzab on master_join_eswloo.target_id = notes_note_lat_fqwzab.id
  where master_join_eswloo.source_id = service.serviceoperationalstatus.id
) as notes_note_view_tifsou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_acwhdm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_acwhdm.title AS varchar), '(' || organisation_organisationauthority_lat_acwhdm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_acwhdm.href
  )) as specialdateauthority  from master_join master_join_exeokc
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_acwhdm on master_join_exeokc.target_id = organisation_organisationauthority_lat_acwhdm.id
  where master_join_exeokc.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_ciffnk on TRUE;
create index on service.serviceoperationalstatus_view (id);
-- SpecialNavigationStationStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_juxbzj.timeinterval::jsonb as timeinterval,
    notes_note_view_qltuvw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jmvzex.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_aftnay.*) AS timeinterval
  from master_join master_join_pumela
  join shared.timesheet_view shared_timesheet_lat_aftnay on master_join_pumela.target_id = shared_timesheet_lat_aftnay.id
  where master_join_pumela.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_juxbzj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cccmvg.*) AS annotation
  from master_join master_join_jefbbt
  join notes.note_view notes_note_lat_cccmvg on master_join_jefbbt.target_id = notes_note_lat_cccmvg.id
  where master_join_jefbbt.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_qltuvw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ogqmkk.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ogqmkk.title AS varchar), '(' || organisation_organisationauthority_lat_ogqmkk.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ogqmkk.href
  )) as specialdateauthority  from master_join master_join_ztyfbd
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ogqmkk on master_join_ztyfbd.target_id = organisation_organisationauthority_lat_ogqmkk.id
  where master_join_ztyfbd.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_jmvzex on TRUE;
create index on navaids_points.specialnavigationstationstatus_view (id);
-- TelephoneContactPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_rnvkug.timeinterval::jsonb as timeinterval,
    notes_note_view_hzgkqo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_falcgv.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tjdkyv.*) AS timeinterval
  from master_join master_join_jynmcc
  join shared.timesheet_view shared_timesheet_lat_tjdkyv on master_join_jynmcc.target_id = shared_timesheet_lat_tjdkyv.id
  where master_join_jynmcc.source_id = shared.telephonecontact.id
) as shared_timesheet_view_rnvkug on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwvipw.*) AS annotation
  from master_join master_join_lylzwh
  join notes.note_view notes_note_lat_kwvipw on master_join_lylzwh.target_id = notes_note_lat_kwvipw.id
  where master_join_lylzwh.source_id = shared.telephonecontact.id
) as notes_note_view_hzgkqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_facnoa.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_facnoa.title AS varchar), '(' || organisation_organisationauthority_lat_facnoa.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_facnoa.href
  )) as specialdateauthority  from master_join master_join_siydrr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_facnoa on master_join_siydrr.target_id = organisation_organisationauthority_lat_facnoa.id
  where master_join_siydrr.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_falcgv on TRUE;
create index on shared.telephonecontact_view (id);
-- UnitAvailabilityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_nbovtt.timeinterval::jsonb as timeinterval,
    notes_note_view_ymrsei.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_gqoznl.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jqpzsn.*) AS timeinterval
  from master_join master_join_pfxvcq
  join shared.timesheet_view shared_timesheet_lat_jqpzsn on master_join_pfxvcq.target_id = shared_timesheet_lat_jqpzsn.id
  where master_join_pfxvcq.source_id = organisation.unitavailability.id
) as shared_timesheet_view_nbovtt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dfxvzs.*) AS annotation
  from master_join master_join_rflmqc
  join notes.note_view notes_note_lat_dfxvzs on master_join_rflmqc.target_id = notes_note_lat_dfxvzs.id
  where master_join_rflmqc.source_id = organisation.unitavailability.id
) as notes_note_view_ymrsei on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ucsnbp.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ucsnbp.title AS varchar), '(' || organisation_organisationauthority_lat_ucsnbp.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ucsnbp.href
  )) as specialdateauthority  from master_join master_join_sqkigv
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ucsnbp on master_join_sqkigv.target_id = organisation_organisationauthority_lat_ucsnbp.id
  where master_join_sqkigv.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_gqoznl on TRUE;
create index on organisation.unitavailability_view (id);
-- VerticalStructureLightingStatusPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_bbjlmm.timeinterval::jsonb as timeinterval,
    notes_note_view_rwajno.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_snsxsw.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_qorxde.*) AS timeinterval
  from master_join master_join_lipvwe
  join shared.timesheet_view shared_timesheet_lat_qorxde on master_join_lipvwe.target_id = shared_timesheet_lat_qorxde.id
  where master_join_lipvwe.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_bbjlmm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_muknud.*) AS annotation
  from master_join master_join_krmbjz
  join notes.note_view notes_note_lat_muknud on master_join_krmbjz.target_id = notes_note_lat_muknud.id
  where master_join_krmbjz.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_rwajno on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_perils.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_perils.title AS varchar), '(' || organisation_organisationauthority_lat_perils.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_perils.href
  )) as specialdateauthority  from master_join master_join_kumcck
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_perils on master_join_kumcck.target_id = organisation_organisationauthority_lat_perils.id
  where master_join_kumcck.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_snsxsw on TRUE;
create index on obstacles.verticalstructurelightingstatus_view (id);
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_avsasg.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_avsasg.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_avsasg.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_avsasg.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_avsasg.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_avsasg.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_avsasg.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_avsasg.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_aogmce.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_aogmce.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_aogmce.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_aogmce.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_aogmce.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_aogmce.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_gkzpob.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_gkzpob.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_gkzpob.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_gkzpob.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_gkzpob.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_gkzpob.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_jzmwec.timeinterval::jsonb as timeinterval,
    notes_note_view_ujtsig.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_hgmhgn.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_lnmaoq.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_avsasg on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_avsasg.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_aogmce on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_aogmce.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_gkzpob on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_gkzpob.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ybhibb.*) AS timeinterval
  from master_join master_join_evoszt
  join shared.timesheet_view shared_timesheet_lat_ybhibb on master_join_evoszt.target_id = shared_timesheet_lat_ybhibb.id
  where master_join_evoszt.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_jzmwec on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xsnnze.*) AS annotation
  from master_join master_join_jypzsf
  join notes.note_view notes_note_lat_xsnnze on master_join_jypzsf.target_id = notes_note_lat_xsnnze.id
  where master_join_jypzsf.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_ujtsig on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tvpteb.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tvpteb.title AS varchar), '(' || organisation_organisationauthority_lat_tvpteb.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tvpteb.href
  )) as specialdateauthority  from master_join master_join_fhgfax
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tvpteb on master_join_fhgfax.target_id = organisation_organisationauthority_lat_tvpteb.id
  where master_join_fhgfax.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_hgmhgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ibaoml.id) as lighting
  from master_join master_join_lgzzsc
  join shared.lightelement_pt shared_lightelement_lat_ibaoml on master_join_lgzzsc.target_id = shared_lightelement_lat_ibaoml.id
  where master_join_lgzzsc.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_lnmaoq on TRUE;
create index on obstacles.verticalstructurepart_view (id);
-- WorkareaActivityPropertyType
-- ['shared.timesheet_view', 'notes.note_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_iulkxp.timeinterval::jsonb as timeinterval,
    notes_note_view_pjufft.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zzeelf.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_pdlesb.*) AS timeinterval
  from master_join master_join_jpzktp
  join shared.timesheet_view shared_timesheet_lat_pdlesb on master_join_jpzktp.target_id = shared_timesheet_lat_pdlesb.id
  where master_join_jpzktp.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_iulkxp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivhgvx.*) AS annotation
  from master_join master_join_wqgcun
  join notes.note_view notes_note_lat_ivhgvx on master_join_wqgcun.target_id = notes_note_lat_ivhgvx.id
  where master_join_wqgcun.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_pjufft on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nsboyx.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nsboyx.title AS varchar), '(' || organisation_organisationauthority_lat_nsboyx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nsboyx.href
  )) as specialdateauthority  from master_join master_join_uxjbnl
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nsboyx on master_join_uxjbnl.target_id = organisation_organisationauthority_lat_nsboyx.id
  where master_join_uxjbnl.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_zzeelf on TRUE;
create index on airport_heliport.workareaactivity_view (id);
-- ContactInformationPropertyType
-- ['shared.telephonecontact_view', 'shared.postaladdress_view', 'shared.onlinecontact_view', 'notes.note_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_pcasqd.id)::jsonb AS selection,
    notes_note_view_iluaxm.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_pcasqd on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_pcasqd.id
left join lateral(
  select
  from master_join master_join_fmsmvm
  join shared.contactinformation_view shared_contactinformation_lat_kunleb on master_join_fmsmvm.target_id = shared_contactinformation_lat_kunleb.id
  where master_join_fmsmvm.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_guzzvk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuxyyy.*) AS annotation
  from master_join master_join_sqyvjm
  join notes.note_view notes_note_lat_vuxyyy on master_join_sqyvjm.target_id = notes_note_lat_vuxyyy.id
  where master_join_sqyvjm.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_iluaxm on TRUE;
create index on airport_heliport.airportheliportusage_view (id);
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_eoidmk.id)::jsonb AS selection,
    notes_note_view_cqpnti.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_eoidmk on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_eoidmk.id
left join lateral(
  select
  from master_join master_join_cergjy
  join shared.contactinformation_view shared_contactinformation_lat_uxwsrt on master_join_cergjy.target_id = shared_contactinformation_lat_uxwsrt.id
  where master_join_cergjy.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_ynfsdp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dcasjz.*) AS annotation
  from master_join master_join_jckdmg
  join notes.note_view notes_note_lat_dcasjz on master_join_jckdmg.target_id = notes_note_lat_dcasjz.id
  where master_join_jckdmg.source_id = airport_heliport.apronareausage.id
) as notes_note_view_cqpnti on TRUE;
create index on airport_heliport.apronareausage_view (id);
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_lmkedk.routeelement::jsonb as routeelement,
    notes_note_view_pcuino.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_nvmyok.id) as routeelement
  from master_join master_join_bndwkr
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_nvmyok on master_join_bndwkr.target_id = routes_flightroutingelement_lat_nvmyok.id
  where master_join_bndwkr.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_lmkedk on TRUE
left join lateral(
  select
  from master_join master_join_ubhjev
  join shared.contactinformation_view shared_contactinformation_lat_fgdofr on master_join_ubhjev.target_id = shared_contactinformation_lat_fgdofr.id
  where master_join_ubhjev.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_bkwvad on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eemuvc.*) AS annotation
  from master_join master_join_nzkfpb
  join notes.note_view notes_note_lat_eemuvc on master_join_nzkfpb.target_id = notes_note_lat_eemuvc.id
  where master_join_nzkfpb.source_id = routes.flightrestrictionroute.id
) as notes_note_view_pcuino on TRUE;
create index on routes.flightrestrictionroute_view (id);
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_tjlbec.id)::jsonb AS selection,
    notes_note_view_qrnkxg.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_tjlbec on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_tjlbec.id
left join lateral(
  select
  from master_join master_join_igwyus
  join shared.contactinformation_view shared_contactinformation_lat_mdlkpd on master_join_igwyus.target_id = shared_contactinformation_lat_mdlkpd.id
  where master_join_igwyus.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_bjnhwx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zmpzow.*) AS annotation
  from master_join master_join_oacbpg
  join notes.note_view notes_note_lat_zmpzow on master_join_oacbpg.target_id = notes_note_lat_zmpzow.id
  where master_join_oacbpg.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_qrnkxg on TRUE;
create index on airport_heliport.manoeuvringareausage_view (id);
-- AerialRefuellingTimeSliceType
-- ['aerial_refuelling.authorityforaerialrefuelling_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'routes.routeavailability_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as id,
    aerial_refuelling.aerialrefuelling.id::integer as f_id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_tldgov.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_tldgov.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_tldgov.href::text AS oppositetrack_href,
    routes_routeavailability_view_tvupmc.availability::jsonb as availability,
    airspace_airspace_pt_kxtnhe.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_zjmstd.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_dyunme.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_elrmsi.managingorganisation::jsonb as managingorganisation,
    notes_note_view_ddcdos.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_tldgov on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_tldgov.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_fnadpq.*) as availability
  from master_join master_join_cijpnd
  join routes.routeavailability_view routes_routeavailability_lat_fnadpq on master_join_cijpnd.target_id = routes_routeavailability_lat_fnadpq.id
  where master_join_cijpnd.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_tvupmc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_siwxaa.id,
      'title', coalesce(cast(airspace_airspace_lat_siwxaa.title AS varchar), '(' || airspace_airspace_lat_siwxaa.nilreason[1] || ')'),
      'href', airspace_airspace_lat_siwxaa.href
  )) as protectingairspace  from master_join master_join_ijzbuu
  join airspace.airspace_pt airspace_airspace_lat_siwxaa on master_join_ijzbuu.target_id = airspace_airspace_lat_siwxaa.id
  where master_join_ijzbuu.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_kxtnhe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_evyawj.*) as track
  from master_join master_join_vskica
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_evyawj on master_join_vskica.target_id = aerial_refuelling_aerialrefuellingtrack_lat_evyawj.id
  where master_join_vskica.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_zjmstd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_tzutxd.*) as anchor
  from master_join master_join_ckyjds
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_tzutxd on master_join_ckyjds.target_id = aerial_refuelling_aerialrefuellinganchor_lat_tzutxd.id
  where master_join_ckyjds.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_dyunme on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_qkvjsn.*) as managingorganisation
  from master_join master_join_ruuvpm
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_qkvjsn on master_join_ruuvpm.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_qkvjsn.id
  where master_join_ruuvpm.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_elrmsi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ayvanl.*) AS annotation
  from master_join master_join_cvcnks
  join notes.note_view notes_note_lat_ayvanl on master_join_cvcnks.target_id = notes_note_lat_ayvanl.id
  where master_join_cvcnks.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_ddcdos on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
create index on aerial_refuelling.aerialrefuelling_view (id);
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.aeronauticalgroundlight.id::integer as f_id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_thqcrj.title as varchar), '(' || obstacles_verticalstructure_pt_thqcrj.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_thqcrj.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rvwmqn.title as varchar), '(' || airport_heliport_airportheliport_pt_rvwmqn.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_rvwmqn.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_aurdfp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_aurdfp.longitude AS location_longitude,
    geometry_elevatedpoint_view_aurdfp.latitude AS location_latitude,
    geometry_elevatedpoint_view_aurdfp.elevation AS location_elevation,
    geometry_elevatedpoint_view_aurdfp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_aurdfp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_aurdfp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_aurdfp.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_empage.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_thqcrj on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_thqcrj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rvwmqn on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_rvwmqn.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_aurdfp on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_aurdfp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldbbwq.*) AS annotation
  from master_join master_join_hfqosq
  join notes.note_view notes_note_lat_ldbbwq on master_join_hfqosq.target_id = notes_note_lat_ldbbwq.id
  where master_join_hfqosq.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_empage on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
create index on navaids_points.aeronauticalgroundlight_view (id);
-- AircraftGroundServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.aircraftgroundservice.id::integer as f_id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_snkodi.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_snkodi.longitude AS location_longitude,
    geometry_elevatedpoint_view_snkodi.latitude AS location_latitude,
    geometry_elevatedpoint_view_snkodi.elevation AS location_elevation,
    geometry_elevatedpoint_view_snkodi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_snkodi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_snkodi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_snkodi.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_fxkcwe.title as varchar), '(' || organisation_unit_pt_fxkcwe.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_fxkcwe.href::text AS serviceprovider_href,
    service_callsigndetail_view_uawcex.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ifsqgi.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_etoxwy.availability::jsonb as availability,
    notes_note_view_iquhns.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_fbgkpp.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_snkodi on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_snkodi.id
left join organisation.unit_pt organisation_unit_pt_fxkcwe on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_fxkcwe.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_mupoyi.*) as callsign
  from master_join master_join_ppfqbn
  join service.callsigndetail_view service_callsigndetail_lat_mupoyi on master_join_ppfqbn.target_id = service_callsigndetail_lat_mupoyi.id
  where master_join_ppfqbn.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_uawcex on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_zdvktn.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_zdvktn.title AS varchar), '(' || service_radiocommunicationchannel_lat_zdvktn.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_zdvktn.href
  )) as radiocommunication  from master_join master_join_lxsrui
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_zdvktn on master_join_lxsrui.target_id = service_radiocommunicationchannel_lat_zdvktn.id
  where master_join_lxsrui.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_ifsqgi on TRUE
left join lateral(
  select
  from master_join master_join_pyonfc
  join shared.contactinformation_view shared_contactinformation_lat_hgtzzo on master_join_pyonfc.target_id = shared_contactinformation_lat_hgtzzo.id
  where master_join_pyonfc.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_lsxgry on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_adztnh.*) as availability
  from master_join master_join_qrxhrw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_adztnh on master_join_qrxhrw.target_id = service_serviceoperationalstatus_lat_adztnh.id
  where master_join_qrxhrw.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_etoxwy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nphlvd.*) AS annotation
  from master_join master_join_wurtej
  join notes.note_view notes_note_lat_nphlvd on master_join_wurtej.target_id = notes_note_lat_nphlvd.id
  where master_join_wurtej.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_iquhns on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_nfftlk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_nfftlk.title AS varchar), '(' || airport_heliport_airportheliport_lat_nfftlk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_nfftlk.href
  )) as airportheliport  from master_join master_join_wljxcq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_nfftlk on master_join_wljxcq.target_id = airport_heliport_airportheliport_lat_nfftlk.id
  where master_join_wljxcq.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_fbgkpp on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
create index on service.aircraftgroundservice_view (id);
-- AircraftStandTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'airport_heliport.apronareaavailability_view', 'geometry.elevatedsurface_view', 'airport_heliport.aircraftstandcontamination_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.aircraftstand.id::integer as f_id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ctfuje.*)::jsonb AS surfaceproperties,
    geometry_elevatedpoint_view_kqwwhn.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kqwwhn.longitude AS location_longitude,
    geometry_elevatedpoint_view_kqwwhn.latitude AS location_latitude,
    geometry_elevatedpoint_view_kqwwhn.elevation AS location_elevation,
    geometry_elevatedpoint_view_kqwwhn.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kqwwhn.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kqwwhn.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kqwwhn.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_sodxcn.title as varchar), '(' || airport_heliport_apronelement_pt_sodxcn.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_sodxcn.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_ofgwzh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ofgwzh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ofgwzh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ofgwzh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ofgwzh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ofgwzh.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_fiskgt.contaminant::jsonb as contaminant,
    notes_note_view_egxibk.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_mtwqnw.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ctfuje on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ctfuje.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kqwwhn on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_kqwwhn.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_sodxcn on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_sodxcn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ofgwzh on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_ofgwzh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_fxiaco.*) as contaminant
  from master_join master_join_aapehj
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_fxiaco on master_join_aapehj.target_id = airport_heliport_aircraftstandcontamination_lat_fxiaco.id
  where master_join_aapehj.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_fiskgt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fqhpeh.*) AS annotation
  from master_join master_join_pfnehm
  join notes.note_view notes_note_lat_fqhpeh on master_join_pfnehm.target_id = notes_note_lat_fqhpeh.id
  where master_join_pfnehm.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_egxibk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_hoqsvr.*) as availability
  from master_join master_join_qmkwcb
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_hoqsvr on master_join_qmkwcb.target_id = airport_heliport_apronareaavailability_lat_hoqsvr.id
  where master_join_qmkwcb.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_mtwqnw on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
create index on airport_heliport.aircraftstand_view (id);
-- AirportClearanceServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airportclearanceservice.id::integer as f_id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_fmwabu.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fmwabu.longitude AS location_longitude,
    geometry_elevatedpoint_view_fmwabu.latitude AS location_latitude,
    geometry_elevatedpoint_view_fmwabu.elevation AS location_elevation,
    geometry_elevatedpoint_view_fmwabu.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fmwabu.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fmwabu.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fmwabu.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_gcdubu.title as varchar), '(' || organisation_unit_pt_gcdubu.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_gcdubu.href::text AS serviceprovider_href,
    service_callsigndetail_view_zpegza.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_vkzsow.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_gleojg.availability::jsonb as availability,
    notes_note_view_ndnbgj.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_xcqwea.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fmwabu on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_fmwabu.id
left join organisation.unit_pt organisation_unit_pt_gcdubu on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_gcdubu.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_fdkkvz.*) as callsign
  from master_join master_join_ogytnr
  join service.callsigndetail_view service_callsigndetail_lat_fdkkvz on master_join_ogytnr.target_id = service_callsigndetail_lat_fdkkvz.id
  where master_join_ogytnr.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_zpegza on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_duxpov.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_duxpov.title AS varchar), '(' || service_radiocommunicationchannel_lat_duxpov.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_duxpov.href
  )) as radiocommunication  from master_join master_join_hvdjex
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_duxpov on master_join_hvdjex.target_id = service_radiocommunicationchannel_lat_duxpov.id
  where master_join_hvdjex.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_vkzsow on TRUE
left join lateral(
  select
  from master_join master_join_mwyoxk
  join shared.contactinformation_view shared_contactinformation_lat_fzzbix on master_join_mwyoxk.target_id = shared_contactinformation_lat_fzzbix.id
  where master_join_mwyoxk.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_wcevws on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_aintqd.*) as availability
  from master_join master_join_jlhwxy
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_aintqd on master_join_jlhwxy.target_id = service_serviceoperationalstatus_lat_aintqd.id
  where master_join_jlhwxy.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_gleojg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wtzqvd.*) AS annotation
  from master_join master_join_xrytuo
  join notes.note_view notes_note_lat_wtzqvd on master_join_xrytuo.target_id = notes_note_lat_wtzqvd.id
  where master_join_xrytuo.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_ndnbgj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_cfhwrd.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_cfhwrd.title AS varchar), '(' || airport_heliport_airportheliport_lat_cfhwrd.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_cfhwrd.href
  )) as airportheliport  from master_join master_join_zwqvna
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_cfhwrd on master_join_zwqvna.target_id = airport_heliport_airportheliport_lat_cfhwrd.id
  where master_join_zwqvna.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_xcqwea on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
create index on service.airportclearanceservice_view (id);
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportheliportcollocation.id::integer as f_id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_vgfhfq.title as varchar), '(' || airport_heliport_airportheliport_pt_vgfhfq.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_vgfhfq.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_asldzl.title as varchar), '(' || airport_heliport_airportheliport_pt_asldzl.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_asldzl.href::text AS dependentairport_href,
    notes_note_view_hsmvhl.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_vgfhfq on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_vgfhfq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_asldzl on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_asldzl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbypyo.*) AS annotation
  from master_join master_join_yochow
  join notes.note_view notes_note_lat_vbypyo on master_join_yochow.target_id = notes_note_lat_vbypyo.id
  where master_join_yochow.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_hsmvhl on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
create index on airport_heliport.airportheliportcollocation_view (id);
-- AirportHeliportTimeSliceType
-- ['airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'geometry.elevatedpoint_view', 'airport_heliport.city_view', 'shared.contactinformation_view', 'geometry.elevatedsurface_view', 'airport_heliport.airportheliportavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportheliport.id::integer as f_id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_kzzlsv.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_kmjazv.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_kmjazv.longitude AS arp_longitude,
    geometry_elevatedpoint_view_kmjazv.latitude AS arp_latitude,
    geometry_elevatedpoint_view_kmjazv.elevation AS arp_elevation,
    geometry_elevatedpoint_view_kmjazv.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_kmjazv.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_kmjazv.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_kmjazv.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_nirpdq.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_nirpdq.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_nirpdq.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_nirpdq.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_nirpdq.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_nirpdq.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_cosqgn.contaminant::jsonb as contaminant,
    airport_heliport_city_view_vkzelz.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_echyhp.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_bteglp.availability::jsonb as availability,
    notes_note_view_jtxwgk.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_kzzlsv on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_kzzlsv.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kmjazv on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_kmjazv.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_nirpdq on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_nirpdq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_yowsjp.*) as contaminant
  from master_join master_join_owjgpe
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_yowsjp on master_join_owjgpe.target_id = airport_heliport_airportheliportcontamination_lat_yowsjp.id
  where master_join_owjgpe.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_cosqgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_gjswhs.*) as servedcity
  from master_join master_join_ikebym
  join airport_heliport.city_view airport_heliport_city_lat_gjswhs on master_join_ikebym.target_id = airport_heliport_city_lat_gjswhs.id
  where master_join_ikebym.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_vkzelz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_hifiym.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_hifiym.title AS varchar), '(' || airport_heliport_altimetersource_lat_hifiym.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_hifiym.href
  )) as altimetersource  from master_join master_join_cnotdr
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_hifiym on master_join_cnotdr.target_id = airport_heliport_altimetersource_lat_hifiym.id
  where master_join_cnotdr.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_echyhp on TRUE
left join lateral(
  select
  from master_join master_join_rrjjje
  join shared.contactinformation_view shared_contactinformation_lat_gwxboo on master_join_rrjjje.target_id = shared_contactinformation_lat_gwxboo.id
  where master_join_rrjjje.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_gnoyri on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_twfitc.*) as availability
  from master_join master_join_xugppg
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_twfitc on master_join_xugppg.target_id = airport_heliport_airportheliportavailability_lat_twfitc.id
  where master_join_xugppg.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_bteglp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tezuwa.*) AS annotation
  from master_join master_join_hcnkcc
  join notes.note_view notes_note_lat_tezuwa on master_join_hcnkcc.target_id = notes_note_lat_tezuwa.id
  where master_join_hcnkcc.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_jtxwgk on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
create index on airport_heliport.airportheliport_view (id);
-- AirportHotSpotTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airporthotspot.id::integer as f_id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_bctvfm.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_bctvfm.elevation AS area_elevation,
    geometry_elevatedsurface_view_bctvfm.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_bctvfm.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_bctvfm.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_bctvfm.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_tlaenl.title as varchar), '(' || airport_heliport_airportheliport_pt_tlaenl.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_tlaenl.href::text AS affectedairport_href,
    notes_note_view_rjtlyo.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_bctvfm on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_bctvfm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tlaenl on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_tlaenl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_irhxpk.*) AS annotation
  from master_join master_join_muthrn
  join notes.note_view notes_note_lat_irhxpk on master_join_muthrn.target_id = notes_note_lat_irhxpk.id
  where master_join_muthrn.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_rjtlyo on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
create index on airport_heliport.airporthotspot_view (id);
-- AirportProtectionAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.airportprotectionareamarking.id::integer as f_id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    airport_heliport_markingelement_view_lcsghh.element::jsonb as element,
    notes_note_view_tumxvw.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_kvlhyq.*) as element
  from master_join master_join_rkzqza
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_kvlhyq on master_join_rkzqza.target_id = airport_heliport_markingelement_lat_kvlhyq.id
  where master_join_rkzqza.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_lcsghh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vfxico.*) AS annotation
  from master_join master_join_gdfaqk
  join notes.note_view notes_note_lat_vfxico on master_join_gdfaqk.target_id = notes_note_lat_vfxico.id
  where master_join_gdfaqk.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_tumxvw on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
create index on airport_heliport.airportprotectionareamarking_view (id);
-- AirportSuppliesServiceTimeSliceType
-- ['service.nitrogen_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.fuel_view', 'service.oil_view', 'service.oxygen_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airportsuppliesservice.id::integer as f_id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as name,
    geometry_elevatedpoint_view_efsfez.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_efsfez.longitude AS location_longitude,
    geometry_elevatedpoint_view_efsfez.latitude AS location_latitude,
    geometry_elevatedpoint_view_efsfez.elevation AS location_elevation,
    geometry_elevatedpoint_view_efsfez.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_efsfez.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_efsfez.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_efsfez.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_jmeypf.title as varchar), '(' || organisation_unit_pt_jmeypf.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_jmeypf.href::text AS serviceprovider_href,
    service_callsigndetail_view_johrex.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_swnqed.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_kagtsp.availability::jsonb as availability,
    notes_note_view_lxpnve.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_hiposb.airportheliport::jsonb as airportheliport,
    service_fuel_view_uyedyo.fuelsupply::jsonb as fuelsupply,
    service_oil_view_slpcmk.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_yqvmsy.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_byuefm.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_efsfez on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_efsfez.id
left join organisation.unit_pt organisation_unit_pt_jmeypf on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_jmeypf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_etwxvs.*) as callsign
  from master_join master_join_pmpzby
  join service.callsigndetail_view service_callsigndetail_lat_etwxvs on master_join_pmpzby.target_id = service_callsigndetail_lat_etwxvs.id
  where master_join_pmpzby.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_johrex on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qwhujx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qwhujx.title AS varchar), '(' || service_radiocommunicationchannel_lat_qwhujx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qwhujx.href
  )) as radiocommunication  from master_join master_join_pmtqeq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qwhujx on master_join_pmtqeq.target_id = service_radiocommunicationchannel_lat_qwhujx.id
  where master_join_pmtqeq.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_swnqed on TRUE
left join lateral(
  select
  from master_join master_join_ympsji
  join shared.contactinformation_view shared_contactinformation_lat_ywnypj on master_join_ympsji.target_id = shared_contactinformation_lat_ywnypj.id
  where master_join_ympsji.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_ectqui on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_geprbo.*) as availability
  from master_join master_join_ypiraw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_geprbo on master_join_ypiraw.target_id = service_serviceoperationalstatus_lat_geprbo.id
  where master_join_ypiraw.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_kagtsp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cedoqq.*) AS annotation
  from master_join master_join_qujaby
  join notes.note_view notes_note_lat_cedoqq on master_join_qujaby.target_id = notes_note_lat_cedoqq.id
  where master_join_qujaby.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_lxpnve on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_mpefjk.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_mpefjk.title AS varchar), '(' || airport_heliport_airportheliport_lat_mpefjk.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_mpefjk.href
  )) as airportheliport  from master_join master_join_dlanih
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_mpefjk on master_join_dlanih.target_id = airport_heliport_airportheliport_lat_mpefjk.id
  where master_join_dlanih.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_hiposb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_nyfgsf.*) as fuelsupply
  from master_join master_join_gdazkx
  join service.fuel_view service_fuel_lat_nyfgsf on master_join_gdazkx.target_id = service_fuel_lat_nyfgsf.id
  where master_join_gdazkx.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_uyedyo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_jvqxik.*) as oilsupply
  from master_join master_join_xnkmhy
  join service.oil_view service_oil_lat_jvqxik on master_join_xnkmhy.target_id = service_oil_lat_jvqxik.id
  where master_join_xnkmhy.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_slpcmk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_puqvsr.*) as nitrogensupply
  from master_join master_join_trnujb
  join service.nitrogen_view service_nitrogen_lat_puqvsr on master_join_trnujb.target_id = service_nitrogen_lat_puqvsr.id
  where master_join_trnujb.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_yqvmsy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_niqbey.*) as oxygensupply
  from master_join master_join_emuxyo
  join service.oxygen_view service_oxygen_lat_niqbey on master_join_emuxyo.target_id = service_oxygen_lat_niqbey.id
  where master_join_emuxyo.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_byuefm on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
create index on service.airportsuppliesservice_view (id);
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.airspacebordercrossing.id::integer as f_id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_wfexev.title as varchar), '(' || airspace_airspace_pt_wfexev.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_wfexev.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_leevem.title as varchar), '(' || airspace_airspace_pt_leevem.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_leevem.href::text AS enteredairspace_href,
    notes_note_view_iipvyn.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_wfexev on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_wfexev.id
left join airspace.airspace_pt airspace_airspace_pt_leevem on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_leevem.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hcldvb.*) AS annotation
  from master_join master_join_frwcae
  join notes.note_view notes_note_lat_hcldvb on master_join_frwcae.target_id = notes_note_lat_hcldvb.id
  where master_join_frwcae.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_iipvyn on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
create index on routes.airspacebordercrossing_view (id);
-- AirspaceTimeSliceType
-- ['airspace.airspacegeometrycomponent_view', 'airspace.airspacelayerclass_view', 'airspace.airspaceactivation_view', 'notes.note_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.airspace.id::integer as f_id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_tzxqzg.title as varchar), '(' || routes_route_pt_tzxqzg.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_tzxqzg.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_zugluu.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_hjdcwn.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_erdpvd.activation::jsonb as activation,
    notes_note_view_aoqaef.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_tzxqzg on airspace.airspace_ts.protectedroute_id = routes_route_pt_tzxqzg.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_rnavka.*) as clazz
  from master_join master_join_prqguc
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_rnavka on master_join_prqguc.target_id = airspace_airspacelayerclass_lat_rnavka.id
  where master_join_prqguc.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_zugluu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_wnzhnr.*) as geometrycomponent
  from master_join master_join_tngowk
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_wnzhnr on master_join_tngowk.target_id = airspace_airspacegeometrycomponent_lat_wnzhnr.id
  where master_join_tngowk.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_hjdcwn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_kywiia.*) as activation
  from master_join master_join_opcfno
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_kywiia on master_join_opcfno.target_id = airspace_airspaceactivation_lat_kywiia.id
  where master_join_opcfno.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_erdpvd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ppjvtj.*) AS annotation
  from master_join master_join_yjiyne
  join notes.note_view notes_note_lat_ppjvtj on master_join_yjiyne.target_id = notes_note_lat_ppjvtj.id
  where master_join_yjiyne.source_id = airspace.airspace_ts.id
) as notes_note_view_aoqaef on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
create index on airspace.airspace_view (id);
-- AirTrafficControlServiceTimeSliceType
-- ['routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airtrafficcontrolservice.id::integer as f_id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_pvwoau.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pvwoau.longitude AS location_longitude,
    geometry_elevatedpoint_view_pvwoau.latitude AS location_latitude,
    geometry_elevatedpoint_view_pvwoau.elevation AS location_elevation,
    geometry_elevatedpoint_view_pvwoau.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pvwoau.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pvwoau.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pvwoau.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_haqipk.title as varchar), '(' || organisation_unit_pt_haqipk.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_haqipk.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_jewnvb.title as varchar), '(' || navaids_points_directionfinder_pt_jewnvb.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_jewnvb.href::text AS aircraftlocator_href,
    service_callsigndetail_view_rqhxzs.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ajnunx.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_hlscvg.availability::jsonb as availability,
    notes_note_view_cyhacu.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_htlgye.clientairport::jsonb as clientairport,
    airspace_airspace_pt_kzfeqx.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_qfzofy.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_efnpnv.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_gvrcao.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pvwoau on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_pvwoau.id
left join organisation.unit_pt organisation_unit_pt_haqipk on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_haqipk.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_jewnvb on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_jewnvb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_lecgvn.*) as callsign
  from master_join master_join_leidsn
  join service.callsigndetail_view service_callsigndetail_lat_lecgvn on master_join_leidsn.target_id = service_callsigndetail_lat_lecgvn.id
  where master_join_leidsn.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_rqhxzs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_ajbwpy.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_ajbwpy.title AS varchar), '(' || service_radiocommunicationchannel_lat_ajbwpy.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_ajbwpy.href
  )) as radiocommunication  from master_join master_join_ebsxwh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_ajbwpy on master_join_ebsxwh.target_id = service_radiocommunicationchannel_lat_ajbwpy.id
  where master_join_ebsxwh.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_ajnunx on TRUE
left join lateral(
  select
  from master_join master_join_qgshof
  join shared.contactinformation_view shared_contactinformation_lat_ymsgzs on master_join_qgshof.target_id = shared_contactinformation_lat_ymsgzs.id
  where master_join_qgshof.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_ikbpai on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_nvlipa.*) as availability
  from master_join master_join_mpmsys
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_nvlipa on master_join_mpmsys.target_id = service_serviceoperationalstatus_lat_nvlipa.id
  where master_join_mpmsys.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_hlscvg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nsaphx.*) AS annotation
  from master_join master_join_gpflff
  join notes.note_view notes_note_lat_nsaphx on master_join_gpflff.target_id = notes_note_lat_nsaphx.id
  where master_join_gpflff.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_cyhacu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_uzyjrw.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_uzyjrw.title AS varchar), '(' || airport_heliport_airportheliport_lat_uzyjrw.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_uzyjrw.href
  )) as clientairport  from master_join master_join_igasak
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_uzyjrw on master_join_igasak.target_id = airport_heliport_airportheliport_lat_uzyjrw.id
  where master_join_igasak.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_htlgye on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_wywiin.id,
      'title', coalesce(cast(airspace_airspace_lat_wywiin.title AS varchar), '(' || airspace_airspace_lat_wywiin.nilreason[1] || ')'),
      'href', airspace_airspace_lat_wywiin.href
  )) as clientairspace  from master_join master_join_weffuk
  join airspace.airspace_pt airspace_airspace_lat_wywiin on master_join_weffuk.target_id = airspace_airspace_lat_wywiin.id
  where master_join_weffuk.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_kzfeqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_itsgjb.*) as clientroute
  from master_join master_join_jabkbk
  join routes.routeportion_view routes_routeportion_lat_itsgjb on master_join_jabkbk.target_id = routes_routeportion_lat_itsgjb.id
  where master_join_jabkbk.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_qfzofy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_tdpfux.id,
      'title', coalesce(cast(holding_holdingpattern_lat_tdpfux.title AS varchar), '(' || holding_holdingpattern_lat_tdpfux.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_tdpfux.href
  )) as clientholding  from master_join master_join_hnlslk
  join holding.holdingpattern_pt holding_holdingpattern_lat_tdpfux on master_join_hnlslk.target_id = holding_holdingpattern_lat_tdpfux.id
  where master_join_hnlslk.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_efnpnv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_indrpe.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_indrpe.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_indrpe.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_indrpe.href
  )) as clientaerialrefuelling  from master_join master_join_epwcjk
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_indrpe on master_join_epwcjk.target_id = aerial_refuelling_aerialrefuelling_lat_indrpe.id
  where master_join_epwcjk.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_gvrcao on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
create index on service.airtrafficcontrolservice_view (id);
-- AirTrafficManagementServiceTimeSliceType
-- ['routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.airtrafficmanagementservice.id::integer as f_id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_clnqyg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_clnqyg.longitude AS location_longitude,
    geometry_elevatedpoint_view_clnqyg.latitude AS location_latitude,
    geometry_elevatedpoint_view_clnqyg.elevation AS location_elevation,
    geometry_elevatedpoint_view_clnqyg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_clnqyg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_clnqyg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_clnqyg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_uoouas.title as varchar), '(' || organisation_unit_pt_uoouas.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_uoouas.href::text AS serviceprovider_href,
    service_callsigndetail_view_lagxlf.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_hlgyzh.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_yphyxv.availability::jsonb as availability,
    notes_note_view_umgzxv.annotation::jsonb as annotation,
    airspace_airspace_pt_tlibbq.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_unynlw.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_wijugt.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_clnqyg on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_clnqyg.id
left join organisation.unit_pt organisation_unit_pt_uoouas on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_uoouas.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_gmtwfv.*) as callsign
  from master_join master_join_jkpjjw
  join service.callsigndetail_view service_callsigndetail_lat_gmtwfv on master_join_jkpjjw.target_id = service_callsigndetail_lat_gmtwfv.id
  where master_join_jkpjjw.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_lagxlf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_mzxsvx.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_mzxsvx.title AS varchar), '(' || service_radiocommunicationchannel_lat_mzxsvx.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_mzxsvx.href
  )) as radiocommunication  from master_join master_join_guxofq
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_mzxsvx on master_join_guxofq.target_id = service_radiocommunicationchannel_lat_mzxsvx.id
  where master_join_guxofq.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_hlgyzh on TRUE
left join lateral(
  select
  from master_join master_join_vgnpcy
  join shared.contactinformation_view shared_contactinformation_lat_nflnjb on master_join_vgnpcy.target_id = shared_contactinformation_lat_nflnjb.id
  where master_join_vgnpcy.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_sptasl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_hgtymc.*) as availability
  from master_join master_join_wnwbxd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_hgtymc on master_join_wnwbxd.target_id = service_serviceoperationalstatus_lat_hgtymc.id
  where master_join_wnwbxd.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_yphyxv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qgtapl.*) AS annotation
  from master_join master_join_bgaqxx
  join notes.note_view notes_note_lat_qgtapl on master_join_bgaqxx.target_id = notes_note_lat_qgtapl.id
  where master_join_bgaqxx.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_umgzxv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_onwupd.id,
      'title', coalesce(cast(airspace_airspace_lat_onwupd.title AS varchar), '(' || airspace_airspace_lat_onwupd.nilreason[1] || ')'),
      'href', airspace_airspace_lat_onwupd.href
  )) as clientairspace  from master_join master_join_rbinrs
  join airspace.airspace_pt airspace_airspace_lat_onwupd on master_join_rbinrs.target_id = airspace_airspace_lat_onwupd.id
  where master_join_rbinrs.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_tlibbq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_cobgbc.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_cobgbc.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_cobgbc.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_cobgbc.href
  )) as clientaerialrefuelling  from master_join master_join_mngcst
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_cobgbc on master_join_mngcst.target_id = aerial_refuelling_aerialrefuelling_lat_cobgbc.id
  where master_join_mngcst.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_unynlw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_sbxtyx.*) as clientroute
  from master_join master_join_lblzln
  join routes.routeportion_view routes_routeportion_lat_sbxtyx on master_join_lblzln.target_id = routes_routeportion_lat_sbxtyx.id
  where master_join_lblzln.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_wijugt on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
create index on service.airtrafficmanagementservice_view (id);
-- AltimeterSourceTimeSliceType
-- ['airport_heliport.altimetersourcestatus_view', 'notes.note_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.altimetersource.id::integer as f_id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_jnynhc.availability::jsonb as availability,
    notes_note_view_vmjdie.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_blhjks.*) as availability
  from master_join master_join_covkye
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_blhjks on master_join_covkye.target_id = airport_heliport_altimetersourcestatus_lat_blhjks.id
  where master_join_covkye.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_jnynhc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pntipg.*) AS annotation
  from master_join master_join_lwkmbf
  join notes.note_view notes_note_lat_pntipg on master_join_lwkmbf.target_id = notes_note_lat_pntipg.id
  where master_join_lwkmbf.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_vmjdie on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
create index on airport_heliport.altimetersource_view (id);
-- AngleIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.angleindication.id::integer as f_id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_hvnzwy.title as varchar), '(' || navaids_points_designatedpoint_pt_hvnzwy.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_hvnzwy.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_scbvqe.title as varchar), '(' || navaids_points_designatedpoint_pt_scbvqe.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_scbvqe.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ykhzyw.title as varchar), '(' || navaids_points_navaid_pt_ykhzyw.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ykhzyw.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gafsgd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gafsgd.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_gafsgd.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_sbfhfa.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_sbfhfa.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_sbfhfa.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ifwkjr.title as varchar), '(' || airport_heliport_airportheliport_pt_ifwkjr.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ifwkjr.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_iqytsv.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_iqytsv.longitude AS pointchoiceposition_longitude,
    geometry_point_view_iqytsv.latitude AS pointchoiceposition_latitude,
    geometry_point_view_iqytsv.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_cnbwic.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hvnzwy on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_hvnzwy.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_scbvqe on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_scbvqe.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ykhzyw on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_ykhzyw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gafsgd on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gafsgd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_sbfhfa on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_sbfhfa.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ifwkjr on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_ifwkjr.id
left join geometry.point_view geometry_point_view_iqytsv on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_iqytsv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utckhy.*) AS annotation
  from master_join master_join_cnkzdz
  join notes.note_view notes_note_lat_utckhy on master_join_cnkzdz.target_id = notes_note_lat_utckhy.id
  where master_join_cnkzdz.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_cnbwic on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
create index on navaids_points.angleindication_view (id);
-- ApproachLightingSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.approachlightingsystem.id::integer as f_id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_knmcjn.title as varchar), '(' || airport_heliport_runwaydirection_pt_knmcjn.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_knmcjn.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_dcdoli.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_cnuawu.availability::jsonb as availability,
    notes_note_view_vhxglh.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_knmcjn on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_knmcjn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_owidmq.*) as element
  from master_join master_join_latyzo
  join shared.lightelement_view shared_lightelement_lat_owidmq on master_join_latyzo.target_id = shared_lightelement_lat_owidmq.id
  where master_join_latyzo.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_dcdoli on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_dfvysn.*) as availability
  from master_join master_join_teorpi
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_dfvysn on master_join_teorpi.target_id = airport_heliport_groundlightingavailability_lat_dfvysn.id
  where master_join_teorpi.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_cnuawu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cekeke.*) AS annotation
  from master_join master_join_nwbbou
  join notes.note_view notes_note_lat_cekeke on master_join_nwbbou.target_id = notes_note_lat_cekeke.id
  where master_join_nwbbou.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_vhxglh on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
create index on airport_heliport.approachlightingsystem_view (id);
-- ApronElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronelement.id::integer as f_id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_udwrdl.title as varchar), '(' || airport_heliport_apron_pt_udwrdl.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_udwrdl.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bndibm.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_baomli.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_baomli.elevation AS extent_elevation,
    geometry_elevatedsurface_view_baomli.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_baomli.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_baomli.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_baomli.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_jgaokt.supplyservice::jsonb as supplyservice,
    notes_note_view_ljqlcr.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_mmepfo.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_udwrdl on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_udwrdl.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bndibm on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bndibm.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_baomli on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_baomli.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_tncuzz.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_tncuzz.title AS varchar), '(' || service_airportsuppliesservice_lat_tncuzz.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_tncuzz.href
  )) as supplyservice  from master_join master_join_fwzmqr
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_tncuzz on master_join_fwzmqr.target_id = service_airportsuppliesservice_lat_tncuzz.id
  where master_join_fwzmqr.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_jgaokt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jherzs.*) AS annotation
  from master_join master_join_jvtrmj
  join notes.note_view notes_note_lat_jherzs on master_join_jvtrmj.target_id = notes_note_lat_jherzs.id
  where master_join_jvtrmj.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_ljqlcr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_quuawt.*) as availability
  from master_join master_join_okcspr
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_quuawt on master_join_okcspr.target_id = airport_heliport_apronareaavailability_lat_quuawt.id
  where master_join_okcspr.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_mmepfo on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
create index on airport_heliport.apronelement_view (id);
-- ApronLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronlightsystem.id::integer as f_id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_qfdgqq.title as varchar), '(' || airport_heliport_apron_pt_qfdgqq.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_qfdgqq.href::text AS lightedapron_href,
    shared_lightelement_view_itnobo.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_aeovgv.availability::jsonb as availability,
    notes_note_view_moxblr.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_qfdgqq on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_qfdgqq.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_pkrmyb.*) as element
  from master_join master_join_qxcvkw
  join shared.lightelement_view shared_lightelement_lat_pkrmyb on master_join_qxcvkw.target_id = shared_lightelement_lat_pkrmyb.id
  where master_join_qxcvkw.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_itnobo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_iumngh.*) as availability
  from master_join master_join_zffaom
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_iumngh on master_join_zffaom.target_id = airport_heliport_groundlightingavailability_lat_iumngh.id
  where master_join_zffaom.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_aeovgv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pikhla.*) AS annotation
  from master_join master_join_mkypin
  join notes.note_view notes_note_lat_pikhla on master_join_mkypin.target_id = notes_note_lat_pikhla.id
  where master_join_mkypin.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_moxblr on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
create index on airport_heliport.apronlightsystem_view (id);
-- ApronMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apronmarking.id::integer as f_id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_xxajvw.title as varchar), '(' || airport_heliport_apron_pt_xxajvw.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_xxajvw.href::text AS markedapron_href,
    airport_heliport_markingelement_view_wdmgwh.element::jsonb as element,
    notes_note_view_fzrhdl.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_xxajvw on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_xxajvw.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wgwhli.*) as element
  from master_join master_join_vonffj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wgwhli on master_join_vonffj.target_id = airport_heliport_markingelement_lat_wgwhli.id
  where master_join_vonffj.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_wdmgwh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ewtjnb.*) AS annotation
  from master_join master_join_ibopya
  join notes.note_view notes_note_lat_ewtjnb on master_join_ibopya.target_id = notes_note_lat_ewtjnb.id
  where master_join_ibopya.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_fzrhdl on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
create index on airport_heliport.apronmarking_view (id);
-- ApronTimeSliceType
-- ['notes.note_view', 'airport_heliport.aproncontamination_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.apron.id::integer as f_id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ahbnxi.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_eejnag.title as varchar), '(' || airport_heliport_airportheliport_pt_eejnag.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_eejnag.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_dwjvzj.contaminant::jsonb as contaminant,
    notes_note_view_azccea.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_recrfb.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ahbnxi on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ahbnxi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_eejnag on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_eejnag.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_akgqxg.*) as contaminant
  from master_join master_join_hibuvl
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_akgqxg on master_join_hibuvl.target_id = airport_heliport_aproncontamination_lat_akgqxg.id
  where master_join_hibuvl.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_dwjvzj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mcudmy.*) AS annotation
  from master_join master_join_atwnbq
  join notes.note_view notes_note_lat_mcudmy on master_join_atwnbq.target_id = notes_note_lat_mcudmy.id
  where master_join_atwnbq.source_id = airport_heliport.apron_ts.id
) as notes_note_view_azccea on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_dbqwme.*) as availability
  from master_join master_join_evpfvf
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_dbqwme on master_join_evpfvf.target_id = airport_heliport_apronareaavailability_lat_dbqwme.id
  where master_join_evpfvf.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_recrfb on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
create index on airport_heliport.apron_view (id);
-- ArrestingGearTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedcurve_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.arrestinggear.id::integer as f_id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ppjseu.*)::jsonb AS surfaceproperties,
    geometry_elevatedcurve_view_mdnpgn.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_mdnpgn.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_mdnpgn.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_mdnpgn.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_mdnpgn.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_mdnpgn.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_dhhtad.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_dhhtad.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_dhhtad.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_dhhtad.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_dhhtad.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_dhhtad.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_klykko.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_klykko.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_klykko.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_klykko.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_klykko.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_klykko.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_klykko.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_klykko.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_snevrd.runwaydirection::jsonb as runwaydirection,
    notes_note_view_hfklcd.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ppjseu on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ppjseu.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_mdnpgn on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_mdnpgn.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dhhtad on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_dhhtad.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_klykko on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_klykko.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_apptby.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_apptby.title AS varchar), '(' || airport_heliport_runwaydirection_lat_apptby.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_apptby.href
  )) as runwaydirection  from master_join master_join_tlkyub
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_apptby on master_join_tlkyub.target_id = airport_heliport_runwaydirection_lat_apptby.id
  where master_join_tlkyub.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_snevrd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fwhnwv.*) AS annotation
  from master_join master_join_wukbja
  join notes.note_view notes_note_lat_fwhnwv on master_join_wukbja.target_id = notes_note_lat_fwhnwv.id
  where master_join_wukbja.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_hfklcd on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
create index on airport_heliport.arrestinggear_view (id);
-- ArrivalFeederLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.arrivalfeederleg.id::integer as f_id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_pefqpt.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ztqcjj.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_ksacva.*)::jsonb AS arccentre,
    geometry_curve_view_akqyqj.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_akqyqj.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_qezchd.title as varchar), '(' || navaids_points_angleindication_pt_qezchd.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_qezchd.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_xhwrik.title as varchar), '(' || navaids_points_distanceindication_pt_xhwrik.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_xhwrik.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_snwxpd.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_bzijeh.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_bzijeh.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_bzijeh.href::text AS approach_href,
    shared_aircraftcharacteristic_view_wuxfdo.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_ceyjud.designsurface::jsonb as designsurface,
    notes_note_view_tpudkc.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_pefqpt on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_pefqpt.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ztqcjj on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_ztqcjj.id
left join geometry.curve_view geometry_curve_view_akqyqj on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_akqyqj.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_ksacva on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_ksacva.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_qezchd on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_qezchd.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_xhwrik on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_xhwrik.id
left join procedure.holdinguse_view procedure_holdinguse_view_snwxpd on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_snwxpd.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_bzijeh on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_bzijeh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_scrslg.*) as aircraftcategory
  from master_join master_join_dnfqhg
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_scrslg on master_join_dnfqhg.target_id = shared_aircraftcharacteristic_lat_scrslg.id
  where master_join_dnfqhg.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_wuxfdo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fsjmot.*) as designsurface
  from master_join master_join_ahmmfo
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fsjmot on master_join_ahmmfo.target_id = shared_obstacleassessmentarea_lat_fsjmot.id
  where master_join_ahmmfo.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_ceyjud on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdghea.*) AS annotation
  from master_join master_join_kzuqvl
  join notes.note_view notes_note_lat_hdghea on master_join_kzuqvl.target_id = notes_note_lat_hdghea.id
  where master_join_kzuqvl.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_tpudkc on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
create index on procedure.arrivalfeederleg_view (id);
-- ArrivalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.arrivalleg.id::integer as f_id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_meazdr.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fxtovn.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_kgjniz.*)::jsonb AS arccentre,
    geometry_curve_view_noeqnv.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_noeqnv.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_cgtdvt.title as varchar), '(' || navaids_points_angleindication_pt_cgtdvt.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_cgtdvt.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ywezwp.title as varchar), '(' || navaids_points_distanceindication_pt_ywezwp.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ywezwp.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_awgbgv.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_acevwr.title as varchar), '(' || procedure_standardinstrumentarrival_pt_acevwr.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_acevwr.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_ubyfmn.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_csaaad.designsurface::jsonb as designsurface,
    notes_note_view_mmvany.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_meazdr on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_meazdr.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fxtovn on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_fxtovn.id
left join geometry.curve_view geometry_curve_view_noeqnv on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_noeqnv.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_kgjniz on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_kgjniz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_cgtdvt on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_cgtdvt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ywezwp on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_ywezwp.id
left join procedure.holdinguse_view procedure_holdinguse_view_awgbgv on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_awgbgv.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_acevwr on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_acevwr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_wkzqyr.*) as aircraftcategory
  from master_join master_join_wgdjgy
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_wkzqyr on master_join_wgdjgy.target_id = shared_aircraftcharacteristic_lat_wkzqyr.id
  where master_join_wgdjgy.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_ubyfmn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_lojvkt.*) as designsurface
  from master_join master_join_bktatf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_lojvkt on master_join_bktatf.target_id = shared_obstacleassessmentarea_lat_lojvkt.id
  where master_join_bktatf.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_csaaad on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qufkan.*) AS annotation
  from master_join master_join_vbgzhr
  join notes.note_view notes_note_lat_qufkan on master_join_vbgzhr.target_id = notes_note_lat_qufkan.id
  where master_join_vbgzhr.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_mmvany on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
create index on procedure.arrivalleg_view (id);
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.authorityforairspace.id::integer as f_id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_crctrs.title as varchar), '(' || organisation_organisationauthority_pt_crctrs.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_crctrs.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_qmiisy.title as varchar), '(' || airspace_airspace_pt_qmiisy.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_qmiisy.href::text AS assignedairspace_href,
    notes_note_view_jleijm.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_crctrs on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_crctrs.id
left join airspace.airspace_pt airspace_airspace_pt_qmiisy on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_qmiisy.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cvgaxs.*) AS annotation
  from master_join master_join_ohheca
  join notes.note_view notes_note_lat_cvgaxs on master_join_ohheca.target_id = notes_note_lat_cvgaxs.id
  where master_join_ohheca.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_jleijm on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
create index on airspace.authorityforairspace_view (id);
-- AzimuthTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.azimuth.id::integer as f_id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_isuxyz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_isuxyz.longitude AS location_longitude,
    geometry_elevatedpoint_view_isuxyz.latitude AS location_latitude,
    geometry_elevatedpoint_view_isuxyz.elevation AS location_elevation,
    geometry_elevatedpoint_view_isuxyz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_isuxyz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_isuxyz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_isuxyz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_qboglm.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mgplma.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_fczauz.availability::jsonb as availability,
    notes_note_view_rhbfkp.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_isuxyz on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_isuxyz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_sqjfux.*) as authority
  from master_join master_join_ygtlnf
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_sqjfux on master_join_ygtlnf.target_id = navaids_points_authorityfornavaidequipment_lat_sqjfux.id
  where master_join_ygtlnf.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_qboglm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_yyrjwy.*) as monitoring
  from master_join master_join_tqhqzd
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_yyrjwy on master_join_tqhqzd.target_id = navaids_points_navaidequipmentmonitoring_lat_yyrjwy.id
  where master_join_tqhqzd.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mgplma on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vgvrho.*) as availability
  from master_join master_join_dpjdlf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vgvrho on master_join_dpjdlf.target_id = navaids_points_navaidoperationalstatus_lat_vgvrho.id
  where master_join_dpjdlf.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_fczauz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hfbywu.*) AS annotation
  from master_join master_join_fzljqg
  join notes.note_view notes_note_lat_hfbywu on master_join_fzljqg.target_id = notes_note_lat_hfbywu.id
  where master_join_fzljqg.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_rhbfkp on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
create index on navaids_points.azimuth_view (id);
-- ChangeOverPointTimeSliceType
-- ['routes.routeportion_view', 'geometry.point_view', 'notes.note_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.changeoverpoint.id::integer as f_id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_scdfki.title as varchar), '(' || navaids_points_designatedpoint_pt_scdfki.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_scdfki.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zjcdug.title as varchar), '(' || navaids_points_navaid_pt_zjcdug.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_zjcdug.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_hctmja.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_hctmja.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_hctmja.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_maiysi.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_maiysi.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_maiysi.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bqnntk.title as varchar), '(' || airport_heliport_airportheliport_pt_bqnntk.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_bqnntk.href::text AS locationairportreferencepoint_href,
    geometry_point_view_hclvdy.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_hclvdy.longitude AS locationposition_longitude,
    geometry_point_view_hclvdy.latitude AS locationposition_latitude,
    geometry_point_view_hclvdy.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_gdxykw.*)::jsonb AS applicablerouteportion,
    notes_note_view_aobxyn.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_scdfki on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_scdfki.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zjcdug on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_zjcdug.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_hctmja on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_hctmja.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_maiysi on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_maiysi.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bqnntk on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_bqnntk.id
left join geometry.point_view geometry_point_view_hclvdy on routes.changeoverpoint_ts.location_position_id = geometry_point_view_hclvdy.id
left join routes.routeportion_view routes_routeportion_view_gdxykw on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_gdxykw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ohobah.*) AS annotation
  from master_join master_join_cjganr
  join notes.note_view notes_note_lat_ohobah on master_join_cjganr.target_id = notes_note_lat_ohobah.id
  where master_join_cjganr.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_aobxyn on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
create index on routes.changeoverpoint_view (id);
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.checkpointins.id::integer as f_id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_wqxlot.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_wqxlot.longitude AS position_longitude,
    geometry_elevatedpoint_view_wqxlot.latitude AS position_latitude,
    geometry_elevatedpoint_view_wqxlot.elevation AS position_elevation,
    geometry_elevatedpoint_view_wqxlot.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_wqxlot.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_wqxlot.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_wqxlot.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_zzomfh.title as varchar), '(' || airport_heliport_airportheliport_pt_zzomfh.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_zzomfh.href::text AS airportheliport_href,
    notes_note_view_cjrpgw.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wqxlot on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_wqxlot.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zzomfh on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_zzomfh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mgqyor.*) AS annotation
  from master_join master_join_shpoul
  join notes.note_view notes_note_lat_mgqyor on master_join_shpoul.target_id = notes_note_lat_mgqyor.id
  where master_join_shpoul.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_cjrpgw on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
create index on navaids_points.checkpointins_view (id);
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.checkpointvor.id::integer as f_id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_emswma.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_emswma.longitude AS position_longitude,
    geometry_elevatedpoint_view_emswma.latitude AS position_latitude,
    geometry_elevatedpoint_view_emswma.elevation AS position_elevation,
    geometry_elevatedpoint_view_emswma.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_emswma.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_emswma.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_emswma.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_cgwvzm.title as varchar), '(' || airport_heliport_airportheliport_pt_cgwvzm.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_cgwvzm.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_qknkvc.title as varchar), '(' || navaids_points_vor_pt_qknkvc.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_qknkvc.href::text AS checkpointfacility_href,
    notes_note_view_vuopwd.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_emswma on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_emswma.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cgwvzm on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_cgwvzm.id
left join navaids_points.vor_pt navaids_points_vor_pt_qknkvc on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_qknkvc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qwewnk.*) AS annotation
  from master_join master_join_xuqpuk
  join notes.note_view notes_note_lat_qwewnk on master_join_xuqpuk.target_id = notes_note_lat_qwewnk.id
  where master_join_xuqpuk.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_vuopwd on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
create index on navaids_points.checkpointvor_view (id);
-- CirclingAreaTimeSliceType
-- ['procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'geometry.surface_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    public.circlingarea.id::integer as f_id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_noyesy.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_noyesy.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_uukcif.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_uukcif.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_uukcif.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_rvhsrn.*)::jsonb AS aircraftcategory,
    procedure_approachcondition_view_fcrfab.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_flaeio.designsurface::jsonb as designsurface,
    notes_note_view_rwyzae.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_noyesy on public.circlingarea_ts.extent_id = geometry_surface_view_noyesy.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_uukcif on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_uukcif.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_rvhsrn on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_rvhsrn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_ptrpvc.*) as condition
  from master_join master_join_utbfhe
  join procedure.approachcondition_view procedure_approachcondition_lat_ptrpvc on master_join_utbfhe.target_id = procedure_approachcondition_lat_ptrpvc.id
  where master_join_utbfhe.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_fcrfab on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_objjvr.*) as designsurface
  from master_join master_join_acypgx
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_objjvr on master_join_acypgx.target_id = shared_obstacleassessmentarea_lat_objjvr.id
  where master_join_acypgx.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_flaeio on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ckticg.*) AS annotation
  from master_join master_join_nbbroc
  join notes.note_view notes_note_lat_ckticg on master_join_nbbroc.target_id = notes_note_lat_ckticg.id
  where master_join_nbbroc.source_id = public.circlingarea_ts.id
) as notes_note_view_rwyzae on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
create index on public.circlingarea_view (id);
-- DeicingAreaMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.deicingareamarking.id::integer as f_id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_ilcwdy.title as varchar), '(' || airport_heliport_deicingarea_pt_ilcwdy.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_ilcwdy.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_ezbuqc.element::jsonb as element,
    notes_note_view_qqqwhi.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_ilcwdy on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_ilcwdy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_wfycok.*) as element
  from master_join master_join_ewjtxl
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_wfycok on master_join_ewjtxl.target_id = airport_heliport_markingelement_lat_wfycok.id
  where master_join_ewjtxl.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_ezbuqc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mmpwiu.*) AS annotation
  from master_join master_join_prqmiw
  join notes.note_view notes_note_lat_mmpwiu on master_join_prqmiw.target_id = notes_note_lat_mmpwiu.id
  where master_join_prqmiw.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_qqqwhi on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
create index on airport_heliport.deicingareamarking_view (id);
-- DeicingAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.deicingarea.id::integer as f_id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_ngalbj.title as varchar), '(' || airport_heliport_apron_pt_ngalbj.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_ngalbj.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_oxvpgd.title as varchar), '(' || airport_heliport_taxiway_pt_oxvpgd.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_oxvpgd.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_kzuzkm.title as varchar), '(' || airport_heliport_aircraftstand_pt_kzuzkm.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_kzuzkm.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zcqoei.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_ipwdxq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ipwdxq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ipwdxq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ipwdxq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ipwdxq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ipwdxq.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_dqmvaz.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_dmpiqc.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ngalbj on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_ngalbj.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_oxvpgd on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_oxvpgd.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_kzuzkm on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_kzuzkm.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zcqoei on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zcqoei.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ipwdxq on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_ipwdxq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xvfmfn.*) AS annotation
  from master_join master_join_onpkbp
  join notes.note_view notes_note_lat_xvfmfn on master_join_onpkbp.target_id = notes_note_lat_xvfmfn.id
  where master_join_onpkbp.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_dqmvaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_zudetg.*) as availability
  from master_join master_join_jpnkxh
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_zudetg on master_join_jpnkxh.target_id = airport_heliport_apronareaavailability_lat_zudetg.id
  where master_join_jpnkxh.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_dmpiqc on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
create index on airport_heliport.deicingarea_view (id);
-- DepartureLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'procedure.departurearrivalcondition_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.departureleg.id::integer as f_id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xlnhid.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tkuimo.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wppwyk.*)::jsonb AS arccentre,
    geometry_curve_view_ovkokg.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ovkokg.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_dawxmt.title as varchar), '(' || navaids_points_angleindication_pt_dawxmt.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_dawxmt.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zetytb.title as varchar), '(' || navaids_points_distanceindication_pt_zetytb.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_zetytb.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_abhbhi.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_zrsmwk.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_zrsmwk.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_zrsmwk.href::text AS departure_href,
    shared_aircraftcharacteristic_view_alqnua.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_pzhism.designsurface::jsonb as designsurface,
    notes_note_view_pjbidp.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_oyasqs.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xlnhid on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_xlnhid.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tkuimo on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_tkuimo.id
left join geometry.curve_view geometry_curve_view_ovkokg on procedure.departureleg_ts.trajectory_id = geometry_curve_view_ovkokg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wppwyk on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_wppwyk.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_dawxmt on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_dawxmt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zetytb on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_zetytb.id
left join procedure.holdinguse_view procedure_holdinguse_view_abhbhi on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_abhbhi.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_zrsmwk on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_zrsmwk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jilnuc.*) as aircraftcategory
  from master_join master_join_hakmhm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_jilnuc on master_join_hakmhm.target_id = shared_aircraftcharacteristic_lat_jilnuc.id
  where master_join_hakmhm.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_alqnua on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_sizwor.*) as designsurface
  from master_join master_join_svsrim
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_sizwor on master_join_svsrim.target_id = shared_obstacleassessmentarea_lat_sizwor.id
  where master_join_svsrim.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_pzhism on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dtzmer.*) AS annotation
  from master_join master_join_tizvkl
  join notes.note_view notes_note_lat_dtzmer on master_join_tizvkl.target_id = notes_note_lat_dtzmer.id
  where master_join_tizvkl.source_id = procedure.departureleg_ts.id
) as notes_note_view_pjbidp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_ibhcau.*) as condition
  from master_join master_join_ezlexb
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_ibhcau on master_join_ezlexb.target_id = procedure_departurearrivalcondition_lat_ibhcau.id
  where master_join_ezlexb.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_oyasqs on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
create index on procedure.departureleg_view (id);
-- DesignatedPointTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.designatedpoint.id::integer as f_id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as name,
    geometry_point_view_ekurzs.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_ekurzs.longitude AS location_longitude,
    geometry_point_view_ekurzs.latitude AS location_latitude,
    geometry_point_view_ekurzs.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nbqckm.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nbqckm.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_nbqckm.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_hcizqm.title as varchar), '(' || airport_heliport_airportheliport_pt_hcizqm.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_hcizqm.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zzscsm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zzscsm.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zzscsm.href::text AS runwaypoint_href,
    notes_note_view_iohgrt.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_ekurzs on navaids_points.designatedpoint_ts.location_id = geometry_point_view_ekurzs.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nbqckm on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_nbqckm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hcizqm on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_hcizqm.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zzscsm on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zzscsm.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ddslnr.*) AS annotation
  from master_join master_join_yzfjik
  join notes.note_view notes_note_lat_ddslnr on master_join_yzfjik.target_id = notes_note_lat_ddslnr.id
  where master_join_yzfjik.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_iohgrt on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
create index on navaids_points.designatedpoint_view (id);
-- DirectionFinderTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.directionfinder.id::integer as f_id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_qqzosc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_qqzosc.longitude AS location_longitude,
    geometry_elevatedpoint_view_qqzosc.latitude AS location_latitude,
    geometry_elevatedpoint_view_qqzosc.elevation AS location_elevation,
    geometry_elevatedpoint_view_qqzosc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_qqzosc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_qqzosc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_qqzosc.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ysghva.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_qxvatq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_bsjbux.availability::jsonb as availability,
    notes_note_view_qdgzti.annotation::jsonb as annotation,
    service_informationservice_pt_zkedei.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_qqzosc on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_qqzosc.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_qgdnwj.*) as authority
  from master_join master_join_mlgjuc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_qgdnwj on master_join_mlgjuc.target_id = navaids_points_authorityfornavaidequipment_lat_qgdnwj.id
  where master_join_mlgjuc.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_ysghva on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_rozdbu.*) as monitoring
  from master_join master_join_gwkmxz
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_rozdbu on master_join_gwkmxz.target_id = navaids_points_navaidequipmentmonitoring_lat_rozdbu.id
  where master_join_gwkmxz.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_qxvatq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_uqoebi.*) as availability
  from master_join master_join_bcthnz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_uqoebi on master_join_bcthnz.target_id = navaids_points_navaidoperationalstatus_lat_uqoebi.id
  where master_join_bcthnz.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_bsjbux on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_svldzs.*) AS annotation
  from master_join master_join_ikifej
  join notes.note_view notes_note_lat_svldzs on master_join_ikifej.target_id = notes_note_lat_svldzs.id
  where master_join_ikifej.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_qdgzti on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_dstiex.id,
      'title', coalesce(cast(service_informationservice_lat_dstiex.title AS varchar), '(' || service_informationservice_lat_dstiex.nilreason[1] || ')'),
      'href', service_informationservice_lat_dstiex.href
  )) as informationprovision  from master_join master_join_kcpsel
  join service.informationservice_pt service_informationservice_lat_dstiex on master_join_kcpsel.target_id = service_informationservice_lat_dstiex.id
  where master_join_kcpsel.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_zkedei on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
create index on navaids_points.directionfinder_view (id);
-- DistanceIndicationTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.distanceindication.id::integer as f_id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_ghpkii.title as varchar), '(' || navaids_points_designatedpoint_pt_ghpkii.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_ghpkii.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ulhepc.title as varchar), '(' || navaids_points_designatedpoint_pt_ulhepc.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ulhepc.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xtkcpp.title as varchar), '(' || navaids_points_navaid_pt_xtkcpp.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_xtkcpp.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_erfcuy.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_erfcuy.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_erfcuy.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zmhtku.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zmhtku.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zmhtku.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kulatb.title as varchar), '(' || airport_heliport_airportheliport_pt_kulatb.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_kulatb.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bvvqdx.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_bvvqdx.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bvvqdx.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bvvqdx.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_sronvm.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ghpkii on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_ghpkii.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ulhepc on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ulhepc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xtkcpp on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_xtkcpp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_erfcuy on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_erfcuy.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zmhtku on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zmhtku.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kulatb on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_kulatb.id
left join geometry.point_view geometry_point_view_bvvqdx on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_bvvqdx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mnnwjr.*) AS annotation
  from master_join master_join_jnblsk
  join notes.note_view notes_note_lat_mnnwjr on master_join_jnblsk.target_id = notes_note_lat_mnnwjr.id
  where master_join_jnblsk.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_sronvm on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
create index on navaids_points.distanceindication_view (id);
-- DMETimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.dme.id::integer as f_id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_ozyibq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ozyibq.longitude AS location_longitude,
    geometry_elevatedpoint_view_ozyibq.latitude AS location_latitude,
    geometry_elevatedpoint_view_ozyibq.elevation AS location_elevation,
    geometry_elevatedpoint_view_ozyibq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ozyibq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ozyibq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ozyibq.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_paffka.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_aritdr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_vehgwk.availability::jsonb as availability,
    notes_note_view_bntcdp.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ozyibq on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_ozyibq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_llkxat.*) as authority
  from master_join master_join_vmvpbf
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_llkxat on master_join_vmvpbf.target_id = navaids_points_authorityfornavaidequipment_lat_llkxat.id
  where master_join_vmvpbf.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_paffka on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_lelqgg.*) as monitoring
  from master_join master_join_lpkbpw
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_lelqgg on master_join_lpkbpw.target_id = navaids_points_navaidequipmentmonitoring_lat_lelqgg.id
  where master_join_lpkbpw.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_aritdr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_rvrjfj.*) as availability
  from master_join master_join_kyqpca
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_rvrjfj on master_join_kyqpca.target_id = navaids_points_navaidoperationalstatus_lat_rvrjfj.id
  where master_join_kyqpca.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_vehgwk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_agmrzw.*) AS annotation
  from master_join master_join_oobuho
  join notes.note_view notes_note_lat_agmrzw on master_join_oobuho.target_id = notes_note_lat_agmrzw.id
  where master_join_oobuho.source_id = navaids_points.dme_ts.id
) as notes_note_view_bntcdp on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
create index on navaids_points.dme_view (id);
-- ElevationTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.elevation.id::integer as f_id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_trkwvb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_trkwvb.longitude AS location_longitude,
    geometry_elevatedpoint_view_trkwvb.latitude AS location_latitude,
    geometry_elevatedpoint_view_trkwvb.elevation AS location_elevation,
    geometry_elevatedpoint_view_trkwvb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_trkwvb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_trkwvb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_trkwvb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_mntkbp.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_bocymp.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_uzwaoi.availability::jsonb as availability,
    notes_note_view_qjjwkf.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_trkwvb on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_trkwvb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_vyrmku.*) as authority
  from master_join master_join_vuogrf
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_vyrmku on master_join_vuogrf.target_id = navaids_points_authorityfornavaidequipment_lat_vyrmku.id
  where master_join_vuogrf.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_mntkbp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pjrtvi.*) as monitoring
  from master_join master_join_vrwjsv
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pjrtvi on master_join_vrwjsv.target_id = navaids_points_navaidequipmentmonitoring_lat_pjrtvi.id
  where master_join_vrwjsv.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_bocymp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xnrubc.*) as availability
  from master_join master_join_ldiszc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xnrubc on master_join_ldiszc.target_id = navaids_points_navaidoperationalstatus_lat_xnrubc.id
  where master_join_ldiszc.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_uzwaoi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kkkkpm.*) AS annotation
  from master_join master_join_zqysxd
  join notes.note_view notes_note_lat_kkkkpm on master_join_zqysxd.target_id = notes_note_lat_kkkkpm.id
  where master_join_zqysxd.source_id = navaids_points.elevation_ts.id
) as notes_note_view_qjjwkf on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
create index on navaids_points.elevation_view (id);
-- FinalLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'public.fasdatablock_view', 'geometry.curve_view', 'procedure.approachcondition_view', 'procedure.holdinguse_view', 'geometry.point_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.finalleg.id::integer as f_id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_iwizck.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_irznay.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_swuwdv.*)::jsonb AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_epjkeo.*)::jsonb AS visualdescentpoint,
    geometry_curve_view_jxdlwz.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_jxdlwz.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_vkpffb.title as varchar), '(' || navaids_points_angleindication_pt_vkpffb.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_vkpffb.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ekepqe.title as varchar), '(' || navaids_points_distanceindication_pt_ekepqe.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ekepqe.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_pgzgnb.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_kfdhhf.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_kfdhhf.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_kfdhhf.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_dmlotp.title as varchar), '(' || navaids_points_designatedpoint_pt_dmlotp.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dmlotp.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_laynrm.title as varchar), '(' || navaids_points_navaid_pt_laynrm.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_laynrm.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_shmqlq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_shmqlq.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_shmqlq.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ivgimc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ivgimc.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ivgimc.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_tgtttf.title as varchar), '(' || airport_heliport_airportheliport_pt_tgtttf.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_tgtttf.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_gflsam.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_gflsam.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_gflsam.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_gflsam.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_lhnpyc.*)::jsonb AS fasdata,
    shared_aircraftcharacteristic_view_avxgnf.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_soiqso.designsurface::jsonb as designsurface,
    notes_note_view_rbfbyl.annotation::jsonb as annotation,
    procedure_approachcondition_view_xrwhwt.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_iwizck on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_iwizck.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_irznay on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_irznay.id
left join geometry.curve_view geometry_curve_view_jxdlwz on procedure.finalleg_ts.trajectory_id = geometry_curve_view_jxdlwz.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_swuwdv on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_swuwdv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_vkpffb on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_vkpffb.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ekepqe on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_ekepqe.id
left join procedure.holdinguse_view procedure_holdinguse_view_pgzgnb on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_pgzgnb.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_kfdhhf on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_kfdhhf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dmlotp on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dmlotp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_laynrm on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_laynrm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_shmqlq on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_shmqlq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ivgimc on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ivgimc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tgtttf on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_tgtttf.id
left join geometry.point_view geometry_point_view_gflsam on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_gflsam.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_epjkeo on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_epjkeo.id
left join public.fasdatablock_view public_fasdatablock_view_lhnpyc on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_lhnpyc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_yknvgo.*) as aircraftcategory
  from master_join master_join_syyjpj
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_yknvgo on master_join_syyjpj.target_id = shared_aircraftcharacteristic_lat_yknvgo.id
  where master_join_syyjpj.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_avxgnf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_wfqhrt.*) as designsurface
  from master_join master_join_vkatcv
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_wfqhrt on master_join_vkatcv.target_id = shared_obstacleassessmentarea_lat_wfqhrt.id
  where master_join_vkatcv.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_soiqso on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjbigy.*) AS annotation
  from master_join master_join_hlptet
  join notes.note_view notes_note_lat_xjbigy on master_join_hlptet.target_id = notes_note_lat_xjbigy.id
  where master_join_hlptet.source_id = procedure.finalleg_ts.id
) as notes_note_view_rbfbyl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_dikznr.*) as condition
  from master_join master_join_dfgmyi
  join procedure.approachcondition_view procedure_approachcondition_lat_dikznr on master_join_dfgmyi.target_id = procedure_approachcondition_lat_dikznr.id
  where master_join_dfgmyi.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_xrwhwt on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
create index on procedure.finalleg_view (id);
-- FireFightingServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.firefightingservice.id::integer as f_id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_fyhdvq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fyhdvq.longitude AS location_longitude,
    geometry_elevatedpoint_view_fyhdvq.latitude AS location_latitude,
    geometry_elevatedpoint_view_fyhdvq.elevation AS location_elevation,
    geometry_elevatedpoint_view_fyhdvq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fyhdvq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fyhdvq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fyhdvq.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vyvngn.title as varchar), '(' || organisation_unit_pt_vyvngn.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_vyvngn.href::text AS serviceprovider_href,
    service_callsigndetail_view_fsvmrw.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_notmfv.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ecemhj.availability::jsonb as availability,
    notes_note_view_anhzny.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_nntezm.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fyhdvq on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_fyhdvq.id
left join organisation.unit_pt organisation_unit_pt_vyvngn on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_vyvngn.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_gsypcb.*) as callsign
  from master_join master_join_xqnkqz
  join service.callsigndetail_view service_callsigndetail_lat_gsypcb on master_join_xqnkqz.target_id = service_callsigndetail_lat_gsypcb.id
  where master_join_xqnkqz.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_fsvmrw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_uuowyr.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_uuowyr.title AS varchar), '(' || service_radiocommunicationchannel_lat_uuowyr.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_uuowyr.href
  )) as radiocommunication  from master_join master_join_azbuoc
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_uuowyr on master_join_azbuoc.target_id = service_radiocommunicationchannel_lat_uuowyr.id
  where master_join_azbuoc.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_notmfv on TRUE
left join lateral(
  select
  from master_join master_join_axinee
  join shared.contactinformation_view shared_contactinformation_lat_xgnnxm on master_join_axinee.target_id = shared_contactinformation_lat_xgnnxm.id
  where master_join_axinee.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_gmqfdt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ocwhte.*) as availability
  from master_join master_join_nyvizy
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ocwhte on master_join_nyvizy.target_id = service_serviceoperationalstatus_lat_ocwhte.id
  where master_join_nyvizy.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_ecemhj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bmsimk.*) AS annotation
  from master_join master_join_lwkrvs
  join notes.note_view notes_note_lat_bmsimk on master_join_lwkrvs.target_id = notes_note_lat_bmsimk.id
  where master_join_lwkrvs.source_id = service.firefightingservice_ts.id
) as notes_note_view_anhzny on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_kxsosv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_kxsosv.title AS varchar), '(' || airport_heliport_airportheliport_lat_kxsosv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_kxsosv.href
  )) as airportheliport  from master_join master_join_bqxrzk
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_kxsosv on master_join_bqxrzk.target_id = airport_heliport_airportheliport_lat_kxsosv.id
  where master_join_bqxrzk.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_nntezm on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
create index on service.firefightingservice_view (id);
-- FlightRestrictionTimeSliceType
-- ['notes.note_view', 'routes.flightrestrictionroute_view', 'routes.flightconditioncombination_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.flightrestriction.id::integer as f_id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_rstawb.*)::jsonb AS flight,
    routes_flightrestrictionroute_view_iqvmzr.regulatedroute::jsonb as regulatedroute,
    notes_note_view_dkjzss.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_rstawb on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_rstawb.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_tjddmj.*) as regulatedroute
  from master_join master_join_yibuyz
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_tjddmj on master_join_yibuyz.target_id = routes_flightrestrictionroute_lat_tjddmj.id
  where master_join_yibuyz.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_iqvmzr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vqkrir.*) AS annotation
  from master_join master_join_wzhnnm
  join notes.note_view notes_note_lat_vqkrir on master_join_wzhnnm.target_id = notes_note_lat_vqkrir.id
  where master_join_wzhnnm.source_id = routes.flightrestriction_ts.id
) as notes_note_view_dkjzss on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
create index on routes.flightrestriction_view (id);
-- FloatingDockSiteTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.floatingdocksite.id::integer as f_id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_lltopa.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_lltopa.elevation AS extent_elevation,
    geometry_elevatedsurface_view_lltopa.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_lltopa.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_lltopa.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_lltopa.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_gcacbb.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lltopa on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_lltopa.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brhred.*) AS annotation
  from master_join master_join_fnzvmi
  join notes.note_view notes_note_lat_brhred on master_join_fnzvmi.target_id = notes_note_lat_brhred.id
  where master_join_fnzvmi.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_gcacbb on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
create index on airport_heliport.floatingdocksite_view (id);
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as id,
    airspace.geoborder.id::integer as f_id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_jvrdca.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_jvrdca.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_tshumj.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_jvrdca on airspace.geoborder_ts.border_id = geometry_curve_view_jvrdca.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_euycjx.*) AS annotation
  from master_join master_join_decier
  join notes.note_view notes_note_lat_euycjx on master_join_decier.target_id = notes_note_lat_euycjx.id
  where master_join_decier.source_id = airspace.geoborder_ts.id
) as notes_note_view_tshumj on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
create index on airspace.geoborder_view (id);
-- GlidepathTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.glidepath.id::integer as f_id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_dhktza.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_dhktza.longitude AS location_longitude,
    geometry_elevatedpoint_view_dhktza.latitude AS location_latitude,
    geometry_elevatedpoint_view_dhktza.elevation AS location_elevation,
    geometry_elevatedpoint_view_dhktza.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_dhktza.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_dhktza.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_dhktza.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_lmxhzd.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mwftjk.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_caayta.availability::jsonb as availability,
    notes_note_view_wxodjd.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dhktza on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_dhktza.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_nnuame.*) as authority
  from master_join master_join_lsvptj
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_nnuame on master_join_lsvptj.target_id = navaids_points_authorityfornavaidequipment_lat_nnuame.id
  where master_join_lsvptj.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_lmxhzd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_vhyrdz.*) as monitoring
  from master_join master_join_gwhlza
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_vhyrdz on master_join_gwhlza.target_id = navaids_points_navaidequipmentmonitoring_lat_vhyrdz.id
  where master_join_gwhlza.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mwftjk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ahccgv.*) as availability
  from master_join master_join_wiyqpr
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ahccgv on master_join_wiyqpr.target_id = navaids_points_navaidoperationalstatus_lat_ahccgv.id
  where master_join_wiyqpr.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_caayta on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lbouff.*) AS annotation
  from master_join master_join_svtivf
  join notes.note_view notes_note_lat_lbouff on master_join_svtivf.target_id = notes_note_lat_lbouff.id
  where master_join_svtivf.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_wxodjd on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
create index on navaids_points.glidepath_view (id);
-- GroundTrafficControlServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.groundtrafficcontrolservice.id::integer as f_id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_cyczpx.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_cyczpx.longitude AS location_longitude,
    geometry_elevatedpoint_view_cyczpx.latitude AS location_latitude,
    geometry_elevatedpoint_view_cyczpx.elevation AS location_elevation,
    geometry_elevatedpoint_view_cyczpx.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_cyczpx.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_cyczpx.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_cyczpx.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_ekjrfa.title as varchar), '(' || organisation_unit_pt_ekjrfa.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_ekjrfa.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lavioq.title as varchar), '(' || airport_heliport_airportheliport_pt_lavioq.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_lavioq.href::text AS clientairport_href,
    service_callsigndetail_view_xasriq.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ldxlun.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_wrwqxk.availability::jsonb as availability,
    notes_note_view_yjqgly.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_cyczpx on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_cyczpx.id
left join organisation.unit_pt organisation_unit_pt_ekjrfa on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_ekjrfa.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lavioq on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_lavioq.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_chwarx.*) as callsign
  from master_join master_join_lkxdwi
  join service.callsigndetail_view service_callsigndetail_lat_chwarx on master_join_lkxdwi.target_id = service_callsigndetail_lat_chwarx.id
  where master_join_lkxdwi.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_xasriq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_inkwks.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_inkwks.title AS varchar), '(' || service_radiocommunicationchannel_lat_inkwks.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_inkwks.href
  )) as radiocommunication  from master_join master_join_sqjvqr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_inkwks on master_join_sqjvqr.target_id = service_radiocommunicationchannel_lat_inkwks.id
  where master_join_sqjvqr.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_ldxlun on TRUE
left join lateral(
  select
  from master_join master_join_psighz
  join shared.contactinformation_view shared_contactinformation_lat_mzwila on master_join_psighz.target_id = shared_contactinformation_lat_mzwila.id
  where master_join_psighz.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_cssngn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_mcqhhi.*) as availability
  from master_join master_join_xdxhuv
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_mcqhhi on master_join_xdxhuv.target_id = service_serviceoperationalstatus_lat_mcqhhi.id
  where master_join_xdxhuv.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_wrwqxk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nxjasr.*) AS annotation
  from master_join master_join_yhobun
  join notes.note_view notes_note_lat_nxjasr on master_join_yhobun.target_id = notes_note_lat_nxjasr.id
  where master_join_yhobun.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_yjqgly on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
create index on service.groundtrafficcontrolservice_view (id);
-- GuidanceLineLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidancelinelightsystem.id::integer as f_id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_xwozvb.title as varchar), '(' || airport_heliport_guidanceline_pt_xwozvb.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_xwozvb.href::text AS lightedguidanceline_href,
    shared_lightelement_view_jylwpf.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_ktdksu.availability::jsonb as availability,
    notes_note_view_yfefsd.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_xwozvb on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_xwozvb.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vemezy.*) as element
  from master_join master_join_bmjeoq
  join shared.lightelement_view shared_lightelement_lat_vemezy on master_join_bmjeoq.target_id = shared_lightelement_lat_vemezy.id
  where master_join_bmjeoq.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_jylwpf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_nnkdwt.*) as availability
  from master_join master_join_ytzthv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_nnkdwt on master_join_ytzthv.target_id = airport_heliport_groundlightingavailability_lat_nnkdwt.id
  where master_join_ytzthv.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ktdksu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zynjls.*) AS annotation
  from master_join master_join_jvjoqg
  join notes.note_view notes_note_lat_zynjls on master_join_jvjoqg.target_id = notes_note_lat_zynjls.id
  where master_join_jvjoqg.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_yfefsd on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
create index on airport_heliport.guidancelinelightsystem_view (id);
-- GuidanceLineMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidancelinemarking.id::integer as f_id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_ezdjgq.title as varchar), '(' || airport_heliport_guidanceline_pt_ezdjgq.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_ezdjgq.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_odqvrs.element::jsonb as element,
    notes_note_view_wbubji.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_ezdjgq on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_ezdjgq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_cwczly.*) as element
  from master_join master_join_gdglwu
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_cwczly on master_join_gdglwu.target_id = airport_heliport_markingelement_lat_cwczly.id
  where master_join_gdglwu.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_odqvrs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ypbfpp.*) AS annotation
  from master_join master_join_ilvvni
  join notes.note_view notes_note_lat_ypbfpp on master_join_ilvvni.target_id = notes_note_lat_ypbfpp.id
  where master_join_ilvvni.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_wbubji on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
create index on airport_heliport.guidancelinemarking_view (id);
-- GuidanceLineTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.guidanceline.id::integer as f_id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_qcpcfq.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_qcpcfq.elevation AS extent_elevation,
    geometry_elevatedcurve_view_qcpcfq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_qcpcfq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_qcpcfq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_qcpcfq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_zvkcsu.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_zcbzbx.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_jnhcjn.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_nbxkqo.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_wpoyqg.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_flzyoe.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_qcpcfq on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_qcpcfq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_aiesro.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_aiesro.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_aiesro.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_aiesro.href
  )) as connectedtouchdownliftoff  from master_join master_join_aeuhgb
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_aiesro on master_join_aeuhgb.target_id = airport_heliport_touchdownliftoff_lat_aiesro.id
  where master_join_aeuhgb.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_zvkcsu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_lwujuf.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_lwujuf.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_lwujuf.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_lwujuf.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_ogbhde
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_lwujuf on master_join_ogbhde.target_id = airport_heliport_runwaycentrelinepoint_lat_lwujuf.id
  where master_join_ogbhde.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_zcbzbx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_xdxywe.id,
      'title', coalesce(cast(airport_heliport_apron_lat_xdxywe.title AS varchar), '(' || airport_heliport_apron_lat_xdxywe.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_xdxywe.href
  )) as connectedapron  from master_join master_join_dunrvc
  join airport_heliport.apron_pt airport_heliport_apron_lat_xdxywe on master_join_dunrvc.target_id = airport_heliport_apron_lat_xdxywe.id
  where master_join_dunrvc.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_jnhcjn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_ltykjt.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_ltykjt.title AS varchar), '(' || airport_heliport_aircraftstand_lat_ltykjt.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_ltykjt.href
  )) as connectedstand  from master_join master_join_iydarj
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_ltykjt on master_join_iydarj.target_id = airport_heliport_aircraftstand_lat_ltykjt.id
  where master_join_iydarj.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_nbxkqo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_hnpkvq.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_hnpkvq.title AS varchar), '(' || airport_heliport_taxiway_lat_hnpkvq.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_hnpkvq.href
  )) as connectedtaxiway  from master_join master_join_yazniz
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_hnpkvq on master_join_yazniz.target_id = airport_heliport_taxiway_lat_hnpkvq.id
  where master_join_yazniz.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_wpoyqg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ckjasz.*) AS annotation
  from master_join master_join_vjrsbz
  join notes.note_view notes_note_lat_ckjasz on master_join_vjrsbz.target_id = notes_note_lat_ckjasz.id
  where master_join_vjrsbz.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_flzyoe on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
create index on airport_heliport.guidanceline_view (id);
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.holdingassessment.id::integer as f_id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_iqlfri.title as varchar), '(' || holding_unplannedholding_pt_iqlfri.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_iqlfri.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_sgwlro.title as varchar), '(' || holding_holdingpattern_pt_sgwlro.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_sgwlro.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_denshr.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_rokapi.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_iqlfri on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_iqlfri.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_sgwlro on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_sgwlro.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_imsezs.*) as obstacleassessment
  from master_join master_join_nxhvxq
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_imsezs on master_join_nxhvxq.target_id = shared_obstacleassessmentarea_lat_imsezs.id
  where master_join_nxhvxq.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_denshr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_biavps.*) AS annotation
  from master_join master_join_nnxsqz
  join notes.note_view notes_note_lat_biavps on master_join_nnxsqz.target_id = notes_note_lat_biavps.id
  where master_join_nnxsqz.source_id = shared.holdingassessment_ts.id
) as notes_note_view_rokapi on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
create index on shared.holdingassessment_view (id);
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatternduration_view', 'geometry.curve_view', 'holding.holdingpatterndistance_view', 'notes.note_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as id,
    holding.holdingpattern.id::integer as f_id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_ygpqyj.*)::jsonb AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_vphzvx.*)::jsonb AS outboundlegspanenddistance,
    geometry_curve_view_bgvdup.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_bgvdup.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_fghjqp.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_ygpqyj on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_ygpqyj.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_vphzvx on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_vphzvx.id
left join geometry.curve_view geometry_curve_view_bgvdup on holding.holdingpattern_ts.extent_id = geometry_curve_view_bgvdup.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ayrcyk.*) AS annotation
  from master_join master_join_bihdhy
  join notes.note_view notes_note_lat_ayrcyk on master_join_bihdhy.target_id = notes_note_lat_ayrcyk.id
  where master_join_bihdhy.source_id = holding.holdingpattern_ts.id
) as notes_note_view_fghjqp on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
create index on holding.holdingpattern_view (id);
-- InformationServiceTimeSliceType
-- ['routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.informationservice.id::integer as f_id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_uqhrwc.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_uqhrwc.longitude AS location_longitude,
    geometry_elevatedpoint_view_uqhrwc.latitude AS location_latitude,
    geometry_elevatedpoint_view_uqhrwc.elevation AS location_elevation,
    geometry_elevatedpoint_view_uqhrwc.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_uqhrwc.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_uqhrwc.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_uqhrwc.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pnfsdg.title as varchar), '(' || organisation_unit_pt_pnfsdg.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pnfsdg.href::text AS serviceprovider_href,
    service_callsigndetail_view_hrnnub.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_hofrju.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_wnhevx.availability::jsonb as availability,
    notes_note_view_monlgc.annotation::jsonb as annotation,
    navaids_points_vor_pt_owvims.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_klzvwp.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_hkhhfq.clientairport::jsonb as clientairport,
    routes_routeportion_view_luilrt.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_fhtrby.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_uechhy.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uqhrwc on service.informationservice_ts.location_id = geometry_elevatedpoint_view_uqhrwc.id
left join organisation.unit_pt organisation_unit_pt_pnfsdg on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_pnfsdg.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_hykesg.*) as callsign
  from master_join master_join_phvcxp
  join service.callsigndetail_view service_callsigndetail_lat_hykesg on master_join_phvcxp.target_id = service_callsigndetail_lat_hykesg.id
  where master_join_phvcxp.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_hrnnub on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_fgwfhb.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_fgwfhb.title AS varchar), '(' || service_radiocommunicationchannel_lat_fgwfhb.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_fgwfhb.href
  )) as radiocommunication  from master_join master_join_osuogh
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_fgwfhb on master_join_osuogh.target_id = service_radiocommunicationchannel_lat_fgwfhb.id
  where master_join_osuogh.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_hofrju on TRUE
left join lateral(
  select
  from master_join master_join_bszlts
  join shared.contactinformation_view shared_contactinformation_lat_tjirea on master_join_bszlts.target_id = shared_contactinformation_lat_tjirea.id
  where master_join_bszlts.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_qhdmrk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_xcvjlp.*) as availability
  from master_join master_join_qjsvfe
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_xcvjlp on master_join_qjsvfe.target_id = service_serviceoperationalstatus_lat_xcvjlp.id
  where master_join_qjsvfe.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_wnhevx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tlnnqn.*) AS annotation
  from master_join master_join_kakquz
  join notes.note_view notes_note_lat_tlnnqn on master_join_kakquz.target_id = notes_note_lat_tlnnqn.id
  where master_join_kakquz.source_id = service.informationservice_ts.id
) as notes_note_view_monlgc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_jdmlup.id,
      'title', coalesce(cast(navaids_points_vor_lat_jdmlup.title AS varchar), '(' || navaids_points_vor_lat_jdmlup.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_jdmlup.href
  )) as navaidbroadcast  from master_join master_join_yobmes
  join navaids_points.vor_pt navaids_points_vor_lat_jdmlup on master_join_yobmes.target_id = navaids_points_vor_lat_jdmlup.id
  where master_join_yobmes.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_owvims on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_nnkipf.id,
      'title', coalesce(cast(airspace_airspace_lat_nnkipf.title AS varchar), '(' || airspace_airspace_lat_nnkipf.nilreason[1] || ')'),
      'href', airspace_airspace_lat_nnkipf.href
  )) as clientairspace  from master_join master_join_qlecmz
  join airspace.airspace_pt airspace_airspace_lat_nnkipf on master_join_qlecmz.target_id = airspace_airspace_lat_nnkipf.id
  where master_join_qlecmz.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_klzvwp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_cwwwlh.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_cwwwlh.title AS varchar), '(' || airport_heliport_airportheliport_lat_cwwwlh.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_cwwwlh.href
  )) as clientairport  from master_join master_join_lchkav
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_cwwwlh on master_join_lchkav.target_id = airport_heliport_airportheliport_lat_cwwwlh.id
  where master_join_lchkav.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_hkhhfq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_mslbmh.*) as clientroute
  from master_join master_join_qgcjca
  join routes.routeportion_view routes_routeportion_lat_mslbmh on master_join_qgcjca.target_id = routes_routeportion_lat_mslbmh.id
  where master_join_qgcjca.source_id = service.informationservice_ts.id
) as routes_routeportion_view_luilrt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_gbblif.id,
      'title', coalesce(cast(holding_holdingpattern_lat_gbblif.title AS varchar), '(' || holding_holdingpattern_lat_gbblif.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_gbblif.href
  )) as clientholding  from master_join master_join_iecfuo
  join holding.holdingpattern_pt holding_holdingpattern_lat_gbblif on master_join_iecfuo.target_id = holding_holdingpattern_lat_gbblif.id
  where master_join_iecfuo.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_fhtrby on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_nvpwrd.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_nvpwrd.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_nvpwrd.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_nvpwrd.href
  )) as clientaerialrefuelling  from master_join master_join_cpclea
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_nvpwrd on master_join_cpclea.target_id = aerial_refuelling_aerialrefuelling_lat_nvpwrd.id
  where master_join_cpclea.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_uechhy on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
create index on service.informationservice_view (id);
-- InitialLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.initialleg.id::integer as f_id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_auriat.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_lnvgjf.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wremfv.*)::jsonb AS arccentre,
    geometry_curve_view_opymnl.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_opymnl.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_scedak.title as varchar), '(' || navaids_points_angleindication_pt_scedak.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_scedak.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zccnus.title as varchar), '(' || navaids_points_distanceindication_pt_zccnus.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_zccnus.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_ksyazc.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_eiibmy.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_eiibmy.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_eiibmy.href::text AS approach_href,
    shared_aircraftcharacteristic_view_yvfgwa.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_cbrtsh.designsurface::jsonb as designsurface,
    notes_note_view_wbtbbm.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_auriat on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_auriat.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_lnvgjf on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_lnvgjf.id
left join geometry.curve_view geometry_curve_view_opymnl on procedure.initialleg_ts.trajectory_id = geometry_curve_view_opymnl.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wremfv on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_wremfv.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_scedak on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_scedak.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zccnus on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_zccnus.id
left join procedure.holdinguse_view procedure_holdinguse_view_ksyazc on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_ksyazc.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_eiibmy on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_eiibmy.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ltpwcn.*) as aircraftcategory
  from master_join master_join_fitajv
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ltpwcn on master_join_fitajv.target_id = shared_aircraftcharacteristic_lat_ltpwcn.id
  where master_join_fitajv.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_yvfgwa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_qgdvct.*) as designsurface
  from master_join master_join_cozfqh
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_qgdvct on master_join_cozfqh.target_id = shared_obstacleassessmentarea_lat_qgdvct.id
  where master_join_cozfqh.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_cbrtsh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbsmgc.*) AS annotation
  from master_join master_join_ilqogu
  join notes.note_view notes_note_lat_cbsmgc on master_join_ilqogu.target_id = notes_note_lat_cbsmgc.id
  where master_join_ilqogu.source_id = procedure.initialleg_ts.id
) as notes_note_view_wbtbbm on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
create index on procedure.initialleg_view (id);
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.finalprofile_view', 'procedure.missedapproachgroup_view', 'procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.instrumentapproachprocedure.id::integer as f_id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_aifysw.title as varchar), '(' || navaids_points_navaid_pt_aifysw.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_aifysw.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_fcrosx.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_fcrosx.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_fcrosx.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_amogvf.title as varchar), '(' || surveillance_radarsystem_pt_amogvf.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_amogvf.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_mbmtiz.title as varchar), '(' || procedure_safealtitudearea_pt_mbmtiz.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_mbmtiz.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_griyle.*)::jsonb AS landing,
    to_jsonb(procedure_finalprofile_view_vxwcwd.*)::jsonb AS finalprofile,
    procedure_procedureavailability_view_mxmrin.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_jibols.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_ivhpyh.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_dovwbg.flighttransition::jsonb as flighttransition,
    notes_note_view_gbgsro.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_zdvxvq.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_aifysw on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_aifysw.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_fcrosx on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_fcrosx.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_amogvf on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_amogvf.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_mbmtiz on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_mbmtiz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_griyle on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_griyle.id
left join procedure.finalprofile_view procedure_finalprofile_view_vxwcwd on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_vxwcwd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_yllhse.*) as availability
  from master_join master_join_idcfgt
  join procedure.procedureavailability_view procedure_procedureavailability_lat_yllhse on master_join_idcfgt.target_id = procedure_procedureavailability_lat_yllhse.id
  where master_join_idcfgt.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_mxmrin on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_clazmf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_clazmf.title AS varchar), '(' || airport_heliport_airportheliport_lat_clazmf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_clazmf.href
  )) as airportheliport  from master_join master_join_dyhcwp
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_clazmf on master_join_dyhcwp.target_id = airport_heliport_airportheliport_lat_clazmf.id
  where master_join_dyhcwp.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_jibols on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_gtzxay.*) as aircraftcharacteristic
  from master_join master_join_vnepdv
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_gtzxay on master_join_vnepdv.target_id = shared_aircraftcharacteristic_lat_gtzxay.id
  where master_join_vnepdv.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_ivhpyh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_jtvmvd.*) as flighttransition
  from master_join master_join_qfdymz
  join procedure.proceduretransition_view procedure_proceduretransition_lat_jtvmvd on master_join_qfdymz.target_id = procedure_proceduretransition_lat_jtvmvd.id
  where master_join_qfdymz.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_dovwbg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gtvrkw.*) AS annotation
  from master_join master_join_tyandr
  join notes.note_view notes_note_lat_gtvrkw on master_join_tyandr.target_id = notes_note_lat_gtvrkw.id
  where master_join_tyandr.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_gbgsro on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_nxzyro.*) as missedinstruction
  from master_join master_join_ocevck
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_nxzyro on master_join_ocevck.target_id = procedure_missedapproachgroup_lat_nxzyro.id
  where master_join_ocevck.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_zdvxvq on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
create index on procedure.instrumentapproachprocedure_view (id);
-- IntermediateLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.intermediateleg.id::integer as f_id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_eatbqp.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_polisf.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_tiymut.*)::jsonb AS arccentre,
    geometry_curve_view_ojatof.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ojatof.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_soumta.title as varchar), '(' || navaids_points_angleindication_pt_soumta.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_soumta.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_ycjvoa.title as varchar), '(' || navaids_points_distanceindication_pt_ycjvoa.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_ycjvoa.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_wjdxbz.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lbnfkr.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lbnfkr.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_lbnfkr.href::text AS approach_href,
    shared_aircraftcharacteristic_view_gowhuh.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_irbrtz.designsurface::jsonb as designsurface,
    notes_note_view_tjushw.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_eatbqp on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_eatbqp.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_polisf on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_polisf.id
left join geometry.curve_view geometry_curve_view_ojatof on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_ojatof.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_tiymut on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_tiymut.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_soumta on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_soumta.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_ycjvoa on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_ycjvoa.id
left join procedure.holdinguse_view procedure_holdinguse_view_wjdxbz on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_wjdxbz.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lbnfkr on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_lbnfkr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_shfgpi.*) as aircraftcategory
  from master_join master_join_huujrm
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_shfgpi on master_join_huujrm.target_id = shared_aircraftcharacteristic_lat_shfgpi.id
  where master_join_huujrm.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_gowhuh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_widpqk.*) as designsurface
  from master_join master_join_tazmwf
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_widpqk on master_join_tazmwf.target_id = shared_obstacleassessmentarea_lat_widpqk.id
  where master_join_tazmwf.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_irbrtz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zyeugj.*) AS annotation
  from master_join master_join_zvwjxl
  join notes.note_view notes_note_lat_zyeugj on master_join_zvwjxl.target_id = notes_note_lat_zyeugj.id
  where master_join_zvwjxl.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_tjushw on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
create index on procedure.intermediateleg_view (id);
-- LocalizerTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.localizer.id::integer as f_id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_latlok.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_latlok.longitude AS location_longitude,
    geometry_elevatedpoint_view_latlok.latitude AS location_latitude,
    geometry_elevatedpoint_view_latlok.elevation AS location_elevation,
    geometry_elevatedpoint_view_latlok.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_latlok.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_latlok.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_latlok.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_iowbgj.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_xwspfs.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_vscbgn.availability::jsonb as availability,
    notes_note_view_vdqakm.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_latlok on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_latlok.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_fkihqd.*) as authority
  from master_join master_join_uhshly
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_fkihqd on master_join_uhshly.target_id = navaids_points_authorityfornavaidequipment_lat_fkihqd.id
  where master_join_uhshly.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_iowbgj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_niefnu.*) as monitoring
  from master_join master_join_zukyqc
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_niefnu on master_join_zukyqc.target_id = navaids_points_navaidequipmentmonitoring_lat_niefnu.id
  where master_join_zukyqc.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xwspfs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_xeovil.*) as availability
  from master_join master_join_zwqqcb
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_xeovil on master_join_zwqqcb.target_id = navaids_points_navaidoperationalstatus_lat_xeovil.id
  where master_join_zwqqcb.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_vscbgn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_slihgx.*) AS annotation
  from master_join master_join_zjbnbi
  join notes.note_view notes_note_lat_slihgx on master_join_zjbnbi.target_id = notes_note_lat_slihgx.id
  where master_join_zjbnbi.source_id = navaids_points.localizer_ts.id
) as notes_note_view_vdqakm on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
create index on navaids_points.localizer_view (id);
-- MarkerBeaconTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.markerbeacon.id::integer as f_id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_kbpohj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kbpohj.longitude AS location_longitude,
    geometry_elevatedpoint_view_kbpohj.latitude AS location_latitude,
    geometry_elevatedpoint_view_kbpohj.elevation AS location_elevation,
    geometry_elevatedpoint_view_kbpohj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kbpohj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kbpohj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kbpohj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_kfoxmd.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mxzkdu.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_mwwakc.availability::jsonb as availability,
    notes_note_view_vawudb.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kbpohj on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_kbpohj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_jxmgjr.*) as authority
  from master_join master_join_maeaah
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_jxmgjr on master_join_maeaah.target_id = navaids_points_authorityfornavaidequipment_lat_jxmgjr.id
  where master_join_maeaah.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_kfoxmd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kxtdwk.*) as monitoring
  from master_join master_join_xxnzmf
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kxtdwk on master_join_xxnzmf.target_id = navaids_points_navaidequipmentmonitoring_lat_kxtdwk.id
  where master_join_xxnzmf.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mxzkdu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_lituwr.*) as availability
  from master_join master_join_efaatl
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_lituwr on master_join_efaatl.target_id = navaids_points_navaidoperationalstatus_lat_lituwr.id
  where master_join_efaatl.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_mwwakc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_owevce.*) AS annotation
  from master_join master_join_yoxmqt
  join notes.note_view notes_note_lat_owevce on master_join_yoxmqt.target_id = notes_note_lat_owevce.id
  where master_join_yoxmqt.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_vawudb on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
create index on navaids_points.markerbeacon_view (id);
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.markingbuoy.id::integer as f_id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_bjkdvx.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_bjkdvx.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_bjkdvx.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_zxibuo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zxibuo.longitude AS location_longitude,
    geometry_elevatedpoint_view_zxibuo.latitude AS location_latitude,
    geometry_elevatedpoint_view_zxibuo.elevation AS location_elevation,
    geometry_elevatedpoint_view_zxibuo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zxibuo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zxibuo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zxibuo.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_fjdwnh.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_bjkdvx on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_bjkdvx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zxibuo on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_zxibuo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sfqtql.*) AS annotation
  from master_join master_join_wkzkkn
  join notes.note_view notes_note_lat_sfqtql on master_join_wkzkkn.target_id = notes_note_lat_sfqtql.id
  where master_join_wkzkkn.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_fjdwnh on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
create index on airport_heliport.markingbuoy_view (id);
-- MissedApproachLegTimeSliceType
-- ['navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'procedure.approachcondition_view', 'procedure.holdinguse_view', 'shared.obstacleassessmentarea_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.missedapproachleg.id::integer as f_id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qqrmjy.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dlsfrm.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yuvdgd.*)::jsonb AS arccentre,
    geometry_curve_view_rmotza.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_rmotza.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ctmxdt.title as varchar), '(' || navaids_points_angleindication_pt_ctmxdt.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ctmxdt.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zhztxc.title as varchar), '(' || navaids_points_distanceindication_pt_zhztxc.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_zhztxc.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_csmabv.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zyltea.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zyltea.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_zyltea.href::text AS approach_href,
    shared_aircraftcharacteristic_view_rxnwuy.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_oqdnig.designsurface::jsonb as designsurface,
    notes_note_view_ksdpbg.annotation::jsonb as annotation,
    procedure_approachcondition_view_siowxr.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qqrmjy on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_qqrmjy.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dlsfrm on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_dlsfrm.id
left join geometry.curve_view geometry_curve_view_rmotza on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_rmotza.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yuvdgd on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_yuvdgd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ctmxdt on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_ctmxdt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zhztxc on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_zhztxc.id
left join procedure.holdinguse_view procedure_holdinguse_view_csmabv on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_csmabv.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zyltea on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_zyltea.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qzcyor.*) as aircraftcategory
  from master_join master_join_ckkneq
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qzcyor on master_join_ckkneq.target_id = shared_aircraftcharacteristic_lat_qzcyor.id
  where master_join_ckkneq.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_rxnwuy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_gawflv.*) as designsurface
  from master_join master_join_cwzzfc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_gawflv on master_join_cwzzfc.target_id = shared_obstacleassessmentarea_lat_gawflv.id
  where master_join_cwzzfc.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_oqdnig on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_elwkvf.*) AS annotation
  from master_join master_join_dzaxkd
  join notes.note_view notes_note_lat_elwkvf on master_join_dzaxkd.target_id = notes_note_lat_elwkvf.id
  where master_join_dzaxkd.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_ksdpbg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_qddqji.*) as condition
  from master_join master_join_ohbqrk
  join procedure.approachcondition_view procedure_approachcondition_lat_qddqji on master_join_ohbqrk.target_id = procedure_approachcondition_lat_qddqji.id
  where master_join_ohbqrk.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_siowxr on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
create index on procedure.missedapproachleg_view (id);
-- NavaidTimeSliceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidcomponent_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.navaid.id::integer as f_id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_thgpah.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_thgpah.longitude AS location_longitude,
    geometry_elevatedpoint_view_thgpah.latitude AS location_latitude,
    geometry_elevatedpoint_view_thgpah.elevation AS location_elevation,
    geometry_elevatedpoint_view_thgpah.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_thgpah.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_thgpah.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_thgpah.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_beeova.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_swvphw.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_tuozog.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_fcxfwe.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_csrecb.availability::jsonb as availability,
    notes_note_view_daapgk.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_thgpah on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_thgpah.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_zewaoj.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_zewaoj.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_zewaoj.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_zewaoj.href
  )) as touchdownliftoff  from master_join master_join_trxxhi
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_zewaoj on master_join_trxxhi.target_id = airport_heliport_touchdownliftoff_lat_zewaoj.id
  where master_join_trxxhi.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_beeova on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_dupuxl.*) as navaidequipment
  from master_join master_join_quzdnb
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_dupuxl on master_join_quzdnb.target_id = navaids_points_navaidcomponent_lat_dupuxl.id
  where master_join_quzdnb.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_swvphw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_dtknmd.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_dtknmd.title AS varchar), '(' || airport_heliport_runwaydirection_lat_dtknmd.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_dtknmd.href
  )) as runwaydirection  from master_join master_join_bpttci
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_dtknmd on master_join_bpttci.target_id = airport_heliport_runwaydirection_lat_dtknmd.id
  where master_join_bpttci.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_tuozog on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wejvye.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wejvye.title AS varchar), '(' || airport_heliport_airportheliport_lat_wejvye.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wejvye.href
  )) as servedairport  from master_join master_join_zjubap
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wejvye on master_join_zjubap.target_id = airport_heliport_airportheliport_lat_wejvye.id
  where master_join_zjubap.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_fcxfwe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yfvomy.*) as availability
  from master_join master_join_gxtfxz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yfvomy on master_join_gxtfxz.target_id = navaids_points_navaidoperationalstatus_lat_yfvomy.id
  where master_join_gxtfxz.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_csrecb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_skuhen.*) AS annotation
  from master_join master_join_yrjnoc
  join notes.note_view notes_note_lat_skuhen on master_join_yrjnoc.target_id = notes_note_lat_skuhen.id
  where master_join_yrjnoc.source_id = navaids_points.navaid_ts.id
) as notes_note_view_daapgk on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
create index on navaids_points.navaid_view (id);
-- NavigationAreaRestrictionTimeSliceType
-- ['notes.note_view', 'shared.obstacleassessmentarea_view', 'shared.circlesector_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.navigationarearestriction.id::integer as f_id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_ipghux.*)::jsonb AS designsurface,
    to_jsonb(shared_circlesector_view_hvmwil.*)::jsonb AS sectordefinition,
    notes_note_view_nhghxl.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_ipghux on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_ipghux.id
left join shared.circlesector_view shared_circlesector_view_hvmwil on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_hvmwil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xedfbe.*) AS annotation
  from master_join master_join_clbbwx
  join notes.note_view notes_note_lat_xedfbe on master_join_clbbwx.target_id = notes_note_lat_xedfbe.id
  where master_join_clbbwx.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_nhghxl on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
create index on procedure.navigationarearestriction_view (id);
-- NavigationAreaTimeSliceType
-- ['notes.note_view', 'geometry.point_view', 'procedure.navigationareasector_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.navigationarea.id::integer as f_id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_hlkern.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_hlkern.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_hlkern.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_nlspwc.title as varchar), '(' || navaids_points_designatedpoint_pt_nlspwc.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_nlspwc.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ttlrlb.title as varchar), '(' || navaids_points_navaid_pt_ttlrlb.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_ttlrlb.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_gjxqjg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_gjxqjg.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_gjxqjg.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_dzhgsp.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_dzhgsp.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_dzhgsp.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_xowokc.title as varchar), '(' || airport_heliport_airportheliport_pt_xowokc.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_xowokc.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_bdptvx.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_bdptvx.longitude AS centrepointposition_longitude,
    geometry_point_view_bdptvx.latitude AS centrepointposition_latitude,
    geometry_point_view_bdptvx.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_khvidv.sector::jsonb as sector,
    notes_note_view_mvikep.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_hlkern on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_hlkern.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_nlspwc on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_nlspwc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ttlrlb on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_ttlrlb.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_gjxqjg on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_gjxqjg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_dzhgsp on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_dzhgsp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_xowokc on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_xowokc.id
left join geometry.point_view geometry_point_view_bdptvx on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_bdptvx.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_gcdgzm.*) as sector
  from master_join master_join_mbuiau
  join procedure.navigationareasector_view procedure_navigationareasector_lat_gcdgzm on master_join_mbuiau.target_id = procedure_navigationareasector_lat_gcdgzm.id
  where master_join_mbuiau.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_khvidv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgvork.*) AS annotation
  from master_join master_join_yckgif
  join notes.note_view notes_note_lat_vgvork on master_join_yckgif.target_id = notes_note_lat_vgvork.id
  where master_join_yckgif.source_id = procedure.navigationarea_ts.id
) as notes_note_view_mvikep on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
create index on procedure.navigationarea_view (id);
-- NDBTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.ndb.id::integer as f_id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_gitcpo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_gitcpo.longitude AS location_longitude,
    geometry_elevatedpoint_view_gitcpo.latitude AS location_latitude,
    geometry_elevatedpoint_view_gitcpo.elevation AS location_elevation,
    geometry_elevatedpoint_view_gitcpo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_gitcpo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_gitcpo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_gitcpo.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_hhtckn.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_hvkqnp.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_lkgfwk.availability::jsonb as availability,
    notes_note_view_ppsimr.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_gitcpo on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_gitcpo.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_suhgsr.*) as authority
  from master_join master_join_wvlwxc
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_suhgsr on master_join_wvlwxc.target_id = navaids_points_authorityfornavaidequipment_lat_suhgsr.id
  where master_join_wvlwxc.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_hhtckn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_etmptb.*) as monitoring
  from master_join master_join_lzzlpy
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_etmptb on master_join_lzzlpy.target_id = navaids_points_navaidequipmentmonitoring_lat_etmptb.id
  where master_join_lzzlpy.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_hvkqnp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fkqlcc.*) as availability
  from master_join master_join_smigaf
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fkqlcc on master_join_smigaf.target_id = navaids_points_navaidoperationalstatus_lat_fkqlcc.id
  where master_join_smigaf.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_lkgfwk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sbmtzd.*) AS annotation
  from master_join master_join_sitqko
  join notes.note_view notes_note_lat_sbmtzd on master_join_sitqko.target_id = notes_note_lat_sbmtzd.id
  where master_join_sitqko.source_id = navaids_points.ndb_ts.id
) as notes_note_view_ppsimr on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
create index on navaids_points.ndb_view (id);
-- NonMovementAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.nonmovementarea.id::integer as f_id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_ihtcbz.title as varchar), '(' || airport_heliport_airportheliport_pt_ihtcbz.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ihtcbz.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_swxonq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_swxonq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_swxonq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_swxonq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_swxonq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_swxonq.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_rjcmcz.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ihtcbz on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ihtcbz.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_swxonq on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_swxonq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yvonxa.*) AS annotation
  from master_join master_join_vmdsug
  join notes.note_view notes_note_lat_yvonxa on master_join_vmdsug.target_id = notes_note_lat_yvonxa.id
  where master_join_vmdsug.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_rjcmcz on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
create index on airport_heliport.nonmovementarea_view (id);
-- ObstacleAreaTimeSliceType
-- ['geometry.surface_view', 'notes.note_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    obstacles.obstaclearea.id::integer as f_id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_ivmubz.title as varchar), '(' || airport_heliport_airportheliport_pt_ivmubz.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_ivmubz.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_dxubvo.title as varchar), '(' || airport_heliport_runwaydirection_pt_dxubvo.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_dxubvo.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_hsvnux.title as varchar), '(' || organisation_organisationauthority_pt_hsvnux.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_hsvnux.href::text AS referenceownerorganisation_href,
    geometry_surface_view_fszvcz.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_fszvcz.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_vfnzly.obstacle::jsonb as obstacle,
    notes_note_view_wtbmtl.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ivmubz on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_ivmubz.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dxubvo on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_dxubvo.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hsvnux on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_hsvnux.id
left join geometry.surface_view geometry_surface_view_fszvcz on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_fszvcz.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_rrngev.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_rrngev.title AS varchar), '(' || obstacles_verticalstructure_lat_rrngev.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_rrngev.href
  )) as obstacle  from master_join master_join_wnzlwe
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_rrngev on master_join_wnzlwe.target_id = obstacles_verticalstructure_lat_rrngev.id
  where master_join_wnzlwe.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_vfnzly on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bgjylf.*) AS annotation
  from master_join master_join_euznkg
  join notes.note_view notes_note_lat_bgjylf on master_join_euznkg.target_id = notes_note_lat_bgjylf.id
  where master_join_euznkg.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_wtbmtl on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
create index on obstacles.obstaclearea_view (id);
-- OrganisationAuthorityTimeSliceType
-- ['shared.contactinformation_view', 'organisation.organisationauthorityassociation_view', 'notes.note_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as id,
    organisation.organisationauthority.id::integer as f_id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_sbnalh.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_ntyixi.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_komnko
  join shared.contactinformation_view shared_contactinformation_lat_kwhfcn on master_join_komnko.target_id = shared_contactinformation_lat_kwhfcn.id
  where master_join_komnko.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_acqkzt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_ucjhje.*) as relatedorganisationauthority
  from master_join master_join_odcxxn
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_ucjhje on master_join_odcxxn.target_id = organisation_organisationauthorityassociation_lat_ucjhje.id
  where master_join_odcxxn.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_sbnalh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ugddvv.*) AS annotation
  from master_join master_join_tdjvsw
  join notes.note_view notes_note_lat_ugddvv on master_join_tdjvsw.target_id = notes_note_lat_ugddvv.id
  where master_join_tdjvsw.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_ntyixi on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
create index on organisation.organisationauthority_view (id);
-- PassengerLoadingBridgeTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.passengerloadingbridge.id::integer as f_id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_fuiyzn.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fuiyzn.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fuiyzn.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fuiyzn.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fuiyzn.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fuiyzn.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_bsssnq.associatedstand::jsonb as associatedstand,
    notes_note_view_qanppz.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fuiyzn on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_fuiyzn.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_paqedx.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_paqedx.title AS varchar), '(' || airport_heliport_aircraftstand_lat_paqedx.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_paqedx.href
  )) as associatedstand  from master_join master_join_zhxggb
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_paqedx on master_join_zhxggb.target_id = airport_heliport_aircraftstand_lat_paqedx.id
  where master_join_zhxggb.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_bsssnq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rxpiwd.*) AS annotation
  from master_join master_join_nqjbry
  join notes.note_view notes_note_lat_rxpiwd on master_join_nqjbry.target_id = notes_note_lat_rxpiwd.id
  where master_join_nqjbry.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_qanppz on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
create index on airport_heliport.passengerloadingbridge_view (id);
-- PassengerServiceTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.passengerservice.id::integer as f_id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_brpwrg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_brpwrg.longitude AS location_longitude,
    geometry_elevatedpoint_view_brpwrg.latitude AS location_latitude,
    geometry_elevatedpoint_view_brpwrg.elevation AS location_elevation,
    geometry_elevatedpoint_view_brpwrg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_brpwrg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_brpwrg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_brpwrg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zeltee.title as varchar), '(' || organisation_unit_pt_zeltee.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_zeltee.href::text AS serviceprovider_href,
    service_callsigndetail_view_rpqmha.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_zxajtk.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_cztsgu.availability::jsonb as availability,
    notes_note_view_qmnzph.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_xsujoz.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_brpwrg on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_brpwrg.id
left join organisation.unit_pt organisation_unit_pt_zeltee on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_zeltee.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_noculv.*) as callsign
  from master_join master_join_odjblo
  join service.callsigndetail_view service_callsigndetail_lat_noculv on master_join_odjblo.target_id = service_callsigndetail_lat_noculv.id
  where master_join_odjblo.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_rpqmha on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bwugqq.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bwugqq.title AS varchar), '(' || service_radiocommunicationchannel_lat_bwugqq.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bwugqq.href
  )) as radiocommunication  from master_join master_join_vqlkpb
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bwugqq on master_join_vqlkpb.target_id = service_radiocommunicationchannel_lat_bwugqq.id
  where master_join_vqlkpb.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_zxajtk on TRUE
left join lateral(
  select
  from master_join master_join_ymjlpz
  join shared.contactinformation_view shared_contactinformation_lat_xhebtb on master_join_ymjlpz.target_id = shared_contactinformation_lat_xhebtb.id
  where master_join_ymjlpz.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_cryame on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_iidvpr.*) as availability
  from master_join master_join_dabpeu
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_iidvpr on master_join_dabpeu.target_id = service_serviceoperationalstatus_lat_iidvpr.id
  where master_join_dabpeu.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_cztsgu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drxhlu.*) AS annotation
  from master_join master_join_faimbm
  join notes.note_view notes_note_lat_drxhlu on master_join_faimbm.target_id = notes_note_lat_drxhlu.id
  where master_join_faimbm.source_id = service.passengerservice_ts.id
) as notes_note_view_qmnzph on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_xerwgp.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_xerwgp.title AS varchar), '(' || airport_heliport_airportheliport_lat_xerwgp.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_xerwgp.href
  )) as airportheliport  from master_join master_join_nmakqo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_xerwgp on master_join_nmakqo.target_id = airport_heliport_airportheliport_lat_xerwgp.id
  where master_join_nmakqo.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_xsujoz on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
create index on service.passengerservice_view (id);
-- PilotControlledLightingTimeSliceType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.pilotcontrolledlighting.id::integer as f_id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_hohbng.controlledlightintensity::jsonb as controlledlightintensity,
    notes_note_view_roebij.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_joxecd.*) as controlledlightintensity
  from master_join master_join_ljffdv
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_joxecd on master_join_ljffdv.target_id = airport_heliport_lightactivation_lat_joxecd.id
  where master_join_ljffdv.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_hohbng on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuaokj.*) AS annotation
  from master_join master_join_kapmpk
  join notes.note_view notes_note_lat_vuaokj on master_join_kapmpk.target_id = notes_note_lat_vuaokj.id
  where master_join_kapmpk.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_roebij on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
create index on service.pilotcontrolledlighting_view (id);
-- PrecisionApproachRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.reflector_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.precisionapproachradar.id::integer as f_id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_ugooyb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ugooyb.longitude AS location_longitude,
    geometry_elevatedpoint_view_ugooyb.latitude AS location_latitude,
    geometry_elevatedpoint_view_ugooyb.elevation AS location_elevation,
    geometry_elevatedpoint_view_ugooyb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ugooyb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ugooyb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ugooyb.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_joeegt.annotation::jsonb as annotation,
    surveillance_reflector_view_ycgpxr.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ugooyb on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_ugooyb.id
left join lateral(
  select
  from master_join master_join_xffcnk
  join shared.contactinformation_view shared_contactinformation_lat_qugpuh on master_join_xffcnk.target_id = shared_contactinformation_lat_qugpuh.id
  where master_join_xffcnk.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_wnhfpl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_evonjg.*) AS annotation
  from master_join master_join_bshfgd
  join notes.note_view notes_note_lat_evonjg on master_join_bshfgd.target_id = notes_note_lat_evonjg.id
  where master_join_bshfgd.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_joeegt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_ewwqas.*) as reflector
  from master_join master_join_zcgpxn
  join surveillance.reflector_view surveillance_reflector_lat_ewwqas on master_join_zcgpxn.target_id = surveillance_reflector_lat_ewwqas.id
  where master_join_zcgpxn.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_ycgpxr on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
create index on surveillance.precisionapproachradar_view (id);
-- PrimarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.primarysurveillanceradar.id::integer as f_id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_shelwd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_shelwd.longitude AS location_longitude,
    geometry_elevatedpoint_view_shelwd.latitude AS location_latitude,
    geometry_elevatedpoint_view_shelwd.elevation AS location_elevation,
    geometry_elevatedpoint_view_shelwd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_shelwd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_shelwd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_shelwd.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_mdqtxx.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_cnebyu.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_shelwd on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_shelwd.id
left join lateral(
  select
  from master_join master_join_pqktja
  join shared.contactinformation_view shared_contactinformation_lat_dykkhk on master_join_pqktja.target_id = shared_contactinformation_lat_dykkhk.id
  where master_join_pqktja.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_mncafd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mngfvf.*) AS annotation
  from master_join master_join_jvmepf
  join notes.note_view notes_note_lat_mngfvf on master_join_jvmepf.target_id = notes_note_lat_mngfvf.id
  where master_join_jvmepf.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_mdqtxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_xeycld.*) as groundstation
  from master_join master_join_jdfplg
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_xeycld on master_join_jdfplg.target_id = surveillance_surveillancegroundstation_lat_xeycld.id
  where master_join_jdfplg.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_cnebyu on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.primarysurveillanceradar_view (id);
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.proceduredme.id::integer as f_id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_cvixzc.title as varchar), '(' || navaids_points_dme_pt_cvixzc.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_cvixzc.href::text AS dme_href,
    notes_note_view_vrbfdp.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_cvixzc on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_cvixzc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_skbjuz.*) AS annotation
  from master_join master_join_neuhdb
  join notes.note_view notes_note_lat_skbjuz on master_join_neuhdb.target_id = notes_note_lat_skbjuz.id
  where master_join_neuhdb.source_id = procedure.proceduredme_ts.id
) as notes_note_view_vrbfdp on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
create index on procedure.proceduredme_view (id);
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'surveillance.radarcomponent_view', 'notes.note_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.radarsystem.id::integer as f_id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_ixnwgh.title as varchar), '(' || airport_heliport_airportheliport_pt_ixnwgh.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_ixnwgh.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_nuqjfv.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nuqjfv.longitude AS location_longitude,
    geometry_elevatedpoint_view_nuqjfv.latitude AS location_latitude,
    geometry_elevatedpoint_view_nuqjfv.elevation AS location_elevation,
    geometry_elevatedpoint_view_nuqjfv.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nuqjfv.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nuqjfv.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nuqjfv.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_vigdok.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_dgwama.office::jsonb as office,
    airport_heliport_runway_pt_bumqmb.parrunway::jsonb as parrunway,
    notes_note_view_qvldiv.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ixnwgh on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_ixnwgh.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nuqjfv on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_nuqjfv.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_pmddlp.*) as radarequipment
  from master_join master_join_dyhiap
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_pmddlp on master_join_dyhiap.target_id = surveillance_radarcomponent_lat_pmddlp.id
  where master_join_dyhiap.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_vigdok on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zuohrl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zuohrl.title AS varchar), '(' || organisation_organisationauthority_lat_zuohrl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zuohrl.href
  )) as office  from master_join master_join_gqqcke
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zuohrl on master_join_gqqcke.target_id = organisation_organisationauthority_lat_zuohrl.id
  where master_join_gqqcke.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_dgwama on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_vxzeaf.id,
      'title', coalesce(cast(airport_heliport_runway_lat_vxzeaf.title AS varchar), '(' || airport_heliport_runway_lat_vxzeaf.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_vxzeaf.href
  )) as parrunway  from master_join master_join_nhvexv
  join airport_heliport.runway_pt airport_heliport_runway_lat_vxzeaf on master_join_nhvexv.target_id = airport_heliport_runway_lat_vxzeaf.id
  where master_join_nhvexv.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_bumqmb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwujny.*) AS annotation
  from master_join master_join_vbsfmp
  join notes.note_view notes_note_lat_kwujny on master_join_vbsfmp.target_id = notes_note_lat_kwujny.id
  where master_join_vbsfmp.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_qvldiv on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
create index on surveillance.radarsystem_view (id);
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'service.radiocommunicationoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.radiocommunicationchannel.id::integer as f_id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_lpmjhz.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_lpmjhz.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_euepud.availability::jsonb as availability,
    notes_note_view_mrbguk.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_vsoyxt.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_vsoyxt.id,
      'longitude', geometry_elevatedpoint_lat_vsoyxt.longitude,
      'latitude', geometry_elevatedpoint_lat_vsoyxt.latitude,
      'elevation', geometry_elevatedpoint_lat_vsoyxt.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_vsoyxt.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_vsoyxt.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_vsoyxt.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_vsoyxt.horizontalAccuracy
    )) AS attr
  from master_join master_join_qxxsdn
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_vsoyxt on master_join_qxxsdn.target_id = geometry_elevatedpoint_lat_vsoyxt.id
  where master_join_qxxsdn.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_lpmjhz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_pretdq.*) as availability
  from master_join master_join_ywsjug
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_pretdq on master_join_ywsjug.target_id = service_radiocommunicationoperationalstatus_lat_pretdq.id
  where master_join_ywsjug.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_euepud on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhwndt.*) AS annotation
  from master_join master_join_dqtiex
  join notes.note_view notes_note_lat_dhwndt on master_join_dqtiex.target_id = notes_note_lat_dhwndt.id
  where master_join_dqtiex.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_mrbguk on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
create index on service.radiocommunicationchannel_view (id);
-- RadioFrequencyAreaTimeSliceType
-- ['notes.note_view', 'geometry.surface_view', 'shared.circlesector_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.radiofrequencyarea.id::integer as f_id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_tdfwkg.title as varchar), '(' || service_radiocommunicationchannel_pt_tdfwkg.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_tdfwkg.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_qjxfmq.title as varchar), '(' || navaids_points_specialnavigationstation_pt_qjxfmq.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_qjxfmq.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_unjzvh.title as varchar), '(' || surveillance_precisionapproachradar_pt_unjzvh.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_unjzvh.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_qcjcjv.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_qcjcjv.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_qcjcjv.href::text AS equipmentradar_href,
    shared_circlesector_view_yipulw.sector::jsonb as sector,
    geometry_surface_view_podxvn.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_podxvn.attr::jsonb as extent,
    notes_note_view_axymel.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_tdfwkg on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_tdfwkg.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_qjxfmq on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_qjxfmq.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_unjzvh on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_unjzvh.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_qcjcjv on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_qcjcjv.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_ewbkiw.*) as sector
  from master_join master_join_benmtj
  join shared.circlesector_view shared_circlesector_lat_ewbkiw on master_join_benmtj.target_id = shared_circlesector_lat_ewbkiw.id
  where master_join_benmtj.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_yipulw on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_fwydkh.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_fwydkh.id,
      'horizontalAccuracy', geometry_surface_lat_fwydkh.horizontalAccuracy
    )) AS attr
  from master_join master_join_earxsp
  join geometry.surface_view geometry_surface_lat_fwydkh on master_join_earxsp.target_id = geometry_surface_lat_fwydkh.id
  where master_join_earxsp.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_podxvn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_osdvtp.*) AS annotation
  from master_join master_join_omwwhz
  join notes.note_view notes_note_lat_osdvtp on master_join_omwwhz.target_id = notes_note_lat_osdvtp.id
  where master_join_omwwhz.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_axymel on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
create index on shared.radiofrequencyarea_view (id);
-- RoadTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.road.id::integer as f_id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_jiabtr.title as varchar), '(' || airport_heliport_airportheliport_pt_jiabtr.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_jiabtr.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lqxojj.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_xoajcs.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_xoajcs.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_xoajcs.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_xoajcs.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_xoajcs.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_xoajcs.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_frgcsr.accessiblestand::jsonb as accessiblestand,
    notes_note_view_zlpwzg.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jiabtr on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_jiabtr.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lqxojj on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lqxojj.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xoajcs on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_xoajcs.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_masubx.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_masubx.title AS varchar), '(' || airport_heliport_aircraftstand_lat_masubx.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_masubx.href
  )) as accessiblestand  from master_join master_join_khofep
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_masubx on master_join_khofep.target_id = airport_heliport_aircraftstand_lat_masubx.id
  where master_join_khofep.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_frgcsr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zerrwh.*) AS annotation
  from master_join master_join_zdxyfx
  join notes.note_view notes_note_lat_zerrwh on master_join_zdxyfx.target_id = notes_note_lat_zerrwh.id
  where master_join_zdxyfx.source_id = airport_heliport.road_ts.id
) as notes_note_view_zlpwzg on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
create index on airport_heliport.road_view (id);
-- RouteDMETimeSliceType
-- ['routes.routeportion_view', 'notes.note_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.routedme.id::integer as f_id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_yozypu.title as varchar), '(' || navaids_points_dme_pt_yozypu.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_yozypu.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_yecxnj.*)::jsonb AS applicablerouteportion,
    notes_note_view_qvyhgi.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_yozypu on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_yozypu.id
left join routes.routeportion_view routes_routeportion_view_yecxnj on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_yecxnj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_usyzgj.*) AS annotation
  from master_join master_join_tjoaiv
  join notes.note_view notes_note_lat_usyzgj on master_join_tjoaiv.target_id = notes_note_lat_usyzgj.id
  where master_join_tjoaiv.source_id = routes.routedme_ts.id
) as notes_note_view_qvyhgi on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
create index on routes.routedme_view (id);
-- RouteSegmentTimeSliceType
-- ['navaids_points.enroutesegmentpoint_view', 'routes.routeavailability_view', 'geometry.curve_view', 'shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.routesegment.id::integer as f_id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_aazkpk.*)::jsonb AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_iipfzz.*)::jsonb AS end,
    coalesce(cast(routes_route_pt_ajbagd.title as varchar), '(' || routes_route_pt_ajbagd.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_ajbagd.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_svrkgb.*)::jsonb AS evaluationarea,
    geometry_curve_view_lveebq.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_lveebq.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_ffupix.availability::jsonb as availability,
    notes_note_view_wkzvgc.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_aazkpk on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_aazkpk.id
left join routes.route_pt routes_route_pt_ajbagd on routes.routesegment_ts.routeformed_id = routes_route_pt_ajbagd.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_svrkgb on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_svrkgb.id
left join geometry.curve_view geometry_curve_view_lveebq on routes.routesegment_ts.curveextent_id = geometry_curve_view_lveebq.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_iipfzz on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_iipfzz.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_bqnyya.*) as availability
  from master_join master_join_qvpgik
  join routes.routeavailability_view routes_routeavailability_lat_bqnyya on master_join_qvpgik.target_id = routes_routeavailability_lat_bqnyya.id
  where master_join_qvpgik.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_ffupix on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_laesjn.*) AS annotation
  from master_join master_join_vhlodx
  join notes.note_view notes_note_lat_laesjn on master_join_vhlodx.target_id = notes_note_lat_laesjn.id
  where master_join_vhlodx.source_id = routes.routesegment_ts.id
) as notes_note_view_wkzvgc on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
create index on routes.routesegment_view (id);
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as id,
    routes.route.id::integer as f_id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_cnwqun.title as varchar), '(' || organisation_organisationauthority_pt_cnwqun.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_cnwqun.href::text AS userorganisation_href,
    notes_note_view_wmifhq.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_cnwqun on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_cnwqun.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gpnuba.*) AS annotation
  from master_join master_join_enubxh
  join notes.note_view notes_note_lat_gpnuba on master_join_enubxh.target_id = notes_note_lat_gpnuba.id
  where master_join_enubxh.source_id = routes.route_ts.id
) as notes_note_view_wmifhq on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
create index on routes.route_view (id);
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as id,
    rules_procedures.rulesprocedures.id::integer as f_id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_kicklv.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_greerd.affectedarea::jsonb as affectedarea,
    notes_note_view_efvtmr.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ufmhbs.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ufmhbs.title AS varchar), '(' || airport_heliport_airportheliport_lat_ufmhbs.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ufmhbs.href
  )) as affectedlocation  from master_join master_join_jfupxz
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ufmhbs on master_join_jfupxz.target_id = airport_heliport_airportheliport_lat_ufmhbs.id
  where master_join_jfupxz.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_kicklv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_xkjzcx.id,
      'title', coalesce(cast(airspace_airspace_lat_xkjzcx.title AS varchar), '(' || airspace_airspace_lat_xkjzcx.nilreason[1] || ')'),
      'href', airspace_airspace_lat_xkjzcx.href
  )) as affectedarea  from master_join master_join_dxvrlu
  join airspace.airspace_pt airspace_airspace_lat_xkjzcx on master_join_dxvrlu.target_id = airspace_airspace_lat_xkjzcx.id
  where master_join_dxvrlu.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_greerd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_acvcru.*) AS annotation
  from master_join master_join_bjqllp
  join notes.note_view notes_note_lat_acvcru on master_join_bjqllp.target_id = notes_note_lat_acvcru.id
  where master_join_bjqllp.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_efvtmr on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
create index on rules_procedures.rulesprocedures_view (id);
-- RunwayBlastPadTimeSliceType
-- ['notes.note_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayblastpad.id::integer as f_id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_otqfri.title as varchar), '(' || airport_heliport_runwaydirection_pt_otqfri.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_otqfri.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_pwhdti.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_pwhdti.elevation AS extent_elevation,
    geometry_elevatedsurface_view_pwhdti.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_pwhdti.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_pwhdti.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_pwhdti.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_bxywip.*)::jsonb AS surfaceproperties,
    notes_note_view_kgtsrh.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_otqfri on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_otqfri.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_pwhdti on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_pwhdti.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_bxywip on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_bxywip.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yvloom.*) AS annotation
  from master_join master_join_fyacwy
  join notes.note_view notes_note_lat_yvloom on master_join_fyacwy.target_id = notes_note_lat_yvloom.id
  where master_join_fyacwy.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_kgtsrh on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
create index on airport_heliport.runwayblastpad_view (id);
-- RunwayCentrelinePointTimeSliceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'airport_heliport.navaidequipmentdistance_view', 'airport_heliport.runwaydeclareddistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaycentrelinepoint.id::integer as f_id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_vgdhgg.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_vgdhgg.longitude AS location_longitude,
    geometry_elevatedpoint_view_vgdhgg.latitude AS location_latitude,
    geometry_elevatedpoint_view_vgdhgg.elevation AS location_elevation,
    geometry_elevatedpoint_view_vgdhgg.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_vgdhgg.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_vgdhgg.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_vgdhgg.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_tssmbn.title as varchar), '(' || airport_heliport_runwaydirection_pt_tssmbn.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_tssmbn.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_uvssty.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_ujpjtp.navaidequipment::jsonb as navaidequipment,
    notes_note_view_nkoxnk.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vgdhgg on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_vgdhgg.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_tssmbn on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_tssmbn.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_mbnlqi.*) as associateddeclareddistance
  from master_join master_join_cdbfzd
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_mbnlqi on master_join_cdbfzd.target_id = airport_heliport_runwaydeclareddistance_lat_mbnlqi.id
  where master_join_cdbfzd.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_uvssty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_tlaqzd.*) as navaidequipment
  from master_join master_join_hcbmle
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_tlaqzd on master_join_hcbmle.target_id = airport_heliport_navaidequipmentdistance_lat_tlaqzd.id
  where master_join_hcbmle.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_ujpjtp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aiqqza.*) AS annotation
  from master_join master_join_sksjme
  join notes.note_view notes_note_lat_aiqqza on master_join_sksjme.target_id = notes_note_lat_aiqqza.id
  where master_join_sksjme.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_nkoxnk on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
create index on airport_heliport.runwaycentrelinepoint_view (id);
-- RunwayDirectionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaydirectionlightsystem.id::integer as f_id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_thnads.title as varchar), '(' || airport_heliport_runwaydirection_pt_thnads.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_thnads.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_eabcwg.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_aojljc.availability::jsonb as availability,
    notes_note_view_mywfcx.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_thnads on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_thnads.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_hcgqgz.*) as element
  from master_join master_join_jjudus
  join shared.lightelement_view shared_lightelement_lat_hcgqgz on master_join_jjudus.target_id = shared_lightelement_lat_hcgqgz.id
  where master_join_jjudus.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_eabcwg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ewiurx.*) as availability
  from master_join master_join_tqpzjd
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ewiurx on master_join_tqpzjd.target_id = airport_heliport_groundlightingavailability_lat_ewiurx.id
  where master_join_tqpzjd.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_aojljc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_upfajx.*) AS annotation
  from master_join master_join_mpxeuv
  join notes.note_view notes_note_lat_upfajx on master_join_mpxeuv.target_id = notes_note_lat_upfajx.id
  where master_join_mpxeuv.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_mywfcx on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
create index on airport_heliport.runwaydirectionlightsystem_view (id);
-- RunwayDirectionTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaydirection.id::integer as f_id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_rwffdv.title as varchar), '(' || airport_heliport_runway_pt_rwffdv.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_rwffdv.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_aymtoz.title as varchar), '(' || airport_heliport_runwayelement_pt_aymtoz.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_aymtoz.href::text AS startingelement_href,
    notes_note_view_nasnjy.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_jdjpqk.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_rwffdv on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_rwffdv.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_aymtoz on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_aymtoz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrbxyf.*) AS annotation
  from master_join master_join_kuqwqd
  join notes.note_view notes_note_lat_hrbxyf on master_join_kuqwqd.target_id = notes_note_lat_hrbxyf.id
  where master_join_kuqwqd.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_nasnjy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rmljeg.*) as availability
  from master_join master_join_trujsg
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rmljeg on master_join_trujsg.target_id = airport_heliport_manoeuvringareaavailability_lat_rmljeg.id
  where master_join_trujsg.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_jdjpqk on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
create index on airport_heliport.runwaydirection_view (id);
-- RunwayElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayelement.id::integer as f_id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zrnvzk.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_scxsup.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_scxsup.elevation AS extent_elevation,
    geometry_elevatedsurface_view_scxsup.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_scxsup.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_scxsup.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_scxsup.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_selyzf.associatedrunway::jsonb as associatedrunway,
    notes_note_view_pjiehi.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_jkakze.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zrnvzk on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zrnvzk.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_scxsup on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_scxsup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_yjspuq.id,
      'title', coalesce(cast(airport_heliport_runway_lat_yjspuq.title AS varchar), '(' || airport_heliport_runway_lat_yjspuq.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_yjspuq.href
  )) as associatedrunway  from master_join master_join_deegnf
  join airport_heliport.runway_pt airport_heliport_runway_lat_yjspuq on master_join_deegnf.target_id = airport_heliport_runway_lat_yjspuq.id
  where master_join_deegnf.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_selyzf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pdeilv.*) AS annotation
  from master_join master_join_rctuje
  join notes.note_view notes_note_lat_pdeilv on master_join_rctuje.target_id = notes_note_lat_pdeilv.id
  where master_join_rctuje.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_pjiehi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_wrwhnw.*) as availability
  from master_join master_join_wmbllv
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_wrwhnw on master_join_wmbllv.target_id = airport_heliport_manoeuvringareaavailability_lat_wrwhnw.id
  where master_join_wmbllv.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_jkakze on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
create index on airport_heliport.runwayelement_view (id);
-- RunwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwaymarking.id::integer as f_id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_ffwjsx.title as varchar), '(' || airport_heliport_runway_pt_ffwjsx.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_ffwjsx.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_zrveti.element::jsonb as element,
    notes_note_view_jbkuyi.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_ffwjsx on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_ffwjsx.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_fknwxe.*) as element
  from master_join master_join_lqiycn
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_fknwxe on master_join_lqiycn.target_id = airport_heliport_markingelement_lat_fknwxe.id
  where master_join_lqiycn.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_zrveti on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ldenng.*) AS annotation
  from master_join master_join_gafmej
  join notes.note_view notes_note_lat_ldenng on master_join_gafmej.target_id = notes_note_lat_ldenng.id
  where master_join_gafmej.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_jbkuyi on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
create index on airport_heliport.runwaymarking_view (id);
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayprotectarealightsystem.id::integer as f_id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_xjhmhn.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_xjhmhn.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_xjhmhn.href::text AS lightedarea_href,
    shared_lightelement_view_srzcqb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_waersd.availability::jsonb as availability,
    notes_note_view_atdpzs.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_xjhmhn on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_xjhmhn.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_azqymi.*) as element
  from master_join master_join_dhqlml
  join shared.lightelement_view shared_lightelement_lat_azqymi on master_join_dhqlml.target_id = shared_lightelement_lat_azqymi.id
  where master_join_dhqlml.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_srzcqb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_gypbyy.*) as availability
  from master_join master_join_vjehjb
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_gypbyy on master_join_vjehjb.target_id = airport_heliport_groundlightingavailability_lat_gypbyy.id
  where master_join_vjehjb.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_waersd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qphjsn.*) AS annotation
  from master_join master_join_symlfe
  join notes.note_view notes_note_lat_qphjsn on master_join_symlfe.target_id = notes_note_lat_qphjsn.id
  where master_join_symlfe.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_atdpzs on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarealightsystem_view (id);
-- RunwayProtectAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayprotectarea.id::integer as f_id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_wzsiuw.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_fkhdyo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fkhdyo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fkhdyo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fkhdyo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fkhdyo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fkhdyo.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_popqaj.title as varchar), '(' || airport_heliport_runwaydirection_pt_popqaj.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_popqaj.href::text AS protectedrunwaydirection_href,
    notes_note_view_oytybn.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_wzsiuw on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_wzsiuw.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fkhdyo on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_fkhdyo.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_popqaj on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_popqaj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sktfia.*) AS annotation
  from master_join master_join_dptjvv
  join notes.note_view notes_note_lat_sktfia on master_join_dptjvv.target_id = notes_note_lat_sktfia.id
  where master_join_dptjvv.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_oytybn on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
create index on airport_heliport.runwayprotectarea_view (id);
-- RunwayTimeSliceType
-- ['notes.note_view', 'airport_heliport.runwaysectioncontamination_view', 'airport_heliport.runwaycontamination_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runway.id::integer as f_id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_rpftob.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_ieybov.title as varchar), '(' || airport_heliport_airportheliport_pt_ieybov.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_ieybov.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_srxwkl.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_cmbzjl.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_kzegtg.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_rpftob on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_rpftob.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ieybov on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_ieybov.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_hjaiyn.*) as overallcontaminant
  from master_join master_join_pxbhmc
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_hjaiyn on master_join_pxbhmc.target_id = airport_heliport_runwaycontamination_lat_hjaiyn.id
  where master_join_pxbhmc.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_srxwkl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mskrau.*) AS annotation
  from master_join master_join_zdloyt
  join notes.note_view notes_note_lat_mskrau on master_join_zdloyt.target_id = notes_note_lat_mskrau.id
  where master_join_zdloyt.source_id = airport_heliport.runway_ts.id
) as notes_note_view_cmbzjl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_oxpkqs.*) as areacontaminant
  from master_join master_join_quqjxw
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_oxpkqs on master_join_quqjxw.target_id = airport_heliport_runwaysectioncontamination_lat_oxpkqs.id
  where master_join_quqjxw.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_kzegtg on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
create index on airport_heliport.runway_view (id);
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.runwayvisualrange.id::integer as f_id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_lknzws.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lknzws.longitude AS location_longitude,
    geometry_elevatedpoint_view_lknzws.latitude AS location_latitude,
    geometry_elevatedpoint_view_lknzws.elevation AS location_elevation,
    geometry_elevatedpoint_view_lknzws.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lknzws.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lknzws.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lknzws.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_rykdff.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_ivzfvl.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lknzws on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_lknzws.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_otdzvo.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_otdzvo.title AS varchar), '(' || airport_heliport_runwaydirection_lat_otdzvo.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_otdzvo.href
  )) as associatedrunwaydirection  from master_join master_join_qzrpdx
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_otdzvo on master_join_qzrpdx.target_id = airport_heliport_runwaydirection_lat_otdzvo.id
  where master_join_qzrpdx.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_rykdff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpfpqi.*) AS annotation
  from master_join master_join_wcdois
  join notes.note_view notes_note_lat_wpfpqi on master_join_wcdois.target_id = notes_note_lat_wpfpqi.id
  where master_join_wcdois.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_ivzfvl on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
create index on airport_heliport.runwayvisualrange_view (id);
-- SafeAltitudeAreaTimeSliceType
-- ['notes.note_view', 'geometry.point_view', 'procedure.safealtitudeareasector_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.safealtitudearea.id::integer as f_id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_dmoitc.title as varchar), '(' || navaids_points_designatedpoint_pt_dmoitc.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dmoitc.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_eposzh.title as varchar), '(' || navaids_points_navaid_pt_eposzh.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_eposzh.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_umswdx.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_umswdx.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_umswdx.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nticpg.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nticpg.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nticpg.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_yhoccw.title as varchar), '(' || airport_heliport_airportheliport_pt_yhoccw.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_yhoccw.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_vwocok.location::jsonb as location,
    geometry_point_view_capcsz.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_capcsz.longitude AS centrepointposition_longitude,
    geometry_point_view_capcsz.latitude AS centrepointposition_latitude,
    geometry_point_view_capcsz.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_ijtpqi.sector::jsonb as sector,
    notes_note_view_lzowrq.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dmoitc on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dmoitc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eposzh on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_eposzh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_umswdx on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_umswdx.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nticpg on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nticpg.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_yhoccw on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_yhoccw.id
left join geometry.point_view geometry_point_view_capcsz on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_capcsz.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_jjkbal.*) as sector
  from master_join master_join_sjsctd
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_jjkbal on master_join_sjsctd.target_id = procedure_safealtitudeareasector_lat_jjkbal.id
  where master_join_sjsctd.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_ijtpqi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_seckxl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_seckxl.title AS varchar), '(' || airport_heliport_airportheliport_lat_seckxl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_seckxl.href
  )) as location  from master_join master_join_vnxcdp
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_seckxl on master_join_vnxcdp.target_id = airport_heliport_airportheliport_lat_seckxl.id
  where master_join_vnxcdp.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_vwocok on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dnasuv.*) AS annotation
  from master_join master_join_hfuycr
  join notes.note_view notes_note_lat_dnasuv on master_join_hfuycr.target_id = notes_note_lat_dnasuv.id
  where master_join_hfuycr.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_lzowrq on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
create index on procedure.safealtitudearea_view (id);
-- SDFTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.sdf.id::integer as f_id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_mqqyuo.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mqqyuo.longitude AS location_longitude,
    geometry_elevatedpoint_view_mqqyuo.latitude AS location_latitude,
    geometry_elevatedpoint_view_mqqyuo.elevation AS location_elevation,
    geometry_elevatedpoint_view_mqqyuo.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mqqyuo.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mqqyuo.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mqqyuo.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_xypzgg.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_ccrczv.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_zdsvxr.availability::jsonb as availability,
    notes_note_view_eoatyv.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mqqyuo on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_mqqyuo.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_rjxlds.*) as authority
  from master_join master_join_mqlsku
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_rjxlds on master_join_mqlsku.target_id = navaids_points_authorityfornavaidequipment_lat_rjxlds.id
  where master_join_mqlsku.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_xypzgg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_isdcla.*) as monitoring
  from master_join master_join_npytjf
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_isdcla on master_join_npytjf.target_id = navaids_points_navaidequipmentmonitoring_lat_isdcla.id
  where master_join_npytjf.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_ccrczv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_unvnsd.*) as availability
  from master_join master_join_zjhvxn
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_unvnsd on master_join_zjhvxn.target_id = navaids_points_navaidoperationalstatus_lat_unvnsd.id
  where master_join_zjhvxn.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_zdsvxr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zsbcwg.*) AS annotation
  from master_join master_join_gfoabi
  join notes.note_view notes_note_lat_zsbcwg on master_join_gfoabi.target_id = notes_note_lat_zsbcwg.id
  where master_join_gfoabi.source_id = navaids_points.sdf_ts.id
) as notes_note_view_eoatyv on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
create index on navaids_points.sdf_view (id);
-- SeaplaneLandingAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.seaplanelandingarea.id::integer as f_id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_ejcpie.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ejcpie.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ejcpie.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ejcpie.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ejcpie.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ejcpie.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_bcpsql.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_zowkmb.docksite::jsonb as docksite,
    notes_note_view_afrasz.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_eldpzh.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ejcpie on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_ejcpie.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_thhewf.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_thhewf.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_thhewf.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_thhewf.href
  )) as rampsite  from master_join master_join_jyzjwz
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_thhewf on master_join_jyzjwz.target_id = airport_heliport_seaplanerampsite_lat_thhewf.id
  where master_join_jyzjwz.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_bcpsql on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_yyrxzj.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_yyrxzj.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_yyrxzj.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_yyrxzj.href
  )) as docksite  from master_join master_join_hbgfha
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_yyrxzj on master_join_hbgfha.target_id = airport_heliport_floatingdocksite_lat_yyrxzj.id
  where master_join_hbgfha.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_zowkmb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gflgem.*) AS annotation
  from master_join master_join_nqtrvj
  join notes.note_view notes_note_lat_gflgem on master_join_nqtrvj.target_id = notes_note_lat_gflgem.id
  where master_join_nqtrvj.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_afrasz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_zkuncp.*) as availability
  from master_join master_join_iisiqs
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_zkuncp on master_join_iisiqs.target_id = airport_heliport_manoeuvringareaavailability_lat_zkuncp.id
  where master_join_iisiqs.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_eldpzh on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
create index on airport_heliport.seaplanelandingarea_view (id);
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.seaplanerampsite.id::integer as f_id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_rdqblx.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rdqblx.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rdqblx.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rdqblx.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rdqblx.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rdqblx.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_pjwtus.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_pjwtus.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_pjwtus.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_pjwtus.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_pjwtus.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_pjwtus.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_mdfmei.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rdqblx on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_rdqblx.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_pjwtus on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_pjwtus.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aqulaa.*) AS annotation
  from master_join master_join_xtlaoq
  join notes.note_view notes_note_lat_aqulaa on master_join_xtlaoq.target_id = notes_note_lat_aqulaa.id
  where master_join_xtlaoq.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_mdfmei on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
create index on airport_heliport.seaplanerampsite_view (id);
-- SearchRescueServiceTimeSliceType
-- ['routes.routeportion_view', 'geometry.elevatedpoint_view', 'service.callsigndetail_view', 'shared.contactinformation_view', 'service.serviceoperationalstatus_view', 'notes.note_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as id,
    service.searchrescueservice.id::integer as f_id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_wpjcec.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wpjcec.longitude AS location_longitude,
    geometry_elevatedpoint_view_wpjcec.latitude AS location_latitude,
    geometry_elevatedpoint_view_wpjcec.elevation AS location_elevation,
    geometry_elevatedpoint_view_wpjcec.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wpjcec.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wpjcec.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wpjcec.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_kqevfc.title as varchar), '(' || organisation_unit_pt_kqevfc.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_kqevfc.href::text AS serviceprovider_href,
    service_callsigndetail_view_xkprdo.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ppicrz.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_bffwdj.availability::jsonb as availability,
    notes_note_view_lchbsf.annotation::jsonb as annotation,
    airspace_airspace_pt_llyglz.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_lbbzcs.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wpjcec on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_wpjcec.id
left join organisation.unit_pt organisation_unit_pt_kqevfc on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_kqevfc.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_pjnxhw.*) as callsign
  from master_join master_join_zgovue
  join service.callsigndetail_view service_callsigndetail_lat_pjnxhw on master_join_zgovue.target_id = service_callsigndetail_lat_pjnxhw.id
  where master_join_zgovue.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_xkprdo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_maqwrl.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_maqwrl.title AS varchar), '(' || service_radiocommunicationchannel_lat_maqwrl.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_maqwrl.href
  )) as radiocommunication  from master_join master_join_ufbflo
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_maqwrl on master_join_ufbflo.target_id = service_radiocommunicationchannel_lat_maqwrl.id
  where master_join_ufbflo.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_ppicrz on TRUE
left join lateral(
  select
  from master_join master_join_zoecus
  join shared.contactinformation_view shared_contactinformation_lat_bfjytf on master_join_zoecus.target_id = shared_contactinformation_lat_bfjytf.id
  where master_join_zoecus.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_zdordl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ppjxcf.*) as availability
  from master_join master_join_hbqnid
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ppjxcf on master_join_hbqnid.target_id = service_serviceoperationalstatus_lat_ppjxcf.id
  where master_join_hbqnid.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_bffwdj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yzrmdm.*) AS annotation
  from master_join master_join_skxvbc
  join notes.note_view notes_note_lat_yzrmdm on master_join_skxvbc.target_id = notes_note_lat_yzrmdm.id
  where master_join_skxvbc.source_id = service.searchrescueservice_ts.id
) as notes_note_view_lchbsf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_uyuzbs.id,
      'title', coalesce(cast(airspace_airspace_lat_uyuzbs.title AS varchar), '(' || airspace_airspace_lat_uyuzbs.nilreason[1] || ')'),
      'href', airspace_airspace_lat_uyuzbs.href
  )) as clientairspace  from master_join master_join_doigyv
  join airspace.airspace_pt airspace_airspace_lat_uyuzbs on master_join_doigyv.target_id = airspace_airspace_lat_uyuzbs.id
  where master_join_doigyv.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_llyglz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_wxekme.*) as clientroute
  from master_join master_join_mxhkul
  join routes.routeportion_view routes_routeportion_lat_wxekme on master_join_mxhkul.target_id = routes_routeportion_lat_wxekme.id
  where master_join_mxhkul.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_lbbzcs on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
create index on service.searchrescueservice_view (id);
-- SecondarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'surveillance.surveillancegroundstation_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as id,
    surveillance.secondarysurveillanceradar.id::integer as f_id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_tldgzm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tldgzm.longitude AS location_longitude,
    geometry_elevatedpoint_view_tldgzm.latitude AS location_latitude,
    geometry_elevatedpoint_view_tldgzm.elevation AS location_elevation,
    geometry_elevatedpoint_view_tldgzm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tldgzm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tldgzm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tldgzm.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_whahev.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_tigecr.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tldgzm on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_tldgzm.id
left join lateral(
  select
  from master_join master_join_xkssds
  join shared.contactinformation_view shared_contactinformation_lat_ahcloe on master_join_xkssds.target_id = shared_contactinformation_lat_ahcloe.id
  where master_join_xkssds.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_evklgm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ngffyk.*) AS annotation
  from master_join master_join_buxfjf
  join notes.note_view notes_note_lat_ngffyk on master_join_buxfjf.target_id = notes_note_lat_ngffyk.id
  where master_join_buxfjf.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_whahev on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_sbhiqw.*) as groundstation
  from master_join master_join_sqdihh
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_sbhiqw on master_join_sqdihh.target_id = surveillance_surveillancegroundstation_lat_sbhiqw.id
  where master_join_sqdihh.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_tigecr on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
create index on surveillance.secondarysurveillanceradar_view (id);
-- SignificantPointInAirspaceTimeSliceType
-- ['geometry.point_view', 'notes.note_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.significantpointinairspace.id::integer as f_id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_vyvxma.title as varchar), '(' || airspace_airspace_pt_vyvxma.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_vyvxma.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_umcrbf.title as varchar), '(' || navaids_points_designatedpoint_pt_umcrbf.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_umcrbf.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_rnkkxl.title as varchar), '(' || navaids_points_navaid_pt_rnkkxl.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_rnkkxl.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jxtoym.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jxtoym.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_jxtoym.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ukyrek.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ukyrek.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ukyrek.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_cerbjc.title as varchar), '(' || airport_heliport_airportheliport_pt_cerbjc.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_cerbjc.href::text AS locationairportreferencepoint_href,
    geometry_point_view_nrarmt.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_nrarmt.longitude AS locationposition_longitude,
    geometry_point_view_nrarmt.latitude AS locationposition_latitude,
    geometry_point_view_nrarmt.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_qwjjva.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_vyvxma on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_vyvxma.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_umcrbf on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_umcrbf.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_rnkkxl on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_rnkkxl.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jxtoym on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jxtoym.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ukyrek on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ukyrek.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_cerbjc on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_cerbjc.id
left join geometry.point_view geometry_point_view_nrarmt on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_nrarmt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hyiuol.*) AS annotation
  from master_join master_join_sulopz
  join notes.note_view notes_note_lat_hyiuol on master_join_sulopz.target_id = notes_note_lat_hyiuol.id
  where master_join_sulopz.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_qwjjva on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
create index on navaids_points.significantpointinairspace_view (id);
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.specialdate.id::integer as f_id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation_organisationauthority_pt_hdztms.title as varchar), '(' || organisation_organisationauthority_pt_hdztms.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_hdztms.href::text AS authority_href,
    notes_note_view_lozmyj.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hdztms on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_hdztms.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cyvpyq.*) AS annotation
  from master_join master_join_ggrcco
  join notes.note_view notes_note_lat_cyvpyq on master_join_ggrcco.target_id = notes_note_lat_cyvpyq.id
  where master_join_ggrcco.source_id = shared.specialdate_ts.id
) as notes_note_view_lozmyj on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
create index on shared.specialdate_view (id);
-- SpecialNavigationStationTimeSliceType
-- ['notes.note_view', 'geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.specialnavigationstation.id::integer as f_id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_xxjwic.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_xxjwic.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_xxjwic.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_sutbvc.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_vpfmbf.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_vpfmbf.longitude AS position_longitude,
    geometry_elevatedpoint_view_vpfmbf.latitude AS position_latitude,
    geometry_elevatedpoint_view_vpfmbf.elevation AS position_elevation,
    geometry_elevatedpoint_view_vpfmbf.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_vpfmbf.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_vpfmbf.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_vpfmbf.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_yxydsr.availability::jsonb as availability,
    notes_note_view_ndhkmo.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_xxjwic on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_xxjwic.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_sutbvc on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_sutbvc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vpfmbf on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_vpfmbf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_jvljgi.*) as availability
  from master_join master_join_wcsjdg
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_jvljgi on master_join_wcsjdg.target_id = navaids_points_specialnavigationstationstatus_lat_jvljgi.id
  where master_join_wcsjdg.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_yxydsr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kctbml.*) AS annotation
  from master_join master_join_zwpyzt
  join notes.note_view notes_note_lat_kctbml on master_join_zwpyzt.target_id = notes_note_lat_kctbml.id
  where master_join_zwpyzt.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_ndhkmo on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
create index on navaids_points.specialnavigationstation_view (id);
-- SpecialNavigationSystemTimeSliceType
-- ['navaids_points.authorityforspecialnavigationsystem_view', 'notes.note_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.specialnavigationsystem.id::integer as f_id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_hpifpj.*)::jsonb AS responsibleorganisation,
    notes_note_view_gcdyga.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_hpifpj on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_hpifpj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wootlk.*) AS annotation
  from master_join master_join_usgryc
  join notes.note_view notes_note_lat_wootlk on master_join_usgryc.target_id = notes_note_lat_wootlk.id
  where master_join_usgryc.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_gcdyga on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
create index on navaids_points.specialnavigationsystem_view (id);
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.standardinstrumentarrival.id::integer as f_id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_cdidiy.title as varchar), '(' || navaids_points_navaid_pt_cdidiy.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_cdidiy.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_wzbngj.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_wzbngj.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_wzbngj.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_yinbwx.title as varchar), '(' || surveillance_radarsystem_pt_yinbwx.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_yinbwx.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_ubuluz.title as varchar), '(' || procedure_safealtitudearea_pt_ubuluz.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_ubuluz.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_yuaskm.*)::jsonb AS arrival,
    procedure_procedureavailability_view_wkptxk.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_huhtqg.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_qyumab.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_mflzwy.flighttransition::jsonb as flighttransition,
    notes_note_view_uaekis.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cdidiy on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_cdidiy.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_wzbngj on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_wzbngj.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_yinbwx on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_yinbwx.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_ubuluz on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_ubuluz.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_yuaskm on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_yuaskm.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_hupkmv.*) as availability
  from master_join master_join_xxqayk
  join procedure.procedureavailability_view procedure_procedureavailability_lat_hupkmv on master_join_xxqayk.target_id = procedure_procedureavailability_lat_hupkmv.id
  where master_join_xxqayk.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_wkptxk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_mrxvrh.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_mrxvrh.title AS varchar), '(' || airport_heliport_airportheliport_lat_mrxvrh.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_mrxvrh.href
  )) as airportheliport  from master_join master_join_hjrwcq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_mrxvrh on master_join_hjrwcq.target_id = airport_heliport_airportheliport_lat_mrxvrh.id
  where master_join_hjrwcq.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_huhtqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xhilza.*) as aircraftcharacteristic
  from master_join master_join_aewktw
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_xhilza on master_join_aewktw.target_id = shared_aircraftcharacteristic_lat_xhilza.id
  where master_join_aewktw.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_qyumab on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_cfzrdp.*) as flighttransition
  from master_join master_join_eitodc
  join procedure.proceduretransition_view procedure_proceduretransition_lat_cfzrdp on master_join_eitodc.target_id = procedure_proceduretransition_lat_cfzrdp.id
  where master_join_eitodc.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_mflzwy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zdngzx.*) AS annotation
  from master_join master_join_vzoxtm
  join notes.note_view notes_note_lat_zdngzx on master_join_vzoxtm.target_id = notes_note_lat_zdngzx.id
  where master_join_vzoxtm.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_uaekis on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
create index on procedure.standardinstrumentarrival_view (id);
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.procedureavailability_view', 'procedure.proceduretransition_view', 'shared.aircraftcharacteristic_view', 'notes.note_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.standardinstrumentdeparture.id::integer as f_id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_mbzjsv.title as varchar), '(' || navaids_points_navaid_pt_mbzjsv.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_mbzjsv.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qiruae.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qiruae.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qiruae.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_svotys.title as varchar), '(' || surveillance_radarsystem_pt_svotys.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_svotys.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_xepdtn.title as varchar), '(' || procedure_safealtitudearea_pt_xepdtn.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_xepdtn.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_vzlwxo.*)::jsonb AS takeoff,
    procedure_procedureavailability_view_wmqvpy.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_zpkwgn.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_ynimhr.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_zpzuov.flighttransition::jsonb as flighttransition,
    notes_note_view_avnjeu.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_mbzjsv on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_mbzjsv.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qiruae on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qiruae.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_svotys on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_svotys.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_xepdtn on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_xepdtn.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_vzlwxo on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_vzlwxo.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_gasbzy.*) as availability
  from master_join master_join_dtviay
  join procedure.procedureavailability_view procedure_procedureavailability_lat_gasbzy on master_join_dtviay.target_id = procedure_procedureavailability_lat_gasbzy.id
  where master_join_dtviay.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_wmqvpy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ochwym.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ochwym.title AS varchar), '(' || airport_heliport_airportheliport_lat_ochwym.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ochwym.href
  )) as airportheliport  from master_join master_join_clauti
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ochwym on master_join_clauti.target_id = airport_heliport_airportheliport_lat_ochwym.id
  where master_join_clauti.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_zpkwgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_dnhjjl.*) as aircraftcharacteristic
  from master_join master_join_miykef
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_dnhjjl on master_join_miykef.target_id = shared_aircraftcharacteristic_lat_dnhjjl.id
  where master_join_miykef.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_ynimhr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_kycfoe.*) as flighttransition
  from master_join master_join_mcgqkd
  join procedure.proceduretransition_view procedure_proceduretransition_lat_kycfoe on master_join_mcgqkd.target_id = procedure_proceduretransition_lat_kycfoe.id
  where master_join_mcgqkd.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_zpzuov on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yieqwe.*) AS annotation
  from master_join master_join_rmyahk
  join notes.note_view notes_note_lat_yieqwe on master_join_rmyahk.target_id = notes_note_lat_yieqwe.id
  where master_join_rmyahk.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_avnjeu on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
create index on procedure.standardinstrumentdeparture_view (id);
-- StandardLevelColumnTimeSliceType
-- ['shared.standardlevel_view', 'notes.note_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardlevelcolumn.id::integer as f_id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_mcutib.title as varchar), '(' || shared_standardleveltable_pt_mcutib.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_mcutib.href::text AS leveltable_href,
    shared_standardlevel_view_pfqumn.level::jsonb as level,
    notes_note_view_xeygji.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_mcutib on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_mcutib.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_ulkjvz.*) as level
  from master_join master_join_vrdesp
  join shared.standardlevel_view shared_standardlevel_lat_ulkjvz on master_join_vrdesp.target_id = shared_standardlevel_lat_ulkjvz.id
  where master_join_vrdesp.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_pfqumn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_akoqpd.*) AS annotation
  from master_join master_join_ocabfw
  join notes.note_view notes_note_lat_akoqpd on master_join_ocabfw.target_id = notes_note_lat_akoqpd.id
  where master_join_ocabfw.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_xeygji on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
create index on shared.standardlevelcolumn_view (id);
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardlevelsector.id::integer as f_id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_izceza.title as varchar), '(' || shared_standardlevelcolumn_pt_izceza.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_izceza.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_mkdidx.applicableairspace::jsonb as applicableairspace,
    notes_note_view_eacell.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_izceza on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_izceza.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_keagyc.id,
      'title', coalesce(cast(airspace_airspace_lat_keagyc.title AS varchar), '(' || airspace_airspace_lat_keagyc.nilreason[1] || ')'),
      'href', airspace_airspace_lat_keagyc.href
  )) as applicableairspace  from master_join master_join_ekbkby
  join airspace.airspace_pt airspace_airspace_lat_keagyc on master_join_ekbkby.target_id = airspace_airspace_lat_keagyc.id
  where master_join_ekbkby.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_mkdidx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_moyvhu.*) AS annotation
  from master_join master_join_cfnguy
  join notes.note_view notes_note_lat_moyvhu on master_join_cfnguy.target_id = notes_note_lat_moyvhu.id
  where master_join_cfnguy.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_eacell on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
create index on shared.standardlevelsector_view (id);
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as id,
    shared.standardleveltable.id::integer as f_id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_yfjdzh.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dhhrbp.*) AS annotation
  from master_join master_join_dptwzx
  join notes.note_view notes_note_lat_dhhrbp on master_join_dptwzx.target_id = notes_note_lat_dhhrbp.id
  where master_join_dptwzx.source_id = shared.standardleveltable_ts.id
) as notes_note_view_yfjdzh on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
create index on shared.standardleveltable_view (id);
-- StandMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.standmarking.id::integer as f_id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_wgcnws.title as varchar), '(' || airport_heliport_aircraftstand_pt_wgcnws.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_wgcnws.href::text AS markedstand_href,
    airport_heliport_markingelement_view_sflfji.element::jsonb as element,
    notes_note_view_lfjhfa.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_wgcnws on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_wgcnws.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_lriksn.*) as element
  from master_join master_join_fvcklh
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_lriksn on master_join_fvcklh.target_id = airport_heliport_markingelement_lat_lriksn.id
  where master_join_fvcklh.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_sflfji on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zsruif.*) AS annotation
  from master_join master_join_velxeq
  join notes.note_view notes_note_lat_zsruif on master_join_velxeq.target_id = notes_note_lat_zsruif.id
  where master_join_velxeq.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_lfjhfa on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
create index on airport_heliport.standmarking_view (id);
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.surveycontrolpoint.id::integer as f_id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_qzuson.title as varchar), '(' || airport_heliport_airportheliport_pt_qzuson.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_qzuson.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_kcxbqq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kcxbqq.longitude AS location_longitude,
    geometry_elevatedpoint_view_kcxbqq.latitude AS location_latitude,
    geometry_elevatedpoint_view_kcxbqq.elevation AS location_elevation,
    geometry_elevatedpoint_view_kcxbqq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kcxbqq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kcxbqq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kcxbqq.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_xugjvm.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_qzuson on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_qzuson.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kcxbqq on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_kcxbqq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nhkphh.*) AS annotation
  from master_join master_join_bnzrqw
  join notes.note_view notes_note_lat_nhkphh on master_join_bnzrqw.target_id = notes_note_lat_nhkphh.id
  where master_join_bnzrqw.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_xugjvm on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
create index on airport_heliport.surveycontrolpoint_view (id);
-- TACANTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.tacan.id::integer as f_id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_rnuqtz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rnuqtz.longitude AS location_longitude,
    geometry_elevatedpoint_view_rnuqtz.latitude AS location_latitude,
    geometry_elevatedpoint_view_rnuqtz.elevation AS location_elevation,
    geometry_elevatedpoint_view_rnuqtz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rnuqtz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rnuqtz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rnuqtz.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_dykdxp.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_fzjhyr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_zvswzp.availability::jsonb as availability,
    notes_note_view_uaqjpl.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rnuqtz on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_rnuqtz.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_uzxckf.*) as authority
  from master_join master_join_vjfmms
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_uzxckf on master_join_vjfmms.target_id = navaids_points_authorityfornavaidequipment_lat_uzxckf.id
  where master_join_vjfmms.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_dykdxp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_cebgdt.*) as monitoring
  from master_join master_join_fcmthn
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_cebgdt on master_join_fcmthn.target_id = navaids_points_navaidequipmentmonitoring_lat_cebgdt.id
  where master_join_fcmthn.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_fzjhyr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dhynev.*) as availability
  from master_join master_join_xqfxcu
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dhynev on master_join_xqfxcu.target_id = navaids_points_navaidoperationalstatus_lat_dhynev.id
  where master_join_xqfxcu.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_zvswzp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wczxdv.*) AS annotation
  from master_join master_join_ftlpuv
  join notes.note_view notes_note_lat_wczxdv on master_join_ftlpuv.target_id = notes_note_lat_wczxdv.id
  where master_join_ftlpuv.source_id = navaids_points.tacan_ts.id
) as notes_note_view_uaqjpl on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
create index on navaids_points.tacan_view (id);
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as f_id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_nruwbj.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_nruwbj.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_nruwbj.href::text AS taxiholding_href,
    shared_lightelement_view_cowdsp.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qqvoqi.availability::jsonb as availability,
    notes_note_view_upzbva.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_nruwbj on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_nruwbj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lyoiup.*) as element
  from master_join master_join_dpzzhb
  join shared.lightelement_view shared_lightelement_lat_lyoiup on master_join_dpzzhb.target_id = shared_lightelement_lat_lyoiup.id
  where master_join_dpzzhb.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_cowdsp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_vwcnuh.*) as availability
  from master_join master_join_cecffj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_vwcnuh on master_join_cecffj.target_id = airport_heliport_groundlightingavailability_lat_vwcnuh.id
  where master_join_cecffj.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qqvoqi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hglppg.*) AS annotation
  from master_join master_join_duhdwh
  join notes.note_view notes_note_lat_hglppg on master_join_duhdwh.target_id = notes_note_lat_hglppg.id
  where master_join_duhdwh.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_upzbva on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionlightsystem_view (id);
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingpositionmarking.id::integer as f_id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_jbxyql.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_jbxyql.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_jbxyql.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_gwenyk.element::jsonb as element,
    notes_note_view_ergcqs.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_jbxyql on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_jbxyql.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_gmxnii.*) as element
  from master_join master_join_klxesc
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_gmxnii on master_join_klxesc.target_id = airport_heliport_markingelement_lat_gmxnii.id
  where master_join_klxesc.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_gwenyk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wltmbp.*) AS annotation
  from master_join master_join_zgityx
  join notes.note_view notes_note_lat_wltmbp on master_join_zgityx.target_id = notes_note_lat_wltmbp.id
  where master_join_zgityx.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_ergcqs on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
create index on airport_heliport.taxiholdingpositionmarking_view (id);
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiholdingposition.id::integer as f_id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_hqutwz.title as varchar), '(' || airport_heliport_guidanceline_pt_hqutwz.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_hqutwz.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_sutygy.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_sutygy.longitude AS location_longitude,
    geometry_elevatedpoint_view_sutygy.latitude AS location_latitude,
    geometry_elevatedpoint_view_sutygy.elevation AS location_elevation,
    geometry_elevatedpoint_view_sutygy.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sutygy.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sutygy.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sutygy.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_sknehh.protectedrunway::jsonb as protectedrunway,
    notes_note_view_vnselb.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_hqutwz on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_hqutwz.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sutygy on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_sutygy.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_wxevdc.id,
      'title', coalesce(cast(airport_heliport_runway_lat_wxevdc.title AS varchar), '(' || airport_heliport_runway_lat_wxevdc.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_wxevdc.href
  )) as protectedrunway  from master_join master_join_vkudks
  join airport_heliport.runway_pt airport_heliport_runway_lat_wxevdc on master_join_vkudks.target_id = airport_heliport_runway_lat_wxevdc.id
  where master_join_vkudks.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_sknehh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wmigpl.*) AS annotation
  from master_join master_join_ioxxup
  join notes.note_view notes_note_lat_wmigpl on master_join_ioxxup.target_id = notes_note_lat_wmigpl.id
  where master_join_ioxxup.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_vnselb on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
create index on airport_heliport.taxiholdingposition_view (id);
-- TaxiwayElementTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwayelement.id::integer as f_id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_xvlfks.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_abfnit.title as varchar), '(' || airport_heliport_taxiway_pt_abfnit.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_abfnit.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_ivmmlw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_ivmmlw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_ivmmlw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_ivmmlw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_ivmmlw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_ivmmlw.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_rbzyeq.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_aoncis.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_xvlfks on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_xvlfks.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_abfnit on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_abfnit.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ivmmlw on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_ivmmlw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dxutrn.*) AS annotation
  from master_join master_join_hlhlai
  join notes.note_view notes_note_lat_dxutrn on master_join_hlhlai.target_id = notes_note_lat_dxutrn.id
  where master_join_hlhlai.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_rbzyeq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_ooqxjw.*) as availability
  from master_join master_join_ecrimf
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_ooqxjw on master_join_ecrimf.target_id = airport_heliport_manoeuvringareaavailability_lat_ooqxjw.id
  where master_join_ecrimf.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_aoncis on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
create index on airport_heliport.taxiwayelement_view (id);
-- TaxiwayLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwaylightsystem.id::integer as f_id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_dpwwdk.title as varchar), '(' || airport_heliport_taxiway_pt_dpwwdk.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_dpwwdk.href::text AS lightedtaxiway_href,
    shared_lightelement_view_fewenc.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_ditndn.availability::jsonb as availability,
    notes_note_view_jkqfmr.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_dpwwdk on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_dpwwdk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_kywnkk.*) as element
  from master_join master_join_ysauha
  join shared.lightelement_view shared_lightelement_lat_kywnkk on master_join_ysauha.target_id = shared_lightelement_lat_kywnkk.id
  where master_join_ysauha.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_fewenc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_gyyjer.*) as availability
  from master_join master_join_lriadj
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_gyyjer on master_join_lriadj.target_id = airport_heliport_groundlightingavailability_lat_gyyjer.id
  where master_join_lriadj.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ditndn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xilpuo.*) AS annotation
  from master_join master_join_djgsig
  join notes.note_view notes_note_lat_xilpuo on master_join_djgsig.target_id = notes_note_lat_xilpuo.id
  where master_join_djgsig.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_jkqfmr on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
create index on airport_heliport.taxiwaylightsystem_view (id);
-- TaxiwayMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiwaymarking.id::integer as f_id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_eolflk.title as varchar), '(' || airport_heliport_taxiway_pt_eolflk.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_eolflk.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_vgavpl.title as varchar), '(' || airport_heliport_taxiwayelement_pt_vgavpl.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_vgavpl.href::text AS markedelement_href,
    airport_heliport_markingelement_view_qzedik.element::jsonb as element,
    notes_note_view_nidxhd.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_eolflk on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_eolflk.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_vgavpl on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_vgavpl.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_cdnjhw.*) as element
  from master_join master_join_frjlfj
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_cdnjhw on master_join_frjlfj.target_id = airport_heliport_markingelement_lat_cdnjhw.id
  where master_join_frjlfj.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_qzedik on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gqlfdp.*) AS annotation
  from master_join master_join_fowuif
  join notes.note_view notes_note_lat_gqlfdp on master_join_fowuif.target_id = notes_note_lat_gqlfdp.id
  where master_join_fowuif.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_nidxhd on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
create index on airport_heliport.taxiwaymarking_view (id);
-- TaxiwayTimeSliceType
-- ['notes.note_view', 'airport_heliport.taxiwaycontamination_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.taxiway.id::integer as f_id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_pqdosh.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_acdigh.title as varchar), '(' || airport_heliport_airportheliport_pt_acdigh.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_acdigh.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_qzcqvc.contaminant::jsonb as contaminant,
    notes_note_view_ysmaay.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_muwfaj.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_pqdosh on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_pqdosh.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_acdigh on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_acdigh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_bwokyp.*) as contaminant
  from master_join master_join_rlqiyy
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_bwokyp on master_join_rlqiyy.target_id = airport_heliport_taxiwaycontamination_lat_bwokyp.id
  where master_join_rlqiyy.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_qzcqvc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iskofy.*) AS annotation
  from master_join master_join_eqlwkm
  join notes.note_view notes_note_lat_iskofy on master_join_eqlwkm.target_id = notes_note_lat_iskofy.id
  where master_join_eqlwkm.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_ysmaay on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_lytqnn.*) as availability
  from master_join master_join_pywqew
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_lytqnn on master_join_pywqew.target_id = airport_heliport_manoeuvringareaavailability_lat_lytqnn.id
  where master_join_pywqew.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_muwfaj on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
create index on airport_heliport.taxiway_view (id);
-- TerminalArrivalAreaTimeSliceType
-- ['procedure.terminalarrivalareasector_view', 'geometry.point_view', 'geometry.surface_view', 'notes.note_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    procedure.terminalarrivalarea.id::integer as f_id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_zydgiu.title as varchar), '(' || navaids_points_designatedpoint_pt_zydgiu.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_zydgiu.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_qbrtqy.title as varchar), '(' || navaids_points_designatedpoint_pt_qbrtqy.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_qbrtqy.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_sbgble.title as varchar), '(' || navaids_points_navaid_pt_sbgble.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_sbgble.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_wdzinz.title as varchar), '(' || navaids_points_navaid_pt_wdzinz.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_wdzinz.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kesjhd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kesjhd.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_kesjhd.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vsqtai.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vsqtai.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_vsqtai.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_azmdlj.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_azmdlj.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_azmdlj.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_lxvkkt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_lxvkkt.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_lxvkkt.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mnsojb.title as varchar), '(' || airport_heliport_airportheliport_pt_mnsojb.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_mnsojb.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kiwbtx.title as varchar), '(' || airport_heliport_airportheliport_pt_kiwbtx.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_kiwbtx.href::text AS iafairportreferencepoint_href,
    geometry_point_view_jvrksl.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_jvrksl.longitude AS ifposition_longitude,
    geometry_point_view_jvrksl.latitude AS ifposition_latitude,
    geometry_point_view_jvrksl.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_tphmdb.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_tphmdb.longitude AS iafposition_longitude,
    geometry_point_view_tphmdb.latitude AS iafposition_latitude,
    geometry_point_view_tphmdb.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_wiqcho.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_wiqcho.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_mzruxh.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_mzruxh.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_mzruxh.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_dlqkmo.sector::jsonb as sector,
    notes_note_view_ygphgb.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zydgiu on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zydgiu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_sbgble on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_sbgble.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kesjhd on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kesjhd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_azmdlj on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_azmdlj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mnsojb on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_mnsojb.id
left join geometry.point_view geometry_point_view_jvrksl on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_jvrksl.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qbrtqy on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qbrtqy.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wdzinz on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_wdzinz.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vsqtai on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vsqtai.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_lxvkkt on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_lxvkkt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kiwbtx on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_kiwbtx.id
left join geometry.point_view geometry_point_view_tphmdb on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_tphmdb.id
left join geometry.surface_view geometry_surface_view_wiqcho on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_wiqcho.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_mzruxh on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_mzruxh.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_hjrlxx.*) as sector
  from master_join master_join_maogsv
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_hjrlxx on master_join_maogsv.target_id = procedure_terminalarrivalareasector_lat_hjrlxx.id
  where master_join_maogsv.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_dlqkmo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eunxio.*) AS annotation
  from master_join master_join_bzzsrn
  join notes.note_view notes_note_lat_eunxio on master_join_bzzsrn.target_id = notes_note_lat_eunxio.id
  where master_join_bzzsrn.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_ygphgb on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
create index on procedure.terminalarrivalarea_view (id);
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftofflightsystem.id::integer as f_id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_noehlc.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_noehlc.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_noehlc.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_sgunlk.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_hnzugm.availability::jsonb as availability,
    notes_note_view_miuvij.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_noehlc on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_noehlc.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_qgqavy.*) as element
  from master_join master_join_qiwhrl
  join shared.lightelement_view shared_lightelement_lat_qgqavy on master_join_qiwhrl.target_id = shared_lightelement_lat_qgqavy.id
  where master_join_qiwhrl.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_sgunlk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_uznfyv.*) as availability
  from master_join master_join_axriym
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_uznfyv on master_join_axriym.target_id = airport_heliport_groundlightingavailability_lat_uznfyv.id
  where master_join_axriym.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hnzugm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jeofrt.*) AS annotation
  from master_join master_join_qzgjys
  join notes.note_view notes_note_lat_jeofrt on master_join_qzgjys.target_id = notes_note_lat_jeofrt.id
  where master_join_qzgjys.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_miuvij on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
create index on airport_heliport.touchdownliftofflightsystem_view (id);
-- TouchDownLiftOffMarkingTimeSliceType
-- ['airport_heliport.markingelement_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoffmarking.id::integer as f_id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_ixtdkv.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_ixtdkv.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_ixtdkv.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_ilcetz.element::jsonb as element,
    notes_note_view_xnrrsh.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_ixtdkv on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_ixtdkv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_znutwu.*) as element
  from master_join master_join_egrxve
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_znutwu on master_join_egrxve.target_id = airport_heliport_markingelement_lat_znutwu.id
  where master_join_egrxve.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_ilcetz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kvnejz.*) AS annotation
  from master_join master_join_qitqqm
  join notes.note_view notes_note_lat_kvnejz on master_join_qitqqm.target_id = notes_note_lat_kvnejz.id
  where master_join_qitqqm.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_xnrrsh on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffmarking_view (id);
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['notes.note_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoffsafearea.id::integer as f_id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_hkgeci.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_grszlh.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_grszlh.elevation AS extent_elevation,
    geometry_elevatedsurface_view_grszlh.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_grszlh.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_grszlh.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_grszlh.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_myoqbw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_myoqbw.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_myoqbw.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_zzljhd.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hkgeci on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hkgeci.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_grszlh on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_grszlh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_myoqbw on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_myoqbw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mvmrfe.*) AS annotation
  from master_join master_join_rflvnb
  join notes.note_view notes_note_lat_mvmrfe on master_join_rflvnb.target_id = notes_note_lat_mvmrfe.id
  where master_join_rflvnb.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_zzljhd on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoffsafearea_view (id);
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.touchdownliftoffcontamination_view', 'airport_heliport.manoeuvringareaavailability_view', 'geometry.elevatedpoint_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.touchdownliftoff.id::integer as f_id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_uabdcx.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_uabdcx.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_uabdcx.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_uabdcx.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_uabdcx.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_uabdcx.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_uabdcx.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_uabdcx.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_cutlyj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cutlyj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cutlyj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cutlyj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cutlyj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cutlyj.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_duiniu.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_nhizyh.title as varchar), '(' || airport_heliport_airportheliport_pt_nhizyh.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_nhizyh.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_vsjqns.title as varchar), '(' || airport_heliport_runway_pt_vsjqns.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_vsjqns.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_kdqcxy.contaminant::jsonb as contaminant,
    notes_note_view_xffizi.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_trxxfy.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_uabdcx on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_uabdcx.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cutlyj on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_cutlyj.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_duiniu on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_duiniu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_nhizyh on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_nhizyh.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_vsjqns on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_vsjqns.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_qtfggs.*) as contaminant
  from master_join master_join_ijccfs
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_qtfggs on master_join_ijccfs.target_id = airport_heliport_touchdownliftoffcontamination_lat_qtfggs.id
  where master_join_ijccfs.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_kdqcxy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fjpaou.*) AS annotation
  from master_join master_join_xuogms
  join notes.note_view notes_note_lat_fjpaou on master_join_xuogms.target_id = notes_note_lat_fjpaou.id
  where master_join_xuogms.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_xffizi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_noiqih.*) as availability
  from master_join master_join_kljkkp
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_noiqih on master_join_kljkkp.target_id = airport_heliport_manoeuvringareaavailability_lat_noiqih.id
  where master_join_kljkkp.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_trxxfy on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
create index on airport_heliport.touchdownliftoff_view (id);
-- UnitTimeSliceType
-- ['organisation.unitdependency_view', 'geometry.elevatedpoint_view', 'shared.contactinformation_view', 'organisation.unitavailability_view', 'notes.note_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as id,
    organisation.unit.id::integer as f_id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_afblyo.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_afblyo.longitude AS position_longitude,
    geometry_elevatedpoint_view_afblyo.latitude AS position_latitude,
    geometry_elevatedpoint_view_afblyo.elevation AS position_elevation,
    geometry_elevatedpoint_view_afblyo.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_afblyo.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_afblyo.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_afblyo.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_zuskfk.title as varchar), '(' || airport_heliport_airportheliport_pt_zuskfk.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_zuskfk.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_zyfamc.title as varchar), '(' || organisation_organisationauthority_pt_zyfamc.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_zyfamc.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_ipodtx.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_yymund.availability::jsonb as availability,
    notes_note_view_yjywyi.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_afblyo on organisation.unit_ts.position_id = geometry_elevatedpoint_view_afblyo.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zuskfk on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_zuskfk.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_zyfamc on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_zyfamc.id
left join lateral(
  select
  from master_join master_join_uqbzyg
  join shared.contactinformation_view shared_contactinformation_lat_ziyrkl on master_join_uqbzyg.target_id = shared_contactinformation_lat_ziyrkl.id
  where master_join_uqbzyg.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_lrswyj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_zgcknc.*) as relatedunit
  from master_join master_join_awagtg
  join organisation.unitdependency_view organisation_unitdependency_lat_zgcknc on master_join_awagtg.target_id = organisation_unitdependency_lat_zgcknc.id
  where master_join_awagtg.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_ipodtx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_wcdbew.*) as availability
  from master_join master_join_sjsdvn
  join organisation.unitavailability_view organisation_unitavailability_lat_wcdbew on master_join_sjsdvn.target_id = organisation_unitavailability_lat_wcdbew.id
  where master_join_sjsdvn.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_yymund on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpbhhs.*) AS annotation
  from master_join master_join_prnztn
  join notes.note_view notes_note_lat_wpbhhs on master_join_prnztn.target_id = notes_note_lat_wpbhhs.id
  where master_join_prnztn.source_id = organisation.unit_ts.id
) as notes_note_view_yjywyi on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
create index on organisation.unit_view (id);
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as id,
    holding.unplannedholding.id::integer as f_id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_hltuon.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_arurkt.*) AS annotation
  from master_join master_join_tudzcz
  join notes.note_view notes_note_lat_arurkt on master_join_tudzcz.target_id = notes_note_lat_arurkt.id
  where master_join_tudzcz.source_id = holding.unplannedholding_ts.id
) as notes_note_view_hltuon on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
create index on holding.unplannedholding_view (id);
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurelightingstatus_view', 'obstacles.verticalstructurepart_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as id,
    obstacles.verticalstructure.id::integer as f_id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_guvwbe.title as varchar), '(' || navaids_points_markerbeacon_pt_guvwbe.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_guvwbe.href::text AS marker_href,
    obstacles_verticalstructurepart_view_feltqm.part::jsonb as part,
    service_passengerservice_pt_fgxbdi.hostedpassengerservice::jsonb as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_ahqtbf.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_iwnyzj.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_pyysuj.hostedorganisation::jsonb as hostedorganisation,
    notes_note_view_rasbna.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_imkrip.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_guvwbe on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_guvwbe.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_zpcohg.*) as part
  from master_join master_join_yskxgu
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_zpcohg on master_join_yskxgu.target_id = obstacles_verticalstructurepart_lat_zpcohg.id
  where master_join_yskxgu.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_feltqm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_ivdsrv.id,
      'title', coalesce(cast(service_passengerservice_lat_ivdsrv.title AS varchar), '(' || service_passengerservice_lat_ivdsrv.nilreason[1] || ')'),
      'href', service_passengerservice_lat_ivdsrv.href
  )) as hostedpassengerservice  from master_join master_join_qdbyhm
  join service.passengerservice_pt service_passengerservice_lat_ivdsrv on master_join_qdbyhm.target_id = service_passengerservice_lat_ivdsrv.id
  where master_join_qdbyhm.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_fgxbdi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_gbvgru.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_gbvgru.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_gbvgru.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_gbvgru.href
  )) as hostedspecialnavstation  from master_join master_join_ejayyu
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_gbvgru on master_join_ejayyu.target_id = navaids_points_specialnavigationstation_lat_gbvgru.id
  where master_join_ejayyu.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_ahqtbf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_yxvnxa.id,
      'title', coalesce(cast(organisation_unit_lat_yxvnxa.title AS varchar), '(' || organisation_unit_lat_yxvnxa.nilreason[1] || ')'),
      'href', organisation_unit_lat_yxvnxa.href
  )) as hostedunit  from master_join master_join_knzcdk
  join organisation.unit_pt organisation_unit_lat_yxvnxa on master_join_knzcdk.target_id = organisation_unit_lat_yxvnxa.id
  where master_join_knzcdk.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_iwnyzj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tecvxs.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tecvxs.title AS varchar), '(' || organisation_organisationauthority_lat_tecvxs.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tecvxs.href
  )) as hostedorganisation  from master_join master_join_kwyzbo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tecvxs on master_join_kwyzbo.target_id = organisation_organisationauthority_lat_tecvxs.id
  where master_join_kwyzbo.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_pyysuj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jejcgu.*) AS annotation
  from master_join master_join_mckddm
  join notes.note_view notes_note_lat_jejcgu on master_join_mckddm.target_id = notes_note_lat_jejcgu.id
  where master_join_mckddm.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_rasbna on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_xtzcnb.*) as lightingavailability
  from master_join master_join_smvjqx
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_xtzcnb on master_join_smvjqx.target_id = obstacles_verticalstructurelightingstatus_lat_xtzcnb.id
  where master_join_smvjqx.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_imkrip on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
create index on obstacles.verticalstructure_view (id);
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['shared.lightelement_view', 'airport_heliport.groundlightingavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.visualglideslopeindicator.id::integer as f_id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_vplfxh.title as varchar), '(' || airport_heliport_runwaydirection_pt_vplfxh.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_vplfxh.href::text AS runwaydirection_href,
    shared_lightelement_view_nhiqxn.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_lqacmb.availability::jsonb as availability,
    notes_note_view_uqogko.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_vplfxh on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_vplfxh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_igwmeu.*) as element
  from master_join master_join_wnjvgj
  join shared.lightelement_view shared_lightelement_lat_igwmeu on master_join_wnjvgj.target_id = shared_lightelement_lat_igwmeu.id
  where master_join_wnjvgj.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_nhiqxn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_azheut.*) as availability
  from master_join master_join_akdowm
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_azheut on master_join_akdowm.target_id = airport_heliport_groundlightingavailability_lat_azheut.id
  where master_join_akdowm.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_lqacmb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zihfej.*) AS annotation
  from master_join master_join_tizrtj
  join notes.note_view notes_note_lat_zihfej on master_join_tizrtj.target_id = notes_note_lat_zihfej.id
  where master_join_tizrtj.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_uqogko on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
create index on airport_heliport.visualglideslopeindicator_view (id);
-- VORTimeSliceType
-- ['navaids_points.authorityfornavaidequipment_view', 'geometry.elevatedpoint_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.navaidoperationalstatus_view', 'notes.note_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as id,
    navaids_points.vor.id::integer as f_id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_pomcyf.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pomcyf.longitude AS location_longitude,
    geometry_elevatedpoint_view_pomcyf.latitude AS location_latitude,
    geometry_elevatedpoint_view_pomcyf.elevation AS location_elevation,
    geometry_elevatedpoint_view_pomcyf.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pomcyf.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pomcyf.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pomcyf.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_oosotd.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_tyaubv.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_txpyyz.availability::jsonb as availability,
    notes_note_view_ixecac.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pomcyf on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_pomcyf.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_mquuwp.*) as authority
  from master_join master_join_zodfjw
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_mquuwp on master_join_zodfjw.target_id = navaids_points_authorityfornavaidequipment_lat_mquuwp.id
  where master_join_zodfjw.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_oosotd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_yjiqkq.*) as monitoring
  from master_join master_join_arltio
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_yjiqkq on master_join_arltio.target_id = navaids_points_navaidequipmentmonitoring_lat_yjiqkq.id
  where master_join_arltio.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_tyaubv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vnbqrl.*) as availability
  from master_join master_join_dlsowq
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vnbqrl on master_join_dlsowq.target_id = navaids_points_navaidoperationalstatus_lat_vnbqrl.id
  where master_join_dlsowq.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_txpyyz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kvthcr.*) AS annotation
  from master_join master_join_yhbrcu
  join notes.note_view notes_note_lat_kvthcr on master_join_yhbrcu.target_id = notes_note_lat_kvthcr.id
  where master_join_yhbrcu.source_id = navaids_points.vor_ts.id
) as notes_note_view_ixecac on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
create index on navaids_points.vor_view (id);
-- WorkAreaTimeSliceType
-- ['notes.note_view', 'airport_heliport.workareaactivity_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as id,
    airport_heliport.workarea.id::integer as f_id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_maodxc.title as varchar), '(' || airport_heliport_airportheliport_pt_maodxc.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_maodxc.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_fiufwf.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fiufwf.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fiufwf.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fiufwf.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fiufwf.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fiufwf.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_ywnrxv.activation::jsonb as activation,
    notes_note_view_grtisu.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_maodxc on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_maodxc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fiufwf on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_fiufwf.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_wdjdkq.*) as activation
  from master_join master_join_gdqwbd
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_wdjdkq on master_join_gdqwbd.target_id = airport_heliport_workareaactivity_lat_wdjdkq.id
  where master_join_gdqwbd.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_ywnrxv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oaxtgt.*) AS annotation
  from master_join master_join_ykwnsg
  join notes.note_view notes_note_lat_oaxtgt on master_join_ykwnsg.target_id = notes_note_lat_oaxtgt.id
  where master_join_ykwnsg.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_grtisu on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
create index on airport_heliport.workarea_view (id);
