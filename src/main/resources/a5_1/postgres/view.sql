-- LinguisticNotePropertyType
-- []
-- Snowflake SQL : LinguisticNotePropertyType 

CREATE INDEX ON notes.linguisticnote_pt (linguisticnote_id);
CREATE INDEX ON notes.linguisticnote (id);

DROP MATERIALIZED VIEW IF EXISTS notes.linguisticnote_view CASCADE;

CREATE MATERIALIZED VIEW notes.linguisticnote_view AS
SELECT 
    notes.linguisticnote_pt.id,
    notes.linguisticnote.note_lang AS lang,
    COALESCE(notes.linguisticnote.note_value, '('|| notes.linguisticnote.note_nilreason ||')') AS note
FROM notes.linguisticnote_pt
INNER JOIN notes.linguisticnote ON notes.linguisticnote_pt.linguisticnote_id = notes.linguisticnote.id;

CREATE INDEX ON notes.linguisticnote_view (id);
-- NotePropertyType
-- ['notes.linguisticnote_view']
-- Snowflake SQL : NotePropertyType 

CREATE INDEX ON notes.note_pt (note_id);
CREATE INDEX ON notes.note (id);

DROP MATERIALIZED VIEW IF EXISTS notes.note_view CASCADE;

CREATE MATERIALIZED VIEW notes.note_view AS
WITH pre_aggregated_notes AS (
    SELECT
        master_join.source_id AS note_id,
        jsonb_agg(
            jsonb_build_object(
                'id', linguisticnote_view.id,
                'lang', linguisticnote_view.lang,
                'note', linguisticnote_view.note
            )
        ) AS notes_array
    FROM master_join
    JOIN notes.linguisticnote_view ON master_join.target_id = linguisticnote_view.id
    GROUP BY master_join.source_id
)
SELECT
    note_pt.id,
    jsonb_build_object(
        'propertyName', COALESCE(note.propertyname_value, '(' || note.propertyname_nilreason || ')'),
        'purpose', COALESCE(note.purpose_value, '(' || note.purpose_nilreason || ')'),
        'notes', pre_aggregated_notes.notes_array
    ) AS note
FROM notes.note_pt
JOIN notes.note ON note_pt.note_id = note.id
LEFT JOIN pre_aggregated_notes ON pre_aggregated_notes.note_id = note.id;

CREATE INDEX ON notes.note_view (id);
-- AircraftCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.aircraftcharacteristic_view cascade;
create materialized view shared.aircraftcharacteristic_view as
select
    shared.aircraftcharacteristic_pt.id::integer as id,
    shared.aircraftcharacteristic_pt.nilreason::text AS aircraftcharacteristic_nilreason,
    coalesce(cast(shared.aircraftcharacteristic.type_value as varchar), '(' || shared.aircraftcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.aircraftcharacteristic.engine_value as varchar), '(' || shared.aircraftcharacteristic.engine_nilreason || ')')::text as engine,
    coalesce(cast(shared.aircraftcharacteristic.numberengine_value as varchar), '(' || shared.aircraftcharacteristic.numberengine_nilreason || ')')::text as numberengine,
    coalesce(cast(shared.aircraftcharacteristic.typeaircrafticao_value as varchar), '(' || shared.aircraftcharacteristic.typeaircrafticao_nilreason || ')')::text as typeaircrafticao,
    coalesce(cast(shared.aircraftcharacteristic.aircraftlandingcategory_value as varchar), '(' || shared.aircraftcharacteristic.aircraftlandingcategory_nilreason || ')')::text as aircraftlandingcategory,
    coalesce(cast(shared.aircraftcharacteristic.wingspaninterpretation_value as varchar), '(' || shared.aircraftcharacteristic.wingspaninterpretation_nilreason || ')')::text as wingspaninterpretation,
    coalesce(cast(shared.aircraftcharacteristic.classwingspan_value as varchar), '(' || shared.aircraftcharacteristic.classwingspan_nilreason || ')')::text as classwingspan,
    coalesce(cast(shared.aircraftcharacteristic.weightinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.weightinterpretation_nilreason || ')')::text as weightinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.passengers_value as varchar), '(' || shared.aircraftcharacteristic.passengers_nilreason || ')')::text as passengers,
    coalesce(cast(shared.aircraftcharacteristic.passengersinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.passengersinterpretation_nilreason || ')')::text as passengersinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.speedinterpretation_value as varchar), '(' || shared.aircraftcharacteristic.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(shared.aircraftcharacteristic.waketurbulence_value as varchar), '(' || shared.aircraftcharacteristic.waketurbulence_nilreason || ')')::text as waketurbulence,
    coalesce(cast(shared.aircraftcharacteristic.navigationequipment_value as varchar), '(' || shared.aircraftcharacteristic.navigationequipment_nilreason || ')')::text as navigationequipment,
    coalesce(cast(shared.aircraftcharacteristic.navigationspecification_value as varchar), '(' || shared.aircraftcharacteristic.navigationspecification_nilreason || ')')::text as navigationspecification,
    coalesce(cast(shared.aircraftcharacteristic.verticalseparationcapability_value as varchar), '(' || shared.aircraftcharacteristic.verticalseparationcapability_nilreason || ')')::text as verticalseparationcapability,
    coalesce(cast(shared.aircraftcharacteristic.anticollisionandseparationequipment_value as varchar), '(' || shared.aircraftcharacteristic.anticollisionandseparationequipment_nilreason || ')')::text as anticollisionandseparationequipment,
    coalesce(cast(shared.aircraftcharacteristic.communicationequipment_value as varchar), '(' || shared.aircraftcharacteristic.communicationequipment_nilreason || ')')::text as communicationequipment,
    coalesce(cast(shared.aircraftcharacteristic.surveillanceequipment_value as varchar), '(' || shared.aircraftcharacteristic.surveillanceequipment_nilreason || ')')::text as surveillanceequipment,
    coalesce(cast(shared.aircraftcharacteristic.wingspan_value as varchar) || ' ' || shared.aircraftcharacteristic.wingspan_uom, '(' || shared.aircraftcharacteristic.wingspan_nilreason || ')')::text as wingspan,
    coalesce(cast(shared.aircraftcharacteristic.weight_value as varchar) || ' ' || shared.aircraftcharacteristic.weight_uom, '(' || shared.aircraftcharacteristic.weight_nilreason || ')')::text as weight,
    coalesce(cast(shared.aircraftcharacteristic.speed_value as varchar) || ' ' || shared.aircraftcharacteristic.speed_uom, '(' || shared.aircraftcharacteristic.speed_nilreason || ')')::text as speed,
    notes_note_view_fuwbzn.annotation::jsonb as annotation
from shared.aircraftcharacteristic_pt 
inner join shared.aircraftcharacteristic on shared.aircraftcharacteristic_pt.aircraftcharacteristic_id = shared.aircraftcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zutprv.*) AS annotation
  from master_join master_join_xjjskh
  join notes.note_view notes_note_lat_zutprv on master_join_xjjskh.target_id = notes_note_lat_zutprv.id
  where master_join_xjjskh.source_id = shared.aircraftcharacteristic.id
) as notes_note_view_fuwbzn on TRUE;
-- AircraftStandContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aircraftstandcontamination_view cascade;
create materialized view airport_heliport.aircraftstandcontamination_view as
select
    airport_heliport.aircraftstandcontamination_pt.id::integer as id,
    airport_heliport.aircraftstandcontamination_pt.nilreason::text AS aircraftstandcontamination_nilreason,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictionestimation_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aircraftstandcontamination.frictiondevice_value as varchar), '(' || airport_heliport.aircraftstandcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aircraftstandcontamination.obscuredlights_value as varchar), '(' || airport_heliport.aircraftstandcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aircraftstandcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aircraftstandcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aircraftstandcontamination.proportion_value as varchar), '(' || airport_heliport.aircraftstandcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aircraftstandcontamination.depth_value as varchar) || ' ' || airport_heliport.aircraftstandcontamination.depth_uom, '(' || airport_heliport.aircraftstandcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_yxlenm.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_sohdmf.layer::jsonb as layer,
    notes_note_view_ndzkaz.annotation::jsonb as annotation
from airport_heliport.aircraftstandcontamination_pt 
inner join airport_heliport.aircraftstandcontamination on airport_heliport.aircraftstandcontamination_pt.aircraftstandcontamination_id = airport_heliport.aircraftstandcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_abvszm.id) as criticalridge
  from master_join master_join_nvauil
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_abvszm on master_join_nvauil.target_id = airport_heliport_ridge_lat_abvszm.id
  where master_join_nvauil.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_ridge_pt_yxlenm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_vdnjwo.id) as layer
  from master_join master_join_jvnbvz
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_vdnjwo on master_join_jvnbvz.target_id = airport_heliport_surfacecontaminationlayer_lat_vdnjwo.id
  where master_join_jvnbvz.source_id = airport_heliport.aircraftstandcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_sohdmf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tnsmdq.*) AS annotation
  from master_join master_join_aawmum
  join notes.note_view notes_note_lat_tnsmdq on master_join_aawmum.target_id = notes_note_lat_tnsmdq.id
  where master_join_aawmum.source_id = airport_heliport.aircraftstandcontamination.id
) as notes_note_view_ndzkaz on TRUE;
-- AirportHeliportContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcontamination_view cascade;
create materialized view airport_heliport.airportheliportcontamination_view as
select
    airport_heliport.airportheliportcontamination_pt.id::integer as id,
    airport_heliport.airportheliportcontamination_pt.nilreason::text AS airportheliportcontamination_nilreason,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictionestimation_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.airportheliportcontamination.frictiondevice_value as varchar), '(' || airport_heliport.airportheliportcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.airportheliportcontamination.obscuredlights_value as varchar), '(' || airport_heliport.airportheliportcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.airportheliportcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.airportheliportcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.airportheliportcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.airportheliportcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.airportheliportcontamination.proportion_value as varchar), '(' || airport_heliport.airportheliportcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.airportheliportcontamination.depth_value as varchar) || ' ' || airport_heliport.airportheliportcontamination.depth_uom, '(' || airport_heliport.airportheliportcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_lazsvc.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_hdxxka.layer::jsonb as layer,
    notes_note_view_efroht.annotation::jsonb as annotation
from airport_heliport.airportheliportcontamination_pt 
inner join airport_heliport.airportheliportcontamination on airport_heliport.airportheliportcontamination_pt.airportheliportcontamination_id = airport_heliport.airportheliportcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_vevljs.id) as criticalridge
  from master_join master_join_raytjo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_vevljs on master_join_raytjo.target_id = airport_heliport_ridge_lat_vevljs.id
  where master_join_raytjo.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_ridge_pt_lazsvc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_vckzhy.id) as layer
  from master_join master_join_hrurvo
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_vckzhy on master_join_hrurvo.target_id = airport_heliport_surfacecontaminationlayer_lat_vckzhy.id
  where master_join_hrurvo.source_id = airport_heliport.airportheliportcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_hdxxka on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivtnit.*) AS annotation
  from master_join master_join_qtodbh
  join notes.note_view notes_note_lat_ivtnit on master_join_qtodbh.target_id = notes_note_lat_ivtnit.id
  where master_join_qtodbh.source_id = airport_heliport.airportheliportcontamination.id
) as notes_note_view_efroht on TRUE;
-- AirspaceGeometryComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacegeometrycomponent_view cascade;
create materialized view airspace.airspacegeometrycomponent_view as
select
    airspace.airspacegeometrycomponent_pt.id::integer as id,
    airspace.airspacegeometrycomponent_pt.nilreason::text AS airspacegeometrycomponent_nilreason,
    coalesce(cast(airspace.airspacegeometrycomponent.operation_value as varchar), '(' || airspace.airspacegeometrycomponent.operation_nilreason || ')')::text as operation,
    coalesce(cast(airspace.airspacegeometrycomponent.operationsequence_value as varchar), '(' || airspace.airspacegeometrycomponent.operationsequence_nilreason || ')')::text as operationsequence,
    to_jsonb(airspace_airspacevolume_pt_pzpqox.id)::jsonb AS theairspacevolume,
    notes_note_view_lxvkti.annotation::jsonb as annotation
from airspace.airspacegeometrycomponent_pt 
inner join airspace.airspacegeometrycomponent on airspace.airspacegeometrycomponent_pt.airspacegeometrycomponent_id = airspace.airspacegeometrycomponent.id
left join airspace.airspacevolume_pt airspace_airspacevolume_pt_pzpqox on airspace.airspacegeometrycomponent.theairspacevolume_id = airspace_airspacevolume_pt_pzpqox.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_igcusc.*) AS annotation
  from master_join master_join_ezwzmp
  join notes.note_view notes_note_lat_igcusc on master_join_ezwzmp.target_id = notes_note_lat_igcusc.id
  where master_join_ezwzmp.source_id = airspace.airspacegeometrycomponent.id
) as notes_note_view_lxvkti on TRUE;
-- AirspaceLayerPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.airspacelayer_view cascade;
create materialized view shared.airspacelayer_view as
select
    shared.airspacelayer_pt.id::integer as id,
    shared.airspacelayer_pt.nilreason::text AS airspacelayer_nilreason,
    coalesce(cast(shared.airspacelayer.upperlimitreference_value as varchar), '(' || shared.airspacelayer.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.airspacelayer.lowerlimitreference_value as varchar), '(' || shared.airspacelayer.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.airspacelayer.altitudeinterpretation_value as varchar), '(' || shared.airspacelayer.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(shared.airspacelayer.upperlimit_value as varchar) || ' ' || shared.airspacelayer.upperlimit_uom, '(' || shared.airspacelayer.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.airspacelayer.lowerlimit_value as varchar) || ' ' || shared.airspacelayer.lowerlimit_uom, '(' || shared.airspacelayer.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared_standardlevelcolumn_pt_dwppka.title as varchar), '(' || shared_standardlevelcolumn_pt_dwppka.nilreason[1] || ')')::text AS discretelevelseries,
    shared_standardlevelcolumn_pt_dwppka.href::text AS discretelevelseries_href,
    notes_note_view_mswutr.annotation::jsonb as annotation
from shared.airspacelayer_pt 
inner join shared.airspacelayer on shared.airspacelayer_pt.airspacelayer_id = shared.airspacelayer.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_dwppka on shared.airspacelayer.discretelevelseries_id = shared_standardlevelcolumn_pt_dwppka.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_frvmko.*) AS annotation
  from master_join master_join_pzuyqj
  join notes.note_view notes_note_lat_frvmko on master_join_pzuyqj.target_id = notes_note_lat_frvmko.id
  where master_join_pzuyqj.source_id = shared.airspacelayer.id
) as notes_note_view_mswutr on TRUE;
-- AirspaceVolumeDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists airspace.airspacevolumedependency_view cascade;
create materialized view airspace.airspacevolumedependency_view as
select
    airspace.airspacevolumedependency_pt.id::integer as id,
    airspace.airspacevolumedependency_pt.nilreason::text AS airspacevolumedependency_nilreason,
    coalesce(cast(airspace.airspacevolumedependency.dependency_value as varchar), '(' || airspace.airspacevolumedependency.dependency_nilreason || ')')::text as dependency,
    coalesce(cast(airspace_airspace_pt_rsahdh.title as varchar), '(' || airspace_airspace_pt_rsahdh.nilreason[1] || ')')::text AS theairspace,
    airspace_airspace_pt_rsahdh.href::text AS theairspace_href,
    notes_note_view_bjybuk.annotation::jsonb as annotation
from airspace.airspacevolumedependency_pt 
inner join airspace.airspacevolumedependency on airspace.airspacevolumedependency_pt.airspacevolumedependency_id = airspace.airspacevolumedependency.id
left join airspace.airspace_pt airspace_airspace_pt_rsahdh on airspace.airspacevolumedependency.theairspace_id = airspace_airspace_pt_rsahdh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlrcuv.*) AS annotation
  from master_join master_join_zrawtu
  join notes.note_view notes_note_lat_vlrcuv on master_join_zrawtu.target_id = notes_note_lat_vlrcuv.id
  where master_join_zrawtu.source_id = airspace.airspacevolumedependency.id
) as notes_note_view_bjybuk on TRUE;
-- AltitudeAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.altitudeadjustment_view cascade;
create materialized view shared.altitudeadjustment_view as
select
    shared.altitudeadjustment_pt.id::integer as id,
    shared.altitudeadjustment_pt.nilreason::text AS altitudeadjustment_nilreason,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustmenttype_value as varchar), '(' || shared.altitudeadjustment.altitudeadjustmenttype_nilreason || ')')::text as altitudeadjustmenttype,
    coalesce(cast(shared.altitudeadjustment.primaryalternateminimum_value as varchar), '(' || shared.altitudeadjustment.primaryalternateminimum_nilreason || ')')::text as primaryalternateminimum,
    coalesce(cast(shared.altitudeadjustment.localremotecode_value as varchar), '(' || shared.altitudeadjustment.localremotecode_nilreason || ')')::text as localremotecode,
    coalesce(cast(shared.altitudeadjustment.altitudeadjustment_value as varchar) || ' ' || shared.altitudeadjustment.altitudeadjustment_uom, '(' || shared.altitudeadjustment.altitudeadjustment_nilreason || ')')::text as altitudeadjustment,
    notes_note_view_rowazl.annotation::jsonb as annotation
from shared.altitudeadjustment_pt 
inner join shared.altitudeadjustment on shared.altitudeadjustment_pt.altitudeadjustment_id = shared.altitudeadjustment.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thoesc.*) AS annotation
  from master_join master_join_pteybt
  join notes.note_view notes_note_lat_thoesc on master_join_pteybt.target_id = notes_note_lat_thoesc.id
  where master_join_pteybt.source_id = shared.altitudeadjustment.id
) as notes_note_view_rowazl on TRUE;
-- AngleUsePropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.angleuse_view cascade;
create materialized view navaids_points.angleuse_view as
select
    navaids_points.angleuse_pt.id::integer as id,
    navaids_points.angleuse_pt.nilreason::text AS angleuse_nilreason,
    coalesce(cast(navaids_points.angleuse.alongcourseguidance_value as varchar), '(' || navaids_points.angleuse.alongcourseguidance_nilreason || ')')::text as alongcourseguidance,
    coalesce(cast(navaids_points_angleindication_pt_pqziar.title as varchar), '(' || navaids_points_angleindication_pt_pqziar.nilreason[1] || ')')::text AS theangleindication,
    navaids_points_angleindication_pt_pqziar.href::text AS theangleindication_href,
    notes_note_view_ioallm.annotation::jsonb as annotation
from navaids_points.angleuse_pt 
inner join navaids_points.angleuse on navaids_points.angleuse_pt.angleuse_id = navaids_points.angleuse.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_pqziar on navaids_points.angleuse.theangleindication_id = navaids_points_angleindication_pt_pqziar.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_apinwr.*) AS annotation
  from master_join master_join_uuzytm
  join notes.note_view notes_note_lat_apinwr on master_join_uuzytm.target_id = notes_note_lat_apinwr.id
  where master_join_uuzytm.source_id = navaids_points.angleuse.id
) as notes_note_view_ioallm on TRUE;
-- ApproachAltitudeTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachaltitudetable_view cascade;
create materialized view procedure.approachaltitudetable_view as
select
    procedure.approachaltitudetable_pt.id::integer as id,
    procedure.approachaltitudetable_pt.nilreason::text AS approachaltitudetable_nilreason,
    coalesce(cast(procedure.approachaltitudetable.measurementpoint_value as varchar), '(' || procedure.approachaltitudetable.measurementpoint_nilreason || ')')::text as measurementpoint,
    coalesce(cast(procedure.approachaltitudetable.altitudereference_value as varchar), '(' || procedure.approachaltitudetable.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.approachaltitudetable.altitude_value as varchar) || ' ' || procedure.approachaltitudetable.altitude_uom, '(' || procedure.approachaltitudetable.altitude_nilreason || ')')::text as altitude,
    notes_note_view_aumzye.annotation::jsonb as annotation
from procedure.approachaltitudetable_pt 
inner join procedure.approachaltitudetable on procedure.approachaltitudetable_pt.approachaltitudetable_id = procedure.approachaltitudetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_duryyx.*) AS annotation
  from master_join master_join_qzwlak
  join notes.note_view notes_note_lat_duryyx on master_join_qzwlak.target_id = notes_note_lat_duryyx.id
  where master_join_qzwlak.source_id = procedure.approachaltitudetable.id
) as notes_note_view_aumzye on TRUE;
-- ApproachConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachcondition_view cascade;
create materialized view procedure.approachcondition_view as
select
    procedure.approachcondition_pt.id::integer as id,
    procedure.approachcondition_pt.nilreason::text AS approachcondition_nilreason,
    coalesce(cast(procedure.approachcondition.finalapproachpath_value as varchar), '(' || procedure.approachcondition.finalapproachpath_nilreason || ')')::text as finalapproachpath,
    coalesce(cast(procedure.approachcondition.requirednavigationperformance_value as varchar), '(' || procedure.approachcondition.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.approachcondition.climbgradient_value as varchar), '(' || procedure.approachcondition.climbgradient_nilreason || ')')::text as climbgradient,
    to_jsonb(procedure_minima_pt_zfytbb.id)::jsonb AS minimumset,
    coalesce(cast(airport_heliport_altimetersource_pt_dlfkxi.title as varchar), '(' || airport_heliport_altimetersource_pt_dlfkxi.nilreason[1] || ')')::text AS altimeter,
    airport_heliport_altimetersource_pt_dlfkxi.href::text AS altimeter_href,
    procedure_circlingrestriction_pt_loogef.circlingrestriction::jsonb as circlingrestriction,
    shared_aircraftcharacteristic_pt_ixeqzx.aircraftcategory::jsonb as aircraftcategory,
    procedure_landingtakeoffareacollection_pt_lxvyac.landingarea::jsonb as landingarea,
    shared_obstacleassessmentarea_pt_uwsxcg.designsurface::jsonb as designsurface,
    notes_note_view_gsknpa.annotation::jsonb as annotation
from procedure.approachcondition_pt 
inner join procedure.approachcondition on procedure.approachcondition_pt.approachcondition_id = procedure.approachcondition.id
left join procedure.minima_pt procedure_minima_pt_zfytbb on procedure.approachcondition.minimumset_id = procedure_minima_pt_zfytbb.id
left join airport_heliport.altimetersource_pt airport_heliport_altimetersource_pt_dlfkxi on procedure.approachcondition.altimeter_id = airport_heliport_altimetersource_pt_dlfkxi.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_circlingrestriction_lat_dnxbij.id) as circlingrestriction
  from master_join master_join_lolecq
  join procedure.circlingrestriction_pt procedure_circlingrestriction_lat_dnxbij on master_join_lolecq.target_id = procedure_circlingrestriction_lat_dnxbij.id
  where master_join_lolecq.source_id = procedure.approachcondition.id
) as procedure_circlingrestriction_pt_loogef on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_vrxvgn.id) as aircraftcategory
  from master_join master_join_imxjxe
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_vrxvgn on master_join_imxjxe.target_id = shared_aircraftcharacteristic_lat_vrxvgn.id
  where master_join_imxjxe.source_id = procedure.approachcondition.id
) as shared_aircraftcharacteristic_pt_ixeqzx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_landingtakeoffareacollection_lat_wokxvo.id) as landingarea
  from master_join master_join_jjskvw
  join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_lat_wokxvo on master_join_jjskvw.target_id = procedure_landingtakeoffareacollection_lat_wokxvo.id
  where master_join_jjskvw.source_id = procedure.approachcondition.id
) as procedure_landingtakeoffareacollection_pt_lxvyac on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_wtjaln.id) as designsurface
  from master_join master_join_ailcoj
  join shared.obstacleassessmentarea_pt shared_obstacleassessmentarea_lat_wtjaln on master_join_ailcoj.target_id = shared_obstacleassessmentarea_lat_wtjaln.id
  where master_join_ailcoj.source_id = procedure.approachcondition.id
) as shared_obstacleassessmentarea_pt_uwsxcg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gygjjt.*) AS annotation
  from master_join master_join_aewuix
  join notes.note_view notes_note_lat_gygjjt on master_join_aewuix.target_id = notes_note_lat_gygjjt.id
  where master_join_aewuix.source_id = procedure.approachcondition.id
) as notes_note_view_gsknpa on TRUE;
-- ApproachDistanceTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachdistancetable_view cascade;
create materialized view procedure.approachdistancetable_view as
select
    procedure.approachdistancetable_pt.id::integer as id,
    procedure.approachdistancetable_pt.nilreason::text AS approachdistancetable_nilreason,
    coalesce(cast(procedure.approachdistancetable.startingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.endingmeasurementpoint_value as varchar), '(' || procedure.approachdistancetable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachdistancetable.valuehat_value as varchar) || ' ' || procedure.approachdistancetable.valuehat_uom, '(' || procedure.approachdistancetable.valuehat_nilreason || ')')::text as valuehat,
    coalesce(cast(procedure.approachdistancetable.distance_value as varchar) || ' ' || procedure.approachdistancetable.distance_uom, '(' || procedure.approachdistancetable.distance_nilreason || ')')::text as distance,
    notes_note_view_vdljya.annotation::jsonb as annotation
from procedure.approachdistancetable_pt 
inner join procedure.approachdistancetable on procedure.approachdistancetable_pt.approachdistancetable_id = procedure.approachdistancetable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lojffa.*) AS annotation
  from master_join master_join_mirdii
  join notes.note_view notes_note_lat_lojffa on master_join_mirdii.target_id = notes_note_lat_lojffa.id
  where master_join_mirdii.source_id = procedure.approachdistancetable.id
) as notes_note_view_vdljya on TRUE;
-- ApproachTimingTablePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.approachtimingtable_view cascade;
create materialized view procedure.approachtimingtable_view as
select
    procedure.approachtimingtable_pt.id::integer as id,
    procedure.approachtimingtable_pt.nilreason::text AS approachtimingtable_nilreason,
    coalesce(cast(procedure.approachtimingtable.startingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.startingmeasurementpoint_nilreason || ')')::text as startingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.endingmeasurementpoint_value as varchar), '(' || procedure.approachtimingtable.endingmeasurementpoint_nilreason || ')')::text as endingmeasurementpoint,
    coalesce(cast(procedure.approachtimingtable.time_value as varchar) || ' ' || procedure.approachtimingtable.time_uom, '(' || procedure.approachtimingtable.time_nilreason || ')')::text as time,
    coalesce(cast(procedure.approachtimingtable.speed_value as varchar) || ' ' || procedure.approachtimingtable.speed_uom, '(' || procedure.approachtimingtable.speed_nilreason || ')')::text as speed,
    notes_note_view_aefeuz.annotation::jsonb as annotation
from procedure.approachtimingtable_pt 
inner join procedure.approachtimingtable on procedure.approachtimingtable_pt.approachtimingtable_id = procedure.approachtimingtable.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eknxvk.*) AS annotation
  from master_join master_join_mavlxl
  join notes.note_view notes_note_lat_eknxvk on master_join_mavlxl.target_id = notes_note_lat_eknxvk.id
  where master_join_mavlxl.source_id = procedure.approachtimingtable.id
) as notes_note_view_aefeuz on TRUE;
-- ApronContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.aproncontamination_view cascade;
create materialized view airport_heliport.aproncontamination_view as
select
    airport_heliport.aproncontamination_pt.id::integer as id,
    airport_heliport.aproncontamination_pt.nilreason::text AS aproncontamination_nilreason,
    coalesce(cast(airport_heliport.aproncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.aproncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.aproncontamination.frictionestimation_value as varchar), '(' || airport_heliport.aproncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.aproncontamination.frictiondevice_value as varchar), '(' || airport_heliport.aproncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.aproncontamination.obscuredlights_value as varchar), '(' || airport_heliport.aproncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.aproncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.aproncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.aproncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.aproncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.aproncontamination.proportion_value as varchar), '(' || airport_heliport.aproncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.aproncontamination.depth_value as varchar) || ' ' || airport_heliport.aproncontamination.depth_uom, '(' || airport_heliport.aproncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_womlyy.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ybikra.layer::jsonb as layer,
    notes_note_view_zhqoaq.annotation::jsonb as annotation
from airport_heliport.aproncontamination_pt 
inner join airport_heliport.aproncontamination on airport_heliport.aproncontamination_pt.aproncontamination_id = airport_heliport.aproncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_aeqqps.id) as criticalridge
  from master_join master_join_ehwwzo
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_aeqqps on master_join_ehwwzo.target_id = airport_heliport_ridge_lat_aeqqps.id
  where master_join_ehwwzo.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_ridge_pt_womlyy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_pjkmkl.id) as layer
  from master_join master_join_yrdojb
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_pjkmkl on master_join_yrdojb.target_id = airport_heliport_surfacecontaminationlayer_lat_pjkmkl.id
  where master_join_yrdojb.source_id = airport_heliport.aproncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ybikra on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nxwkaa.*) AS annotation
  from master_join master_join_khuwuw
  join notes.note_view notes_note_lat_nxwkaa on master_join_khuwuw.target_id = notes_note_lat_nxwkaa.id
  where master_join_khuwuw.source_id = airport_heliport.aproncontamination.id
) as notes_note_view_zhqoaq on TRUE;
-- AuthorityForAerialRefuellingPropertyType
-- ['notes.note_view']
drop materialized view if exists aerial_refuelling.authorityforaerialrefuelling_view cascade;
create materialized view aerial_refuelling.authorityforaerialrefuelling_view as
select
    aerial_refuelling.authorityforaerialrefuelling_pt.id::integer as id,
    aerial_refuelling.authorityforaerialrefuelling_pt.nilreason::text AS authorityforaerialrefuelling_nilreason,
    coalesce(cast(aerial_refuelling.authorityforaerialrefuelling.type_value as varchar), '(' || aerial_refuelling.authorityforaerialrefuelling.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_pekjsv.title as varchar), '(' || organisation_organisationauthority_pt_pekjsv.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_pekjsv.href::text AS theorganisationauthority_href,
    notes_note_view_jpcwvf.annotation::jsonb as annotation
from aerial_refuelling.authorityforaerialrefuelling_pt 
inner join aerial_refuelling.authorityforaerialrefuelling on aerial_refuelling.authorityforaerialrefuelling_pt.authorityforaerialrefuelling_id = aerial_refuelling.authorityforaerialrefuelling.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_pekjsv on aerial_refuelling.authorityforaerialrefuelling.theorganisationauthority_id = organisation_organisationauthority_pt_pekjsv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vpvbcg.*) AS annotation
  from master_join master_join_wunycv
  join notes.note_view notes_note_lat_vpvbcg on master_join_wunycv.target_id = notes_note_lat_vpvbcg.id
  where master_join_wunycv.source_id = aerial_refuelling.authorityforaerialrefuelling.id
) as notes_note_view_jpcwvf on TRUE;
-- AuthorityForNavaidEquipmentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityfornavaidequipment_view cascade;
create materialized view navaids_points.authorityfornavaidequipment_view as
select
    navaids_points.authorityfornavaidequipment_pt.id::integer as id,
    navaids_points.authorityfornavaidequipment_pt.nilreason::text AS authorityfornavaidequipment_nilreason,
    coalesce(cast(navaids_points.authorityfornavaidequipment.type_value as varchar), '(' || navaids_points.authorityfornavaidequipment.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_udncux.title as varchar), '(' || organisation_organisationauthority_pt_udncux.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_udncux.href::text AS theorganisationauthority_href,
    notes_note_view_qihzaj.annotation::jsonb as annotation
from navaids_points.authorityfornavaidequipment_pt 
inner join navaids_points.authorityfornavaidequipment on navaids_points.authorityfornavaidequipment_pt.authorityfornavaidequipment_id = navaids_points.authorityfornavaidequipment.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_udncux on navaids_points.authorityfornavaidequipment.theorganisationauthority_id = organisation_organisationauthority_pt_udncux.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oqqlqr.*) AS annotation
  from master_join master_join_kyihid
  join notes.note_view notes_note_lat_oqqlqr on master_join_kyihid.target_id = notes_note_lat_oqqlqr.id
  where master_join_kyihid.source_id = navaids_points.authorityfornavaidequipment.id
) as notes_note_view_qihzaj on TRUE;
-- AuthorityForSpecialNavigationStationPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationstation_view cascade;
create materialized view navaids_points.authorityforspecialnavigationstation_view as
select
    navaids_points.authorityforspecialnavigationstation_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationstation_pt.nilreason::text AS authorityforspecialnavigationstation_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationstation.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationstation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_jvboiv.title as varchar), '(' || organisation_organisationauthority_pt_jvboiv.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_jvboiv.href::text AS theorganisationauthority_href,
    notes_note_view_xgasuw.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationstation_pt 
inner join navaids_points.authorityforspecialnavigationstation on navaids_points.authorityforspecialnavigationstation_pt.authorityforspecialnavigationstation_id = navaids_points.authorityforspecialnavigationstation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_jvboiv on navaids_points.authorityforspecialnavigationstation.theorganisationauthority_id = organisation_organisationauthority_pt_jvboiv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vrhufe.*) AS annotation
  from master_join master_join_kbbngd
  join notes.note_view notes_note_lat_vrhufe on master_join_kbbngd.target_id = notes_note_lat_vrhufe.id
  where master_join_kbbngd.source_id = navaids_points.authorityforspecialnavigationstation.id
) as notes_note_view_xgasuw on TRUE;
-- AuthorityForSpecialNavigationSystemPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.authorityforspecialnavigationsystem_view cascade;
create materialized view navaids_points.authorityforspecialnavigationsystem_view as
select
    navaids_points.authorityforspecialnavigationsystem_pt.id::integer as id,
    navaids_points.authorityforspecialnavigationsystem_pt.nilreason::text AS authorityforspecialnavigationsystem_nilreason,
    coalesce(cast(navaids_points.authorityforspecialnavigationsystem.type_value as varchar), '(' || navaids_points.authorityforspecialnavigationsystem.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_wzqmvq.title as varchar), '(' || organisation_organisationauthority_pt_wzqmvq.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_wzqmvq.href::text AS theorganisationauthority_href,
    notes_note_view_wqzmtb.annotation::jsonb as annotation
from navaids_points.authorityforspecialnavigationsystem_pt 
inner join navaids_points.authorityforspecialnavigationsystem on navaids_points.authorityforspecialnavigationsystem_pt.authorityforspecialnavigationsystem_id = navaids_points.authorityforspecialnavigationsystem.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_wzqmvq on navaids_points.authorityforspecialnavigationsystem.theorganisationauthority_id = organisation_organisationauthority_pt_wzqmvq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wqxcvw.*) AS annotation
  from master_join master_join_dbgsbu
  join notes.note_view notes_note_lat_wqxcvw on master_join_dbgsbu.target_id = notes_note_lat_wqxcvw.id
  where master_join_dbgsbu.source_id = navaids_points.authorityforspecialnavigationsystem.id
) as notes_note_view_wqzmtb on TRUE;
-- CallsignDetailPropertyType
-- ['notes.note_view']
drop materialized view if exists service.callsigndetail_view cascade;
create materialized view service.callsigndetail_view as
select
    service.callsigndetail_pt.id::integer as id,
    service.callsigndetail_pt.nilreason::text AS callsigndetail_nilreason,
    coalesce(cast(service.callsigndetail.callsign_value as varchar), '(' || service.callsigndetail.callsign_nilreason || ')')::text as callsign,
    coalesce(cast(service.callsigndetail.language_value as varchar), '(' || service.callsigndetail.language_nilreason || ')')::text as language,
    notes_note_view_krjyzk.annotation::jsonb as annotation
from service.callsigndetail_pt 
inner join service.callsigndetail on service.callsigndetail_pt.callsigndetail_id = service.callsigndetail.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zarjhs.*) AS annotation
  from master_join master_join_xzrfrm
  join notes.note_view notes_note_lat_zarjhs on master_join_xzrfrm.target_id = notes_note_lat_zarjhs.id
  where master_join_xzrfrm.source_id = service.callsigndetail.id
) as notes_note_view_krjyzk on TRUE;
-- CircleSectorPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.circlesector_view cascade;
create materialized view shared.circlesector_view as
select
    shared.circlesector_pt.id::integer as id,
    shared.circlesector_pt.nilreason::text AS circlesector_nilreason,
    coalesce(cast(shared.circlesector.arcdirection_value as varchar), '(' || shared.circlesector.arcdirection_nilreason || ')')::text as arcdirection,
    coalesce(cast(shared.circlesector.fromangle_value as varchar), '(' || shared.circlesector.fromangle_nilreason || ')')::text as fromangle,
    coalesce(cast(shared.circlesector.toangle_value as varchar), '(' || shared.circlesector.toangle_nilreason || ')')::text as toangle,
    coalesce(cast(shared.circlesector.angletype_value as varchar), '(' || shared.circlesector.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared.circlesector.angledirectionreference_value as varchar), '(' || shared.circlesector.angledirectionreference_nilreason || ')')::text as angledirectionreference,
    coalesce(cast(shared.circlesector.upperlimitreference_value as varchar), '(' || shared.circlesector.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.circlesector.lowerlimitreference_value as varchar), '(' || shared.circlesector.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.circlesector.innerdistance_value as varchar) || ' ' || shared.circlesector.innerdistance_uom, '(' || shared.circlesector.innerdistance_nilreason || ')')::text as innerdistance,
    coalesce(cast(shared.circlesector.outerdistance_value as varchar) || ' ' || shared.circlesector.outerdistance_uom, '(' || shared.circlesector.outerdistance_nilreason || ')')::text as outerdistance,
    coalesce(cast(shared.circlesector.upperlimit_value as varchar) || ' ' || shared.circlesector.upperlimit_uom, '(' || shared.circlesector.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.circlesector.lowerlimit_value as varchar) || ' ' || shared.circlesector.lowerlimit_uom, '(' || shared.circlesector.lowerlimit_nilreason || ')')::text as lowerlimit,
    notes_note_view_ieilnv.annotation::jsonb as annotation
from shared.circlesector_pt 
inner join shared.circlesector on shared.circlesector_pt.circlesector_id = shared.circlesector.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_movtft.*) AS annotation
  from master_join master_join_fkijxl
  join notes.note_view notes_note_lat_movtft on master_join_fkijxl.target_id = notes_note_lat_movtft.id
  where master_join_fkijxl.source_id = shared.circlesector.id
) as notes_note_view_ieilnv on TRUE;
-- CityPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.city_view cascade;
create materialized view airport_heliport.city_view as
select
    airport_heliport.city_pt.id::integer as id,
    airport_heliport.city_pt.nilreason::text AS city_nilreason,
    coalesce(cast(airport_heliport.city.name_value as varchar), '(' || airport_heliport.city.name_nilreason || ')')::text as name,
    notes_note_view_mopolp.annotation::jsonb as annotation
from airport_heliport.city_pt 
inner join airport_heliport.city on airport_heliport.city_pt.city_id = airport_heliport.city.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cywrpz.*) AS annotation
  from master_join master_join_cwquby
  join notes.note_view notes_note_lat_cywrpz on master_join_cwquby.target_id = notes_note_lat_cywrpz.id
  where master_join_cwquby.source_id = airport_heliport.city.id
) as notes_note_view_mopolp on TRUE;
-- CurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : CurvePropertyType 

DROP MATERIALIZED VIEW IF EXISTS geometry.curve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.curve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        interpolated_points.id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		nilreason
    FROM 
        geometry.curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id = segment_union.id
    GROUP BY geometry.curve_pt.id
)
SELECT 
    merged_segments.id, 
	merged_geom as geom,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.curve_view (id);
CREATE INDEX ON geometry.curve_view USING GIST (geom);
-- DepartureArrivalConditionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.departurearrivalcondition_view cascade;
create materialized view procedure.departurearrivalcondition_view as
select
    procedure.departurearrivalcondition_pt.id::integer as id,
    procedure.departurearrivalcondition_pt.nilreason::text AS departurearrivalcondition_nilreason,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatendreference_value as varchar), '(' || procedure.departurearrivalcondition.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(procedure.departurearrivalcondition.minimumenroutealtitude_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumenroutealtitude_uom, '(' || procedure.departurearrivalcondition.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(procedure.departurearrivalcondition.minimumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.minimumcrossingatend_uom, '(' || procedure.departurearrivalcondition.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(procedure.departurearrivalcondition.maximumcrossingatend_value as varchar) || ' ' || procedure.departurearrivalcondition.maximumcrossingatend_uom, '(' || procedure.departurearrivalcondition.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(shared_aircraftcharacteristic_pt_bboeyv.id)::jsonb AS enginetype,
    notes_note_view_macksi.annotation::jsonb as annotation
from procedure.departurearrivalcondition_pt 
inner join procedure.departurearrivalcondition on procedure.departurearrivalcondition_pt.departurearrivalcondition_id = procedure.departurearrivalcondition.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_bboeyv on procedure.departurearrivalcondition.engine_id = shared_aircraftcharacteristic_pt_bboeyv.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ijooty.*) AS annotation
  from master_join master_join_qxpdsf
  join notes.note_view notes_note_lat_ijooty on master_join_qxpdsf.target_id = notes_note_lat_ijooty.id
  where master_join_qxpdsf.source_id = procedure.departurearrivalcondition.id
) as notes_note_view_macksi on TRUE;
-- DirectFlightClassPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.directflightclass_view cascade;
create materialized view routes.directflightclass_view as
select
    routes.directflightclass_pt.id::integer as id,
    routes.directflightclass_pt.nilreason::text AS directflightclass_nilreason,
    coalesce(cast(routes.directflightclass.exceedlength_value as varchar) || ' ' || routes.directflightclass.exceedlength_uom, '(' || routes.directflightclass.exceedlength_nilreason || ')')::text as exceedlength,
    notes_note_view_kcnkmn.annotation::jsonb as annotation
from routes.directflightclass_pt 
inner join routes.directflightclass on routes.directflightclass_pt.directflightclass_id = routes.directflightclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fqwabg.*) AS annotation
  from master_join master_join_ciybfu
  join notes.note_view notes_note_lat_fqwabg on master_join_ciybfu.target_id = notes_note_lat_fqwabg.id
  where master_join_ciybfu.source_id = routes.directflightclass.id
) as notes_note_view_kcnkmn on TRUE;
-- ElevatedCurvePropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedCurvePropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedcurve_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedcurve_view AS
WITH 
center AS (
    SELECT 
		id, 
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 100 AS step_size
    FROM geometry.linestring_segment 
	WHERE geometry.linestring_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 100) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
        ST_MakeLine(point_geom) AS arc_geom
    FROM interpolated_points
    GROUP BY id
),
segment_union AS (
    SELECT 
		id, 
		ST_ReducePrecision(linestring,0.000000000000001) AS geom
    FROM
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 0
    UNION ALL 
    SELECT 
		id, 
		ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 1000)::geometry AS geom
    FROM 
		geometry.linestring_segment 
    WHERE 
		geometry.linestring_segment.interpretation = 1
    UNION ALL 
    SELECT 
		id, 
		ST_ReducePrecision(arc_geom, 0.000000000000001) AS geom
    FROM 
		arc_line
),
merged_segments AS (
    SELECT 
        geometry.elevated_curve_pt.id,
        ST_LineMerge(ST_Collect(segment_union.geom)) AS merged_geom,
		elevation,
		elevation_uom,
		elevation_nilreason,
		geoidundulation,
		geoidundulation_uom,
		geoidundulation_nilreason,
		horizontalaccuracy,
		horizontalaccuracy_uom,
		horizontalaccuracy_nilreason,
		verticalaccuracy,
		verticalaccuracy_uom,
		verticalaccuracy_nilreason,
		verticaldatum,
		verticaldatum_nilreason,
		nilreason
    FROM 
        geometry.elevated_curve_pt
    INNER JOIN 
		master_join_geometry ON  geometry.elevated_curve_pt.id = master_join_geometry.source_id 
    INNER JOIN 
        segment_union ON master_join_geometry.target_id  = segment_union.id
    GROUP BY geometry.elevated_curve_pt.id
)
SELECT 
    merged_segments.id,
	merged_geom as geom,
	COALESCE(merged_segments.elevation || ' ' || merged_segments.elevation_uom, '(' || merged_segments.elevation_nilreason || ')') AS elevation,
	COALESCE(merged_segments.geoidundulation || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(merged_segments.verticaldatum || ' ' || merged_segments.geoidundulation_uom, '(' || merged_segments.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(CAST(merged_segments.verticalaccuracy AS varchar), '(' || merged_segments.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(merged_segments.horizontalaccuracy || ' ' || merged_segments.horizontalaccuracy_uom, '(' || merged_segments.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM merged_segments;

CREATE INDEX ON geometry.elevatedcurve_view (id);
CREATE INDEX ON geometry.elevatedcurve_view USING GIST (geom);
-- ElevatedPointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : ElevatedPointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedpoint_view CASCADE;

CREATE MATERIALIZED VIEW geometry.elevatedpoint_view AS
SELECT 
    id, 
    point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(elevation || ' ' || elevation_uom, '(' || elevation_nilreason || ')') AS elevation,
	COALESCE(geoidundulation || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(verticaldatum || ' ' || geoidundulation_uom, '(' || geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(verticalaccuracy || ' ' || horizontalaccuracy_uom, '(' || verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.elevated_point_pt;

CREATE INDEX ON geometry.elevatedpoint_view (id);
CREATE INDEX ON geometry.elevatedpoint_view USING GIST (geom);
-- ElevatedSurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : ElevatedSurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_elevatedsurface_view CASCADE;
CREATE MATERIALIZED VIEW partial_elevatedsurface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.elevated_surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.elevated_surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.elevated_surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_elevatedsurface_view (surf_id);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (geom);
CREATE INDEX ON partial_elevatedsurface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.elevatedsurface_view CASCADE;
-- -- R1 : Simple feature, closed
-- -- R2 : Simple feature, unclosed
-- -- G1 : Complex feature wiht a single geoborder, 
-- -- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.elevatedsurface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count = 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_elevatedsurface_view geoborder
	JOIN
		partial_elevatedsurface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_elevatedsurface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_elevatedsurface_view.surf_id, 
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.increment,
		partial_elevatedsurface_view.interpretation,
		partial_elevatedsurface_view.total_count,
		partial_elevatedsurface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_elevatedsurface_view
	WHERE 
		partial_elevatedsurface_view.total_count > 2 
		AND
		partial_elevatedsurface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		partial_elevatedsurface_view.geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = true
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_elevatedsurface_view.surf_id,
		partial_elevatedsurface_view.seg_id,
		partial_elevatedsurface_view.part,
		ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom)) AS geom
	FROM
		partial_elevatedsurface_view
	WHERE
		ST_IsClosed(partial_elevatedsurface_view.geom) = false
		AND 
		partial_elevatedsurface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_elevatedsurface_view.geom, ST_StartPoint(partial_elevatedsurface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.elevated_surface_pt.elevation || ' ' || geometry.elevated_surface_pt.elevation_uom, '(' || geometry.elevated_surface_pt.elevation_nilreason || ')') AS elevation,
	COALESCE(geometry.elevated_surface_pt.geoidundulation || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS geoidUndulation,
	COALESCE(geometry.elevated_surface_pt.verticaldatum || ' ' || geometry.elevated_surface_pt.geoidundulation_uom, '(' || geometry.elevated_surface_pt.geoidundulation_nilreason || ')') AS verticalDatum,
	COALESCE(geometry.elevated_surface_pt.verticalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.verticaldatum_nilreason || ')') AS verticalAccuracy,
	COALESCE(geometry.elevated_surface_pt.horizontalaccuracy || ' ' || geometry.elevated_surface_pt.horizontalaccuracy_uom, '(' || geometry.elevated_surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.elevated_surface_pt ON outer_shells.surf_id = geometry.elevated_surface_pt.id;

CREATE INDEX ON geometry.elevatedsurface_view (id);
CREATE INDEX ON geometry.elevatedsurface_view USING GIST (geom);

-- EquipmentUnavailableAdjustmentColumnPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustmentcolumn_view cascade;
create materialized view procedure.equipmentunavailableadjustmentcolumn_view as
select
    procedure.equipmentunavailableadjustmentcolumn_pt.id::integer as id,
    procedure.equipmentunavailableadjustmentcolumn_pt.nilreason::text AS equipmentunavailableadjustmentcolumn_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.guidanceequipment_nilreason || ')')::text as guidanceequipment,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.landingsystemlights_nilreason || ')')::text as landingsystemlights,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.equipmentrvr_nilreason || ')')::text as equipmentrvr,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustmentcolumn.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    coalesce(cast(procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_value as varchar) || ' ' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_uom, '(' || procedure.equipmentunavailableadjustmentcolumn.visibilityadjustment_nilreason || ')')::text as visibilityadjustment,
    notes_note_view_ebucwg.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustmentcolumn_pt 
inner join procedure.equipmentunavailableadjustmentcolumn on procedure.equipmentunavailableadjustmentcolumn_pt.equipmentunavailableadjustmentcolumn_id = procedure.equipmentunavailableadjustmentcolumn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_etpcqm.*) AS annotation
  from master_join master_join_jvrvar
  join notes.note_view notes_note_lat_etpcqm on master_join_jvrvar.target_id = notes_note_lat_etpcqm.id
  where master_join_jvrvar.source_id = procedure.equipmentunavailableadjustmentcolumn.id
) as notes_note_view_ebucwg on TRUE;
-- EquipmentUnavailableAdjustmentPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.equipmentunavailableadjustment_view cascade;
create materialized view procedure.equipmentunavailableadjustment_view as
select
    procedure.equipmentunavailableadjustment_pt.id::integer as id,
    procedure.equipmentunavailableadjustment_pt.nilreason::text AS equipmentunavailableadjustment_nilreason,
    coalesce(cast(procedure.equipmentunavailableadjustment.type_value as varchar), '(' || procedure.equipmentunavailableadjustment.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.equipmentunavailableadjustment.approachlightinginoperative_value as varchar), '(' || procedure.equipmentunavailableadjustment.approachlightinginoperative_nilreason || ')')::text as approachlightinginoperative,
    procedure_equipmentunavailableadjustmentcolumn_pt_djqffe.adjustmentinopcol::jsonb as adjustmentinopcol,
    notes_note_view_ljykll.annotation::jsonb as annotation
from procedure.equipmentunavailableadjustment_pt 
inner join procedure.equipmentunavailableadjustment on procedure.equipmentunavailableadjustment_pt.equipmentunavailableadjustment_id = procedure.equipmentunavailableadjustment.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustmentcolumn_lat_pllqwy.id) as adjustmentinopcol
  from master_join master_join_avqfal
  join procedure.equipmentunavailableadjustmentcolumn_pt procedure_equipmentunavailableadjustmentcolumn_lat_pllqwy on master_join_avqfal.target_id = procedure_equipmentunavailableadjustmentcolumn_lat_pllqwy.id
  where master_join_avqfal.source_id = procedure.equipmentunavailableadjustment.id
) as procedure_equipmentunavailableadjustmentcolumn_pt_djqffe on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zafpzx.*) AS annotation
  from master_join master_join_zaradf
  join notes.note_view notes_note_lat_zafpzx on master_join_zaradf.target_id = notes_note_lat_zafpzx.id
  where master_join_zaradf.source_id = procedure.equipmentunavailableadjustment.id
) as notes_note_view_ljykll on TRUE;
-- FASDataBlockPropertyType
-- ['notes.note_view']
drop materialized view if exists public.fasdatablock_view cascade;
create materialized view public.fasdatablock_view as
select
    public.fasdatablock_pt.id::integer as id,
    public.fasdatablock_pt.nilreason::text AS fasdatablock_nilreason,
    coalesce(cast(public.fasdatablock.horizontalalarmlimit_value as varchar), '(' || public.fasdatablock.horizontalalarmlimit_nilreason || ')')::text as horizontalalarmlimit,
    coalesce(cast(public.fasdatablock.verticalalarmlimit_value as varchar), '(' || public.fasdatablock.verticalalarmlimit_nilreason || ')')::text as verticalalarmlimit,
    coalesce(cast(public.fasdatablock.crcremainder_value as varchar), '(' || public.fasdatablock.crcremainder_nilreason || ')')::text as crcremainder,
    coalesce(cast(public.fasdatablock.operationtype_value as varchar), '(' || public.fasdatablock.operationtype_nilreason || ')')::text as operationtype,
    coalesce(cast(public.fasdatablock.serviceprovidersbas_value as varchar), '(' || public.fasdatablock.serviceprovidersbas_nilreason || ')')::text as serviceprovidersbas,
    coalesce(cast(public.fasdatablock.approachperformancedesignator_value as varchar), '(' || public.fasdatablock.approachperformancedesignator_nilreason || ')')::text as approachperformancedesignator,
    coalesce(cast(public.fasdatablock.referencepathdataselector_value as varchar), '(' || public.fasdatablock.referencepathdataselector_nilreason || ')')::text as referencepathdataselector,
    coalesce(cast(public.fasdatablock.thresholdcoursewidth_value as varchar) || ' ' || public.fasdatablock.thresholdcoursewidth_uom, '(' || public.fasdatablock.thresholdcoursewidth_nilreason || ')')::text as thresholdcoursewidth,
    coalesce(cast(public.fasdatablock.lengthoffset_value as varchar) || ' ' || public.fasdatablock.lengthoffset_uom, '(' || public.fasdatablock.lengthoffset_nilreason || ')')::text as lengthoffset,
    notes_note_view_ftzghb.annotation::jsonb as annotation
from public.fasdatablock_pt 
inner join public.fasdatablock on public.fasdatablock_pt.fasdatablock_id = public.fasdatablock.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utwzkz.*) AS annotation
  from master_join master_join_vrgrec
  join notes.note_view notes_note_lat_utwzkz on master_join_vrgrec.target_id = notes_note_lat_utwzkz.id
  where master_join_vrgrec.source_id = public.fasdatablock.id
) as notes_note_view_ftzghb on TRUE;
-- FinalProfilePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.finalprofile_view cascade;
create materialized view procedure.finalprofile_view as
select
    procedure.finalprofile_pt.id::integer as id,
    procedure.finalprofile_pt.nilreason::text AS finalprofile_nilreason,
    procedure_approachaltitudetable_pt_tyxzal.altitude::jsonb as altitude,
    procedure_approachdistancetable_pt_jhvvun.distance::jsonb as distance,
    procedure_approachtimingtable_pt_fosyvo.timing::jsonb as timing,
    notes_note_view_ckcpbt.annotation::jsonb as annotation
from procedure.finalprofile_pt 
inner join procedure.finalprofile on procedure.finalprofile_pt.finalprofile_id = procedure.finalprofile.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachaltitudetable_lat_hauwfo.id) as altitude
  from master_join master_join_wcnogx
  join procedure.approachaltitudetable_pt procedure_approachaltitudetable_lat_hauwfo on master_join_wcnogx.target_id = procedure_approachaltitudetable_lat_hauwfo.id
  where master_join_wcnogx.source_id = procedure.finalprofile.id
) as procedure_approachaltitudetable_pt_tyxzal on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachdistancetable_lat_pgneee.id) as distance
  from master_join master_join_qjklwe
  join procedure.approachdistancetable_pt procedure_approachdistancetable_lat_pgneee on master_join_qjklwe.target_id = procedure_approachdistancetable_lat_pgneee.id
  where master_join_qjklwe.source_id = procedure.finalprofile.id
) as procedure_approachdistancetable_pt_jhvvun on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachtimingtable_lat_cfxshn.id) as timing
  from master_join master_join_uqiyun
  join procedure.approachtimingtable_pt procedure_approachtimingtable_lat_cfxshn on master_join_uqiyun.target_id = procedure_approachtimingtable_lat_cfxshn.id
  where master_join_uqiyun.source_id = procedure.finalprofile.id
) as procedure_approachtimingtable_pt_fosyvo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tbczma.*) AS annotation
  from master_join master_join_jlhcoz
  join notes.note_view notes_note_lat_tbczma on master_join_jlhcoz.target_id = notes_note_lat_tbczma.id
  where master_join_jlhcoz.source_id = procedure.finalprofile.id
) as notes_note_view_ckcpbt on TRUE;
-- FlightCharacteristicPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.flightcharacteristic_view cascade;
create materialized view shared.flightcharacteristic_view as
select
    shared.flightcharacteristic_pt.id::integer as id,
    shared.flightcharacteristic_pt.nilreason::text AS flightcharacteristic_nilreason,
    coalesce(cast(shared.flightcharacteristic.type_value as varchar), '(' || shared.flightcharacteristic.type_nilreason || ')')::text as type,
    coalesce(cast(shared.flightcharacteristic.rule_value as varchar), '(' || shared.flightcharacteristic.rule_nilreason || ')')::text as rule,
    coalesce(cast(shared.flightcharacteristic.status_value as varchar), '(' || shared.flightcharacteristic.status_nilreason || ')')::text as status,
    coalesce(cast(shared.flightcharacteristic.military_value as varchar), '(' || shared.flightcharacteristic.military_nilreason || ')')::text as military,
    coalesce(cast(shared.flightcharacteristic.origin_value as varchar), '(' || shared.flightcharacteristic.origin_nilreason || ')')::text as origin,
    coalesce(cast(shared.flightcharacteristic.purpose_value as varchar), '(' || shared.flightcharacteristic.purpose_nilreason || ')')::text as purpose,
    notes_note_view_dyelzg.annotation::jsonb as annotation
from shared.flightcharacteristic_pt 
inner join shared.flightcharacteristic on shared.flightcharacteristic_pt.flightcharacteristic_id = shared.flightcharacteristic.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nbalzf.*) AS annotation
  from master_join master_join_mfuzyf
  join notes.note_view notes_note_lat_nbalzf on master_join_mfuzyf.target_id = notes_note_lat_nbalzf.id
  where master_join_mfuzyf.source_id = shared.flightcharacteristic.id
) as notes_note_view_dyelzg on TRUE;
-- FlightConditionCircumstancePropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightconditioncircumstance_view cascade;
create materialized view routes.flightconditioncircumstance_view as
select
    routes.flightconditioncircumstance_pt.id::integer as id,
    routes.flightconditioncircumstance_pt.nilreason::text AS flightconditioncircumstance_nilreason,
    coalesce(cast(routes.flightconditioncircumstance.referencelocation_value as varchar), '(' || routes.flightconditioncircumstance.referencelocation_nilreason || ')')::text as referencelocation,
    coalesce(cast(routes.flightconditioncircumstance.relationwithlocation_value as varchar), '(' || routes.flightconditioncircumstance.relationwithlocation_nilreason || ')')::text as relationwithlocation,
    notes_note_view_ydzdea.annotation::jsonb as annotation
from routes.flightconditioncircumstance_pt 
inner join routes.flightconditioncircumstance on routes.flightconditioncircumstance_pt.flightconditioncircumstance_id = routes.flightconditioncircumstance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_thxpip.*) AS annotation
  from master_join master_join_yrdgds
  join notes.note_view notes_note_lat_thxpip on master_join_yrdgds.target_id = notes_note_lat_thxpip.id
  where master_join_yrdgds.source_id = routes.flightconditioncircumstance.id
) as notes_note_view_ydzdea on TRUE;
-- FlightRestrictionLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists routes.flightrestrictionlevel_view cascade;
create materialized view routes.flightrestrictionlevel_view as
select
    routes.flightrestrictionlevel_pt.id::integer as id,
    routes.flightrestrictionlevel_pt.nilreason::text AS flightrestrictionlevel_nilreason,
    coalesce(cast(routes.flightrestrictionlevel.upperlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.upperlevelreference_nilreason || ')')::text as upperlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevelreference_value as varchar), '(' || routes.flightrestrictionlevel.lowerlevelreference_nilreason || ')')::text as lowerlevelreference,
    coalesce(cast(routes.flightrestrictionlevel.upperlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.upperlevel_uom, '(' || routes.flightrestrictionlevel.upperlevel_nilreason || ')')::text as upperlevel,
    coalesce(cast(routes.flightrestrictionlevel.lowerlevel_value as varchar) || ' ' || routes.flightrestrictionlevel.lowerlevel_uom, '(' || routes.flightrestrictionlevel.lowerlevel_nilreason || ')')::text as lowerlevel,
    notes_note_view_slapek.annotation::jsonb as annotation
from routes.flightrestrictionlevel_pt 
inner join routes.flightrestrictionlevel on routes.flightrestrictionlevel_pt.flightrestrictionlevel_id = routes.flightrestrictionlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rdykei.*) AS annotation
  from master_join master_join_aaqctk
  join notes.note_view notes_note_lat_rdykei on master_join_aaqctk.target_id = notes_note_lat_rdykei.id
  where master_join_aaqctk.source_id = routes.flightrestrictionlevel.id
) as notes_note_view_slapek on TRUE;
-- FuelPropertyType
-- ['notes.note_view']
drop materialized view if exists service.fuel_view cascade;
create materialized view service.fuel_view as
select
    service.fuel_pt.id::integer as id,
    service.fuel_pt.nilreason::text AS fuel_nilreason,
    coalesce(cast(service.fuel.category_value as varchar), '(' || service.fuel.category_nilreason || ')')::text as category,
    notes_note_view_seqrdj.annotation::jsonb as annotation
from service.fuel_pt 
inner join service.fuel on service.fuel_pt.fuel_id = service.fuel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jiavki.*) AS annotation
  from master_join master_join_whxamt
  join notes.note_view notes_note_lat_jiavki on master_join_whxamt.target_id = notes_note_lat_jiavki.id
  where master_join_whxamt.source_id = service.fuel.id
) as notes_note_view_seqrdj on TRUE;
-- HoldingPatternDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatterndistance_view cascade;
create materialized view holding.holdingpatterndistance_view as
select
    holding.holdingpatterndistance_pt.id::integer as id,
    holding.holdingpatterndistance_pt.nilreason::text AS holdingpatterndistance_nilreason,
    coalesce(cast(holding.holdingpatterndistance.length_value as varchar) || ' ' || holding.holdingpatterndistance.length_uom, '(' || holding.holdingpatterndistance.length_nilreason || ')')::text as length,
    notes_note_view_ebpovr.annotation::jsonb as annotation
from holding.holdingpatterndistance_pt 
inner join holding.holdingpatterndistance on holding.holdingpatterndistance_pt.holdingpatterndistance_id = holding.holdingpatterndistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wmvghb.*) AS annotation
  from master_join master_join_fuevak
  join notes.note_view notes_note_lat_wmvghb on master_join_fuevak.target_id = notes_note_lat_wmvghb.id
  where master_join_fuevak.source_id = holding.holdingpatterndistance.id
) as notes_note_view_ebpovr on TRUE;
-- HoldingPatternDurationPropertyType
-- ['notes.note_view']
drop materialized view if exists holding.holdingpatternduration_view cascade;
create materialized view holding.holdingpatternduration_view as
select
    holding.holdingpatternduration_pt.id::integer as id,
    holding.holdingpatternduration_pt.nilreason::text AS holdingpatternduration_nilreason,
    coalesce(cast(holding.holdingpatternduration.duration_value as varchar) || ' ' || holding.holdingpatternduration.duration_uom, '(' || holding.holdingpatternduration.duration_nilreason || ')')::text as duration,
    notes_note_view_dkuxqp.annotation::jsonb as annotation
from holding.holdingpatternduration_pt 
inner join holding.holdingpatternduration on holding.holdingpatternduration_pt.holdingpatternduration_id = holding.holdingpatternduration.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dobbll.*) AS annotation
  from master_join master_join_qixbce
  join notes.note_view notes_note_lat_dobbll on master_join_qixbce.target_id = notes_note_lat_dobbll.id
  where master_join_qixbce.source_id = holding.holdingpatternduration.id
) as notes_note_view_dkuxqp on TRUE;
-- HoldingUsePropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.holdinguse_view cascade;
create materialized view procedure.holdinguse_view as
select
    procedure.holdinguse_pt.id::integer as id,
    procedure.holdinguse_pt.nilreason::text AS holdinguse_nilreason,
    coalesce(cast(procedure.holdinguse.holdinguse_value as varchar), '(' || procedure.holdinguse.holdinguse_nilreason || ')')::text as holdinguse,
    coalesce(cast(procedure.holdinguse.instruction_value as varchar), '(' || procedure.holdinguse.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.holdinguse.instructionaltitudereference_value as varchar), '(' || procedure.holdinguse.instructionaltitudereference_nilreason || ')')::text as instructionaltitudereference,
    coalesce(cast(procedure.holdinguse.instructedaltitude_value as varchar) || ' ' || procedure.holdinguse.instructedaltitude_uom, '(' || procedure.holdinguse.instructedaltitude_nilreason || ')')::text as instructedaltitude,
    coalesce(cast(holding_holdingpattern_pt_qduacc.title as varchar), '(' || holding_holdingpattern_pt_qduacc.nilreason[1] || ')')::text AS theholdingpattern,
    holding_holdingpattern_pt_qduacc.href::text AS theholdingpattern_href,
    notes_note_view_rybsmq.annotation::jsonb as annotation
from procedure.holdinguse_pt 
inner join procedure.holdinguse on procedure.holdinguse_pt.holdinguse_id = procedure.holdinguse.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_qduacc on procedure.holdinguse.theholdingpattern_id = holding_holdingpattern_pt_qduacc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rdlxns.*) AS annotation
  from master_join master_join_aynwqd
  join notes.note_view notes_note_lat_rdlxns on master_join_aynwqd.target_id = notes_note_lat_rdlxns.id
  where master_join_aynwqd.source_id = procedure.holdinguse.id
) as notes_note_view_rybsmq on TRUE;
-- LandingTakeoffAreaCollectionPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.landingtakeoffareacollection_view cascade;
create materialized view procedure.landingtakeoffareacollection_view as
select
    procedure.landingtakeoffareacollection_pt.id::integer as id,
    procedure.landingtakeoffareacollection_pt.nilreason::text AS landingtakeoffareacollection_nilreason,
    airport_heliport_runwaydirection_pt_yejael.runway::jsonb as runway,
    airport_heliport_touchdownliftoff_pt_iniwxv.tlof::jsonb as tlof,
    notes_note_view_sqyytm.annotation::jsonb as annotation
from procedure.landingtakeoffareacollection_pt 
inner join procedure.landingtakeoffareacollection on procedure.landingtakeoffareacollection_pt.landingtakeoffareacollection_id = procedure.landingtakeoffareacollection.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_kvrhrg.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_kvrhrg.title AS varchar), '(' || airport_heliport_runwaydirection_lat_kvrhrg.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_kvrhrg.href
  )) as runway  from master_join master_join_yacznk
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_kvrhrg on master_join_yacznk.target_id = airport_heliport_runwaydirection_lat_kvrhrg.id
  where master_join_yacznk.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_runwaydirection_pt_yejael on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_hqrvka.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_hqrvka.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_hqrvka.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_hqrvka.href
  )) as tlof  from master_join master_join_kjcngx
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_hqrvka on master_join_kjcngx.target_id = airport_heliport_touchdownliftoff_lat_hqrvka.id
  where master_join_kjcngx.source_id = procedure.landingtakeoffareacollection.id
) as airport_heliport_touchdownliftoff_pt_iniwxv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbzesw.*) AS annotation
  from master_join master_join_sacvmx
  join notes.note_view notes_note_lat_vbzesw on master_join_sacvmx.target_id = notes_note_lat_vbzesw.id
  where master_join_sacvmx.source_id = procedure.landingtakeoffareacollection.id
) as notes_note_view_sqyytm on TRUE;
-- LightActivationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.lightactivation_view cascade;
create materialized view airport_heliport.lightactivation_view as
select
    airport_heliport.lightactivation_pt.id::integer as id,
    airport_heliport.lightactivation_pt.nilreason::text AS lightactivation_nilreason,
    coalesce(cast(airport_heliport.lightactivation.clicks_value as varchar), '(' || airport_heliport.lightactivation.clicks_nilreason || ')')::text as clicks,
    coalesce(cast(airport_heliport.lightactivation.intensitylevel_value as varchar), '(' || airport_heliport.lightactivation.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.lightactivation.activation_value as varchar), '(' || airport_heliport.lightactivation.activation_nilreason || ')')::text as activation,
    notes_note_view_luwbrp.annotation::jsonb as annotation
from airport_heliport.lightactivation_pt 
inner join airport_heliport.lightactivation on airport_heliport.lightactivation_pt.lightactivation_id = airport_heliport.lightactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jeswma.*) AS annotation
  from master_join master_join_srtgso
  join notes.note_view notes_note_lat_jeswma on master_join_srtgso.target_id = notes_note_lat_jeswma.id
  where master_join_srtgso.source_id = airport_heliport.lightactivation.id
) as notes_note_view_luwbrp on TRUE;
-- MeteorologyPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.meteorology_view cascade;
create materialized view shared.meteorology_view as
select
    shared.meteorology_pt.id::integer as id,
    shared.meteorology_pt.nilreason::text AS meteorology_nilreason,
    coalesce(cast(shared.meteorology.flightconditions_value as varchar), '(' || shared.meteorology.flightconditions_nilreason || ')')::text as flightconditions,
    coalesce(cast(shared.meteorology.visibilityinterpretation_value as varchar), '(' || shared.meteorology.visibilityinterpretation_nilreason || ')')::text as visibilityinterpretation,
    coalesce(cast(shared.meteorology.runwayvisualrangeinterpretation_value as varchar), '(' || shared.meteorology.runwayvisualrangeinterpretation_nilreason || ')')::text as runwayvisualrangeinterpretation,
    coalesce(cast(shared.meteorology.visibility_value as varchar) || ' ' || shared.meteorology.visibility_uom, '(' || shared.meteorology.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(shared.meteorology.runwayvisualrange_value as varchar) || ' ' || shared.meteorology.runwayvisualrange_uom, '(' || shared.meteorology.runwayvisualrange_nilreason || ')')::text as runwayvisualrange,
    notes_note_view_jkwryj.annotation::jsonb as annotation
from shared.meteorology_pt 
inner join shared.meteorology on shared.meteorology_pt.meteorology_id = shared.meteorology.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ftczzv.*) AS annotation
  from master_join master_join_llwtdm
  join notes.note_view notes_note_lat_ftczzv on master_join_llwtdm.target_id = notes_note_lat_ftczzv.id
  where master_join_llwtdm.source_id = shared.meteorology.id
) as notes_note_view_jkwryj on TRUE;
-- MinimaPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.minima_view cascade;
create materialized view procedure.minima_view as
select
    procedure.minima_pt.id::integer as id,
    procedure.minima_pt.nilreason::text AS minima_nilreason,
    coalesce(cast(procedure.minima.altitudecode_value as varchar), '(' || procedure.minima.altitudecode_nilreason || ')')::text as altitudecode,
    coalesce(cast(procedure.minima.altitudereference_value as varchar), '(' || procedure.minima.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(procedure.minima.heightcode_value as varchar), '(' || procedure.minima.heightcode_nilreason || ')')::text as heightcode,
    coalesce(cast(procedure.minima.heightreference_value as varchar), '(' || procedure.minima.heightreference_nilreason || ')')::text as heightreference,
    coalesce(cast(procedure.minima.mandatoryrvr_value as varchar), '(' || procedure.minima.mandatoryrvr_nilreason || ')')::text as mandatoryrvr,
    coalesce(cast(procedure.minima.remotealtimeterminima_value as varchar), '(' || procedure.minima.remotealtimeterminima_nilreason || ')')::text as remotealtimeterminima,
    coalesce(cast(procedure.minima.altitude_value as varchar) || ' ' || procedure.minima.altitude_uom, '(' || procedure.minima.altitude_nilreason || ')')::text as altitude,
    coalesce(cast(procedure.minima.height_value as varchar) || ' ' || procedure.minima.height_uom, '(' || procedure.minima.height_nilreason || ')')::text as height,
    coalesce(cast(procedure.minima.militaryheight_value as varchar) || ' ' || procedure.minima.militaryheight_uom, '(' || procedure.minima.militaryheight_nilreason || ')')::text as militaryheight,
    coalesce(cast(procedure.minima.radioheight_value as varchar) || ' ' || procedure.minima.radioheight_uom, '(' || procedure.minima.radioheight_nilreason || ')')::text as radioheight,
    coalesce(cast(procedure.minima.visibility_value as varchar) || ' ' || procedure.minima.visibility_uom, '(' || procedure.minima.visibility_nilreason || ')')::text as visibility,
    coalesce(cast(procedure.minima.militaryvisibility_value as varchar) || ' ' || procedure.minima.militaryvisibility_uom, '(' || procedure.minima.militaryvisibility_nilreason || ')')::text as militaryvisibility,
    procedure_equipmentunavailableadjustment_pt_owchdm.adjustmentinop::jsonb as adjustmentinop,
    notes_note_view_krdegn.annotation::jsonb as annotation
from procedure.minima_pt 
inner join procedure.minima on procedure.minima_pt.minima_id = procedure.minima.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_equipmentunavailableadjustment_lat_vjdlwv.id) as adjustmentinop
  from master_join master_join_qkysme
  join procedure.equipmentunavailableadjustment_pt procedure_equipmentunavailableadjustment_lat_vjdlwv on master_join_qkysme.target_id = procedure_equipmentunavailableadjustment_lat_vjdlwv.id
  where master_join_qkysme.source_id = procedure.minima.id
) as procedure_equipmentunavailableadjustment_pt_owchdm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyguyx.*) AS annotation
  from master_join master_join_yqlcst
  join notes.note_view notes_note_lat_pyguyx on master_join_yqlcst.target_id = notes_note_lat_pyguyx.id
  where master_join_yqlcst.source_id = procedure.minima.id
) as notes_note_view_krdegn on TRUE;
-- MissedApproachGroupPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.missedapproachgroup_view cascade;
create materialized view procedure.missedapproachgroup_view as
select
    procedure.missedapproachgroup_pt.id::integer as id,
    procedure.missedapproachgroup_pt.nilreason::text AS missedapproachgroup_nilreason,
    coalesce(cast(procedure.missedapproachgroup.instruction_value as varchar), '(' || procedure.missedapproachgroup.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbinstruction_value as varchar), '(' || procedure.missedapproachgroup.alternateclimbinstruction_nilreason || ')')::text as alternateclimbinstruction,
    coalesce(cast(procedure.missedapproachgroup.alternateclimbaltitude_value as varchar) || ' ' || procedure.missedapproachgroup.alternateclimbaltitude_uom, '(' || procedure.missedapproachgroup.alternateclimbaltitude_nilreason || ')')::text as alternateclimbaltitude,
    airport_heliport_altimetersource_pt_blstvo.altimeter::jsonb as altimeter,
    notes_note_view_hwkiky.annotation::jsonb as annotation
from procedure.missedapproachgroup_pt 
inner join procedure.missedapproachgroup on procedure.missedapproachgroup_pt.missedapproachgroup_id = procedure.missedapproachgroup.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_vnplbc.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_vnplbc.title AS varchar), '(' || airport_heliport_altimetersource_lat_vnplbc.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_vnplbc.href
  )) as altimeter  from master_join master_join_gpylkq
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_vnplbc on master_join_gpylkq.target_id = airport_heliport_altimetersource_lat_vnplbc.id
  where master_join_gpylkq.source_id = procedure.missedapproachgroup.id
) as airport_heliport_altimetersource_pt_blstvo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_syvlqj.*) AS annotation
  from master_join master_join_ikjzzb
  join notes.note_view notes_note_lat_syvlqj on master_join_ikjzzb.target_id = notes_note_lat_syvlqj.id
  where master_join_ikjzzb.source_id = procedure.missedapproachgroup.id
) as notes_note_view_hwkiky on TRUE;
-- NavaidComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists navaids_points.navaidcomponent_view cascade;
create materialized view navaids_points.navaidcomponent_view as
select
    navaids_points.navaidcomponent_pt.id::integer as id,
    navaids_points.navaidcomponent_pt.nilreason::text AS navaidcomponent_nilreason,
    coalesce(cast(navaids_points.navaidcomponent.collocationgroup_value as varchar), '(' || navaids_points.navaidcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    coalesce(cast(navaids_points.navaidcomponent.markerposition_value as varchar), '(' || navaids_points.navaidcomponent.markerposition_nilreason || ')')::text as markerposition,
    coalesce(cast(navaids_points.navaidcomponent.providesnavigablelocation_value as varchar), '(' || navaids_points.navaidcomponent.providesnavigablelocation_nilreason || ')')::text as providesnavigablelocation,
    notes_note_view_zvvrrv.annotation::jsonb as annotation
from navaids_points.navaidcomponent_pt 
inner join navaids_points.navaidcomponent on navaids_points.navaidcomponent_pt.navaidcomponent_id = navaids_points.navaidcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kduosx.*) AS annotation
  from master_join master_join_begmfm
  join notes.note_view notes_note_lat_kduosx on master_join_begmfm.target_id = notes_note_lat_kduosx.id
  where master_join_begmfm.source_id = navaids_points.navaidcomponent.id
) as notes_note_view_zvvrrv on TRUE;
-- NavaidEquipmentDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.navaidequipmentdistance_view cascade;
create materialized view airport_heliport.navaidequipmentdistance_view as
select
    airport_heliport.navaidequipmentdistance_pt.id::integer as id,
    airport_heliport.navaidequipmentdistance_pt.nilreason::text AS navaidequipmentdistance_nilreason,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distance_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distance_uom, '(' || airport_heliport.navaidequipmentdistance.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.navaidequipmentdistance.distanceaccuracy_value as varchar) || ' ' || airport_heliport.navaidequipmentdistance.distanceaccuracy_uom, '(' || airport_heliport.navaidequipmentdistance.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    notes_note_view_buczdp.annotation::jsonb as annotation
from airport_heliport.navaidequipmentdistance_pt 
inner join airport_heliport.navaidequipmentdistance on airport_heliport.navaidequipmentdistance_pt.navaidequipmentdistance_id = airport_heliport.navaidequipmentdistance.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ycupcw.*) AS annotation
  from master_join master_join_klbars
  join notes.note_view notes_note_lat_ycupcw on master_join_klbars.target_id = notes_note_lat_ycupcw.id
  where master_join_klbars.source_id = airport_heliport.navaidequipmentdistance.id
) as notes_note_view_buczdp on TRUE;
-- NitrogenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.nitrogen_view cascade;
create materialized view service.nitrogen_view as
select
    service.nitrogen_pt.id::integer as id,
    service.nitrogen_pt.nilreason::text AS nitrogen_nilreason,
    coalesce(cast(service.nitrogen.type_value as varchar), '(' || service.nitrogen.type_nilreason || ')')::text as type,
    notes_note_view_erdyzt.annotation::jsonb as annotation
from service.nitrogen_pt 
inner join service.nitrogen on service.nitrogen_pt.nitrogen_id = service.nitrogen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fdeauh.*) AS annotation
  from master_join master_join_dcajxv
  join notes.note_view notes_note_lat_fdeauh on master_join_dcajxv.target_id = notes_note_lat_fdeauh.id
  where master_join_dcajxv.source_id = service.nitrogen.id
) as notes_note_view_erdyzt on TRUE;
-- ObstaclePlacementPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstacleplacement_view cascade;
create materialized view shared.obstacleplacement_view as
select
    shared.obstacleplacement_pt.id::integer as id,
    shared.obstacleplacement_pt.nilreason::text AS obstacleplacement_nilreason,
    coalesce(cast(shared.obstacleplacement.obstaclebearing_value as varchar), '(' || shared.obstacleplacement.obstaclebearing_nilreason || ')')::text as obstaclebearing,
    coalesce(cast(shared.obstacleplacement.pointtype_value as varchar), '(' || shared.obstacleplacement.pointtype_nilreason || ')')::text as pointtype,
    coalesce(cast(shared.obstacleplacement.obstacleplacement_value as varchar), '(' || shared.obstacleplacement.obstacleplacement_nilreason || ')')::text as obstacleplacement,
    coalesce(cast(shared.obstacleplacement.obstacledistance_value as varchar) || ' ' || shared.obstacleplacement.obstacledistance_uom, '(' || shared.obstacleplacement.obstacledistance_nilreason || ')')::text as obstacledistance,
    notes_note_view_uljiuk.annotation::jsonb as annotation
from shared.obstacleplacement_pt 
inner join shared.obstacleplacement on shared.obstacleplacement_pt.obstacleplacement_id = shared.obstacleplacement.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ysiprl.*) AS annotation
  from master_join master_join_ntpytr
  join notes.note_view notes_note_lat_ysiprl on master_join_ntpytr.target_id = notes_note_lat_ysiprl.id
  where master_join_ntpytr.source_id = shared.obstacleplacement.id
) as notes_note_view_uljiuk on TRUE;
-- ObstructionPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.obstruction_view cascade;
create materialized view shared.obstruction_view as
select
    shared.obstruction_pt.id::integer as id,
    shared.obstruction_pt.nilreason::text AS obstruction_nilreason,
    coalesce(cast(shared.obstruction.surfacepenetration_value as varchar), '(' || shared.obstruction.surfacepenetration_nilreason || ')')::text as surfacepenetration,
    coalesce(cast(shared.obstruction.slopepenetration_value as varchar), '(' || shared.obstruction.slopepenetration_nilreason || ')')::text as slopepenetration,
    coalesce(cast(shared.obstruction.controlling_value as varchar), '(' || shared.obstruction.controlling_nilreason || ')')::text as controlling,
    coalesce(cast(shared.obstruction.closein_value as varchar), '(' || shared.obstruction.closein_nilreason || ')')::text as closein,
    coalesce(cast(shared.obstruction.requiredclearance_value as varchar) || ' ' || shared.obstruction.requiredclearance_uom, '(' || shared.obstruction.requiredclearance_nilreason || ')')::text as requiredclearance,
    coalesce(cast(shared.obstruction.minimumaltitude_value as varchar) || ' ' || shared.obstruction.minimumaltitude_uom, '(' || shared.obstruction.minimumaltitude_nilreason || ')')::text as minimumaltitude,
    coalesce(cast(obstacles_verticalstructure_pt_xugstr.title as varchar), '(' || obstacles_verticalstructure_pt_xugstr.nilreason[1] || ')')::text AS theverticalstructure,
    obstacles_verticalstructure_pt_xugstr.href::text AS theverticalstructure_href,
    shared_altitudeadjustment_pt_ilzblx.adjustment::jsonb as adjustment,
    shared_obstacleplacement_pt_gruujb.obstacleplacement::jsonb as obstacleplacement,
    notes_note_view_blrkxk.annotation::jsonb as annotation
from shared.obstruction_pt 
inner join shared.obstruction on shared.obstruction_pt.obstruction_id = shared.obstruction.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_xugstr on shared.obstruction.theverticalstructure_id = obstacles_verticalstructure_pt_xugstr.id
left join lateral(
  select jsonb_agg(DISTINCT shared_altitudeadjustment_lat_gpymod.id) as adjustment
  from master_join master_join_rivyvj
  join shared.altitudeadjustment_pt shared_altitudeadjustment_lat_gpymod on master_join_rivyvj.target_id = shared_altitudeadjustment_lat_gpymod.id
  where master_join_rivyvj.source_id = shared.obstruction.id
) as shared_altitudeadjustment_pt_ilzblx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleplacement_lat_uehfss.id) as obstacleplacement
  from master_join master_join_qdfian
  join shared.obstacleplacement_pt shared_obstacleplacement_lat_uehfss on master_join_qdfian.target_id = shared_obstacleplacement_lat_uehfss.id
  where master_join_qdfian.source_id = shared.obstruction.id
) as shared_obstacleplacement_pt_gruujb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_huevft.*) AS annotation
  from master_join master_join_vboluh
  join notes.note_view notes_note_lat_huevft on master_join_vboluh.target_id = notes_note_lat_huevft.id
  where master_join_vboluh.source_id = shared.obstruction.id
) as notes_note_view_blrkxk on TRUE;
-- OilPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oil_view cascade;
create materialized view service.oil_view as
select
    service.oil_pt.id::integer as id,
    service.oil_pt.nilreason::text AS oil_nilreason,
    coalesce(cast(service.oil.category_value as varchar), '(' || service.oil.category_nilreason || ')')::text as category,
    notes_note_view_psqwpv.annotation::jsonb as annotation
from service.oil_pt 
inner join service.oil on service.oil_pt.oil_id = service.oil.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hcyokn.*) AS annotation
  from master_join master_join_hnofzz
  join notes.note_view notes_note_lat_hcyokn on master_join_hnofzz.target_id = notes_note_lat_hcyokn.id
  where master_join_hnofzz.source_id = service.oil.id
) as notes_note_view_psqwpv on TRUE;
-- OrganisationAuthorityAssociationPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.organisationauthorityassociation_view cascade;
create materialized view organisation.organisationauthorityassociation_view as
select
    organisation.organisationauthorityassociation_pt.id::integer as id,
    organisation.organisationauthorityassociation_pt.nilreason::text AS organisationauthorityassociation_nilreason,
    coalesce(cast(organisation.organisationauthorityassociation.type_value as varchar), '(' || organisation.organisationauthorityassociation.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_tvmkal.title as varchar), '(' || organisation_organisationauthority_pt_tvmkal.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_tvmkal.href::text AS theorganisationauthority_href,
    notes_note_view_qvbwwg.annotation::jsonb as annotation
from organisation.organisationauthorityassociation_pt 
inner join organisation.organisationauthorityassociation on organisation.organisationauthorityassociation_pt.organisationauthorityassociation_id = organisation.organisationauthorityassociation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_tvmkal on organisation.organisationauthorityassociation.theorganisationauthority_id = organisation_organisationauthority_pt_tvmkal.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lfhvxd.*) AS annotation
  from master_join master_join_fvzjhx
  join notes.note_view notes_note_lat_lfhvxd on master_join_fvzjhx.target_id = notes_note_lat_lfhvxd.id
  where master_join_fvzjhx.source_id = organisation.organisationauthorityassociation.id
) as notes_note_view_qvbwwg on TRUE;
-- OxygenPropertyType
-- ['notes.note_view']
drop materialized view if exists service.oxygen_view cascade;
create materialized view service.oxygen_view as
select
    service.oxygen_pt.id::integer as id,
    service.oxygen_pt.nilreason::text AS oxygen_nilreason,
    coalesce(cast(service.oxygen.type_value as varchar), '(' || service.oxygen.type_nilreason || ')')::text as type,
    notes_note_view_itmckh.annotation::jsonb as annotation
from service.oxygen_pt 
inner join service.oxygen on service.oxygen_pt.oxygen_id = service.oxygen.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_brbcnt.*) AS annotation
  from master_join master_join_wcflrl
  join notes.note_view notes_note_lat_brbcnt on master_join_wcflrl.target_id = notes_note_lat_brbcnt.id
  where master_join_wcflrl.source_id = service.oxygen.id
) as notes_note_view_itmckh on TRUE;
-- PointPropertyType
-- ['notes.note_view']
-- Snowflake SQL : PointPropertyType

DROP MATERIALIZED VIEW IF EXISTS geometry.point_view CASCADE;

CREATE MATERIALIZED VIEW geometry.point_view AS
SELECT
    id, 
	point as geom,
	ST_X(point) AS longitude,
	ST_Y(point) AS latitude,
	COALESCE(horizontalaccuracy || ' ' || horizontalaccuracy_uom, '(' || horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM geometry.point_pt;

CREATE INDEX ON geometry.point_view (id);
CREATE INDEX ON geometry.point_view USING GIST (geom);
-- ProcedureTransitionLegPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduretransitionleg_view cascade;
create materialized view procedure.proceduretransitionleg_view as
select
    procedure.proceduretransitionleg_pt.id::integer as id,
    procedure.proceduretransitionleg_pt.nilreason::text AS proceduretransitionleg_nilreason,
    coalesce(cast(procedure.proceduretransitionleg.seqnumberarinc_value as varchar), '(' || procedure.proceduretransitionleg.seqnumberarinc_nilreason || ')')::text as seqnumberarinc,
    notes_note_view_xizasu.annotation::jsonb as annotation
from procedure.proceduretransitionleg_pt 
inner join procedure.proceduretransitionleg on procedure.proceduretransitionleg_pt.proceduretransitionleg_id = procedure.proceduretransitionleg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mykehv.*) AS annotation
  from master_join master_join_imwuxv
  join notes.note_view notes_note_lat_mykehv on master_join_imwuxv.target_id = notes_note_lat_mykehv.id
  where master_join_imwuxv.source_id = procedure.proceduretransitionleg.id
) as notes_note_view_xizasu on TRUE;
-- RadarComponentPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.radarcomponent_view cascade;
create materialized view surveillance.radarcomponent_view as
select
    surveillance.radarcomponent_pt.id::integer as id,
    surveillance.radarcomponent_pt.nilreason::text AS radarcomponent_nilreason,
    coalesce(cast(surveillance.radarcomponent.collocationgroup_value as varchar), '(' || surveillance.radarcomponent.collocationgroup_nilreason || ')')::text as collocationgroup,
    notes_note_view_snzmlt.annotation::jsonb as annotation
from surveillance.radarcomponent_pt 
inner join surveillance.radarcomponent on surveillance.radarcomponent_pt.radarcomponent_id = surveillance.radarcomponent.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ljecze.*) AS annotation
  from master_join master_join_booulu
  join notes.note_view notes_note_lat_ljecze on master_join_booulu.target_id = notes_note_lat_ljecze.id
  where master_join_booulu.source_id = surveillance.radarcomponent.id
) as notes_note_view_snzmlt on TRUE;
-- RidgePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.ridge_view cascade;
create materialized view airport_heliport.ridge_view as
select
    airport_heliport.ridge_pt.id::integer as id,
    airport_heliport.ridge_pt.nilreason::text AS ridge_nilreason,
    coalesce(cast(airport_heliport.ridge.side_value as varchar), '(' || airport_heliport.ridge.side_nilreason || ')')::text as side,
    coalesce(cast(airport_heliport.ridge.distance_value as varchar) || ' ' || airport_heliport.ridge.distance_uom, '(' || airport_heliport.ridge.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.ridge.depth_value as varchar) || ' ' || airport_heliport.ridge.depth_uom, '(' || airport_heliport.ridge.depth_nilreason || ')')::text as depth,
    notes_note_view_wfhfrv.annotation::jsonb as annotation
from airport_heliport.ridge_pt 
inner join airport_heliport.ridge on airport_heliport.ridge_pt.ridge_id = airport_heliport.ridge.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xloirs.*) AS annotation
  from master_join master_join_urvapc
  join notes.note_view notes_note_lat_xloirs on master_join_urvapc.target_id = notes_note_lat_xloirs.id
  where master_join_urvapc.source_id = airport_heliport.ridge.id
) as notes_note_view_wfhfrv on TRUE;
-- RunwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaycontamination_view cascade;
create materialized view airport_heliport.runwaycontamination_view as
select
    airport_heliport.runwaycontamination_pt.id::integer as id,
    airport_heliport.runwaycontamination_pt.nilreason::text AS runwaycontamination_nilreason,
    coalesce(cast(airport_heliport.runwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaycontamination.proportion_value as varchar), '(' || airport_heliport.runwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaycontamination.clearedside_value as varchar), '(' || airport_heliport.runwaycontamination.clearedside_nilreason || ')')::text as clearedside,
    coalesce(cast(airport_heliport.runwaycontamination.obscuredlightsside_value as varchar), '(' || airport_heliport.runwaycontamination.obscuredlightsside_nilreason || ')')::text as obscuredlightsside,
    coalesce(cast(airport_heliport.runwaycontamination.taxiwayavailable_value as varchar), '(' || airport_heliport.runwaycontamination.taxiwayavailable_nilreason || ')')::text as taxiwayavailable,
    coalesce(cast(airport_heliport.runwaycontamination.apronavailable_value as varchar), '(' || airport_heliport.runwaycontamination.apronavailable_nilreason || ')')::text as apronavailable,
    coalesce(cast(airport_heliport.runwaycontamination.depth_value as varchar) || ' ' || airport_heliport.runwaycontamination.depth_uom, '(' || airport_heliport.runwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlength_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlength_uom, '(' || airport_heliport.runwaycontamination.clearedlength_nilreason || ')')::text as clearedlength,
    coalesce(cast(airport_heliport.runwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedwidth_uom, '(' || airport_heliport.runwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancelength_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancelength_uom, '(' || airport_heliport.runwaycontamination.furtherclearancelength_nilreason || ')')::text as furtherclearancelength,
    coalesce(cast(airport_heliport.runwaycontamination.furtherclearancewidth_value as varchar) || ' ' || airport_heliport.runwaycontamination.furtherclearancewidth_uom, '(' || airport_heliport.runwaycontamination.furtherclearancewidth_nilreason || ')')::text as furtherclearancewidth,
    coalesce(cast(airport_heliport.runwaycontamination.clearedlengthbegin_value as varchar) || ' ' || airport_heliport.runwaycontamination.clearedlengthbegin_uom, '(' || airport_heliport.runwaycontamination.clearedlengthbegin_nilreason || ')')::text as clearedlengthbegin,
    airport_heliport_ridge_pt_fwiihd.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_ctgzyo.layer::jsonb as layer,
    notes_note_view_iolail.annotation::jsonb as annotation
from airport_heliport.runwaycontamination_pt 
inner join airport_heliport.runwaycontamination on airport_heliport.runwaycontamination_pt.runwaycontamination_id = airport_heliport.runwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_bdghfs.id) as criticalridge
  from master_join master_join_olpdtx
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_bdghfs on master_join_olpdtx.target_id = airport_heliport_ridge_lat_bdghfs.id
  where master_join_olpdtx.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_ridge_pt_fwiihd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_tpnmhl.id) as layer
  from master_join master_join_sxvbgt
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_tpnmhl on master_join_sxvbgt.target_id = airport_heliport_surfacecontaminationlayer_lat_tpnmhl.id
  where master_join_sxvbgt.source_id = airport_heliport.runwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_ctgzyo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_axbybl.*) AS annotation
  from master_join master_join_jsjsvp
  join notes.note_view notes_note_lat_axbybl on master_join_jsjsvp.target_id = notes_note_lat_axbybl.id
  where master_join_jsjsvp.source_id = airport_heliport.runwaycontamination.id
) as notes_note_view_iolail on TRUE;
-- RunwayDeclaredDistancePropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaydeclareddistance_view cascade;
create materialized view airport_heliport.runwaydeclareddistance_view as
select
    airport_heliport.runwaydeclareddistance_pt.id::integer as id,
    airport_heliport.runwaydeclareddistance_pt.nilreason::text AS runwaydeclareddistance_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistance.type_value as varchar), '(' || airport_heliport.runwaydeclareddistance.type_nilreason || ')')::text as type,
    airport_heliport_runwaydeclareddistancevalue_pt_ctpkif.declaredvalue::jsonb as declaredvalue,
    notes_note_view_gsnmqs.annotation::jsonb as annotation
from airport_heliport.runwaydeclareddistance_pt 
inner join airport_heliport.runwaydeclareddistance on airport_heliport.runwaydeclareddistance_pt.runwaydeclareddistance_id = airport_heliport.runwaydeclareddistance.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistancevalue_lat_vlgmdy.id) as declaredvalue
  from master_join master_join_kplwcl
  join airport_heliport.runwaydeclareddistancevalue_pt airport_heliport_runwaydeclareddistancevalue_lat_vlgmdy on master_join_kplwcl.target_id = airport_heliport_runwaydeclareddistancevalue_lat_vlgmdy.id
  where master_join_kplwcl.source_id = airport_heliport.runwaydeclareddistance.id
) as airport_heliport_runwaydeclareddistancevalue_pt_ctpkif on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_msvzkc.*) AS annotation
  from master_join master_join_wvxahd
  join notes.note_view notes_note_lat_msvzkc on master_join_wvxahd.target_id = notes_note_lat_msvzkc.id
  where master_join_wvxahd.source_id = airport_heliport.runwaydeclareddistance.id
) as notes_note_view_gsnmqs on TRUE;
-- RunwaySectionContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.runwaysectioncontamination_view cascade;
create materialized view airport_heliport.runwaysectioncontamination_view as
select
    airport_heliport.runwaysectioncontamination_pt.id::integer as id,
    airport_heliport.runwaysectioncontamination_pt.nilreason::text AS runwaysectioncontamination_nilreason,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictionestimation_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.runwaysectioncontamination.frictiondevice_value as varchar), '(' || airport_heliport.runwaysectioncontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.runwaysectioncontamination.obscuredlights_value as varchar), '(' || airport_heliport.runwaysectioncontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.runwaysectioncontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.runwaysectioncontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.runwaysectioncontamination.proportion_value as varchar), '(' || airport_heliport.runwaysectioncontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.runwaysectioncontamination.section_value as varchar), '(' || airport_heliport.runwaysectioncontamination.section_nilreason || ')')::text as section,
    coalesce(cast(airport_heliport.runwaysectioncontamination.depth_value as varchar) || ' ' || airport_heliport.runwaysectioncontamination.depth_uom, '(' || airport_heliport.runwaysectioncontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_kbrbza.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_oqtacq.layer::jsonb as layer,
    notes_note_view_tfgmmq.annotation::jsonb as annotation
from airport_heliport.runwaysectioncontamination_pt 
inner join airport_heliport.runwaysectioncontamination on airport_heliport.runwaysectioncontamination_pt.runwaysectioncontamination_id = airport_heliport.runwaysectioncontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_fgisba.id) as criticalridge
  from master_join master_join_ragodm
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_fgisba on master_join_ragodm.target_id = airport_heliport_ridge_lat_fgisba.id
  where master_join_ragodm.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_ridge_pt_kbrbza on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_ebmrvx.id) as layer
  from master_join master_join_ejpwmw
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_ebmrvx on master_join_ejpwmw.target_id = airport_heliport_surfacecontaminationlayer_lat_ebmrvx.id
  where master_join_ejpwmw.source_id = airport_heliport.runwaysectioncontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_oqtacq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ireveu.*) AS annotation
  from master_join master_join_mktgyt
  join notes.note_view notes_note_lat_ireveu on master_join_mktgyt.target_id = notes_note_lat_ireveu.id
  where master_join_mktgyt.source_id = airport_heliport.runwaysectioncontamination.id
) as notes_note_view_tfgmmq on TRUE;
-- SectorDesignPropertyType
-- ['notes.note_view']
drop materialized view if exists procedure.sectordesign_view cascade;
create materialized view procedure.sectordesign_view as
select
    procedure.sectordesign_pt.id::integer as id,
    procedure.sectordesign_pt.nilreason::text AS sectordesign_nilreason,
    coalesce(cast(procedure.sectordesign.turndirection_value as varchar), '(' || procedure.sectordesign.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.sectordesign.designgradient_value as varchar), '(' || procedure.sectordesign.designgradient_nilreason || ')')::text as designgradient,
    coalesce(cast(procedure.sectordesign.turnpermitted_value as varchar), '(' || procedure.sectordesign.turnpermitted_nilreason || ')')::text as turnpermitted,
    coalesce(cast(procedure.sectordesign.terminationaltitude_value as varchar) || ' ' || procedure.sectordesign.terminationaltitude_uom, '(' || procedure.sectordesign.terminationaltitude_nilreason || ')')::text as terminationaltitude,
    notes_note_view_tapdrf.annotation::jsonb as annotation
from procedure.sectordesign_pt 
inner join procedure.sectordesign on procedure.sectordesign_pt.sectordesign_id = procedure.sectordesign.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xxhixa.*) AS annotation
  from master_join master_join_ppropv
  join notes.note_view notes_note_lat_xxhixa on master_join_ppropv.target_id = notes_note_lat_xxhixa.id
  where master_join_ppropv.source_id = procedure.sectordesign.id
) as notes_note_view_tapdrf on TRUE;
-- StandardLevelPropertyType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevel_view cascade;
create materialized view shared.standardlevel_view as
select
    shared.standardlevel_pt.id::integer as id,
    shared.standardlevel_pt.nilreason::text AS standardlevel_nilreason,
    coalesce(cast(shared.standardlevel.verticaldistance_value as varchar) || ' ' || shared.standardlevel.verticaldistance_uom, '(' || shared.standardlevel.verticaldistance_nilreason || ')')::text as verticaldistance,
    notes_note_view_bfqjos.annotation::jsonb as annotation
from shared.standardlevel_pt 
inner join shared.standardlevel on shared.standardlevel_pt.standardlevel_id = shared.standardlevel.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nevdge.*) AS annotation
  from master_join master_join_qzcgew
  join notes.note_view notes_note_lat_nevdge on master_join_qzcgew.target_id = notes_note_lat_nevdge.id
  where master_join_qzcgew.source_id = shared.standardlevel.id
) as notes_note_view_bfqjos on TRUE;
-- SurfaceCharacteristicsPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.surfacecharacteristics_view cascade;
create materialized view airport_heliport.surfacecharacteristics_view as
select
    airport_heliport.surfacecharacteristics_pt.id::integer as id,
    airport_heliport.surfacecharacteristics_pt.nilreason::text AS surfacecharacteristics_nilreason,
    coalesce(cast(airport_heliport.surfacecharacteristics.composition_value as varchar), '(' || airport_heliport.surfacecharacteristics.composition_nilreason || ')')::text as composition,
    coalesce(cast(airport_heliport.surfacecharacteristics.preparation_value as varchar), '(' || airport_heliport.surfacecharacteristics.preparation_nilreason || ')')::text as preparation,
    coalesce(cast(airport_heliport.surfacecharacteristics.surfacecondition_value as varchar), '(' || airport_heliport.surfacecharacteristics.surfacecondition_nilreason || ')')::text as surfacecondition,
    coalesce(cast(airport_heliport.surfacecharacteristics.classpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classpcn_nilreason || ')')::text as classpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementtypepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementtypepcn_nilreason || ')')::text as pavementtypepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.pavementsubgradepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.pavementsubgradepcn_nilreason || ')')::text as pavementsubgradepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.maxtyrepressurepcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.maxtyrepressurepcn_nilreason || ')')::text as maxtyrepressurepcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.evaluationmethodpcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.evaluationmethodpcn_nilreason || ')')::text as evaluationmethodpcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.classlcn_value as varchar), '(' || airport_heliport.surfacecharacteristics.classlcn_nilreason || ')')::text as classlcn,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightsiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightsiwl_uom, '(' || airport_heliport.surfacecharacteristics.weightsiwl_nilreason || ')')::text as weightsiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.tyrepressuresiwl_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_uom, '(' || airport_heliport.surfacecharacteristics.tyrepressuresiwl_nilreason || ')')::text as tyrepressuresiwl,
    coalesce(cast(airport_heliport.surfacecharacteristics.weightauw_value as varchar) || ' ' || airport_heliport.surfacecharacteristics.weightauw_uom, '(' || airport_heliport.surfacecharacteristics.weightauw_nilreason || ')')::text as weightauw,
    notes_note_view_vdrwiu.annotation::jsonb as annotation
from airport_heliport.surfacecharacteristics_pt 
inner join airport_heliport.surfacecharacteristics on airport_heliport.surfacecharacteristics_pt.surfacecharacteristics_id = airport_heliport.surfacecharacteristics.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jybuyp.*) AS annotation
  from master_join master_join_anreem
  join notes.note_view notes_note_lat_jybuyp on master_join_anreem.target_id = notes_note_lat_jybuyp.id
  where master_join_anreem.source_id = airport_heliport.surfacecharacteristics.id
) as notes_note_view_vdrwiu on TRUE;
-- SurfacePropertyType
-- ['notes.note_view']
-- -- Snowflake SQL : SurfacePropertyType

DROP MATERIALIZED VIEW IF EXISTS partial_surface_view CASCADE;
CREATE MATERIALIZED VIEW partial_surface_view AS
WITH  
segment_ref AS(
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		SUBSTRING(
	        curve_ref 
	        FROM '([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$'
	    ) AS uuid
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 4
),
segment_value AS(
	SELECT 
		airspace.geoborder.identifier AS uuid,
		geom
	FROM airspace.geoborder
	INNER JOIN master_join mj1 ON airspace.geoborder.id = mj1.source_id
	INNER JOIN airspace.geoborder_tsp ON mj1.target_id = airspace.geoborder_tsp.id
	INNER JOIN airspace.geoborder_ts ON airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
	INNER JOIN geometry.curve_pt ON airspace.geoborder_ts.border_id = geometry.curve_pt.id
	INNER JOIN geometry.curve_view ON geometry.curve_pt.id = geometry.curve_view.id
),
center AS (
    SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		start_angle,
		end_angle,
		(end_angle - start_angle) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 2
	UNION ALL 
	SELECT 
		id, 
		part,
		member,
		sequence,
		interpretation,
		point,
		radius,
		0 as start_angle,
		2*PI() as end_angle,
		(0 - 2*PI()) / 256 AS step_size
    FROM geometry.polygon_segment 
	WHERE geometry.polygon_segment.interpretation = 3
),
interpolated_points AS (
    SELECT 
        center.id,
		part,
		member,
		sequence,
		interpretation,
		ST_Project(center.point::geography, center.radius, center.start_angle + center.step_size * n)::geometry AS point_geom
    FROM 
        generate_series(0, 256) AS n, 	
        center
),
arc_line AS (
    SELECT 
        id,
		part,
		member,
		sequence,
		interpretation,
        ST_MakeLine(point_geom) AS geom
    FROM interpolated_points
    GROUP BY 
		id, 
		part, 
		member, 
		sequence, 
		interpretation
),
segment_union AS (
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(linestring, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 0
    UNION ALL 
    SELECT 
        id, 
		part,
		member,
		sequence,
		interpretation,
        ST_Segmentize((ST_ReducePrecision(linestring, 0.000000000000001)::geography), 10000)::geometry as geom,
		ST_StartPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(linestring, 0.000000000000001)) as last_point
    FROM 
        geometry.polygon_segment 
    WHERE 
        geometry.polygon_segment.interpretation = 1
	UNION ALL
	SELECT
		id, 
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM
		arc_line
	UNION ALL
	SELECT
		id,
		part,
		member,
		sequence,
		interpretation,
		ST_ReducePrecision(geom, 0.000000000000001) AS geom,
		ST_StartPoint(ST_ReducePrecision(geom, 0.000000000000001)) as first_point,
		ST_EndPoint(ST_ReducePrecision(geom, 0.000000000000001)) as last_point
	FROM segment_ref
	INNER JOIN segment_value ON segment_ref.uuid = segment_value.uuid
),
segement_ownership AS (
	SELECT 
		geometry.surface_pt.id AS surf_id,
        segment_union.id AS seg_id,
		segment_union.part AS part,
		segment_union.member AS member,
		segment_union.sequence AS sequence,
		segment_union.interpretation AS interpretation,
		segment_union.geom AS geom,
		segment_union.first_point as first_point,
		segment_union.last_point as last_point
    FROM 
        geometry.surface_pt
    INNER JOIN master_join_geometry mjg1 ON geometry.surface_pt.id = mjg1.source_id
    INNER JOIN segment_union ON mjg1.target_id = segment_union.id
),
ordered_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point, 
        last_point,
		ST_IsClosed(segement_ownership.geom) AS closed
    FROM 
        segement_ownership
    ORDER BY 
        seg_id,
		part, 
		member, 
		sequence
),
connecting_segments AS (
    SELECT 
		surf_id,
        seg_id,
        part,
		member,
        sequence,
		interpretation,
        geom,
        first_point,
        last_point
    FROM 
        ordered_segments
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member,
        curr.sequence + 0.5 AS sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.surf_id = next.surf_id
        AND curr.part = next.part
        AND curr.sequence + 1 = next.sequence
		AND curr.member = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    UNION ALL
    SELECT 
		curr.surf_id,
		Null AS seg_id,
        curr.part,
		curr.member + 0.5 AS member,
        curr.sequence,
		1,
        ST_MakeLine(curr.last_point, next.first_point) AS geom,
        curr.last_point AS first_point,
        next.first_point AS last_point
    FROM 
        ordered_segments curr
    JOIN 
        ordered_segments next
    ON 
        curr.seg_id = next.seg_id
        AND curr.part = next.part
        AND curr.member + 1 = next.member
	WHERE 
		ST_IsClosed(curr.geom) = false
		AND
		curr.interpretation != 4
		AND
		next.interpretation != 4
    ORDER BY 
        seg_id, 
        part, 
        member,
        sequence
),
clustered_segments AS (
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
		interpretation,
        ST_ClusterDBSCAN(geom, eps := 0, minpoints := 1) OVER (PARTITION BY surf_id, part)  AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation != 4
	UNION ALL
    SELECT 
        surf_id,
		seg_id,
        part,
        member,
        geom,
        interpretation,
        Null AS cluster_id
    FROM 
        connecting_segments
    WHERE 
        interpretation = 4
	ORDER BY
		seg_id,
		part, 
		member
),
partial_ring AS (
    SELECT 
        surf_id,
		ARRAY_AGG(seg_id) as seg_id,
        part,
        MIN(member) AS member,
		MIN(interpretation) AS interpretation,
        ST_IsClosed(ST_LineMerge(ST_Collect(geom))) AS closed,
        ST_GeometryType(ST_LineMerge(ST_Collect(geom))) AS type, 
        ST_LineMerge(ST_Collect(geom)) AS geom,
        NULL::geometry AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation != 4
    GROUP BY 
		surf_id,
        part, 
        cluster_id
	UNION ALL
    SELECT 
        surf_id, 
		ARRAY[seg_id] AS seg_id,
        part,
        member,
		interpretation,
        ST_IsClosed(geom) AS closed,
        ST_GeometryType(geom) AS type, 
		geom AS geom,
		ST_Points(geom) AS points
    FROM 
        clustered_segments
	WHERE 
		interpretation = 4
	ORDER BY 
        surf_id, 
		part, 
		member
),
output AS (
    SELECT 
        pr.surf_id,
		pr.seg_id,
        pr.part,
		ROW_NUMBER() OVER (PARTITION BY surf_id, part ORDER BY surf_id) - 1 AS increment,
		COUNT(*) OVER (PARTITION BY surf_id, part ) AS total_count,
		pr.interpretation,
		pr.points,
        COALESCE(dumped.geom, pr.geom) AS geom
    FROM 
        partial_ring pr
    LEFT JOIN LATERAL (
        SELECT (ST_Dump(pr.geom)).geom
        WHERE ST_GeometryType(pr.geom) = 'ST_MultiLineString'
    ) dumped ON true
	ORDER BY
		surf_id, 
		part, 
		member
)
SELECT 
    (row_number() OVER ())::integer AS row,
	ST_GeometryType(geom),
	output.surf_id, 
	to_jsonb(output.seg_id) AS seg_id,
	output.part,
	output.increment,
	output.total_count,
	output.interpretation,
	output.geom,
	output.points
FROM
	output;

CREATE INDEX ON partial_surface_view (surf_id);
CREATE INDEX ON partial_surface_view USING GIST (geom);
CREATE INDEX ON partial_surface_view USING GIST (points);

DROP MATERIALIZED VIEW IF EXISTS geometry.surface_view CASCADE;

-- R1 : Simple feature, closed
-- R2 : Simple feature, unclosed
-- G1 : Complex feature with a single geoborder, 
-- G2 : Complex feature with multiple geoborder,
CREATE MATERIALIZED VIEW geometry.surface_view AS
WITH 
g1_segment AS (
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(ring.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(ring.geom)) AS start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(ring.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view ring
	ON 
        ring.surf_id = geoborder.surf_id
		AND
		ring.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE 
		geoborder.total_count = 2
		AND
		geoborder.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.geom, 
		geoborder.increment,
		geoborder.interpretation,
		geoborder.geom, 
		ring.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count = 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment AS (
	SELECT
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		geoborder.geom AS geom,
		Null::geometry AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,
			ST_Union(
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom)),
				ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		)).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom, ST_ClosestPoint(ST_Collect(geoborder.points), ST_EndPoint(before.geom))
			)
		  )
		).geom AS geom,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_EndPoint(before.geom)) AS  start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	GROUP BY
		geoborder.surf_id, 
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		(ST_Dump(
		  ST_Split(
			geoborder.geom,	ST_ClosestPoint(ST_Collect(geoborder.points), ST_StartPoint(after.geom))
			)
		  )
		).geom AS geom,
		Null::geometry AS  start_segment,
		ST_ShortestLine(ST_Collect(geoborder.points), ST_StartPoint(after.geom)) AS end_segment
	FROM 
		partial_surface_view geoborder
	JOIN
		partial_surface_view before
	ON 
        before.surf_id = geoborder.surf_id
		AND
		before.part = geoborder.part
	    AND (
	        before.increment = geoborder.increment - 1
	        OR (before.increment = geoborder.total_count - 1 AND geoborder.increment = 0)
	    )
	JOIN
		partial_surface_view after
	ON 
        after.surf_id = geoborder.surf_id
		AND
		after.part = geoborder.part
	    AND (
	        after.increment = geoborder.increment + 1
	        OR (after.increment = 0 AND geoborder.increment = geoborder.total_count - 1)
	    )
	WHERE 
		geoborder.total_count > 2 
		AND
		geoborder.interpretation = 4
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	GROUP BY
		geoborder.surf_id,
		geoborder.seg_id,
		geoborder.part,
		before.geom, 
		after.geom,
		geoborder.increment,
		geoborder.interpretation,
		geoborder.total_count,
		before.increment,
		after.increment,
		geoborder.geom
	UNION ALL
	SELECT
		partial_surface_view.surf_id, 
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.increment,
		partial_surface_view.interpretation,
		partial_surface_view.total_count,
		partial_surface_view.geom,
		Null::geometry AS start_segment,
		Null::geometry AS end_segment
	FROM 
		partial_surface_view
	WHERE 
		partial_surface_view.total_count > 2 
		AND
		partial_surface_view.interpretation != 4
	ORDER BY
		surf_id, 
		seg_id, 
		part,
		increment
),
g2_segment_filtered AS (
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		curr.geom AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment)  
		AND 
		ST_Intersects(curr.geom, after.geom)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation = 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
		g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, before.geom) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation = 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT 
		curr.surf_id,
		curr.seg_id,
		curr.part,
		curr.increment,
		ST_LineMerge(ST_Collect(ARRAY[curr.geom, curr.end_segment, curr.start_segment])) AS geom
	FROM
		g2_segment curr
	JOIN
		g2_segment before
	ON 
        before.surf_id = curr.surf_id
		AND
		before.part = curr.part
	    AND (
	        before.increment = curr.increment - 1
	        OR (before.increment = curr.total_count - 1 AND curr.increment = 0)
	    )
	JOIN	
	g2_segment after
	ON 
        after.surf_id = curr.surf_id
		AND
		after.part = curr.part
	    AND (
	        after.increment = curr.increment + 1
	        OR (after.increment = 0 AND curr.increment = curr.total_count - 1)
	    )
	WHERE 
		curr.interpretation = 4
		AND
		ST_Intersects(curr.geom, curr.start_segment) 
		AND 
		ST_Intersects(curr.geom, curr.end_segment)
		AND 
		before.interpretation != 4
		AND 
		after.interpretation != 4
	UNION ALL
	SELECT
		g2_segment.surf_id,
		g2_segment.seg_id,
		g2_segment.part,
		g2_segment.increment,
		g2_segment.geom
	FROM 
		g2_segment
	WHERE 
		g2_segment.interpretation != 4
	ORDER BY
		surf_id, 
		part,
		increment
),
r1 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		partial_surface_view.geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = true
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(geom) >= 4
),
r2 AS (
	SELECT
		partial_surface_view.surf_id,
		partial_surface_view.seg_id,
		partial_surface_view.part,
		ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom)) AS geom
	FROM
		partial_surface_view
	WHERE
		ST_IsClosed(partial_surface_view.geom) = false
		AND 
		partial_surface_view.total_count = 1
		AND 
		ST_NPoints(ST_AddPoint(partial_surface_view.geom, ST_StartPoint(partial_surface_view.geom))) >= 4		
),
g1 AS (
	SELECT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		NOT ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
	UNION ALL
	SELECT DISTINCT 
		ring.surf_id,
		ring.part,
		ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.end_segment, geoborder.start_segment])) AS geom
	FROM
	g1_segment ring
	JOIN
	g1_segment geoborder
	ON 
		ring.surf_id = geoborder.surf_id
		AND
		geoborder.part = geoborder.part
		AND 
		ring.increment <> geoborder.increment
	WHERE
		ST_Intersects(geoborder.geom, geoborder.start_segment) 
		AND 
		ST_Intersects(geoborder.geom, geoborder.end_segment)
		AND 
		ST_Intersects(geoborder.start_segment, geoborder.end_segment)
		AND
		ST_NPoints(ST_LineMerge(ST_Collect(ARRAY[ring.geom, geoborder.geom, geoborder.end_segment, geoborder.start_segment]))) >= 4
),
g2 AS (	
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_LineMerge(ST_Collect(g2_segment_filtered.geom)) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = true
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
	UNION ALL
	SELECT 
		g2_segment_filtered.surf_id,
		MIN(g2_segment_filtered.part) AS part,
		ST_AddPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)), ST_StartPoint(ST_LineMerge(ST_Collect(g2_segment_filtered.geom)))) AS geom
	FROM
		g2_segment_filtered
	GROUP BY
		g2_segment_filtered.surf_id,
		g2_segment_filtered.part
	HAVING
		ST_IsClosed(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = false
		AND
		ST_GeometryType(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) = 'ST_LineString'
		AND 
		ST_NPoints(ST_LineMerge(ST_Collect(g2_segment_filtered.geom))) >= 4
),
combined_data AS (
    SELECT 
        surf_id, 
		geom,
        part
    FROM 
        r1
    UNION ALL
    SELECT 
        surf_id,
        geom,
        part
    FROM 
        r2
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g1
    UNION ALL
    SELECT 
        surf_id, 
        geom,
        part
    FROM 
        g2
),
outer_shells AS (
    SELECT 
        surf_id, 
        ST_MakePolygon(geom) AS geom
    FROM 
        combined_data
    WHERE 
        part = 0    
),
inner_shells AS (
    SELECT 
        surf_id, 
        geom
    FROM 
        combined_data
    WHERE 
        part <> 0
)
SELECT 
    outer_shells.surf_id AS id,
    ST_MakePolygon(
        ST_ExteriorRing(outer_shells.geom),
        ARRAY(
            SELECT ST_ExteriorRing(inner_shells.geom)
            FROM inner_shells 
            WHERE inner_shells.surf_id = outer_shells.surf_id
        )
    ) AS geom,
	COALESCE(geometry.surface_pt.horizontalaccuracy || ' ' || geometry.surface_pt.horizontalaccuracy_uom, '(' || geometry.surface_pt.horizontalaccuracy_nilreason || ')') AS horizontalAccuracy
FROM 
outer_shells
INNER JOIN geometry.surface_pt ON outer_shells.surf_id = geometry.surface_pt.id;

CREATE INDEX ON geometry.surface_view (id);
CREATE INDEX ON geometry.surface_view USING GIST (geom);
-- SurveillanceGroundStationPropertyType
-- ['notes.note_view']
drop materialized view if exists surveillance.surveillancegroundstation_view cascade;
create materialized view surveillance.surveillancegroundstation_view as
select
    surveillance.surveillancegroundstation_pt.id::integer as id,
    surveillance.surveillancegroundstation_pt.nilreason::text AS surveillancegroundstation_nilreason,
    coalesce(cast(surveillance.surveillancegroundstation.videomap_value as varchar), '(' || surveillance.surveillancegroundstation.videomap_nilreason || ')')::text as videomap,
    coalesce(cast(organisation_unit_pt_vixddq.title as varchar), '(' || organisation_unit_pt_vixddq.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_vixddq.href::text AS theunit_href,
    notes_note_view_zqfxcy.annotation::jsonb as annotation
from surveillance.surveillancegroundstation_pt 
inner join surveillance.surveillancegroundstation on surveillance.surveillancegroundstation_pt.surveillancegroundstation_id = surveillance.surveillancegroundstation.id
left join organisation.unit_pt organisation_unit_pt_vixddq on surveillance.surveillancegroundstation.theunit_id = organisation_unit_pt_vixddq.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xpbwhv.*) AS annotation
  from master_join master_join_yelkuc
  join notes.note_view notes_note_lat_xpbwhv on master_join_yelkuc.target_id = notes_note_lat_xpbwhv.id
  where master_join_yelkuc.source_id = surveillance.surveillancegroundstation.id
) as notes_note_view_zqfxcy on TRUE;
-- TaxiwayContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.taxiwaycontamination_view cascade;
create materialized view airport_heliport.taxiwaycontamination_view as
select
    airport_heliport.taxiwaycontamination_pt.id::integer as id,
    airport_heliport.taxiwaycontamination_pt.nilreason::text AS taxiwaycontamination_nilreason,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictionestimation_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.taxiwaycontamination.frictiondevice_value as varchar), '(' || airport_heliport.taxiwaycontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.taxiwaycontamination.obscuredlights_value as varchar), '(' || airport_heliport.taxiwaycontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.taxiwaycontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.taxiwaycontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.taxiwaycontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.taxiwaycontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.taxiwaycontamination.proportion_value as varchar), '(' || airport_heliport.taxiwaycontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.taxiwaycontamination.depth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.depth_uom, '(' || airport_heliport.taxiwaycontamination.depth_nilreason || ')')::text as depth,
    coalesce(cast(airport_heliport.taxiwaycontamination.clearedwidth_value as varchar) || ' ' || airport_heliport.taxiwaycontamination.clearedwidth_uom, '(' || airport_heliport.taxiwaycontamination.clearedwidth_nilreason || ')')::text as clearedwidth,
    airport_heliport_ridge_pt_ngdibu.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_uiosqw.layer::jsonb as layer,
    notes_note_view_ribzpe.annotation::jsonb as annotation
from airport_heliport.taxiwaycontamination_pt 
inner join airport_heliport.taxiwaycontamination on airport_heliport.taxiwaycontamination_pt.taxiwaycontamination_id = airport_heliport.taxiwaycontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_uvncnc.id) as criticalridge
  from master_join master_join_rnypdp
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_uvncnc on master_join_rnypdp.target_id = airport_heliport_ridge_lat_uvncnc.id
  where master_join_rnypdp.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_ridge_pt_ngdibu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_uavhxw.id) as layer
  from master_join master_join_dlotlp
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_uavhxw on master_join_dlotlp.target_id = airport_heliport_surfacecontaminationlayer_lat_uavhxw.id
  where master_join_dlotlp.source_id = airport_heliport.taxiwaycontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_uiosqw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ptnphd.*) AS annotation
  from master_join master_join_obhalf
  join notes.note_view notes_note_lat_ptnphd on master_join_obhalf.target_id = notes_note_lat_ptnphd.id
  where master_join_obhalf.source_id = airport_heliport.taxiwaycontamination.id
) as notes_note_view_ribzpe on TRUE;
-- TimesheetPropertyType
-- ['notes.note_view']
-- Snowflake SQL : TimesheetPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.timesheet_view CASCADE;

CREATE MATERIALIZED VIEW shared.timesheet_view AS
SELECT
shared.timesheet_pt.id,
jsonb_build_object(
	'timereference', COALESCE(shared.timesheet.timereference_value, '(' || shared.timesheet.timereference_nilreason || ')'),
	'startdate', COALESCE(shared.timesheet.startdate_value, '(' || shared.timesheet.startdate_nilreason || ')'),
	'enddate', COALESCE(shared.timesheet.enddate_value, '(' || shared.timesheet.enddate_nilreason || ')'),
	'day', COALESCE(shared.timesheet.day_value, '(' || shared.timesheet.day_nilreason || ')'),
	'daytil', COALESCE(shared.timesheet.daytil_value, '(' || shared.timesheet.daytil_nilreason || ')'),
	'starttime', COALESCE(shared.timesheet.starttime_value, '(' || shared.timesheet.starttime_nilreason || ')'),
	'startevent', COALESCE(shared.timesheet.startevent_value, '(' || shared.timesheet.startevent_nilreason || ')'),
	'starteventinterpretation', COALESCE(shared.timesheet.starteventinterpretation_value, '(' || shared.timesheet.starteventinterpretation_nilreason || ')'),
	'starttimerelativeevent', COALESCE(shared.timesheet.starttimerelativeevent_value || ' ' || shared.timesheet.starttimerelativeevent_uom, '(' || shared.timesheet.starttimerelativeevent_nilreason || ')'),
	'endtime', COALESCE(shared.timesheet.endtime_value, '(' || shared.timesheet.endtime_nilreason || ')'),
	'endevent', COALESCE(shared.timesheet.endevent_value, '(' || shared.timesheet.endevent_nilreason || ')'),
	'endeventinterpretation', COALESCE(shared.timesheet.endeventinterpretation_value, '(' || shared.timesheet.endeventinterpretation_nilreason || ')'),
	'endtimerelativeevent', COALESCE(shared.timesheet.endtimerelativeevent_value || ' ' || shared.timesheet.endtimerelativeevent_uom, '(' || shared.timesheet.endtimerelativeevent_nilreason || ')'),
	'daylightsavingadjust',COALESCE(shared.timesheet.daylightsavingadjust_value, '(' || shared.timesheet.daylightsavingadjust_nilreason || ')'),
	'excluded', COALESCE(shared.timesheet.excluded_value, '(' || shared.timesheet.excluded_nilreason || ')'),
	'annotations', COALESCE(jsonb_agg(notes.note_view.note), '[]'::jsonb)
)
FROM shared.timesheet_pt
INNER JOIN shared.timesheet ON shared.timesheet_pt.timesheet_id = shared.timesheet.id
LEFT JOIN master_join ON shared.timesheet.id = master_join.source_id
LEFT JOIN notes.note_view ON master_join.target_id = notes.note_view.id
GROUP BY
    shared.timesheet_pt.id,
    shared.timesheet.timereference_value,
    shared.timesheet.timereference_nilreason,
    shared.timesheet.startdate_value,
    shared.timesheet.startdate_nilreason,
    shared.timesheet.enddate_value,
    shared.timesheet.enddate_nilreason,
    shared.timesheet.day_value,
    shared.timesheet.day_nilreason,
    shared.timesheet.daytil_value,
    shared.timesheet.daytil_nilreason,
    shared.timesheet.starttime_value,
    shared.timesheet.starttime_nilreason,
    shared.timesheet.startevent_value,
    shared.timesheet.startevent_nilreason,
    shared.timesheet.starteventinterpretation_value,
    shared.timesheet.starteventinterpretation_nilreason,
    shared.timesheet.endtime_value,
    shared.timesheet.endtime_nilreason,
    shared.timesheet.endevent_value,
    shared.timesheet.endevent_nilreason,
    shared.timesheet.endeventinterpretation_value,
    shared.timesheet.endeventinterpretation_nilreason,
    shared.timesheet.daylightsavingadjust_value,
    shared.timesheet.daylightsavingadjust_nilreason,
    shared.timesheet.excluded_value,
    shared.timesheet.excluded_nilreason,
    shared.timesheet.starttimerelativeevent_value,
    shared.timesheet.starttimerelativeevent_uom,
    shared.timesheet.starttimerelativeevent_nilreason,
    shared.timesheet.endtimerelativeevent_value,
    shared.timesheet.endtimerelativeevent_uom,
    shared.timesheet.endtimerelativeevent_nilreason;

CREATE INDEX ON shared.timesheet_view (id);
-- TouchDownLiftOffContaminationPropertyType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.touchdownliftoffcontamination_view cascade;
create materialized view airport_heliport.touchdownliftoffcontamination_view as
select
    airport_heliport.touchdownliftoffcontamination_pt.id::integer as id,
    airport_heliport.touchdownliftoffcontamination_pt.nilreason::text AS touchdownliftoffcontamination_nilreason,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictioncoefficient_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictioncoefficient_nilreason || ')')::text as frictioncoefficient,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictionestimation_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictionestimation_nilreason || ')')::text as frictionestimation,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.frictiondevice_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.frictiondevice_nilreason || ')')::text as frictiondevice,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.obscuredlights_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.obscuredlights_nilreason || ')')::text as obscuredlights,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furtherclearancetime_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furtherclearancetime_nilreason || ')')::text as furtherclearancetime,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.furthertotalclearance_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.furthertotalclearance_nilreason || ')')::text as furthertotalclearance,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.proportion_value as varchar), '(' || airport_heliport.touchdownliftoffcontamination.proportion_nilreason || ')')::text as proportion,
    coalesce(cast(airport_heliport.touchdownliftoffcontamination.depth_value as varchar) || ' ' || airport_heliport.touchdownliftoffcontamination.depth_uom, '(' || airport_heliport.touchdownliftoffcontamination.depth_nilreason || ')')::text as depth,
    airport_heliport_ridge_pt_kseygx.criticalridge::jsonb as criticalridge,
    airport_heliport_surfacecontaminationlayer_pt_bbsnor.layer::jsonb as layer,
    notes_note_view_uedcmt.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffcontamination_pt 
inner join airport_heliport.touchdownliftoffcontamination on airport_heliport.touchdownliftoffcontamination_pt.touchdownliftoffcontamination_id = airport_heliport.touchdownliftoffcontamination.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_ridge_lat_bwcysj.id) as criticalridge
  from master_join master_join_cceqtk
  join airport_heliport.ridge_pt airport_heliport_ridge_lat_bwcysj on master_join_cceqtk.target_id = airport_heliport_ridge_lat_bwcysj.id
  where master_join_cceqtk.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_ridge_pt_kseygx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_surfacecontaminationlayer_lat_iafjwc.id) as layer
  from master_join master_join_kqlbwt
  join airport_heliport.surfacecontaminationlayer_pt airport_heliport_surfacecontaminationlayer_lat_iafjwc on master_join_kqlbwt.target_id = airport_heliport_surfacecontaminationlayer_lat_iafjwc.id
  where master_join_kqlbwt.source_id = airport_heliport.touchdownliftoffcontamination.id
) as airport_heliport_surfacecontaminationlayer_pt_bbsnor on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_blmgsn.*) AS annotation
  from master_join master_join_gpsozs
  join notes.note_view notes_note_lat_blmgsn on master_join_gpsozs.target_id = notes_note_lat_blmgsn.id
  where master_join_gpsozs.source_id = airport_heliport.touchdownliftoffcontamination.id
) as notes_note_view_uedcmt on TRUE;
-- UnitDependencyPropertyType
-- ['notes.note_view']
drop materialized view if exists organisation.unitdependency_view cascade;
create materialized view organisation.unitdependency_view as
select
    organisation.unitdependency_pt.id::integer as id,
    organisation.unitdependency_pt.nilreason::text AS unitdependency_nilreason,
    coalesce(cast(organisation.unitdependency.type_value as varchar), '(' || organisation.unitdependency.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_unit_pt_ypldpc.title as varchar), '(' || organisation_unit_pt_ypldpc.nilreason[1] || ')')::text AS theunit,
    organisation_unit_pt_ypldpc.href::text AS theunit_href,
    notes_note_view_atgssq.annotation::jsonb as annotation
from organisation.unitdependency_pt 
inner join organisation.unitdependency on organisation.unitdependency_pt.unitdependency_id = organisation.unitdependency.id
left join organisation.unit_pt organisation_unit_pt_ypldpc on organisation.unitdependency.theunit_id = organisation_unit_pt_ypldpc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wpjbka.*) AS annotation
  from master_join master_join_uwjkvu
  join notes.note_view notes_note_lat_wpjbka on master_join_uwjkvu.target_id = notes_note_lat_wpjbka.id
  where master_join_uwjkvu.source_id = organisation.unitdependency.id
) as notes_note_view_atgssq on TRUE;
-- AerialRefuellingTrackPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingtrack_view cascade;
create materialized view aerial_refuelling.aerialrefuellingtrack_view as
select
    aerial_refuelling.aerialrefuellingtrack_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingtrack_pt.nilreason::text AS aerialrefuellingtrack_nilreason,
    geometry_curve_view_kltsun.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_kltsun.horizontalAccuracy as extent_horizontalaccuracy,
    aerial_refuelling_aerialrefuellingpoint_pt_uistyc.point::jsonb as point,
    shared_airspacelayer_pt_tfmsxi.verticalextent::jsonb as verticalextent,
    notes_note_view_ckhtri.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingtrack_pt 
inner join aerial_refuelling.aerialrefuellingtrack on aerial_refuelling.aerialrefuellingtrack_pt.aerialrefuellingtrack_id = aerial_refuelling.aerialrefuellingtrack.id
left join geometry.curve_view geometry_curve_view_kltsun on aerial_refuelling.aerialrefuellingtrack.extent_id = geometry_curve_view_kltsun.id
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_mgvxwy.id) as point
  from master_join master_join_stmqnm
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_mgvxwy on master_join_stmqnm.target_id = aerial_refuelling_aerialrefuellingpoint_lat_mgvxwy.id
  where master_join_stmqnm.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as aerial_refuelling_aerialrefuellingpoint_pt_uistyc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_vgbnev.id) as verticalextent
  from master_join master_join_zdfzxq
  join shared.airspacelayer_pt shared_airspacelayer_lat_vgbnev on master_join_zdfzxq.target_id = shared_airspacelayer_lat_vgbnev.id
  where master_join_zdfzxq.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as shared_airspacelayer_pt_tfmsxi on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xqqhea.*) AS annotation
  from master_join master_join_uihfgw
  join notes.note_view notes_note_lat_xqqhea on master_join_uihfgw.target_id = notes_note_lat_xqqhea.id
  where master_join_uihfgw.source_id = aerial_refuelling.aerialrefuellingtrack.id
) as notes_note_view_ckhtri on TRUE;
-- ProcedureTransitionPropertyType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists procedure.proceduretransition_view cascade;
create materialized view procedure.proceduretransition_view as
select
    procedure.proceduretransition_pt.id::integer as id,
    procedure.proceduretransition_pt.nilreason::text AS proceduretransition_nilreason,
    coalesce(cast(procedure.proceduretransition.transitionid_value as varchar), '(' || procedure.proceduretransition.transitionid_nilreason || ')')::text as transitionid,
    coalesce(cast(procedure.proceduretransition.type_value as varchar), '(' || procedure.proceduretransition.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.proceduretransition.instruction_value as varchar), '(' || procedure.proceduretransition.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.proceduretransition.vectorheading_value as varchar), '(' || procedure.proceduretransition.vectorheading_nilreason || ')')::text as vectorheading,
    to_jsonb(procedure_landingtakeoffareacollection_pt_xhfvdm.id)::jsonb AS departurerunwaytransition,
    geometry_curve_view_flwyjt.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_flwyjt.horizontalAccuracy as trajectory_horizontalaccuracy,
    procedure_proceduretransitionleg_pt_baurgv.transitionleg::jsonb as transitionleg,
    notes_note_view_qgobka.annotation::jsonb as annotation
from procedure.proceduretransition_pt 
inner join procedure.proceduretransition on procedure.proceduretransition_pt.proceduretransition_id = procedure.proceduretransition.id
left join procedure.landingtakeoffareacollection_pt procedure_landingtakeoffareacollection_pt_xhfvdm on procedure.proceduretransition.departurerunwaytransition_id = procedure_landingtakeoffareacollection_pt_xhfvdm.id
left join geometry.curve_view geometry_curve_view_flwyjt on procedure.proceduretransition.trajectory_id = geometry_curve_view_flwyjt.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransitionleg_lat_unqsib.id) as transitionleg
  from master_join master_join_inqmnp
  join procedure.proceduretransitionleg_pt procedure_proceduretransitionleg_lat_unqsib on master_join_inqmnp.target_id = procedure_proceduretransitionleg_lat_unqsib.id
  where master_join_inqmnp.source_id = procedure.proceduretransition.id
) as procedure_proceduretransitionleg_pt_baurgv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tldmdm.*) AS annotation
  from master_join master_join_arlsyz
  join notes.note_view notes_note_lat_tldmdm on master_join_arlsyz.target_id = notes_note_lat_tldmdm.id
  where master_join_arlsyz.source_id = procedure.proceduretransition.id
) as notes_note_view_qgobka on TRUE;
-- LightElementPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists shared.lightelement_view cascade;
create materialized view shared.lightelement_view as
select
    shared.lightelement_pt.id::integer as id,
    shared.lightelement_pt.nilreason::text AS lightelement_nilreason,
    coalesce(cast(shared.lightelement.colour_value as varchar), '(' || shared.lightelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(shared.lightelement.intensitylevel_value as varchar), '(' || shared.lightelement.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(shared.lightelement.type_value as varchar), '(' || shared.lightelement.type_nilreason || ')')::text as type,
    coalesce(cast(shared.lightelement.intensity_value as varchar) || ' ' || shared.lightelement.intensity_uom, '(' || shared.lightelement.intensity_nilreason || ')')::text as intensity,
    geometry_elevatedpoint_view_zgkvcl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_zgkvcl.longitude AS location_longitude,
    geometry_elevatedpoint_view_zgkvcl.latitude AS location_latitude,
    geometry_elevatedpoint_view_zgkvcl.elevation AS location_elevation,
    geometry_elevatedpoint_view_zgkvcl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_zgkvcl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_zgkvcl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_zgkvcl.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_gnenpu.annotation::jsonb as annotation,
    shared_lightelementstatus_pt_zyfzgp.availability::jsonb as availability
from shared.lightelement_pt 
inner join shared.lightelement on shared.lightelement_pt.lightelement_id = shared.lightelement.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_zgkvcl on shared.lightelement.location_id = geometry_elevatedpoint_view_zgkvcl.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bxnkip.*) AS annotation
  from master_join master_join_nwnjqa
  join notes.note_view notes_note_lat_bxnkip on master_join_nwnjqa.target_id = notes_note_lat_bxnkip.id
  where master_join_nwnjqa.source_id = shared.lightelement.id
) as notes_note_view_gnenpu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelementstatus_lat_xrcooc.id) as availability
  from master_join master_join_ctcmqc
  join shared.lightelementstatus_pt shared_lightelementstatus_lat_xrcooc on master_join_ctcmqc.target_id = shared_lightelementstatus_lat_xrcooc.id
  where master_join_ctcmqc.source_id = shared.lightelement.id
) as shared_lightelementstatus_pt_zyfzgp on TRUE;
-- ReflectorPropertyType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.reflector_view cascade;
create materialized view surveillance.reflector_view as
select
    surveillance.reflector_pt.id::integer as id,
    surveillance.reflector_pt.nilreason::text AS reflector_nilreason,
    coalesce(cast(surveillance.reflector.type_value as varchar), '(' || surveillance.reflector.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_lqibkj.geom::geometry(Point, 4326) AS touchdownreflector_geom,
    geometry_elevatedpoint_view_lqibkj.longitude AS touchdownreflector_longitude,
    geometry_elevatedpoint_view_lqibkj.latitude AS touchdownreflector_latitude,
    geometry_elevatedpoint_view_lqibkj.elevation AS touchdownreflector_elevation,
    geometry_elevatedpoint_view_lqibkj.geoidUndulation AS touchdownreflector_geoidundulation,
    geometry_elevatedpoint_view_lqibkj.verticalDatum AS touchdownreflector_verticaldatum,
    geometry_elevatedpoint_view_lqibkj.verticalAccuracy AS touchdownreflector_verticalaccuracy,
    geometry_elevatedpoint_view_lqibkj.horizontalAccuracy AS touchdownreflector_horizontalaccuracy,
    notes_note_view_xezuho.annotation::jsonb as annotation
from surveillance.reflector_pt 
inner join surveillance.reflector on surveillance.reflector_pt.reflector_id = surveillance.reflector.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lqibkj on surveillance.reflector.touchdownreflector_id = geometry_elevatedpoint_view_lqibkj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izzhfw.*) AS annotation
  from master_join master_join_jwzrqx
  join notes.note_view notes_note_lat_izzhfw on master_join_jwzrqx.target_id = notes_note_lat_izzhfw.id
  where master_join_jwzrqx.source_id = surveillance.reflector.id
) as notes_note_view_xezuho on TRUE;
-- MarkingElementPropertyType
-- ['geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.markingelement_view cascade;
create materialized view airport_heliport.markingelement_view as
select
    airport_heliport.markingelement_pt.id::integer as id,
    airport_heliport.markingelement_pt.nilreason::text AS markingelement_nilreason,
    coalesce(cast(airport_heliport.markingelement.colour_value as varchar), '(' || airport_heliport.markingelement.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.markingelement.style_value as varchar), '(' || airport_heliport.markingelement.style_nilreason || ')')::text as style,
    geometry_elevatedsurface_view_rekhek.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_rekhek.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_rekhek.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_rekhek.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_rekhek.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_rekhek.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedcurve_view_bdughd.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_bdughd.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_bdughd.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_bdughd.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_bdughd.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_bdughd.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedpoint_view_dowbsg.geom::geometry(Point, 4326) AS extentlocation_geom,
    geometry_elevatedpoint_view_dowbsg.longitude AS extentlocation_longitude,
    geometry_elevatedpoint_view_dowbsg.latitude AS extentlocation_latitude,
    geometry_elevatedpoint_view_dowbsg.elevation AS extentlocation_elevation,
    geometry_elevatedpoint_view_dowbsg.geoidUndulation AS extentlocation_geoidundulation,
    geometry_elevatedpoint_view_dowbsg.verticalDatum AS extentlocation_verticaldatum,
    geometry_elevatedpoint_view_dowbsg.verticalAccuracy AS extentlocation_verticalaccuracy,
    geometry_elevatedpoint_view_dowbsg.horizontalAccuracy AS extentlocation_horizontalaccuracy,
    notes_note_view_cvivxf.annotation::jsonb as annotation
from airport_heliport.markingelement_pt 
inner join airport_heliport.markingelement on airport_heliport.markingelement_pt.markingelement_id = airport_heliport.markingelement.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rekhek on airport_heliport.markingelement.extent_surfaceextent_id = geometry_elevatedsurface_view_rekhek.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_bdughd on airport_heliport.markingelement.extent_curveextent_id = geometry_elevatedcurve_view_bdughd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_dowbsg on airport_heliport.markingelement.extent_location_id = geometry_elevatedpoint_view_dowbsg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hfhwke.*) AS annotation
  from master_join master_join_vrqwyb
  join notes.note_view notes_note_lat_hfhwke on master_join_vrqwyb.target_id = notes_note_lat_hfhwke.id
  where master_join_vrqwyb.source_id = airport_heliport.markingelement.id
) as notes_note_view_cvivxf on TRUE;
-- SurfaceContaminationLayerPropertyType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surfacecontaminationlayer_view cascade;
create materialized view airport_heliport.surfacecontaminationlayer_view as
select
    airport_heliport.surfacecontaminationlayer_pt.id::integer as id,
    airport_heliport.surfacecontaminationlayer_pt.nilreason::text AS surfacecontaminationlayer_nilreason,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.layerorder_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.layerorder_nilreason || ')')::text as layerorder,
    coalesce(cast(airport_heliport.surfacecontaminationlayer.type_value as varchar), '(' || airport_heliport.surfacecontaminationlayer.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_cgvabw.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_elevatedsurface_view_cgvabw.attr::jsonb  as extent,
    notes_note_view_xaopnh.annotation::jsonb as annotation
from airport_heliport.surfacecontaminationlayer_pt 
inner join airport_heliport.surfacecontaminationlayer on airport_heliport.surfacecontaminationlayer_pt.surfacecontaminationlayer_id = airport_heliport.surfacecontaminationlayer.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedsurface_lat_nugild.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedsurface_lat_nugild.id,
      'elevation', geometry_elevatedsurface_lat_nugild.elevation,
      'geoidUndulation', geometry_elevatedsurface_lat_nugild.geoidUndulation,
      'verticalDatum', geometry_elevatedsurface_lat_nugild.verticalDatum,
      'verticalAccuracy', geometry_elevatedsurface_lat_nugild.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedsurface_lat_nugild.horizontalAccuracy
    )) AS attr
  from master_join master_join_fwkeex
  join geometry.elevatedsurface_view geometry_elevatedsurface_lat_nugild on master_join_fwkeex.target_id = geometry_elevatedsurface_lat_nugild.id
  where master_join_fwkeex.source_id = airport_heliport.surfacecontaminationlayer.id
) as geometry_elevatedsurface_view_cgvabw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqpusa.*) AS annotation
  from master_join master_join_jplsgq
  join notes.note_view notes_note_lat_sqpusa on master_join_jplsgq.target_id = notes_note_lat_sqpusa.id
  where master_join_jplsgq.source_id = airport_heliport.surfacecontaminationlayer.id
) as notes_note_view_xaopnh on TRUE;
-- AerialRefuellingPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists aerial_refuelling.aerialrefuellingpoint_view cascade;
create materialized view aerial_refuelling.aerialrefuellingpoint_view as
select
    aerial_refuelling.aerialrefuellingpoint_pt.id::integer as id,
    aerial_refuelling.aerialrefuellingpoint_pt.nilreason::text AS aerialrefuellingpoint_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.reportingatc_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.flyover_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.waypoint_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.radarguidance_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.sequence_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.sequence_nilreason || ')')::text as sequence,
    coalesce(cast(aerial_refuelling.aerialrefuellingpoint.usagetype_value as varchar), '(' || aerial_refuelling.aerialrefuellingpoint.usagetype_nilreason || ')')::text as usagetype,
    coalesce(cast(navaids_points_designatedpoint_pt_reatzm.title as varchar), '(' || navaids_points_designatedpoint_pt_reatzm.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_reatzm.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ibslda.title as varchar), '(' || navaids_points_navaid_pt_ibslda.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ibslda.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rqiixk.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rqiixk.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_rqiixk.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ujklsd.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ujklsd.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ujklsd.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_fmmjiv.title as varchar), '(' || airport_heliport_airportheliport_pt_fmmjiv.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_fmmjiv.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_zvpdck.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_zvpdck.longitude AS pointchoiceposition_longitude,
    geometry_point_view_zvpdck.latitude AS pointchoiceposition_latitude,
    geometry_point_view_zvpdck.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_dxqoqp.title as varchar), '(' || shared_radiofrequencyarea_pt_dxqoqp.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_dxqoqp.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_nxpshg.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_sjmsbj.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellingpoint_pt 
inner join aerial_refuelling.aerialrefuellingpoint on aerial_refuelling.aerialrefuellingpoint_pt.aerialrefuellingpoint_id = aerial_refuelling.aerialrefuellingpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_reatzm on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_reatzm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ibslda on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_navaidsystem_id = navaids_points_navaid_pt_ibslda.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rqiixk on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rqiixk.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ujklsd on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ujklsd.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fmmjiv on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_fmmjiv.id
left join geometry.point_view geometry_point_view_zvpdck on aerial_refuelling.aerialrefuellingpoint.aerialrefuellingpoint_position_id = geometry_point_view_zvpdck.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_dxqoqp on aerial_refuelling.aerialrefuellingpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_dxqoqp.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_uejvuz.id) as facilitymakeup
  from master_join master_join_qvgqpb
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_uejvuz on master_join_qvgqpb.target_id = navaids_points_pointreference_lat_uejvuz.id
  where master_join_qvgqpb.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as navaids_points_pointreference_pt_nxpshg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wizfji.*) AS annotation
  from master_join master_join_zsalde
  join notes.note_view notes_note_lat_wizfji on master_join_zsalde.target_id = notes_note_lat_wizfji.id
  where master_join_zsalde.source_id = aerial_refuelling.aerialrefuellingpoint.id
) as notes_note_view_sjmsbj on TRUE;
-- DirectFlightSegmentPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.directflightsegment_view cascade;
create materialized view routes.directflightsegment_view as
select
    routes.directflightsegment_pt.id::integer as id,
    routes.directflightsegment_pt.nilreason::text AS directflightsegment_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_ctfdms.title as varchar), '(' || navaids_points_designatedpoint_pt_ctfdms.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ctfdms.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_qpzlrp.title as varchar), '(' || navaids_points_designatedpoint_pt_qpzlrp.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_qpzlrp.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ejwqnr.title as varchar), '(' || navaids_points_navaid_pt_ejwqnr.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_ejwqnr.href::text AS endnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_yapicn.title as varchar), '(' || navaids_points_navaid_pt_yapicn.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_yapicn.href::text AS startnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_iyapmo.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_iyapmo.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_iyapmo.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tvfiyd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tvfiyd.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_tvfiyd.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hgefmp.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hgefmp.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hgefmp.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rwvdze.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rwvdze.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rwvdze.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_glpauv.title as varchar), '(' || airport_heliport_airportheliport_pt_glpauv.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_glpauv.href::text AS endairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_pmlcrq.title as varchar), '(' || airport_heliport_airportheliport_pt_pmlcrq.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_pmlcrq.href::text AS startairportreferencepoint_href,
    geometry_point_view_nfhkyz.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_nfhkyz.longitude AS endposition_longitude,
    geometry_point_view_nfhkyz.latitude AS endposition_latitude,
    geometry_point_view_nfhkyz.horizontalAccuracy AS endposition_horizontalaccuracy,
    geometry_point_view_blsuje.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_blsuje.longitude AS startposition_longitude,
    geometry_point_view_blsuje.latitude AS startposition_latitude,
    geometry_point_view_blsuje.horizontalAccuracy AS startposition_horizontalaccuracy,
    notes_note_view_vtejel.annotation::jsonb as annotation
from routes.directflightsegment_pt 
inner join routes.directflightsegment on routes.directflightsegment_pt.directflightsegment_id = routes.directflightsegment.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ctfdms on routes.directflightsegment.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ctfdms.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ejwqnr on routes.directflightsegment.end_navaidsystem_id = navaids_points_navaid_pt_ejwqnr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_iyapmo on routes.directflightsegment.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_iyapmo.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hgefmp on routes.directflightsegment.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hgefmp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_glpauv on routes.directflightsegment.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_glpauv.id
left join geometry.point_view geometry_point_view_nfhkyz on routes.directflightsegment.end_position_id = geometry_point_view_nfhkyz.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_qpzlrp on routes.directflightsegment.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_qpzlrp.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_yapicn on routes.directflightsegment.start_navaidsystem_id = navaids_points_navaid_pt_yapicn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tvfiyd on routes.directflightsegment.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tvfiyd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rwvdze on routes.directflightsegment.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rwvdze.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_pmlcrq on routes.directflightsegment.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_pmlcrq.id
left join geometry.point_view geometry_point_view_blsuje on routes.directflightsegment.start_position_id = geometry_point_view_blsuje.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cyxyfo.*) AS annotation
  from master_join master_join_scopnk
  join notes.note_view notes_note_lat_cyxyfo on master_join_scopnk.target_id = notes_note_lat_cyxyfo.id
  where master_join_scopnk.source_id = routes.directflightsegment.id
) as notes_note_view_vtejel on TRUE;
-- EnRouteSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.enroutesegmentpoint_view cascade;
create materialized view navaids_points.enroutesegmentpoint_view as
select
    navaids_points.enroutesegmentpoint_pt.id::integer as id,
    navaids_points.enroutesegmentpoint_pt.nilreason::text AS enroutesegmentpoint_nilreason,
    coalesce(cast(navaids_points.enroutesegmentpoint.reportingatc_value as varchar), '(' || navaids_points.enroutesegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.enroutesegmentpoint.flyover_value as varchar), '(' || navaids_points.enroutesegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.enroutesegmentpoint.waypoint_value as varchar), '(' || navaids_points.enroutesegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.enroutesegmentpoint.radarguidance_value as varchar), '(' || navaids_points.enroutesegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolefreeflight_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolefreeflight_nilreason || ')')::text as rolefreeflight,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolervsm_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolervsm_nilreason || ')')::text as rolervsm,
    coalesce(cast(navaids_points.enroutesegmentpoint.rolemilitarytraining_value as varchar), '(' || navaids_points.enroutesegmentpoint.rolemilitarytraining_nilreason || ')')::text as rolemilitarytraining,
    coalesce(cast(navaids_points.enroutesegmentpoint.turnradius_value as varchar) || ' ' || navaids_points.enroutesegmentpoint.turnradius_uom, '(' || navaids_points.enroutesegmentpoint.turnradius_nilreason || ')')::text as turnradius,
    coalesce(cast(navaids_points_designatedpoint_pt_hjszsr.title as varchar), '(' || navaids_points_designatedpoint_pt_hjszsr.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_hjszsr.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_wvbzwh.title as varchar), '(' || navaids_points_navaid_pt_wvbzwh.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_wvbzwh.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bmwdrp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bmwdrp.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_bmwdrp.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hseclt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hseclt.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hseclt.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_zgezit.title as varchar), '(' || airport_heliport_airportheliport_pt_zgezit.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_zgezit.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_bpdozi.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_bpdozi.longitude AS pointchoiceposition_longitude,
    geometry_point_view_bpdozi.latitude AS pointchoiceposition_latitude,
    geometry_point_view_bpdozi.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_ocvuzs.title as varchar), '(' || shared_radiofrequencyarea_pt_ocvuzs.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_ocvuzs.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_uhxjfx.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_vtqomo.annotation::jsonb as annotation
from navaids_points.enroutesegmentpoint_pt 
inner join navaids_points.enroutesegmentpoint on navaids_points.enroutesegmentpoint_pt.enroutesegmentpoint_id = navaids_points.enroutesegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hjszsr on navaids_points.enroutesegmentpoint.enroutesegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_hjszsr.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_wvbzwh on navaids_points.enroutesegmentpoint.enroutesegmentpoint_navaidsystem_id = navaids_points_navaid_pt_wvbzwh.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bmwdrp on navaids_points.enroutesegmentpoint.enroutesegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bmwdrp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hseclt on navaids_points.enroutesegmentpoint.enroutesegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hseclt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zgezit on navaids_points.enroutesegmentpoint.enroutesegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_zgezit.id
left join geometry.point_view geometry_point_view_bpdozi on navaids_points.enroutesegmentpoint.enroutesegmentpoint_position_id = geometry_point_view_bpdozi.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_ocvuzs on navaids_points.enroutesegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_ocvuzs.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_suudel.id) as facilitymakeup
  from master_join master_join_zidkrv
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_suudel on master_join_zidkrv.target_id = navaids_points_pointreference_lat_suudel.id
  where master_join_zidkrv.source_id = navaids_points.enroutesegmentpoint.id
) as navaids_points_pointreference_pt_uhxjfx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vgqsrw.*) AS annotation
  from master_join master_join_nurtrd
  join notes.note_view notes_note_lat_vgqsrw on master_join_nurtrd.target_id = notes_note_lat_vgqsrw.id
  where master_join_nurtrd.source_id = navaids_points.enroutesegmentpoint.id
) as notes_note_view_vtqomo on TRUE;
-- FlightConditionElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightconditionelement_view cascade;
create materialized view routes.flightconditionelement_view as
select
    routes.flightconditionelement_pt.id::integer as id,
    routes.flightconditionelement_pt.nilreason::text AS flightconditionelement_nilreason,
    coalesce(cast(routes.flightconditionelement.index_value as varchar), '(' || routes.flightconditionelement.index_nilreason || ')')::text as index,
    coalesce(cast(airport_heliport_airportheliport_pt_rlomsq.title as varchar), '(' || airport_heliport_airportheliport_pt_rlomsq.nilreason[1] || ')')::text AS flightconditionairportheliportcondition,
    airport_heliport_airportheliport_pt_rlomsq.href::text AS flightconditionairportheliportcondition_href,
    coalesce(cast(airport_heliport_airportheliport_pt_btdpis.title as varchar), '(' || airport_heliport_airportheliport_pt_btdpis.nilreason[1] || ')')::text AS significantpointconditionairportreferencepoint,
    airport_heliport_airportheliport_pt_btdpis.href::text AS significantpointconditionairportreferencepoint_href,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_mnzvnh.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_mnzvnh.nilreason[1] || ')')::text AS flightconditionstandardinstrumentdeparturecondition,
    procedure_standardinstrumentdeparture_pt_mnzvnh.href::text AS flightconditionstandardinstrumentdeparturecondition_href,
    to_jsonb(routes_routeportion_pt_vwgpfi.id)::jsonb AS flightconditionrouteportioncondition,
    coalesce(cast(organisation_organisationauthority_pt_fnyscf.title as varchar), '(' || organisation_organisationauthority_pt_fnyscf.nilreason[1] || ')')::text AS flightconditionorganisationcondition,
    organisation_organisationauthority_pt_fnyscf.href::text AS flightconditionorganisationcondition_href,
    coalesce(cast(navaids_points_designatedpoint_pt_xjecte.title as varchar), '(' || navaids_points_designatedpoint_pt_xjecte.nilreason[1] || ')')::text AS significantpointconditionfixdesignatedpoint,
    navaids_points_designatedpoint_pt_xjecte.href::text AS significantpointconditionfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_zcoerd.title as varchar), '(' || navaids_points_navaid_pt_zcoerd.nilreason[1] || ')')::text AS significantpointconditionnavaidsystem,
    navaids_points_navaid_pt_zcoerd.href::text AS significantpointconditionnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bvsywg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bvsywg.nilreason[1] || ')')::text AS significantpointconditionaimingpoint,
    airport_heliport_touchdownliftoff_pt_bvsywg.href::text AS significantpointconditionaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_phtxcv.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_phtxcv.nilreason[1] || ')')::text AS significantpointconditionrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_phtxcv.href::text AS significantpointconditionrunwaypoint_href,
    geometry_point_view_mortts.geom::geometry(Point, 4326) AS significantpointconditionposition_geom,
    geometry_point_view_mortts.longitude AS significantpointconditionposition_longitude,
    geometry_point_view_mortts.latitude AS significantpointconditionposition_latitude,
    geometry_point_view_mortts.horizontalAccuracy AS significantpointconditionposition_horizontalaccuracy,
    to_jsonb(shared_aircraftcharacteristic_pt_ljsgek.id)::jsonb AS flightconditionaircraft,
    coalesce(cast(routes_airspacebordercrossing_pt_mjsyka.title as varchar), '(' || routes_airspacebordercrossing_pt_mjsyka.nilreason[1] || ')')::text AS flightconditionbordercrossingcondition,
    routes_airspacebordercrossing_pt_mjsyka.href::text AS flightconditionbordercrossingcondition_href,
    coalesce(cast(airspace_airspace_pt_jazgls.title as varchar), '(' || airspace_airspace_pt_jazgls.nilreason[1] || ')')::text AS flightconditionairspacecondition,
    airspace_airspace_pt_jazgls.href::text AS flightconditionairspacecondition_href,
    to_jsonb(shared_flightcharacteristic_pt_zmckuz.id)::jsonb AS flightconditionflight,
    coalesce(cast(procedure_standardinstrumentarrival_pt_moezcg.title as varchar), '(' || procedure_standardinstrumentarrival_pt_moezcg.nilreason[1] || ')')::text AS flightconditionstandardinstrumentarrivalcondition,
    procedure_standardinstrumentarrival_pt_moezcg.href::text AS flightconditionstandardinstrumentarrivalcondition_href,
    to_jsonb(routes_flightconditioncombination_pt_ahjhdw.id)::jsonb AS flightconditionoperand,
    to_jsonb(shared_meteorology_pt_mjshzu.id)::jsonb AS flightconditionweather,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_lwvcxw.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_lwvcxw.nilreason[1] || ')')::text AS flightconditionaerialrefuellingcondition,
    aerial_refuelling_aerialrefuelling_pt_lwvcxw.href::text AS flightconditionaerialrefuellingcondition_href,
    to_jsonb(routes_flightconditioncircumstance_pt_ppxzpc.id)::jsonb AS operationalcondition,
    routes_flightrestrictionlevel_pt_bdimra.flightlevel::jsonb as flightlevel,
    notes_note_view_bzqdoi.annotation::jsonb as annotation
from routes.flightconditionelement_pt 
inner join routes.flightconditionelement on routes.flightconditionelement_pt.flightconditionelement_id = routes.flightconditionelement.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rlomsq on routes.flightconditionelement.flightcondition_airportheliportcondition_id = airport_heliport_airportheliport_pt_rlomsq.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_mnzvnh on routes.flightconditionelement.flightcondition_standardinstrumentdeparturecondition_id = procedure_standardinstrumentdeparture_pt_mnzvnh.id
left join routes.routeportion_pt routes_routeportion_pt_vwgpfi on routes.flightconditionelement.flightcondition_routeportioncondition_id = routes_routeportion_pt_vwgpfi.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_fnyscf on routes.flightconditionelement.flightcondition_organisationcondition_id = organisation_organisationauthority_pt_fnyscf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_xjecte on routes.flightconditionelement.significantpointcondition_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_xjecte.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_zcoerd on routes.flightconditionelement.significantpointcondition_navaidsystem_id = navaids_points_navaid_pt_zcoerd.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bvsywg on routes.flightconditionelement.significantpointcondition_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bvsywg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_phtxcv on routes.flightconditionelement.significantpointcondition_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_phtxcv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_btdpis on routes.flightconditionelement.significantpointcondition_airportreferencepoint_id = airport_heliport_airportheliport_pt_btdpis.id
left join geometry.point_view geometry_point_view_mortts on routes.flightconditionelement.significantpointcondition_position_id = geometry_point_view_mortts.id
left join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_pt_ljsgek on routes.flightconditionelement.flightcondition_aircraft_id = shared_aircraftcharacteristic_pt_ljsgek.id
left join routes.airspacebordercrossing_pt routes_airspacebordercrossing_pt_mjsyka on routes.flightconditionelement.flightcondition_bordercrossingcondition_id = routes_airspacebordercrossing_pt_mjsyka.id
left join airspace.airspace_pt airspace_airspace_pt_jazgls on routes.flightconditionelement.flightcondition_airspacecondition_id = airspace_airspace_pt_jazgls.id
left join shared.flightcharacteristic_pt shared_flightcharacteristic_pt_zmckuz on routes.flightconditionelement.flightcondition_flight_id = shared_flightcharacteristic_pt_zmckuz.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_moezcg on routes.flightconditionelement.flightcondition_standardinstrumentarrivalcondition_id = procedure_standardinstrumentarrival_pt_moezcg.id
left join routes.flightconditioncombination_pt routes_flightconditioncombination_pt_ahjhdw on routes.flightconditionelement.flightcondition_operand_id = routes_flightconditioncombination_pt_ahjhdw.id
left join shared.meteorology_pt shared_meteorology_pt_mjshzu on routes.flightconditionelement.flightcondition_weather_id = shared_meteorology_pt_mjshzu.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_lwvcxw on routes.flightconditionelement.flightcondition_aerialrefuellingcondition_id = aerial_refuelling_aerialrefuelling_pt_lwvcxw.id
left join routes.flightconditioncircumstance_pt routes_flightconditioncircumstance_pt_ppxzpc on routes.flightconditionelement.operationalcondition_id = routes_flightconditioncircumstance_pt_ppxzpc.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_vopuwq.id) as flightlevel
  from master_join master_join_qqlmvm
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_vopuwq on master_join_qqlmvm.target_id = routes_flightrestrictionlevel_lat_vopuwq.id
  where master_join_qqlmvm.source_id = routes.flightconditionelement.id
) as routes_flightrestrictionlevel_pt_bdimra on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uepcko.*) AS annotation
  from master_join master_join_niqcvj
  join notes.note_view notes_note_lat_uepcko on master_join_niqcvj.target_id = notes_note_lat_uepcko.id
  where master_join_niqcvj.source_id = routes.flightconditionelement.id
) as notes_note_view_bzqdoi on TRUE;
-- FlightRoutingElementPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.flightroutingelement_view cascade;
create materialized view routes.flightroutingelement_view as
select
    routes.flightroutingelement_pt.id::integer as id,
    routes.flightroutingelement_pt.nilreason::text AS flightroutingelement_nilreason,
    coalesce(cast(routes.flightroutingelement.ordernumber_value as varchar), '(' || routes.flightroutingelement.ordernumber_nilreason || ')')::text as ordernumber,
    coalesce(cast(routes.flightroutingelement.speedreference_value as varchar), '(' || routes.flightroutingelement.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(routes.flightroutingelement.speedcriteria_value as varchar), '(' || routes.flightroutingelement.speedcriteria_nilreason || ')')::text as speedcriteria,
    coalesce(cast(routes.flightroutingelement.speed_value as varchar) || ' ' || routes.flightroutingelement.speed_uom, '(' || routes.flightroutingelement.speed_nilreason || ')')::text as speed,
    coalesce(cast(procedure_standardinstrumentarrival_pt_bfsxfe.title as varchar), '(' || procedure_standardinstrumentarrival_pt_bfsxfe.nilreason[1] || ')')::text AS elementstandardinstrumentarrivalelement,
    procedure_standardinstrumentarrival_pt_bfsxfe.href::text AS elementstandardinstrumentarrivalelement_href,
    coalesce(cast(airspace_airspace_pt_nesjtv.title as varchar), '(' || airspace_airspace_pt_nesjtv.nilreason[1] || ')')::text AS elementairspaceelement,
    airspace_airspace_pt_nesjtv.href::text AS elementairspaceelement_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ulpjta.title as varchar), '(' || navaids_points_designatedpoint_pt_ulpjta.nilreason[1] || ')')::text AS pointelementfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ulpjta.href::text AS pointelementfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xijuzc.title as varchar), '(' || navaids_points_navaid_pt_xijuzc.nilreason[1] || ')')::text AS pointelementnavaidsystem,
    navaids_points_navaid_pt_xijuzc.href::text AS pointelementnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_azfwwh.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_azfwwh.nilreason[1] || ')')::text AS pointelementaimingpoint,
    airport_heliport_touchdownliftoff_pt_azfwwh.href::text AS pointelementaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_kzwflt.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_kzwflt.nilreason[1] || ')')::text AS pointelementrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_kzwflt.href::text AS pointelementrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rxeziy.title as varchar), '(' || airport_heliport_airportheliport_pt_rxeziy.nilreason[1] || ')')::text AS pointelementairportreferencepoint,
    airport_heliport_airportheliport_pt_rxeziy.href::text AS pointelementairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kqpxyk.title as varchar), '(' || airport_heliport_airportheliport_pt_kqpxyk.nilreason[1] || ')')::text AS elementairportheliportelement,
    airport_heliport_airportheliport_pt_kqpxyk.href::text AS elementairportheliportelement_href,
    geometry_point_view_twlsle.geom::geometry(Point, 4326) AS pointelementposition_geom,
    geometry_point_view_twlsle.longitude AS pointelementposition_longitude,
    geometry_point_view_twlsle.latitude AS pointelementposition_latitude,
    geometry_point_view_twlsle.horizontalAccuracy AS pointelementposition_horizontalaccuracy,
    to_jsonb(routes_directflightsegment_pt_avwlob.id)::jsonb AS elementdirectflightelement,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_rytdxm.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_rytdxm.nilreason[1] || ')')::text AS elementstandardinstrumentdepartureelement,
    procedure_standardinstrumentdeparture_pt_rytdxm.href::text AS elementstandardinstrumentdepartureelement_href,
    to_jsonb(routes_routeportion_pt_exbgva.id)::jsonb AS elementrouteportionelement,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_nrzavc.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_nrzavc.nilreason[1] || ')')::text AS elementaerialrefuellingelement,
    aerial_refuelling_aerialrefuelling_pt_nrzavc.href::text AS elementaerialrefuellingelement_href,
    routes_flightrestrictionlevel_pt_xjdjyj.flightlevel::jsonb as flightlevel,
    notes_note_view_warola.annotation::jsonb as annotation
from routes.flightroutingelement_pt 
inner join routes.flightroutingelement on routes.flightroutingelement_pt.flightroutingelement_id = routes.flightroutingelement.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_bfsxfe on routes.flightroutingelement.element_standardinstrumentarrivalelement_id = procedure_standardinstrumentarrival_pt_bfsxfe.id
left join airspace.airspace_pt airspace_airspace_pt_nesjtv on routes.flightroutingelement.element_airspaceelement_id = airspace_airspace_pt_nesjtv.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ulpjta on routes.flightroutingelement.pointelement_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ulpjta.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xijuzc on routes.flightroutingelement.pointelement_navaidsystem_id = navaids_points_navaid_pt_xijuzc.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_azfwwh on routes.flightroutingelement.pointelement_aimingpoint_id = airport_heliport_touchdownliftoff_pt_azfwwh.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_kzwflt on routes.flightroutingelement.pointelement_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_kzwflt.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rxeziy on routes.flightroutingelement.pointelement_airportreferencepoint_id = airport_heliport_airportheliport_pt_rxeziy.id
left join geometry.point_view geometry_point_view_twlsle on routes.flightroutingelement.pointelement_position_id = geometry_point_view_twlsle.id
left join routes.directflightsegment_pt routes_directflightsegment_pt_avwlob on routes.flightroutingelement.element_directflightelement_id = routes_directflightsegment_pt_avwlob.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_rytdxm on routes.flightroutingelement.element_standardinstrumentdepartureelement_id = procedure_standardinstrumentdeparture_pt_rytdxm.id
left join routes.routeportion_pt routes_routeportion_pt_exbgva on routes.flightroutingelement.element_routeportionelement_id = routes_routeportion_pt_exbgva.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kqpxyk on routes.flightroutingelement.element_airportheliportelement_id = airport_heliport_airportheliport_pt_kqpxyk.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_nrzavc on routes.flightroutingelement.element_aerialrefuellingelement_id = aerial_refuelling_aerialrefuelling_pt_nrzavc.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionlevel_lat_oiocoj.id) as flightlevel
  from master_join master_join_qgicsw
  join routes.flightrestrictionlevel_pt routes_flightrestrictionlevel_lat_oiocoj on master_join_qgicsw.target_id = routes_flightrestrictionlevel_lat_oiocoj.id
  where master_join_qgicsw.source_id = routes.flightroutingelement.id
) as routes_flightrestrictionlevel_pt_xjdjyj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rkkzoi.*) AS annotation
  from master_join master_join_trtihk
  join notes.note_view notes_note_lat_rkkzoi on master_join_trtihk.target_id = notes_note_lat_rkkzoi.id
  where master_join_trtihk.source_id = routes.flightroutingelement.id
) as notes_note_view_warola on TRUE;
-- RoutePortionPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists routes.routeportion_view cascade;
create materialized view routes.routeportion_view as
select
    routes.routeportion_pt.id::integer as id,
    routes.routeportion_pt.nilreason::text AS routeportion_nilreason,
    coalesce(cast(navaids_points_designatedpoint_pt_zqpcis.title as varchar), '(' || navaids_points_designatedpoint_pt_zqpcis.nilreason[1] || ')')::text AS startfixdesignatedpoint,
    navaids_points_designatedpoint_pt_zqpcis.href::text AS startfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_eqloco.title as varchar), '(' || navaids_points_designatedpoint_pt_eqloco.nilreason[1] || ')')::text AS intermediatepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_eqloco.href::text AS intermediatepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_blngpi.title as varchar), '(' || navaids_points_designatedpoint_pt_blngpi.nilreason[1] || ')')::text AS endfixdesignatedpoint,
    navaids_points_designatedpoint_pt_blngpi.href::text AS endfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_nlleva.title as varchar), '(' || navaids_points_navaid_pt_nlleva.nilreason[1] || ')')::text AS startnavaidsystem,
    navaids_points_navaid_pt_nlleva.href::text AS startnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_ndtjzp.title as varchar), '(' || navaids_points_navaid_pt_ndtjzp.nilreason[1] || ')')::text AS intermediatepointnavaidsystem,
    navaids_points_navaid_pt_ndtjzp.href::text AS intermediatepointnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_pfvnqu.title as varchar), '(' || navaids_points_navaid_pt_pfvnqu.nilreason[1] || ')')::text AS endnavaidsystem,
    navaids_points_navaid_pt_pfvnqu.href::text AS endnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fjomaw.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fjomaw.nilreason[1] || ')')::text AS startaimingpoint,
    airport_heliport_touchdownliftoff_pt_fjomaw.href::text AS startaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_jjbluj.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_jjbluj.nilreason[1] || ')')::text AS intermediatepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_jjbluj.href::text AS intermediatepointaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_kcghsd.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_kcghsd.nilreason[1] || ')')::text AS endaimingpoint,
    airport_heliport_touchdownliftoff_pt_kcghsd.href::text AS endaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_eqmbpc.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_eqmbpc.nilreason[1] || ')')::text AS startrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_eqmbpc.href::text AS startrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_rgueup.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_rgueup.nilreason[1] || ')')::text AS intermediatepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_rgueup.href::text AS intermediatepointrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_pssrxu.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_pssrxu.nilreason[1] || ')')::text AS endrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_pssrxu.href::text AS endrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rizbcm.title as varchar), '(' || airport_heliport_airportheliport_pt_rizbcm.nilreason[1] || ')')::text AS startairportreferencepoint,
    airport_heliport_airportheliport_pt_rizbcm.href::text AS startairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bfavxo.title as varchar), '(' || airport_heliport_airportheliport_pt_bfavxo.nilreason[1] || ')')::text AS intermediatepointairportreferencepoint,
    airport_heliport_airportheliport_pt_bfavxo.href::text AS intermediatepointairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ytmjtz.title as varchar), '(' || airport_heliport_airportheliport_pt_ytmjtz.nilreason[1] || ')')::text AS endairportreferencepoint,
    airport_heliport_airportheliport_pt_ytmjtz.href::text AS endairportreferencepoint_href,
    geometry_point_view_rvnfxf.geom::geometry(Point, 4326) AS startposition_geom,
    geometry_point_view_rvnfxf.longitude AS startposition_longitude,
    geometry_point_view_rvnfxf.latitude AS startposition_latitude,
    geometry_point_view_rvnfxf.horizontalAccuracy AS startposition_horizontalaccuracy,
    geometry_point_view_uvclia.geom::geometry(Point, 4326) AS intermediatepointposition_geom,
    geometry_point_view_uvclia.longitude AS intermediatepointposition_longitude,
    geometry_point_view_uvclia.latitude AS intermediatepointposition_latitude,
    geometry_point_view_uvclia.horizontalAccuracy AS intermediatepointposition_horizontalaccuracy,
    geometry_point_view_ccdtgx.geom::geometry(Point, 4326) AS endposition_geom,
    geometry_point_view_ccdtgx.longitude AS endposition_longitude,
    geometry_point_view_ccdtgx.latitude AS endposition_latitude,
    geometry_point_view_ccdtgx.horizontalAccuracy AS endposition_horizontalaccuracy,
    coalesce(cast(routes_route_pt_qjmlnf.title as varchar), '(' || routes_route_pt_qjmlnf.nilreason[1] || ')')::text AS referencedroute,
    routes_route_pt_qjmlnf.href::text AS referencedroute_href,
    notes_note_view_gmjgwu.annotation::jsonb as annotation
from routes.routeportion_pt 
inner join routes.routeportion on routes.routeportion_pt.routeportion_id = routes.routeportion.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zqpcis on routes.routeportion.start_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zqpcis.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_nlleva on routes.routeportion.start_navaidsystem_id = navaids_points_navaid_pt_nlleva.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fjomaw on routes.routeportion.start_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fjomaw.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_eqmbpc on routes.routeportion.start_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_eqmbpc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rizbcm on routes.routeportion.start_airportreferencepoint_id = airport_heliport_airportheliport_pt_rizbcm.id
left join geometry.point_view geometry_point_view_rvnfxf on routes.routeportion.start_position_id = geometry_point_view_rvnfxf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_eqloco on routes.routeportion.intermediatepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_eqloco.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ndtjzp on routes.routeportion.intermediatepoint_navaidsystem_id = navaids_points_navaid_pt_ndtjzp.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_jjbluj on routes.routeportion.intermediatepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_jjbluj.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_rgueup on routes.routeportion.intermediatepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_rgueup.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bfavxo on routes.routeportion.intermediatepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_bfavxo.id
left join geometry.point_view geometry_point_view_uvclia on routes.routeportion.intermediatepoint_position_id = geometry_point_view_uvclia.id
left join routes.route_pt routes_route_pt_qjmlnf on routes.routeportion.referencedroute_id = routes_route_pt_qjmlnf.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_blngpi on routes.routeportion.end_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_blngpi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_pfvnqu on routes.routeportion.end_navaidsystem_id = navaids_points_navaid_pt_pfvnqu.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_kcghsd on routes.routeportion.end_aimingpoint_id = airport_heliport_touchdownliftoff_pt_kcghsd.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_pssrxu on routes.routeportion.end_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_pssrxu.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ytmjtz on routes.routeportion.end_airportreferencepoint_id = airport_heliport_airportheliport_pt_ytmjtz.id
left join geometry.point_view geometry_point_view_ccdtgx on routes.routeportion.end_position_id = geometry_point_view_ccdtgx.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_senmdm.*) AS annotation
  from master_join master_join_fcrcbo
  join notes.note_view notes_note_lat_senmdm on master_join_fcrcbo.target_id = notes_note_lat_senmdm.id
  where master_join_fcrcbo.source_id = routes.routeportion.id
) as notes_note_view_gmjgwu on TRUE;
-- TerminalSegmentPointPropertyType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.terminalsegmentpoint_view cascade;
create materialized view navaids_points.terminalsegmentpoint_view as
select
    navaids_points.terminalsegmentpoint_pt.id::integer as id,
    navaids_points.terminalsegmentpoint_pt.nilreason::text AS terminalsegmentpoint_nilreason,
    coalesce(cast(navaids_points.terminalsegmentpoint.reportingatc_value as varchar), '(' || navaids_points.terminalsegmentpoint.reportingatc_nilreason || ')')::text as reportingatc,
    coalesce(cast(navaids_points.terminalsegmentpoint.flyover_value as varchar), '(' || navaids_points.terminalsegmentpoint.flyover_nilreason || ')')::text as flyover,
    coalesce(cast(navaids_points.terminalsegmentpoint.waypoint_value as varchar), '(' || navaids_points.terminalsegmentpoint.waypoint_nilreason || ')')::text as waypoint,
    coalesce(cast(navaids_points.terminalsegmentpoint.radarguidance_value as varchar), '(' || navaids_points.terminalsegmentpoint.radarguidance_nilreason || ')')::text as radarguidance,
    coalesce(cast(navaids_points.terminalsegmentpoint.role_value as varchar), '(' || navaids_points.terminalsegmentpoint.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.terminalsegmentpoint.leadradial_value as varchar), '(' || navaids_points.terminalsegmentpoint.leadradial_nilreason || ')')::text as leadradial,
    coalesce(cast(navaids_points.terminalsegmentpoint.indicatorfacf_value as varchar), '(' || navaids_points.terminalsegmentpoint.indicatorfacf_nilreason || ')')::text as indicatorfacf,
    coalesce(cast(navaids_points.terminalsegmentpoint.leaddme_value as varchar) || ' ' || navaids_points.terminalsegmentpoint.leaddme_uom, '(' || navaids_points.terminalsegmentpoint.leaddme_nilreason || ')')::text as leaddme,
    coalesce(cast(navaids_points_designatedpoint_pt_uocekm.title as varchar), '(' || navaids_points_designatedpoint_pt_uocekm.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_uocekm.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_kibonr.title as varchar), '(' || navaids_points_navaid_pt_kibonr.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_kibonr.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_tmitoa.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_tmitoa.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_tmitoa.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_hktxot.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_hktxot.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_hktxot.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_obdtyj.title as varchar), '(' || airport_heliport_airportheliport_pt_obdtyj.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_obdtyj.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_hovkpp.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_hovkpp.longitude AS pointchoiceposition_longitude,
    geometry_point_view_hovkpp.latitude AS pointchoiceposition_latitude,
    geometry_point_view_hovkpp.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    coalesce(cast(shared_radiofrequencyarea_pt_jmywye.title as varchar), '(' || shared_radiofrequencyarea_pt_jmywye.nilreason[1] || ')')::text AS extendedservicevolume,
    shared_radiofrequencyarea_pt_jmywye.href::text AS extendedservicevolume_href,
    navaids_points_pointreference_pt_wdtzgw.facilitymakeup::jsonb as facilitymakeup,
    notes_note_view_feppip.annotation::jsonb as annotation
from navaids_points.terminalsegmentpoint_pt 
inner join navaids_points.terminalsegmentpoint on navaids_points.terminalsegmentpoint_pt.terminalsegmentpoint_id = navaids_points.terminalsegmentpoint.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_uocekm on navaids_points.terminalsegmentpoint.terminalsegmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_uocekm.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_kibonr on navaids_points.terminalsegmentpoint.terminalsegmentpoint_navaidsystem_id = navaids_points_navaid_pt_kibonr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_tmitoa on navaids_points.terminalsegmentpoint.terminalsegmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_tmitoa.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_hktxot on navaids_points.terminalsegmentpoint.terminalsegmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_hktxot.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_obdtyj on navaids_points.terminalsegmentpoint.terminalsegmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_obdtyj.id
left join geometry.point_view geometry_point_view_hovkpp on navaids_points.terminalsegmentpoint.terminalsegmentpoint_position_id = geometry_point_view_hovkpp.id
left join shared.radiofrequencyarea_pt shared_radiofrequencyarea_pt_jmywye on navaids_points.terminalsegmentpoint.extendedservicevolume_id = shared_radiofrequencyarea_pt_jmywye.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_pointreference_lat_mqyaqd.id) as facilitymakeup
  from master_join master_join_vkhsag
  join navaids_points.pointreference_pt navaids_points_pointreference_lat_mqyaqd on master_join_vkhsag.target_id = navaids_points_pointreference_lat_mqyaqd.id
  where master_join_vkhsag.source_id = navaids_points.terminalsegmentpoint.id
) as navaids_points_pointreference_pt_wdtzgw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ztloql.*) AS annotation
  from master_join master_join_mpjefu
  join notes.note_view notes_note_lat_ztloql on master_join_mpjefu.target_id = notes_note_lat_ztloql.id
  where master_join_mpjefu.source_id = navaids_points.terminalsegmentpoint.id
) as notes_note_view_feppip on TRUE;
-- AerialRefuellingAnchorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists aerial_refuelling.aerialrefuellinganchor_view cascade;
create materialized view aerial_refuelling.aerialrefuellinganchor_view as
select
    aerial_refuelling.aerialrefuellinganchor_pt.id::integer as id,
    aerial_refuelling.aerialrefuellinganchor_pt.nilreason::text AS aerialrefuellinganchor_nilreason,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.inboundcourse_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.turndirection_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_value as varchar), '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevelreference_nilreason || ')')::text as refuellingbaselevelreference,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.speedlimit_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.speedlimit_uom, '(' || aerial_refuelling.aerialrefuellinganchor.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.legseparation_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.legseparation_uom, '(' || aerial_refuelling.aerialrefuellinganchor.legseparation_nilreason || ')')::text as legseparation,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.leglength_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.leglength_uom, '(' || aerial_refuelling.aerialrefuellinganchor.leglength_nilreason || ')')::text as leglength,
    coalesce(cast(aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_value as varchar) || ' ' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_uom, '(' || aerial_refuelling.aerialrefuellinganchor.refuellingbaselevel_nilreason || ')')::text as refuellingbaselevel,
    geometry_surface_view_whnesx.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_whnesx.horizontalAccuracy as extent_horizontalaccuracy,
    shared_airspacelayer_pt_ldkoqg.verticalextent::jsonb as verticalextent,
    aerial_refuelling_aerialrefuellingpoint_pt_mcfvbg.point::jsonb as point,
    notes_note_view_qtpria.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuellinganchor_pt 
inner join aerial_refuelling.aerialrefuellinganchor on aerial_refuelling.aerialrefuellinganchor_pt.aerialrefuellinganchor_id = aerial_refuelling.aerialrefuellinganchor.id
left join geometry.surface_view geometry_surface_view_whnesx on aerial_refuelling.aerialrefuellinganchor.extent_id = geometry_surface_view_whnesx.id
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_lycpcm.id) as verticalextent
  from master_join master_join_jttvve
  join shared.airspacelayer_pt shared_airspacelayer_lat_lycpcm on master_join_jttvve.target_id = shared_airspacelayer_lat_lycpcm.id
  where master_join_jttvve.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as shared_airspacelayer_pt_ldkoqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingpoint_lat_cxzwsr.id) as point
  from master_join master_join_jgqloz
  join aerial_refuelling.aerialrefuellingpoint_pt aerial_refuelling_aerialrefuellingpoint_lat_cxzwsr on master_join_jgqloz.target_id = aerial_refuelling_aerialrefuellingpoint_lat_cxzwsr.id
  where master_join_jgqloz.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as aerial_refuelling_aerialrefuellingpoint_pt_mcfvbg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xgtvww.*) AS annotation
  from master_join master_join_xlradh
  join notes.note_view notes_note_lat_xgtvww on master_join_xlradh.target_id = notes_note_lat_xgtvww.id
  where master_join_xlradh.source_id = aerial_refuelling.aerialrefuellinganchor.id
) as notes_note_view_qtpria on TRUE;
-- AirspaceVolumePropertyType
-- ['geometry.curve_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists airspace.airspacevolume_view cascade;
create materialized view airspace.airspacevolume_view as
select
    airspace.airspacevolume_pt.id::integer as id,
    airspace.airspacevolume_pt.nilreason::text AS airspacevolume_nilreason,
    coalesce(cast(airspace.airspacevolume.upperlimitreference_value as varchar), '(' || airspace.airspacevolume.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(airspace.airspacevolume.maximumlimitreference_value as varchar), '(' || airspace.airspacevolume.maximumlimitreference_nilreason || ')')::text as maximumlimitreference,
    coalesce(cast(airspace.airspacevolume.lowerlimitreference_value as varchar), '(' || airspace.airspacevolume.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(airspace.airspacevolume.minimumlimitreference_value as varchar), '(' || airspace.airspacevolume.minimumlimitreference_nilreason || ')')::text as minimumlimitreference,
    coalesce(cast(airspace.airspacevolume.upperlimit_value as varchar) || ' ' || airspace.airspacevolume.upperlimit_uom, '(' || airspace.airspacevolume.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(airspace.airspacevolume.maximumlimit_value as varchar) || ' ' || airspace.airspacevolume.maximumlimit_uom, '(' || airspace.airspacevolume.maximumlimit_nilreason || ')')::text as maximumlimit,
    coalesce(cast(airspace.airspacevolume.lowerlimit_value as varchar) || ' ' || airspace.airspacevolume.lowerlimit_uom, '(' || airspace.airspacevolume.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(airspace.airspacevolume.minimumlimit_value as varchar) || ' ' || airspace.airspacevolume.minimumlimit_uom, '(' || airspace.airspacevolume.minimumlimit_nilreason || ')')::text as minimumlimit,
    coalesce(cast(airspace.airspacevolume.width_value as varchar) || ' ' || airspace.airspacevolume.width_uom, '(' || airspace.airspacevolume.width_nilreason || ')')::text as width,
    geometry_surface_view_owduaw.geom::geometry(POLYGON, 4326) AS horizontalprojection_geom,
    geometry_surface_view_owduaw.horizontalAccuracy as horizontalprojection_horizontalaccuracy,
    geometry_curve_view_mjbuzq.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_curve_view_mjbuzq.horizontalAccuracy as centreline_horizontalaccuracy,
    to_jsonb(airspace_airspacevolumedependency_pt_ewbgpw.id)::jsonb AS contributorairspace,
    notes_note_view_yllohp.annotation::jsonb as annotation
from airspace.airspacevolume_pt 
inner join airspace.airspacevolume on airspace.airspacevolume_pt.airspacevolume_id = airspace.airspacevolume.id
left join geometry.surface_view geometry_surface_view_owduaw on airspace.airspacevolume.horizontalprojection_id = geometry_surface_view_owduaw.id
left join geometry.curve_view geometry_curve_view_mjbuzq on airspace.airspacevolume.centreline_id = geometry_curve_view_mjbuzq.id
left join airspace.airspacevolumedependency_pt airspace_airspacevolumedependency_pt_ewbgpw on airspace.airspacevolume.contributorairspace_id = airspace_airspacevolumedependency_pt_ewbgpw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_quuvnd.*) AS annotation
  from master_join master_join_lutcmb
  join notes.note_view notes_note_lat_quuvnd on master_join_lutcmb.target_id = notes_note_lat_quuvnd.id
  where master_join_lutcmb.source_id = airspace.airspacevolume.id
) as notes_note_view_yllohp on TRUE;
-- NavigationAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.navigationareasector_view cascade;
create materialized view procedure.navigationareasector_view as
select
    procedure.navigationareasector_pt.id::integer as id,
    procedure.navigationareasector_pt.nilreason::text AS navigationareasector_nilreason,
    to_jsonb(shared_circlesector_pt_miwqgu.id)::jsonb AS sectordefinition,
    geometry_surface_view_dwqbag.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_dwqbag.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_tvehrz.significantobstacle::jsonb as significantobstacle,
    procedure_sectordesign_pt_dihstv.sectorcriteria::jsonb as sectorcriteria,
    notes_note_view_yhuerp.annotation::jsonb as annotation
from procedure.navigationareasector_pt 
inner join procedure.navigationareasector on procedure.navigationareasector_pt.navigationareasector_id = procedure.navigationareasector.id
left join shared.circlesector_pt shared_circlesector_pt_miwqgu on procedure.navigationareasector.sectordefinition_id = shared_circlesector_pt_miwqgu.id
left join geometry.surface_view geometry_surface_view_dwqbag on procedure.navigationareasector.extent_id = geometry_surface_view_dwqbag.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_hsxwrn.id) as significantobstacle
  from master_join master_join_icahlw
  join shared.obstruction_pt shared_obstruction_lat_hsxwrn on master_join_icahlw.target_id = shared_obstruction_lat_hsxwrn.id
  where master_join_icahlw.source_id = procedure.navigationareasector.id
) as shared_obstruction_pt_tvehrz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_sectordesign_lat_tgwvfd.id) as sectorcriteria
  from master_join master_join_iseneu
  join procedure.sectordesign_pt procedure_sectordesign_lat_tgwvfd on master_join_iseneu.target_id = procedure_sectordesign_lat_tgwvfd.id
  where master_join_iseneu.source_id = procedure.navigationareasector.id
) as procedure_sectordesign_pt_dihstv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xjttzi.*) AS annotation
  from master_join master_join_zwsztr
  join notes.note_view notes_note_lat_xjttzi on master_join_zwsztr.target_id = notes_note_lat_xjttzi.id
  where master_join_zwsztr.source_id = procedure.navigationareasector.id
) as notes_note_view_yhuerp on TRUE;
-- ObstacleAssessmentAreaPropertyType
-- ['geometry.curve_view', 'notes.note_view', 'geometry.surface_view']
drop materialized view if exists shared.obstacleassessmentarea_view cascade;
create materialized view shared.obstacleassessmentarea_view as
select
    shared.obstacleassessmentarea_pt.id::integer as id,
    shared.obstacleassessmentarea_pt.nilreason::text AS obstacleassessmentarea_nilreason,
    coalesce(cast(shared.obstacleassessmentarea.type_value as varchar), '(' || shared.obstacleassessmentarea.type_nilreason || ')')::text as type,
    coalesce(cast(shared.obstacleassessmentarea.sectionnumber_value as varchar), '(' || shared.obstacleassessmentarea.sectionnumber_nilreason || ')')::text as sectionnumber,
    coalesce(cast(shared.obstacleassessmentarea.slope_value as varchar), '(' || shared.obstacleassessmentarea.slope_nilreason || ')')::text as slope,
    coalesce(cast(shared.obstacleassessmentarea.gradientlowhigh_value as varchar), '(' || shared.obstacleassessmentarea.gradientlowhigh_nilreason || ')')::text as gradientlowhigh,
    coalesce(cast(shared.obstacleassessmentarea.surfacezone_value as varchar), '(' || shared.obstacleassessmentarea.surfacezone_nilreason || ')')::text as surfacezone,
    coalesce(cast(shared.obstacleassessmentarea.safetyregulation_value as varchar), '(' || shared.obstacleassessmentarea.safetyregulation_nilreason || ')')::text as safetyregulation,
    coalesce(cast(shared.obstacleassessmentarea.assessedaltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.assessedaltitude_uom, '(' || shared.obstacleassessmentarea.assessedaltitude_nilreason || ')')::text as assessedaltitude,
    coalesce(cast(shared.obstacleassessmentarea.slopeloweraltitude_value as varchar) || ' ' || shared.obstacleassessmentarea.slopeloweraltitude_uom, '(' || shared.obstacleassessmentarea.slopeloweraltitude_nilreason || ')')::text as slopeloweraltitude,
    geometry_surface_view_nkmjzx.geom::geometry(POLYGON, 4326) AS surface_geom,
    geometry_surface_view_nkmjzx.horizontalAccuracy as surface_horizontalaccuracy,
    geometry_curve_view_utbrux.geom::geometry(LINESTRING, 4326) AS startingcurve_geom,
    geometry_curve_view_utbrux.horizontalAccuracy as startingcurve_horizontalaccuracy,
    shared_aircraftcharacteristic_pt_hcznel.aircraftcategory::jsonb as aircraftcategory,
    shared_obstruction_pt_jygglf.significantobstacle::jsonb as significantobstacle,
    notes_note_view_tilcnu.annotation::jsonb as annotation
from shared.obstacleassessmentarea_pt 
inner join shared.obstacleassessmentarea on shared.obstacleassessmentarea_pt.obstacleassessmentarea_id = shared.obstacleassessmentarea.id
left join geometry.surface_view geometry_surface_view_nkmjzx on shared.obstacleassessmentarea.surface_id = geometry_surface_view_nkmjzx.id
left join geometry.curve_view geometry_curve_view_utbrux on shared.obstacleassessmentarea.startingcurve_id = geometry_curve_view_utbrux.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_amvsew.id) as aircraftcategory
  from master_join master_join_kzgjcj
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_amvsew on master_join_kzgjcj.target_id = shared_aircraftcharacteristic_lat_amvsew.id
  where master_join_kzgjcj.source_id = shared.obstacleassessmentarea.id
) as shared_aircraftcharacteristic_pt_hcznel on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_wnugas.id) as significantobstacle
  from master_join master_join_bimlnu
  join shared.obstruction_pt shared_obstruction_lat_wnugas on master_join_bimlnu.target_id = shared_obstruction_lat_wnugas.id
  where master_join_bimlnu.source_id = shared.obstacleassessmentarea.id
) as shared_obstruction_pt_jygglf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lsykjk.*) AS annotation
  from master_join master_join_soeauw
  join notes.note_view notes_note_lat_lsykjk on master_join_soeauw.target_id = notes_note_lat_lsykjk.id
  where master_join_soeauw.source_id = shared.obstacleassessmentarea.id
) as notes_note_view_tilcnu on TRUE;
-- PointReferencePropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists navaids_points.pointreference_view cascade;
create materialized view navaids_points.pointreference_view as
select
    navaids_points.pointreference_pt.id::integer as id,
    navaids_points.pointreference_pt.nilreason::text AS pointreference_nilreason,
    coalesce(cast(navaids_points.pointreference.role_value as varchar), '(' || navaids_points.pointreference.role_nilreason || ')')::text as role,
    coalesce(cast(navaids_points.pointreference.priorfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.priorfixtolerance_uom, '(' || navaids_points.pointreference.priorfixtolerance_nilreason || ')')::text as priorfixtolerance,
    coalesce(cast(navaids_points.pointreference.postfixtolerance_value as varchar) || ' ' || navaids_points.pointreference.postfixtolerance_uom, '(' || navaids_points.pointreference.postfixtolerance_nilreason || ')')::text as postfixtolerance,
    coalesce(cast(navaids_points_designatedpoint_pt_hjbjqq.title as varchar), '(' || navaids_points_designatedpoint_pt_hjbjqq.nilreason[1] || ')')::text AS point,
    navaids_points_designatedpoint_pt_hjbjqq.href::text AS point_href,
    geometry_surface_view_dppoyy.geom::geometry(POLYGON, 4326) AS fixtolerancearea_geom,
    geometry_surface_view_dppoyy.horizontalAccuracy as fixtolerancearea_horizontalaccuracy,
    navaids_points_angleuse_pt_ykxqsj.facilityangle::jsonb as facilityangle,
    navaids_points_distanceindication_pt_ywcjsv.facilitydistance::jsonb as facilitydistance,
    notes_note_view_hdwbyi.annotation::jsonb as annotation
from navaids_points.pointreference_pt 
inner join navaids_points.pointreference on navaids_points.pointreference_pt.pointreference_id = navaids_points.pointreference.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_hjbjqq on navaids_points.pointreference.point_id = navaids_points_designatedpoint_pt_hjbjqq.id
left join geometry.surface_view geometry_surface_view_dppoyy on navaids_points.pointreference.fixtolerancearea_id = geometry_surface_view_dppoyy.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_angleuse_lat_swtqpp.id) as facilityangle
  from master_join master_join_lfusnb
  join navaids_points.angleuse_pt navaids_points_angleuse_lat_swtqpp on master_join_lfusnb.target_id = navaids_points_angleuse_lat_swtqpp.id
  where master_join_lfusnb.source_id = navaids_points.pointreference.id
) as navaids_points_angleuse_pt_ykxqsj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_distanceindication_lat_tztqje.id,
      'title', coalesce(cast(navaids_points_distanceindication_lat_tztqje.title AS varchar), '(' || navaids_points_distanceindication_lat_tztqje.nilreason[1] || ')'),
      'href', navaids_points_distanceindication_lat_tztqje.href
  )) as facilitydistance  from master_join master_join_yrwvbx
  join navaids_points.distanceindication_pt navaids_points_distanceindication_lat_tztqje on master_join_yrwvbx.target_id = navaids_points_distanceindication_lat_tztqje.id
  where master_join_yrwvbx.source_id = navaids_points.pointreference.id
) as navaids_points_distanceindication_pt_ywcjsv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ypnpkg.*) AS annotation
  from master_join master_join_hocsac
  join notes.note_view notes_note_lat_ypnpkg on master_join_hocsac.target_id = notes_note_lat_ypnpkg.id
  where master_join_hocsac.source_id = navaids_points.pointreference.id
) as notes_note_view_hdwbyi on TRUE;
-- SafeAltitudeAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.safealtitudeareasector_view cascade;
create materialized view procedure.safealtitudeareasector_view as
select
    procedure.safealtitudeareasector_pt.id::integer as id,
    procedure.safealtitudeareasector_pt.nilreason::text AS safealtitudeareasector_nilreason,
    coalesce(cast(procedure.safealtitudeareasector.bufferwidth_value as varchar) || ' ' || procedure.safealtitudeareasector.bufferwidth_uom, '(' || procedure.safealtitudeareasector.bufferwidth_nilreason || ')')::text as bufferwidth,
    geometry_surface_view_qtnbeo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_qtnbeo.horizontalAccuracy as extent_horizontalaccuracy,
    to_jsonb(shared_circlesector_pt_ugmumd.id)::jsonb AS sectordefinition,
    shared_obstruction_pt_tswxwh.significantobstacle::jsonb as significantobstacle,
    notes_note_view_zencdb.annotation::jsonb as annotation
from procedure.safealtitudeareasector_pt 
inner join procedure.safealtitudeareasector on procedure.safealtitudeareasector_pt.safealtitudeareasector_id = procedure.safealtitudeareasector.id
left join geometry.surface_view geometry_surface_view_qtnbeo on procedure.safealtitudeareasector.extent_id = geometry_surface_view_qtnbeo.id
left join shared.circlesector_pt shared_circlesector_pt_ugmumd on procedure.safealtitudeareasector.sectordefinition_id = shared_circlesector_pt_ugmumd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_nhyhev.id) as significantobstacle
  from master_join master_join_bipngt
  join shared.obstruction_pt shared_obstruction_lat_nhyhev on master_join_bipngt.target_id = shared_obstruction_lat_nhyhev.id
  where master_join_bipngt.source_id = procedure.safealtitudeareasector.id
) as shared_obstruction_pt_tswxwh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_orlmaa.*) AS annotation
  from master_join master_join_gwgapm
  join notes.note_view notes_note_lat_orlmaa on master_join_gwgapm.target_id = notes_note_lat_orlmaa.id
  where master_join_gwgapm.source_id = procedure.safealtitudeareasector.id
) as notes_note_view_zencdb on TRUE;
-- TerminalArrivalAreaSectorPropertyType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalareasector_view cascade;
create materialized view procedure.terminalarrivalareasector_view as
select
    procedure.terminalarrivalareasector_pt.id::integer as id,
    procedure.terminalarrivalareasector_pt.nilreason::text AS terminalarrivalareasector_nilreason,
    coalesce(cast(procedure.terminalarrivalareasector.flybycode_value as varchar), '(' || procedure.terminalarrivalareasector.flybycode_nilreason || ')')::text as flybycode,
    coalesce(cast(procedure.terminalarrivalareasector.procedureturnrequired_value as varchar), '(' || procedure.terminalarrivalareasector.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.terminalarrivalareasector.altitudedescription_value as varchar), '(' || procedure.terminalarrivalareasector.altitudedescription_nilreason || ')')::text as altitudedescription,
    to_jsonb(shared_circlesector_pt_coykyd.id)::jsonb AS sectordefinition,
    geometry_surface_view_uimqab.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_uimqab.horizontalAccuracy as extent_horizontalaccuracy,
    shared_obstruction_pt_mcjpwl.significantobstacle::jsonb as significantobstacle,
    notes_note_view_znbfev.annotation::jsonb as annotation
from procedure.terminalarrivalareasector_pt 
inner join procedure.terminalarrivalareasector on procedure.terminalarrivalareasector_pt.terminalarrivalareasector_id = procedure.terminalarrivalareasector.id
left join shared.circlesector_pt shared_circlesector_pt_coykyd on procedure.terminalarrivalareasector.sectordefinition_id = shared_circlesector_pt_coykyd.id
left join geometry.surface_view geometry_surface_view_uimqab on procedure.terminalarrivalareasector.extent_id = geometry_surface_view_uimqab.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstruction_lat_ofzuha.id) as significantobstacle
  from master_join master_join_mgfeir
  join shared.obstruction_pt shared_obstruction_lat_ofzuha on master_join_mgfeir.target_id = shared_obstruction_lat_ofzuha.id
  where master_join_mgfeir.source_id = procedure.terminalarrivalareasector.id
) as shared_obstruction_pt_mcjpwl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ifqxkf.*) AS annotation
  from master_join master_join_fldycl
  join notes.note_view notes_note_lat_ifqxkf on master_join_fldycl.target_id = notes_note_lat_ifqxkf.id
  where master_join_fldycl.source_id = procedure.terminalarrivalareasector.id
) as notes_note_view_znbfev on TRUE;
-- AirportHeliportAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportavailability_view cascade;
create materialized view airport_heliport.airportheliportavailability_view as
select
    airport_heliport.airportheliportavailability_pt.id::integer as id,
    airport_heliport.airportheliportavailability_pt.nilreason::text AS airportheliportavailability_nilreason,
    coalesce(cast(airport_heliport.airportheliportavailability.operationalstatus_value as varchar), '(' || airport_heliport.airportheliportavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.airportheliportavailability.warning_value as varchar), '(' || airport_heliport.airportheliportavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_dbqdkv.timeinterval::jsonb as timeinterval,
    notes_note_view_xrvcym.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_bjchqg.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_airportheliportusage_pt_arynuv.usage::jsonb as usage
from airport_heliport.airportheliportavailability_pt 
inner join airport_heliport.airportheliportavailability on airport_heliport.airportheliportavailability_pt.airportheliportavailability_id = airport_heliport.airportheliportavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_nxsdvy.*) AS timeinterval
  from master_join master_join_vkpcej
  join shared.timesheet_view shared_timesheet_lat_nxsdvy on master_join_vkpcej.target_id = shared_timesheet_lat_nxsdvy.id
  where master_join_vkpcej.source_id = airport_heliport.airportheliportavailability.id
) as shared_timesheet_view_dbqdkv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sinakw.*) AS annotation
  from master_join master_join_zlfrwx
  join notes.note_view notes_note_lat_sinakw on master_join_zlfrwx.target_id = notes_note_lat_sinakw.id
  where master_join_zlfrwx.source_id = airport_heliport.airportheliportavailability.id
) as notes_note_view_xrvcym on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_lpfskc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_lpfskc.title AS varchar), '(' || organisation_organisationauthority_lat_lpfskc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_lpfskc.href
  )) as specialdateauthority  from master_join master_join_cylzol
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_lpfskc on master_join_cylzol.target_id = organisation_organisationauthority_lat_lpfskc.id
  where master_join_cylzol.source_id = airport_heliport.airportheliportavailability.id
) as organisation_organisationauthority_pt_bjchqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportusage_lat_sttzuv.id) as usage
  from master_join master_join_miudic
  join airport_heliport.airportheliportusage_pt airport_heliport_airportheliportusage_lat_sttzuv on master_join_miudic.target_id = airport_heliport_airportheliportusage_lat_sttzuv.id
  where master_join_miudic.source_id = airport_heliport.airportheliportavailability.id
) as airport_heliport_airportheliportusage_pt_arynuv on TRUE;
-- AirportHeliportResponsibilityOrganisationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.airportheliportresponsibilityorganisation_view cascade;
create materialized view airport_heliport.airportheliportresponsibilityorganisation_view as
select
    airport_heliport.airportheliportresponsibilityorganisation_pt.id::integer as id,
    airport_heliport.airportheliportresponsibilityorganisation_pt.nilreason::text AS airportheliportresponsibilityorganisation_nilreason,
    coalesce(cast(airport_heliport.airportheliportresponsibilityorganisation.role_value as varchar), '(' || airport_heliport.airportheliportresponsibilityorganisation.role_nilreason || ')')::text as role,
    coalesce(cast(organisation_organisationauthority_pt_rqxiju.title as varchar), '(' || organisation_organisationauthority_pt_rqxiju.nilreason[1] || ')')::text AS theorganisationauthority,
    organisation_organisationauthority_pt_rqxiju.href::text AS theorganisationauthority_href,
    organisation_organisationauthority_pt_vfmulg.specialdateauthority::jsonb as specialdateauthority,
    shared_timesheet_view_jqjhge.timeinterval::jsonb as timeinterval,
    notes_note_view_yiquhl.annotation::jsonb as annotation
from airport_heliport.airportheliportresponsibilityorganisation_pt 
inner join airport_heliport.airportheliportresponsibilityorganisation on airport_heliport.airportheliportresponsibilityorganisation_pt.airportheliportresponsibilityorganisation_id = airport_heliport.airportheliportresponsibilityorganisation.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_rqxiju on airport_heliport.airportheliportresponsibilityorganisation.theorganisationauthority_id = organisation_organisationauthority_pt_rqxiju.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_hxnwha.*) AS timeinterval
  from master_join master_join_rcnofp
  join shared.timesheet_view shared_timesheet_lat_hxnwha on master_join_rcnofp.target_id = shared_timesheet_lat_hxnwha.id
  where master_join_rcnofp.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as shared_timesheet_view_jqjhge on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mhzfyt.*) AS annotation
  from master_join master_join_dhikns
  join notes.note_view notes_note_lat_mhzfyt on master_join_dhikns.target_id = notes_note_lat_mhzfyt.id
  where master_join_dhikns.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as notes_note_view_yiquhl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xydwhm.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xydwhm.title AS varchar), '(' || organisation_organisationauthority_lat_xydwhm.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xydwhm.href
  )) as specialdateauthority  from master_join master_join_tyqwjf
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xydwhm on master_join_tyqwjf.target_id = organisation_organisationauthority_lat_xydwhm.id
  where master_join_tyqwjf.source_id = airport_heliport.airportheliportresponsibilityorganisation.id
) as organisation_organisationauthority_pt_vfmulg on TRUE;
-- AirspaceActivationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspaceactivation_view cascade;
create materialized view airspace.airspaceactivation_view as
select
    airspace.airspaceactivation_pt.id::integer as id,
    airspace.airspaceactivation_pt.nilreason::text AS airspaceactivation_nilreason,
    coalesce(cast(airspace.airspaceactivation.activity_value as varchar), '(' || airspace.airspaceactivation.activity_nilreason || ')')::text as activity,
    coalesce(cast(airspace.airspaceactivation.status_value as varchar), '(' || airspace.airspaceactivation.status_nilreason || ')')::text as status,
    shared_timesheet_view_oelqfs.timeinterval::jsonb as timeinterval,
    notes_note_view_ppvbii.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kmvacy.specialdateauthority::jsonb as specialdateauthority,
    organisation_organisationauthority_pt_pagfmo.user::jsonb as user,
    shared_airspacelayer_pt_hjzrkj.levels::jsonb as levels,
    shared_aircraftcharacteristic_pt_utfixw.aircraft::jsonb as aircraft
from airspace.airspaceactivation_pt 
inner join airspace.airspaceactivation on airspace.airspaceactivation_pt.airspaceactivation_id = airspace.airspaceactivation.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cpfexi.*) AS timeinterval
  from master_join master_join_semeax
  join shared.timesheet_view shared_timesheet_lat_cpfexi on master_join_semeax.target_id = shared_timesheet_lat_cpfexi.id
  where master_join_semeax.source_id = airspace.airspaceactivation.id
) as shared_timesheet_view_oelqfs on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nokedz.*) AS annotation
  from master_join master_join_sudpbj
  join notes.note_view notes_note_lat_nokedz on master_join_sudpbj.target_id = notes_note_lat_nokedz.id
  where master_join_sudpbj.source_id = airspace.airspaceactivation.id
) as notes_note_view_ppvbii on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_nbxkvi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_nbxkvi.title AS varchar), '(' || organisation_organisationauthority_lat_nbxkvi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_nbxkvi.href
  )) as specialdateauthority  from master_join master_join_klamva
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_nbxkvi on master_join_klamva.target_id = organisation_organisationauthority_lat_nbxkvi.id
  where master_join_klamva.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_kmvacy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_gbmitp.id) as levels
  from master_join master_join_gzecmm
  join shared.airspacelayer_pt shared_airspacelayer_lat_gbmitp on master_join_gzecmm.target_id = shared_airspacelayer_lat_gbmitp.id
  where master_join_gzecmm.source_id = airspace.airspaceactivation.id
) as shared_airspacelayer_pt_hjzrkj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_xahddi.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_xahddi.title AS varchar), '(' || organisation_organisationauthority_lat_xahddi.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_xahddi.href
  )) as user  from master_join master_join_rpacgm
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_xahddi on master_join_rpacgm.target_id = organisation_organisationauthority_lat_xahddi.id
  where master_join_rpacgm.source_id = airspace.airspaceactivation.id
) as organisation_organisationauthority_pt_pagfmo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_nrlvqg.id) as aircraft
  from master_join master_join_fczakx
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_nrlvqg on master_join_fczakx.target_id = shared_aircraftcharacteristic_lat_nrlvqg.id
  where master_join_fczakx.source_id = airspace.airspaceactivation.id
) as shared_aircraftcharacteristic_pt_utfixw on TRUE;
-- AirspaceLayerClassPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airspace.airspacelayerclass_view cascade;
create materialized view airspace.airspacelayerclass_view as
select
    airspace.airspacelayerclass_pt.id::integer as id,
    airspace.airspacelayerclass_pt.nilreason::text AS airspacelayerclass_nilreason,
    coalesce(cast(airspace.airspacelayerclass.classification_value as varchar), '(' || airspace.airspacelayerclass.classification_nilreason || ')')::text as classification,
    shared_timesheet_view_nbxpsx.timeinterval::jsonb as timeinterval,
    notes_note_view_ntnbyb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zdvwps.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_vmniaa.associatedlevels::jsonb as associatedlevels
from airspace.airspacelayerclass_pt 
inner join airspace.airspacelayerclass on airspace.airspacelayerclass_pt.airspacelayerclass_id = airspace.airspacelayerclass.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cyqjwg.*) AS timeinterval
  from master_join master_join_gxqjnt
  join shared.timesheet_view shared_timesheet_lat_cyqjwg on master_join_gxqjnt.target_id = shared_timesheet_lat_cyqjwg.id
  where master_join_gxqjnt.source_id = airspace.airspacelayerclass.id
) as shared_timesheet_view_nbxpsx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jcjmzo.*) AS annotation
  from master_join master_join_qhpsms
  join notes.note_view notes_note_lat_jcjmzo on master_join_qhpsms.target_id = notes_note_lat_jcjmzo.id
  where master_join_qhpsms.source_id = airspace.airspacelayerclass.id
) as notes_note_view_ntnbyb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zksxdo.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zksxdo.title AS varchar), '(' || organisation_organisationauthority_lat_zksxdo.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zksxdo.href
  )) as specialdateauthority  from master_join master_join_udyqtk
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zksxdo on master_join_udyqtk.target_id = organisation_organisationauthority_lat_zksxdo.id
  where master_join_udyqtk.source_id = airspace.airspacelayerclass.id
) as organisation_organisationauthority_pt_zdvwps on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_sfwvds.id) as associatedlevels
  from master_join master_join_rrocpi
  join shared.airspacelayer_pt shared_airspacelayer_lat_sfwvds on master_join_rrocpi.target_id = shared_airspacelayer_lat_sfwvds.id
  where master_join_rrocpi.source_id = airspace.airspacelayerclass.id
) as shared_airspacelayer_pt_vmniaa on TRUE;
-- AltimeterSourceStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.altimetersourcestatus_view cascade;
create materialized view airport_heliport.altimetersourcestatus_view as
select
    airport_heliport.altimetersourcestatus_pt.id::integer as id,
    airport_heliport.altimetersourcestatus_pt.nilreason::text AS altimetersourcestatus_nilreason,
    coalesce(cast(airport_heliport.altimetersourcestatus.operationalstatus_value as varchar), '(' || airport_heliport.altimetersourcestatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_zyaklc.timeinterval::jsonb as timeinterval,
    notes_note_view_jvdlxi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_kswifw.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.altimetersourcestatus_pt 
inner join airport_heliport.altimetersourcestatus on airport_heliport.altimetersourcestatus_pt.altimetersourcestatus_id = airport_heliport.altimetersourcestatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_vqeeil.*) AS timeinterval
  from master_join master_join_jqobqa
  join shared.timesheet_view shared_timesheet_lat_vqeeil on master_join_jqobqa.target_id = shared_timesheet_lat_vqeeil.id
  where master_join_jqobqa.source_id = airport_heliport.altimetersourcestatus.id
) as shared_timesheet_view_zyaklc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lgaihp.*) AS annotation
  from master_join master_join_lqajrd
  join notes.note_view notes_note_lat_lgaihp on master_join_lqajrd.target_id = notes_note_lat_lgaihp.id
  where master_join_lqajrd.source_id = airport_heliport.altimetersourcestatus.id
) as notes_note_view_jvdlxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_uhlplt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_uhlplt.title AS varchar), '(' || organisation_organisationauthority_lat_uhlplt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_uhlplt.href
  )) as specialdateauthority  from master_join master_join_kklpoh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_uhlplt on master_join_kklpoh.target_id = organisation_organisationauthority_lat_uhlplt.id
  where master_join_kklpoh.source_id = airport_heliport.altimetersourcestatus.id
) as organisation_organisationauthority_pt_kswifw on TRUE;
-- ApronAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.apronareaavailability_view cascade;
create materialized view airport_heliport.apronareaavailability_view as
select
    airport_heliport.apronareaavailability_pt.id::integer as id,
    airport_heliport.apronareaavailability_pt.nilreason::text AS apronareaavailability_nilreason,
    coalesce(cast(airport_heliport.apronareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.apronareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.apronareaavailability.warning_value as varchar), '(' || airport_heliport.apronareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_lrcgia.timeinterval::jsonb as timeinterval,
    notes_note_view_clmhwq.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zkbcih.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_apronareausage_pt_pfvwtt.usage::jsonb as usage
from airport_heliport.apronareaavailability_pt 
inner join airport_heliport.apronareaavailability on airport_heliport.apronareaavailability_pt.apronareaavailability_id = airport_heliport.apronareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uohyyo.*) AS timeinterval
  from master_join master_join_wyvncj
  join shared.timesheet_view shared_timesheet_lat_uohyyo on master_join_wyvncj.target_id = shared_timesheet_lat_uohyyo.id
  where master_join_wyvncj.source_id = airport_heliport.apronareaavailability.id
) as shared_timesheet_view_lrcgia on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qdxfdf.*) AS annotation
  from master_join master_join_rnoxep
  join notes.note_view notes_note_lat_qdxfdf on master_join_rnoxep.target_id = notes_note_lat_qdxfdf.id
  where master_join_rnoxep.source_id = airport_heliport.apronareaavailability.id
) as notes_note_view_clmhwq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_gdmxgu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_gdmxgu.title AS varchar), '(' || organisation_organisationauthority_lat_gdmxgu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_gdmxgu.href
  )) as specialdateauthority  from master_join master_join_vtecxi
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_gdmxgu on master_join_vtecxi.target_id = organisation_organisationauthority_lat_gdmxgu.id
  where master_join_vtecxi.source_id = airport_heliport.apronareaavailability.id
) as organisation_organisationauthority_pt_zkbcih on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareausage_lat_atbwok.id) as usage
  from master_join master_join_cfolcl
  join airport_heliport.apronareausage_pt airport_heliport_apronareausage_lat_atbwok on master_join_cfolcl.target_id = airport_heliport_apronareausage_lat_atbwok.id
  where master_join_cfolcl.source_id = airport_heliport.apronareaavailability.id
) as airport_heliport_apronareausage_pt_pfvwtt on TRUE;
-- CirclingRestrictionPropertyType
-- ['notes.note_view', 'shared.timesheet_view', 'geometry.surface_view']
drop materialized view if exists procedure.circlingrestriction_view cascade;
create materialized view procedure.circlingrestriction_view as
select
    procedure.circlingrestriction_pt.id::integer as id,
    procedure.circlingrestriction_pt.nilreason::text AS circlingrestriction_nilreason,
    to_jsonb(shared_circlesector_pt_pivauj.id)::jsonb AS sectordescription,
    geometry_surface_view_qbjzdj.geom::geometry(POLYGON, 4326) AS restrictionarea_geom,
    geometry_surface_view_qbjzdj.horizontalAccuracy as restrictionarea_horizontalaccuracy,
    shared_timesheet_view_nmpdsl.timeinterval::jsonb as timeinterval,
    notes_note_view_zppksd.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_rbmqhh.specialdateauthority::jsonb as specialdateauthority
from procedure.circlingrestriction_pt 
inner join procedure.circlingrestriction on procedure.circlingrestriction_pt.circlingrestriction_id = procedure.circlingrestriction.id
left join shared.circlesector_pt shared_circlesector_pt_pivauj on procedure.circlingrestriction.sectordescription_id = shared_circlesector_pt_pivauj.id
left join geometry.surface_view geometry_surface_view_qbjzdj on procedure.circlingrestriction.restrictionarea_id = geometry_surface_view_qbjzdj.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_smedeg.*) AS timeinterval
  from master_join master_join_xjunru
  join shared.timesheet_view shared_timesheet_lat_smedeg on master_join_xjunru.target_id = shared_timesheet_lat_smedeg.id
  where master_join_xjunru.source_id = procedure.circlingrestriction.id
) as shared_timesheet_view_nmpdsl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_aovnxg.*) AS annotation
  from master_join master_join_bjkwxh
  join notes.note_view notes_note_lat_aovnxg on master_join_bjkwxh.target_id = notes_note_lat_aovnxg.id
  where master_join_bjkwxh.source_id = procedure.circlingrestriction.id
) as notes_note_view_zppksd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ntknry.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ntknry.title AS varchar), '(' || organisation_organisationauthority_lat_ntknry.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ntknry.href
  )) as specialdateauthority  from master_join master_join_hhhahq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ntknry on master_join_hhhahq.target_id = organisation_organisationauthority_lat_ntknry.id
  where master_join_hhhahq.source_id = procedure.circlingrestriction.id
) as organisation_organisationauthority_pt_rbmqhh on TRUE;
-- ConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.conditioncombination_view cascade;
create materialized view airport_heliport.conditioncombination_view as
select
    airport_heliport.conditioncombination_pt.id::integer as id,
    airport_heliport.conditioncombination_pt.nilreason::text AS conditioncombination_nilreason,
    coalesce(cast(airport_heliport.conditioncombination.logicaloperator_value as varchar), '(' || airport_heliport.conditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_rfcjuz.timeinterval::jsonb as timeinterval,
    notes_note_view_ywufeu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xdgvbj.specialdateauthority::jsonb as specialdateauthority,
    shared_meteorology_pt_ropeqx.weather::jsonb as weather,
    shared_aircraftcharacteristic_pt_fzqdde.aircraft::jsonb as aircraft,
    shared_flightcharacteristic_pt_grquyw.flight::jsonb as flight,
    airport_heliport_conditioncombination_pt_wcgglu.subcondition::jsonb as subcondition
from airport_heliport.conditioncombination_pt 
inner join airport_heliport.conditioncombination on airport_heliport.conditioncombination_pt.conditioncombination_id = airport_heliport.conditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_wdazqa.*) AS timeinterval
  from master_join master_join_wrxhko
  join shared.timesheet_view shared_timesheet_lat_wdazqa on master_join_wrxhko.target_id = shared_timesheet_lat_wdazqa.id
  where master_join_wrxhko.source_id = airport_heliport.conditioncombination.id
) as shared_timesheet_view_rfcjuz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jynjtb.*) AS annotation
  from master_join master_join_uxtgqs
  join notes.note_view notes_note_lat_jynjtb on master_join_uxtgqs.target_id = notes_note_lat_jynjtb.id
  where master_join_uxtgqs.source_id = airport_heliport.conditioncombination.id
) as notes_note_view_ywufeu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_zxfhpl.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_zxfhpl.title AS varchar), '(' || organisation_organisationauthority_lat_zxfhpl.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_zxfhpl.href
  )) as specialdateauthority  from master_join master_join_xfwivr
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_zxfhpl on master_join_xfwivr.target_id = organisation_organisationauthority_lat_zxfhpl.id
  where master_join_xfwivr.source_id = airport_heliport.conditioncombination.id
) as organisation_organisationauthority_pt_xdgvbj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_meteorology_lat_xifvpf.id) as weather
  from master_join master_join_rjzlzp
  join shared.meteorology_pt shared_meteorology_lat_xifvpf on master_join_rjzlzp.target_id = shared_meteorology_lat_xifvpf.id
  where master_join_rjzlzp.source_id = airport_heliport.conditioncombination.id
) as shared_meteorology_pt_ropeqx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_xzkngl.id) as aircraft
  from master_join master_join_xncsqo
  join shared.aircraftcharacteristic_pt shared_aircraftcharacteristic_lat_xzkngl on master_join_xncsqo.target_id = shared_aircraftcharacteristic_lat_xzkngl.id
  where master_join_xncsqo.source_id = airport_heliport.conditioncombination.id
) as shared_aircraftcharacteristic_pt_fzqdde on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_flightcharacteristic_lat_tsehlq.id) as flight
  from master_join master_join_uibhcl
  join shared.flightcharacteristic_pt shared_flightcharacteristic_lat_tsehlq on master_join_uibhcl.target_id = shared_flightcharacteristic_lat_tsehlq.id
  where master_join_uibhcl.source_id = airport_heliport.conditioncombination.id
) as shared_flightcharacteristic_pt_grquyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_conditioncombination_lat_voiqil.id) as subcondition
  from master_join master_join_rtmihd
  join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_lat_voiqil on master_join_rtmihd.target_id = airport_heliport_conditioncombination_lat_voiqil.id
  where master_join_rtmihd.source_id = airport_heliport.conditioncombination.id
) as airport_heliport_conditioncombination_pt_wcgglu on TRUE;
-- FlightConditionCombinationPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.flightconditioncombination_view cascade;
create materialized view routes.flightconditioncombination_view as
select
    routes.flightconditioncombination_pt.id::integer as id,
    routes.flightconditioncombination_pt.nilreason::text AS flightconditioncombination_nilreason,
    coalesce(cast(routes.flightconditioncombination.logicaloperator_value as varchar), '(' || routes.flightconditioncombination.logicaloperator_nilreason || ')')::text as logicaloperator,
    shared_timesheet_view_zqhrmv.timeinterval::jsonb as timeinterval,
    notes_note_view_iqfxlj.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_lknzvh.specialdateauthority::jsonb as specialdateauthority,
    routes_flightconditionelement_pt_acarct.element::jsonb as element
from routes.flightconditioncombination_pt 
inner join routes.flightconditioncombination on routes.flightconditioncombination_pt.flightconditioncombination_id = routes.flightconditioncombination.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_yirbiz.*) AS timeinterval
  from master_join master_join_hjlcdd
  join shared.timesheet_view shared_timesheet_lat_yirbiz on master_join_hjlcdd.target_id = shared_timesheet_lat_yirbiz.id
  where master_join_hjlcdd.source_id = routes.flightconditioncombination.id
) as shared_timesheet_view_zqhrmv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pilgwb.*) AS annotation
  from master_join master_join_pciegg
  join notes.note_view notes_note_lat_pilgwb on master_join_pciegg.target_id = notes_note_lat_pilgwb.id
  where master_join_pciegg.source_id = routes.flightconditioncombination.id
) as notes_note_view_iqfxlj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_monnci.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_monnci.title AS varchar), '(' || organisation_organisationauthority_lat_monnci.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_monnci.href
  )) as specialdateauthority  from master_join master_join_xcelyz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_monnci on master_join_xcelyz.target_id = organisation_organisationauthority_lat_monnci.id
  where master_join_xcelyz.source_id = routes.flightconditioncombination.id
) as organisation_organisationauthority_pt_lknzvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_flightconditionelement_lat_bhofar.id) as element
  from master_join master_join_frpztr
  join routes.flightconditionelement_pt routes_flightconditionelement_lat_bhofar on master_join_frpztr.target_id = routes_flightconditionelement_lat_bhofar.id
  where master_join_frpztr.source_id = routes.flightconditioncombination.id
) as routes_flightconditionelement_pt_acarct on TRUE;
-- GroundLightingAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.groundlightingavailability_view cascade;
create materialized view airport_heliport.groundlightingavailability_view as
select
    airport_heliport.groundlightingavailability_pt.id::integer as id,
    airport_heliport.groundlightingavailability_pt.nilreason::text AS groundlightingavailability_nilreason,
    coalesce(cast(airport_heliport.groundlightingavailability.operationalstatus_value as varchar), '(' || airport_heliport.groundlightingavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_dyqzry.timeinterval::jsonb as timeinterval,
    notes_note_view_tgaldm.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_qzyomg.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.groundlightingavailability_pt 
inner join airport_heliport.groundlightingavailability on airport_heliport.groundlightingavailability_pt.groundlightingavailability_id = airport_heliport.groundlightingavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ylskra.*) AS timeinterval
  from master_join master_join_oixets
  join shared.timesheet_view shared_timesheet_lat_ylskra on master_join_oixets.target_id = shared_timesheet_lat_ylskra.id
  where master_join_oixets.source_id = airport_heliport.groundlightingavailability.id
) as shared_timesheet_view_dyqzry on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uwzgnw.*) AS annotation
  from master_join master_join_gmcyeg
  join notes.note_view notes_note_lat_uwzgnw on master_join_gmcyeg.target_id = notes_note_lat_uwzgnw.id
  where master_join_gmcyeg.source_id = airport_heliport.groundlightingavailability.id
) as notes_note_view_tgaldm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_qanrvc.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_qanrvc.title AS varchar), '(' || organisation_organisationauthority_lat_qanrvc.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_qanrvc.href
  )) as specialdateauthority  from master_join master_join_otyeeu
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_qanrvc on master_join_otyeeu.target_id = organisation_organisationauthority_lat_qanrvc.id
  where master_join_otyeeu.source_id = airport_heliport.groundlightingavailability.id
) as organisation_organisationauthority_pt_qzyomg on TRUE;
-- LightElementStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.lightelementstatus_view cascade;
create materialized view shared.lightelementstatus_view as
select
    shared.lightelementstatus_pt.id::integer as id,
    shared.lightelementstatus_pt.nilreason::text AS lightelementstatus_nilreason,
    coalesce(cast(shared.lightelementstatus.status_value as varchar), '(' || shared.lightelementstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_flybgh.timeinterval::jsonb as timeinterval,
    notes_note_view_gdkxfb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_pjdgtu.specialdateauthority::jsonb as specialdateauthority
from shared.lightelementstatus_pt 
inner join shared.lightelementstatus on shared.lightelementstatus_pt.lightelementstatus_id = shared.lightelementstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_lpxjxq.*) AS timeinterval
  from master_join master_join_acyxhs
  join shared.timesheet_view shared_timesheet_lat_lpxjxq on master_join_acyxhs.target_id = shared_timesheet_lat_lpxjxq.id
  where master_join_acyxhs.source_id = shared.lightelementstatus.id
) as shared_timesheet_view_flybgh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_htsics.*) AS annotation
  from master_join master_join_yxebme
  join notes.note_view notes_note_lat_htsics on master_join_yxebme.target_id = notes_note_lat_htsics.id
  where master_join_yxebme.source_id = shared.lightelementstatus.id
) as notes_note_view_gdkxfb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_syvwbt.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_syvwbt.title AS varchar), '(' || organisation_organisationauthority_lat_syvwbt.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_syvwbt.href
  )) as specialdateauthority  from master_join master_join_fnjosh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_syvwbt on master_join_fnjosh.target_id = organisation_organisationauthority_lat_syvwbt.id
  where master_join_fnjosh.source_id = shared.lightelementstatus.id
) as organisation_organisationauthority_pt_pjdgtu on TRUE;
-- ManoeuvringAreaAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.manoeuvringareaavailability_view cascade;
create materialized view airport_heliport.manoeuvringareaavailability_view as
select
    airport_heliport.manoeuvringareaavailability_pt.id::integer as id,
    airport_heliport.manoeuvringareaavailability_pt.nilreason::text AS manoeuvringareaavailability_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.operationalstatus_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(airport_heliport.manoeuvringareaavailability.warning_value as varchar), '(' || airport_heliport.manoeuvringareaavailability.warning_nilreason || ')')::text as warning,
    shared_timesheet_view_xnomxf.timeinterval::jsonb as timeinterval,
    notes_note_view_ffubyu.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_nwijcl.specialdateauthority::jsonb as specialdateauthority,
    airport_heliport_manoeuvringareausage_pt_mbvrhr.usage::jsonb as usage
from airport_heliport.manoeuvringareaavailability_pt 
inner join airport_heliport.manoeuvringareaavailability on airport_heliport.manoeuvringareaavailability_pt.manoeuvringareaavailability_id = airport_heliport.manoeuvringareaavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_cpxdkb.*) AS timeinterval
  from master_join master_join_gbxkno
  join shared.timesheet_view shared_timesheet_lat_cpxdkb on master_join_gbxkno.target_id = shared_timesheet_lat_cpxdkb.id
  where master_join_gbxkno.source_id = airport_heliport.manoeuvringareaavailability.id
) as shared_timesheet_view_xnomxf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ujjpyf.*) AS annotation
  from master_join master_join_yghqhi
  join notes.note_view notes_note_lat_ujjpyf on master_join_yghqhi.target_id = notes_note_lat_ujjpyf.id
  where master_join_yghqhi.source_id = airport_heliport.manoeuvringareaavailability.id
) as notes_note_view_ffubyu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fhmzln.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fhmzln.title AS varchar), '(' || organisation_organisationauthority_lat_fhmzln.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fhmzln.href
  )) as specialdateauthority  from master_join master_join_mmvgch
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fhmzln on master_join_mmvgch.target_id = organisation_organisationauthority_lat_fhmzln.id
  where master_join_mmvgch.source_id = airport_heliport.manoeuvringareaavailability.id
) as organisation_organisationauthority_pt_nwijcl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareausage_lat_qsckrf.id) as usage
  from master_join master_join_ukitqz
  join airport_heliport.manoeuvringareausage_pt airport_heliport_manoeuvringareausage_lat_qsckrf on master_join_ukitqz.target_id = airport_heliport_manoeuvringareausage_lat_qsckrf.id
  where master_join_ukitqz.source_id = airport_heliport.manoeuvringareaavailability.id
) as airport_heliport_manoeuvringareausage_pt_mbvrhr on TRUE;
-- NavaidEquipmentMonitoringPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidequipmentmonitoring_view cascade;
create materialized view navaids_points.navaidequipmentmonitoring_view as
select
    navaids_points.navaidequipmentmonitoring_pt.id::integer as id,
    navaids_points.navaidequipmentmonitoring_pt.nilreason::text AS navaidequipmentmonitoring_nilreason,
    coalesce(cast(navaids_points.navaidequipmentmonitoring.monitored_value as varchar), '(' || navaids_points.navaidequipmentmonitoring.monitored_nilreason || ')')::text as monitored,
    shared_timesheet_view_bbdchu.timeinterval::jsonb as timeinterval,
    notes_note_view_btyiua.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zxvtoh.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidequipmentmonitoring_pt 
inner join navaids_points.navaidequipmentmonitoring on navaids_points.navaidequipmentmonitoring_pt.navaidequipmentmonitoring_id = navaids_points.navaidequipmentmonitoring.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_gneroc.*) AS timeinterval
  from master_join master_join_pkhegd
  join shared.timesheet_view shared_timesheet_lat_gneroc on master_join_pkhegd.target_id = shared_timesheet_lat_gneroc.id
  where master_join_pkhegd.source_id = navaids_points.navaidequipmentmonitoring.id
) as shared_timesheet_view_bbdchu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chsxpm.*) AS annotation
  from master_join master_join_zxfvqk
  join notes.note_view notes_note_lat_chsxpm on master_join_zxfvqk.target_id = notes_note_lat_chsxpm.id
  where master_join_zxfvqk.source_id = navaids_points.navaidequipmentmonitoring.id
) as notes_note_view_btyiua on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_ohqxxw.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_ohqxxw.title AS varchar), '(' || organisation_organisationauthority_lat_ohqxxw.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_ohqxxw.href
  )) as specialdateauthority  from master_join master_join_uzeerz
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_ohqxxw on master_join_uzeerz.target_id = organisation_organisationauthority_lat_ohqxxw.id
  where master_join_uzeerz.source_id = navaids_points.navaidequipmentmonitoring.id
) as organisation_organisationauthority_pt_zxvtoh on TRUE;
-- NavaidOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.navaidoperationalstatus_view cascade;
create materialized view navaids_points.navaidoperationalstatus_view as
select
    navaids_points.navaidoperationalstatus_pt.id::integer as id,
    navaids_points.navaidoperationalstatus_pt.nilreason::text AS navaidoperationalstatus_nilreason,
    coalesce(cast(navaids_points.navaidoperationalstatus.operationalstatus_value as varchar), '(' || navaids_points.navaidoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    coalesce(cast(navaids_points.navaidoperationalstatus.signaltype_value as varchar), '(' || navaids_points.navaidoperationalstatus.signaltype_nilreason || ')')::text as signaltype,
    shared_timesheet_view_jljoau.timeinterval::jsonb as timeinterval,
    notes_note_view_mfdpim.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_eifcrb.specialdateauthority::jsonb as specialdateauthority
from navaids_points.navaidoperationalstatus_pt 
inner join navaids_points.navaidoperationalstatus on navaids_points.navaidoperationalstatus_pt.navaidoperationalstatus_id = navaids_points.navaidoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_sxejms.*) AS timeinterval
  from master_join master_join_ldhycg
  join shared.timesheet_view shared_timesheet_lat_sxejms on master_join_ldhycg.target_id = shared_timesheet_lat_sxejms.id
  where master_join_ldhycg.source_id = navaids_points.navaidoperationalstatus.id
) as shared_timesheet_view_jljoau on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yxryof.*) AS annotation
  from master_join master_join_dfpinu
  join notes.note_view notes_note_lat_yxryof on master_join_dfpinu.target_id = notes_note_lat_yxryof.id
  where master_join_dfpinu.source_id = navaids_points.navaidoperationalstatus.id
) as notes_note_view_mfdpim on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tyceem.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tyceem.title AS varchar), '(' || organisation_organisationauthority_lat_tyceem.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tyceem.href
  )) as specialdateauthority  from master_join master_join_etboiy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tyceem on master_join_etboiy.target_id = organisation_organisationauthority_lat_tyceem.id
  where master_join_etboiy.source_id = navaids_points.navaidoperationalstatus.id
) as organisation_organisationauthority_pt_eifcrb on TRUE;
-- OnlineContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.onlinecontact_view cascade;
create materialized view shared.onlinecontact_view as
select
    shared.onlinecontact_pt.id::integer as id,
    shared.onlinecontact_pt.nilreason::text AS onlinecontact_nilreason,
    coalesce(cast(shared.onlinecontact.network_value as varchar), '(' || shared.onlinecontact.network_nilreason || ')')::text as network,
    coalesce(cast(shared.onlinecontact.linkage_value as varchar), '(' || shared.onlinecontact.linkage_nilreason || ')')::text as linkage,
    coalesce(cast(shared.onlinecontact.protocol_value as varchar), '(' || shared.onlinecontact.protocol_nilreason || ')')::text as protocol,
    coalesce(cast(shared.onlinecontact.email_value as varchar), '(' || shared.onlinecontact.email_nilreason || ')')::text as email,
    shared_timesheet_view_kpvijt.timeinterval::jsonb as timeinterval,
    notes_note_view_wcfhpx.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_vlnakr.specialdateauthority::jsonb as specialdateauthority
from shared.onlinecontact_pt 
inner join shared.onlinecontact on shared.onlinecontact_pt.onlinecontact_id = shared.onlinecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_clsjcn.*) AS timeinterval
  from master_join master_join_yrilhg
  join shared.timesheet_view shared_timesheet_lat_clsjcn on master_join_yrilhg.target_id = shared_timesheet_lat_clsjcn.id
  where master_join_yrilhg.source_id = shared.onlinecontact.id
) as shared_timesheet_view_kpvijt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qbaxaf.*) AS annotation
  from master_join master_join_hkkkrk
  join notes.note_view notes_note_lat_qbaxaf on master_join_hkkkrk.target_id = notes_note_lat_qbaxaf.id
  where master_join_hkkkrk.source_id = shared.onlinecontact.id
) as notes_note_view_wcfhpx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_purcde.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_purcde.title AS varchar), '(' || organisation_organisationauthority_lat_purcde.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_purcde.href
  )) as specialdateauthority  from master_join master_join_kxtgje
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_purcde on master_join_kxtgje.target_id = organisation_organisationauthority_lat_purcde.id
  where master_join_kxtgje.source_id = shared.onlinecontact.id
) as organisation_organisationauthority_pt_vlnakr on TRUE;
-- PostalAddressPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.postaladdress_view cascade;
create materialized view shared.postaladdress_view as
select
    shared.postaladdress_pt.id::integer as id,
    shared.postaladdress_pt.nilreason::text AS postaladdress_nilreason,
    coalesce(cast(shared.postaladdress.deliverypoint_value as varchar), '(' || shared.postaladdress.deliverypoint_nilreason || ')')::text as deliverypoint,
    coalesce(cast(shared.postaladdress.city_value as varchar), '(' || shared.postaladdress.city_nilreason || ')')::text as city,
    coalesce(cast(shared.postaladdress.administrativearea_value as varchar), '(' || shared.postaladdress.administrativearea_nilreason || ')')::text as administrativearea,
    coalesce(cast(shared.postaladdress.postalcode_value as varchar), '(' || shared.postaladdress.postalcode_nilreason || ')')::text as postalcode,
    coalesce(cast(shared.postaladdress.country_value as varchar), '(' || shared.postaladdress.country_nilreason || ')')::text as country,
    shared_timesheet_view_jnchme.timeinterval::jsonb as timeinterval,
    notes_note_view_xpvnkw.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jegagm.specialdateauthority::jsonb as specialdateauthority
from shared.postaladdress_pt 
inner join shared.postaladdress on shared.postaladdress_pt.postaladdress_id = shared.postaladdress.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_msrwiz.*) AS timeinterval
  from master_join master_join_rkyycw
  join shared.timesheet_view shared_timesheet_lat_msrwiz on master_join_rkyycw.target_id = shared_timesheet_lat_msrwiz.id
  where master_join_rkyycw.source_id = shared.postaladdress.id
) as shared_timesheet_view_jnchme on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yrbiza.*) AS annotation
  from master_join master_join_akbnto
  join notes.note_view notes_note_lat_yrbiza on master_join_akbnto.target_id = notes_note_lat_yrbiza.id
  where master_join_akbnto.source_id = shared.postaladdress.id
) as notes_note_view_xpvnkw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_kmarxd.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_kmarxd.title AS varchar), '(' || organisation_organisationauthority_lat_kmarxd.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_kmarxd.href
  )) as specialdateauthority  from master_join master_join_ggewdx
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_kmarxd on master_join_ggewdx.target_id = organisation_organisationauthority_lat_kmarxd.id
  where master_join_ggewdx.source_id = shared.postaladdress.id
) as organisation_organisationauthority_pt_jegagm on TRUE;
-- ProcedureAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists procedure.procedureavailability_view cascade;
create materialized view procedure.procedureavailability_view as
select
    procedure.procedureavailability_pt.id::integer as id,
    procedure.procedureavailability_pt.nilreason::text AS procedureavailability_nilreason,
    coalesce(cast(procedure.procedureavailability.status_value as varchar), '(' || procedure.procedureavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_gxpdje.timeinterval::jsonb as timeinterval,
    notes_note_view_gbhaxi.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_mcrybj.specialdateauthority::jsonb as specialdateauthority
from procedure.procedureavailability_pt 
inner join procedure.procedureavailability on procedure.procedureavailability_pt.procedureavailability_id = procedure.procedureavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_izturr.*) AS timeinterval
  from master_join master_join_isclfs
  join shared.timesheet_view shared_timesheet_lat_izturr on master_join_isclfs.target_id = shared_timesheet_lat_izturr.id
  where master_join_isclfs.source_id = procedure.procedureavailability.id
) as shared_timesheet_view_gxpdje on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_iqnjoy.*) AS annotation
  from master_join master_join_jkwdqi
  join notes.note_view notes_note_lat_iqnjoy on master_join_jkwdqi.target_id = notes_note_lat_iqnjoy.id
  where master_join_jkwdqi.source_id = procedure.procedureavailability.id
) as notes_note_view_gbhaxi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_eykorz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_eykorz.title AS varchar), '(' || organisation_organisationauthority_lat_eykorz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_eykorz.href
  )) as specialdateauthority  from master_join master_join_cpcxet
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_eykorz on master_join_cpcxet.target_id = organisation_organisationauthority_lat_eykorz.id
  where master_join_cpcxet.source_id = procedure.procedureavailability.id
) as organisation_organisationauthority_pt_mcrybj on TRUE;
-- RadioCommunicationOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.radiocommunicationoperationalstatus_view cascade;
create materialized view service.radiocommunicationoperationalstatus_view as
select
    service.radiocommunicationoperationalstatus_pt.id::integer as id,
    service.radiocommunicationoperationalstatus_pt.nilreason::text AS radiocommunicationoperationalstatus_nilreason,
    coalesce(cast(service.radiocommunicationoperationalstatus.operationalstatus_value as varchar), '(' || service.radiocommunicationoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_ixatyr.timeinterval::jsonb as timeinterval,
    notes_note_view_jmfrxo.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_sjqpsj.specialdateauthority::jsonb as specialdateauthority
from service.radiocommunicationoperationalstatus_pt 
inner join service.radiocommunicationoperationalstatus on service.radiocommunicationoperationalstatus_pt.radiocommunicationoperationalstatus_id = service.radiocommunicationoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_uuuiza.*) AS timeinterval
  from master_join master_join_kepdxw
  join shared.timesheet_view shared_timesheet_lat_uuuiza on master_join_kepdxw.target_id = shared_timesheet_lat_uuuiza.id
  where master_join_kepdxw.source_id = service.radiocommunicationoperationalstatus.id
) as shared_timesheet_view_ixatyr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ouznpf.*) AS annotation
  from master_join master_join_hmroro
  join notes.note_view notes_note_lat_ouznpf on master_join_hmroro.target_id = notes_note_lat_ouznpf.id
  where master_join_hmroro.source_id = service.radiocommunicationoperationalstatus.id
) as notes_note_view_jmfrxo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yuoxde.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yuoxde.title AS varchar), '(' || organisation_organisationauthority_lat_yuoxde.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yuoxde.href
  )) as specialdateauthority  from master_join master_join_vcsttg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yuoxde on master_join_vcsttg.target_id = organisation_organisationauthority_lat_yuoxde.id
  where master_join_vcsttg.source_id = service.radiocommunicationoperationalstatus.id
) as organisation_organisationauthority_pt_sjqpsj on TRUE;
-- RouteAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists routes.routeavailability_view cascade;
create materialized view routes.routeavailability_view as
select
    routes.routeavailability_pt.id::integer as id,
    routes.routeavailability_pt.nilreason::text AS routeavailability_nilreason,
    coalesce(cast(routes.routeavailability.direction_value as varchar), '(' || routes.routeavailability.direction_nilreason || ')')::text as direction,
    coalesce(cast(routes.routeavailability.cardinaldirection_value as varchar), '(' || routes.routeavailability.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(routes.routeavailability.status_value as varchar), '(' || routes.routeavailability.status_nilreason || ')')::text as status,
    shared_timesheet_view_tresax.timeinterval::jsonb as timeinterval,
    notes_note_view_pmqnqe.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zsodcd.specialdateauthority::jsonb as specialdateauthority,
    shared_airspacelayer_pt_ygivwq.levels::jsonb as levels
from routes.routeavailability_pt 
inner join routes.routeavailability on routes.routeavailability_pt.routeavailability_id = routes.routeavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_syltsu.*) AS timeinterval
  from master_join master_join_sxpxvn
  join shared.timesheet_view shared_timesheet_lat_syltsu on master_join_sxpxvn.target_id = shared_timesheet_lat_syltsu.id
  where master_join_sxpxvn.source_id = routes.routeavailability.id
) as shared_timesheet_view_tresax on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wlbxfl.*) AS annotation
  from master_join master_join_cwgjwt
  join notes.note_view notes_note_lat_wlbxfl on master_join_cwgjwt.target_id = notes_note_lat_wlbxfl.id
  where master_join_cwgjwt.source_id = routes.routeavailability.id
) as notes_note_view_pmqnqe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_equlak.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_equlak.title AS varchar), '(' || organisation_organisationauthority_lat_equlak.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_equlak.href
  )) as specialdateauthority  from master_join master_join_bjnbda
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_equlak on master_join_bjnbda.target_id = organisation_organisationauthority_lat_equlak.id
  where master_join_bjnbda.source_id = routes.routeavailability.id
) as organisation_organisationauthority_pt_zsodcd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_airspacelayer_lat_xbijgx.id) as levels
  from master_join master_join_cttddv
  join shared.airspacelayer_pt shared_airspacelayer_lat_xbijgx on master_join_cttddv.target_id = shared_airspacelayer_lat_xbijgx.id
  where master_join_cttddv.source_id = routes.routeavailability.id
) as shared_airspacelayer_pt_ygivwq on TRUE;
-- RunwayDeclaredDistanceValuePropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.runwaydeclareddistancevalue_view cascade;
create materialized view airport_heliport.runwaydeclareddistancevalue_view as
select
    airport_heliport.runwaydeclareddistancevalue_pt.id::integer as id,
    airport_heliport.runwaydeclareddistancevalue_pt.nilreason::text AS runwaydeclareddistancevalue_nilreason,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distance_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distance_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distance_nilreason || ')')::text as distance,
    coalesce(cast(airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_value as varchar) || ' ' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_uom, '(' || airport_heliport.runwaydeclareddistancevalue.distanceaccuracy_nilreason || ')')::text as distanceaccuracy,
    shared_timesheet_view_jwgzrc.timeinterval::jsonb as timeinterval,
    notes_note_view_jtobki.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ujmwok.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.runwaydeclareddistancevalue_pt 
inner join airport_heliport.runwaydeclareddistancevalue on airport_heliport.runwaydeclareddistancevalue_pt.runwaydeclareddistancevalue_id = airport_heliport.runwaydeclareddistancevalue.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_tngnsx.*) AS timeinterval
  from master_join master_join_lscwfj
  join shared.timesheet_view shared_timesheet_lat_tngnsx on master_join_lscwfj.target_id = shared_timesheet_lat_tngnsx.id
  where master_join_lscwfj.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as shared_timesheet_view_jwgzrc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bcrdow.*) AS annotation
  from master_join master_join_zbusoc
  join notes.note_view notes_note_lat_bcrdow on master_join_zbusoc.target_id = notes_note_lat_bcrdow.id
  where master_join_zbusoc.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as notes_note_view_jtobki on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_pnepko.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_pnepko.title AS varchar), '(' || organisation_organisationauthority_lat_pnepko.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_pnepko.href
  )) as specialdateauthority  from master_join master_join_rlzrjh
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_pnepko on master_join_rlzrjh.target_id = organisation_organisationauthority_lat_pnepko.id
  where master_join_rlzrjh.source_id = airport_heliport.runwaydeclareddistancevalue.id
) as organisation_organisationauthority_pt_ujmwok on TRUE;
-- ServiceOperationalStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists service.serviceoperationalstatus_view cascade;
create materialized view service.serviceoperationalstatus_view as
select
    service.serviceoperationalstatus_pt.id::integer as id,
    service.serviceoperationalstatus_pt.nilreason::text AS serviceoperationalstatus_nilreason,
    coalesce(cast(service.serviceoperationalstatus.operationalstatus_value as varchar), '(' || service.serviceoperationalstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_edfkpb.timeinterval::jsonb as timeinterval,
    notes_note_view_zncaou.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_xxbcen.specialdateauthority::jsonb as specialdateauthority
from service.serviceoperationalstatus_pt 
inner join service.serviceoperationalstatus on service.serviceoperationalstatus_pt.serviceoperationalstatus_id = service.serviceoperationalstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ppaljl.*) AS timeinterval
  from master_join master_join_cqsgcm
  join shared.timesheet_view shared_timesheet_lat_ppaljl on master_join_cqsgcm.target_id = shared_timesheet_lat_ppaljl.id
  where master_join_cqsgcm.source_id = service.serviceoperationalstatus.id
) as shared_timesheet_view_edfkpb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kmnnfe.*) AS annotation
  from master_join master_join_qwqpjc
  join notes.note_view notes_note_lat_kmnnfe on master_join_qwqpjc.target_id = notes_note_lat_kmnnfe.id
  where master_join_qwqpjc.source_id = service.serviceoperationalstatus.id
) as notes_note_view_zncaou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fcjjyq.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fcjjyq.title AS varchar), '(' || organisation_organisationauthority_lat_fcjjyq.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fcjjyq.href
  )) as specialdateauthority  from master_join master_join_csicln
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fcjjyq on master_join_csicln.target_id = organisation_organisationauthority_lat_fcjjyq.id
  where master_join_csicln.source_id = service.serviceoperationalstatus.id
) as organisation_organisationauthority_pt_xxbcen on TRUE;
-- SpecialNavigationStationStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists navaids_points.specialnavigationstationstatus_view cascade;
create materialized view navaids_points.specialnavigationstationstatus_view as
select
    navaids_points.specialnavigationstationstatus_pt.id::integer as id,
    navaids_points.specialnavigationstationstatus_pt.nilreason::text AS specialnavigationstationstatus_nilreason,
    coalesce(cast(navaids_points.specialnavigationstationstatus.operationalstatus_value as varchar), '(' || navaids_points.specialnavigationstationstatus.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_wzzszr.timeinterval::jsonb as timeinterval,
    notes_note_view_ecmppb.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_jaannj.specialdateauthority::jsonb as specialdateauthority
from navaids_points.specialnavigationstationstatus_pt 
inner join navaids_points.specialnavigationstationstatus on navaids_points.specialnavigationstationstatus_pt.specialnavigationstationstatus_id = navaids_points.specialnavigationstationstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_euoyva.*) AS timeinterval
  from master_join master_join_kokfry
  join shared.timesheet_view shared_timesheet_lat_euoyva on master_join_kokfry.target_id = shared_timesheet_lat_euoyva.id
  where master_join_kokfry.source_id = navaids_points.specialnavigationstationstatus.id
) as shared_timesheet_view_wzzszr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zfqyxp.*) AS annotation
  from master_join master_join_lxepmr
  join notes.note_view notes_note_lat_zfqyxp on master_join_lxepmr.target_id = notes_note_lat_zfqyxp.id
  where master_join_lxepmr.source_id = navaids_points.specialnavigationstationstatus.id
) as notes_note_view_ecmppb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_fzatqx.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_fzatqx.title AS varchar), '(' || organisation_organisationauthority_lat_fzatqx.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_fzatqx.href
  )) as specialdateauthority  from master_join master_join_bybjqy
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_fzatqx on master_join_bybjqy.target_id = organisation_organisationauthority_lat_fzatqx.id
  where master_join_bybjqy.source_id = navaids_points.specialnavigationstationstatus.id
) as organisation_organisationauthority_pt_jaannj on TRUE;
-- TelephoneContactPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists shared.telephonecontact_view cascade;
create materialized view shared.telephonecontact_view as
select
    shared.telephonecontact_pt.id::integer as id,
    shared.telephonecontact_pt.nilreason::text AS telephonecontact_nilreason,
    coalesce(cast(shared.telephonecontact.voice_value as varchar), '(' || shared.telephonecontact.voice_nilreason || ')')::text as voice,
    coalesce(cast(shared.telephonecontact.facsimile_value as varchar), '(' || shared.telephonecontact.facsimile_nilreason || ')')::text as facsimile,
    shared_timesheet_view_rbgzqd.timeinterval::jsonb as timeinterval,
    notes_note_view_esfrct.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_zbmkpm.specialdateauthority::jsonb as specialdateauthority
from shared.telephonecontact_pt 
inner join shared.telephonecontact on shared.telephonecontact_pt.telephonecontact_id = shared.telephonecontact.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_ohniky.*) AS timeinterval
  from master_join master_join_lodzww
  join shared.timesheet_view shared_timesheet_lat_ohniky on master_join_lodzww.target_id = shared_timesheet_lat_ohniky.id
  where master_join_lodzww.source_id = shared.telephonecontact.id
) as shared_timesheet_view_rbgzqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tqdrls.*) AS annotation
  from master_join master_join_qhsnyl
  join notes.note_view notes_note_lat_tqdrls on master_join_qhsnyl.target_id = notes_note_lat_tqdrls.id
  where master_join_qhsnyl.source_id = shared.telephonecontact.id
) as notes_note_view_esfrct on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_tpjpok.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_tpjpok.title AS varchar), '(' || organisation_organisationauthority_lat_tpjpok.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_tpjpok.href
  )) as specialdateauthority  from master_join master_join_xlbpap
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_tpjpok on master_join_xlbpap.target_id = organisation_organisationauthority_lat_tpjpok.id
  where master_join_xlbpap.source_id = shared.telephonecontact.id
) as organisation_organisationauthority_pt_zbmkpm on TRUE;
-- UnitAvailabilityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists organisation.unitavailability_view cascade;
create materialized view organisation.unitavailability_view as
select
    organisation.unitavailability_pt.id::integer as id,
    organisation.unitavailability_pt.nilreason::text AS unitavailability_nilreason,
    coalesce(cast(organisation.unitavailability.operationalstatus_value as varchar), '(' || organisation.unitavailability.operationalstatus_nilreason || ')')::text as operationalstatus,
    shared_timesheet_view_lnjivo.timeinterval::jsonb as timeinterval,
    notes_note_view_elmdwm.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_oeynzd.specialdateauthority::jsonb as specialdateauthority
from organisation.unitavailability_pt 
inner join organisation.unitavailability on organisation.unitavailability_pt.unitavailability_id = organisation.unitavailability.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_jllpml.*) AS timeinterval
  from master_join master_join_lugtkk
  join shared.timesheet_view shared_timesheet_lat_jllpml on master_join_lugtkk.target_id = shared_timesheet_lat_jllpml.id
  where master_join_lugtkk.source_id = organisation.unitavailability.id
) as shared_timesheet_view_lnjivo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dkwcwo.*) AS annotation
  from master_join master_join_enubxp
  join notes.note_view notes_note_lat_dkwcwo on master_join_enubxp.target_id = notes_note_lat_dkwcwo.id
  where master_join_enubxp.source_id = organisation.unitavailability.id
) as notes_note_view_elmdwm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_curqtz.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_curqtz.title AS varchar), '(' || organisation_organisationauthority_lat_curqtz.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_curqtz.href
  )) as specialdateauthority  from master_join master_join_frusps
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_curqtz on master_join_frusps.target_id = organisation_organisationauthority_lat_curqtz.id
  where master_join_frusps.source_id = organisation.unitavailability.id
) as organisation_organisationauthority_pt_oeynzd on TRUE;
-- VerticalStructureLightingStatusPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists obstacles.verticalstructurelightingstatus_view cascade;
create materialized view obstacles.verticalstructurelightingstatus_view as
select
    obstacles.verticalstructurelightingstatus_pt.id::integer as id,
    obstacles.verticalstructurelightingstatus_pt.nilreason::text AS verticalstructurelightingstatus_nilreason,
    coalesce(cast(obstacles.verticalstructurelightingstatus.status_value as varchar), '(' || obstacles.verticalstructurelightingstatus.status_nilreason || ')')::text as status,
    shared_timesheet_view_hrrzhu.timeinterval::jsonb as timeinterval,
    notes_note_view_xidtke.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_egrqri.specialdateauthority::jsonb as specialdateauthority
from obstacles.verticalstructurelightingstatus_pt 
inner join obstacles.verticalstructurelightingstatus on obstacles.verticalstructurelightingstatus_pt.verticalstructurelightingstatus_id = obstacles.verticalstructurelightingstatus.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_mocqkv.*) AS timeinterval
  from master_join master_join_zhvmsd
  join shared.timesheet_view shared_timesheet_lat_mocqkv on master_join_zhvmsd.target_id = shared_timesheet_lat_mocqkv.id
  where master_join_zhvmsd.source_id = obstacles.verticalstructurelightingstatus.id
) as shared_timesheet_view_hrrzhu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kpmcuh.*) AS annotation
  from master_join master_join_ktimoa
  join notes.note_view notes_note_lat_kpmcuh on master_join_ktimoa.target_id = notes_note_lat_kpmcuh.id
  where master_join_ktimoa.source_id = obstacles.verticalstructurelightingstatus.id
) as notes_note_view_xidtke on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_sljtlu.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_sljtlu.title AS varchar), '(' || organisation_organisationauthority_lat_sljtlu.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_sljtlu.href
  )) as specialdateauthority  from master_join master_join_dfmlgt
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_sljtlu on master_join_dfmlgt.target_id = organisation_organisationauthority_lat_sljtlu.id
  where master_join_dfmlgt.source_id = obstacles.verticalstructurelightingstatus.id
) as organisation_organisationauthority_pt_egrqri on TRUE;
-- VerticalStructurePartPropertyType
-- ['shared.timesheet_view', 'geometry.elevatedcurve_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists obstacles.verticalstructurepart_view cascade;
create materialized view obstacles.verticalstructurepart_view as
select
    obstacles.verticalstructurepart_pt.id::integer as id,
    obstacles.verticalstructurepart_pt.nilreason::text AS verticalstructurepart_nilreason,
    coalesce(cast(obstacles.verticalstructurepart.type_value as varchar), '(' || obstacles.verticalstructurepart.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructurepart.constructionstatus_value as varchar), '(' || obstacles.verticalstructurepart.constructionstatus_nilreason || ')')::text as constructionstatus,
    coalesce(cast(obstacles.verticalstructurepart.markingpattern_value as varchar), '(' || obstacles.verticalstructurepart.markingpattern_nilreason || ')')::text as markingpattern,
    coalesce(cast(obstacles.verticalstructurepart.markingfirstcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingfirstcolour_nilreason || ')')::text as markingfirstcolour,
    coalesce(cast(obstacles.verticalstructurepart.markingsecondcolour_value as varchar), '(' || obstacles.verticalstructurepart.markingsecondcolour_nilreason || ')')::text as markingsecondcolour,
    coalesce(cast(obstacles.verticalstructurepart.mobile_value as varchar), '(' || obstacles.verticalstructurepart.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(obstacles.verticalstructurepart.frangible_value as varchar), '(' || obstacles.verticalstructurepart.frangible_nilreason || ')')::text as frangible,
    coalesce(cast(obstacles.verticalstructurepart.visiblematerial_value as varchar), '(' || obstacles.verticalstructurepart.visiblematerial_nilreason || ')')::text as visiblematerial,
    coalesce(cast(obstacles.verticalstructurepart.designator_value as varchar), '(' || obstacles.verticalstructurepart.designator_nilreason || ')')::text as designator,
    coalesce(cast(obstacles.verticalstructurepart.verticalextent_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextent_uom, '(' || obstacles.verticalstructurepart.verticalextent_nilreason || ')')::text as verticalextent,
    coalesce(cast(obstacles.verticalstructurepart.verticalextentaccuracy_value as varchar) || ' ' || obstacles.verticalstructurepart.verticalextentaccuracy_uom, '(' || obstacles.verticalstructurepart.verticalextentaccuracy_nilreason || ')')::text as verticalextentaccuracy,
    geometry_elevatedpoint_view_vtmqcn.geom::geometry(Point, 4326) AS horizontalprojectionlocation_geom,
    geometry_elevatedpoint_view_vtmqcn.longitude AS horizontalprojectionlocation_longitude,
    geometry_elevatedpoint_view_vtmqcn.latitude AS horizontalprojectionlocation_latitude,
    geometry_elevatedpoint_view_vtmqcn.elevation AS horizontalprojectionlocation_elevation,
    geometry_elevatedpoint_view_vtmqcn.geoidUndulation AS horizontalprojectionlocation_geoidundulation,
    geometry_elevatedpoint_view_vtmqcn.verticalDatum AS horizontalprojectionlocation_verticaldatum,
    geometry_elevatedpoint_view_vtmqcn.verticalAccuracy AS horizontalprojectionlocation_verticalaccuracy,
    geometry_elevatedpoint_view_vtmqcn.horizontalAccuracy AS horizontalprojectionlocation_horizontalaccuracy,
    geometry_elevatedcurve_view_whqzom.geom::geometry(LINESTRING, 4326) AS horizontalprojectionlinearextent_geom,
    geometry_elevatedcurve_view_whqzom.elevation AS horizontalprojectionlinearextent_elevation,
    geometry_elevatedcurve_view_whqzom.geoidUndulation AS horizontalprojectionlinearextent_geoidundulation,
    geometry_elevatedcurve_view_whqzom.verticalDatum AS horizontalprojectionlinearextent_verticaldatum,
    geometry_elevatedcurve_view_whqzom.verticalAccuracy AS horizontalprojectionlinearextent_verticalaccuracy,
    geometry_elevatedcurve_view_whqzom.horizontalAccuracy AS horizontalprojectionlinearextent_horizontalaccuracy,
    geometry_elevatedsurface_view_lwgvxy.geom::geometry(POLYGON, 4326) AS horizontalprojectionsurfaceextent_geom,
    geometry_elevatedsurface_view_lwgvxy.elevation AS horizontalprojectionsurfaceextent_elevation,
    geometry_elevatedsurface_view_lwgvxy.geoidUndulation AS horizontalprojectionsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_lwgvxy.verticalDatum AS horizontalprojectionsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_lwgvxy.verticalAccuracy AS horizontalprojectionsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_lwgvxy.horizontalAccuracy AS horizontalprojectionsurfaceextent_horizontalaccuracy,
    shared_timesheet_view_nxbcvb.timeinterval::jsonb as timeinterval,
    notes_note_view_usvxwt.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_nkogqs.specialdateauthority::jsonb as specialdateauthority,
    shared_lightelement_pt_goiyiy.lighting::jsonb as lighting
from obstacles.verticalstructurepart_pt 
inner join obstacles.verticalstructurepart on obstacles.verticalstructurepart_pt.verticalstructurepart_id = obstacles.verticalstructurepart.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_vtmqcn on obstacles.verticalstructurepart.horizontalprojection_location_id = geometry_elevatedpoint_view_vtmqcn.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_whqzom on obstacles.verticalstructurepart.horizontalprojection_linearextent_id = geometry_elevatedcurve_view_whqzom.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_lwgvxy on obstacles.verticalstructurepart.horizontalprojection_surfaceextent_id = geometry_elevatedsurface_view_lwgvxy.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_spvfid.*) AS timeinterval
  from master_join master_join_hcgjpz
  join shared.timesheet_view shared_timesheet_lat_spvfid on master_join_hcgjpz.target_id = shared_timesheet_lat_spvfid.id
  where master_join_hcgjpz.source_id = obstacles.verticalstructurepart.id
) as shared_timesheet_view_nxbcvb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_whmzmc.*) AS annotation
  from master_join master_join_qfmmqk
  join notes.note_view notes_note_lat_whmzmc on master_join_qfmmqk.target_id = notes_note_lat_whmzmc.id
  where master_join_qfmmqk.source_id = obstacles.verticalstructurepart.id
) as notes_note_view_usvxwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_vyonml.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_vyonml.title AS varchar), '(' || organisation_organisationauthority_lat_vyonml.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_vyonml.href
  )) as specialdateauthority  from master_join master_join_qvpykg
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_vyonml on master_join_qvpykg.target_id = organisation_organisationauthority_lat_vyonml.id
  where master_join_qvpykg.source_id = obstacles.verticalstructurepart.id
) as organisation_organisationauthority_pt_nkogqs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_syhkhh.id) as lighting
  from master_join master_join_pgvqlr
  join shared.lightelement_pt shared_lightelement_lat_syhkhh on master_join_pgvqlr.target_id = shared_lightelement_lat_syhkhh.id
  where master_join_pgvqlr.source_id = obstacles.verticalstructurepart.id
) as shared_lightelement_pt_goiyiy on TRUE;
-- WorkareaActivityPropertyType
-- ['notes.note_view', 'shared.timesheet_view']
drop materialized view if exists airport_heliport.workareaactivity_view cascade;
create materialized view airport_heliport.workareaactivity_view as
select
    airport_heliport.workareaactivity_pt.id::integer as id,
    airport_heliport.workareaactivity_pt.nilreason::text AS workareaactivity_nilreason,
    coalesce(cast(airport_heliport.workareaactivity.isactive_value as varchar), '(' || airport_heliport.workareaactivity.isactive_nilreason || ')')::text as isactive,
    shared_timesheet_view_qvcgjr.timeinterval::jsonb as timeinterval,
    notes_note_view_gpumng.annotation::jsonb as annotation,
    organisation_organisationauthority_pt_ibiewv.specialdateauthority::jsonb as specialdateauthority
from airport_heliport.workareaactivity_pt 
inner join airport_heliport.workareaactivity on airport_heliport.workareaactivity_pt.workareaactivity_id = airport_heliport.workareaactivity.id
left join lateral(
  select
    jsonb_agg(DISTINCT shared_timesheet_lat_fkzeto.*) AS timeinterval
  from master_join master_join_ocjzhf
  join shared.timesheet_view shared_timesheet_lat_fkzeto on master_join_ocjzhf.target_id = shared_timesheet_lat_fkzeto.id
  where master_join_ocjzhf.source_id = airport_heliport.workareaactivity.id
) as shared_timesheet_view_qvcgjr on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rtktfu.*) AS annotation
  from master_join master_join_oryphm
  join notes.note_view notes_note_lat_rtktfu on master_join_oryphm.target_id = notes_note_lat_rtktfu.id
  where master_join_oryphm.source_id = airport_heliport.workareaactivity.id
) as notes_note_view_gpumng on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_wcyama.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_wcyama.title AS varchar), '(' || organisation_organisationauthority_lat_wcyama.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_wcyama.href
  )) as specialdateauthority  from master_join master_join_bjcchn
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_wcyama on master_join_bjcchn.target_id = organisation_organisationauthority_lat_wcyama.id
  where master_join_bjcchn.source_id = airport_heliport.workareaactivity.id
) as organisation_organisationauthority_pt_ibiewv on TRUE;
-- ContactInformationPropertyType
-- ['shared.telephonecontact_view', 'shared.onlinecontact_view', 'notes.note_view', 'shared.postaladdress_view']
-- Snowflake SQL : ContactInformationPropertyType 

DROP MATERIALIZED VIEW IF EXISTS shared.contactinformation_view CASCADE;

CREATE MATERIALIZED VIEW shared.contactinformation_view AS
SELECT 
0 AS id;
-- AirportHeliportUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airportheliportusage_view cascade;
create materialized view airport_heliport.airportheliportusage_view as
select
    airport_heliport.airportheliportusage_pt.id::integer as id,
    airport_heliport.airportheliportusage_pt.nilreason::text AS airportheliportusage_nilreason,
    coalesce(cast(airport_heliport.airportheliportusage.type_value as varchar), '(' || airport_heliport.airportheliportusage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliportusage.operation_value as varchar), '(' || airport_heliport.airportheliportusage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.airportheliportusage.priorpermission_value as varchar) || ' ' || airport_heliport.airportheliportusage.priorpermission_uom, '(' || airport_heliport.airportheliportusage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_shvrqh.id)::jsonb AS selection,
    notes_note_view_ugekwr.annotation::jsonb as annotation
from airport_heliport.airportheliportusage_pt 
inner join airport_heliport.airportheliportusage on airport_heliport.airportheliportusage_pt.airportheliportusage_id = airport_heliport.airportheliportusage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_shvrqh on airport_heliport.airportheliportusage.selection_id = airport_heliport_conditioncombination_pt_shvrqh.id
left join lateral(
  select
  from master_join master_join_nogagi
  join shared.contactinformation_view shared_contactinformation_lat_nzkeke on master_join_nogagi.target_id = shared_contactinformation_lat_nzkeke.id
  where master_join_nogagi.source_id = airport_heliport.airportheliportusage.id
) as shared_contactinformation_view_jkdzfz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dzljbb.*) AS annotation
  from master_join master_join_vqmumt
  join notes.note_view notes_note_lat_dzljbb on master_join_vqmumt.target_id = notes_note_lat_dzljbb.id
  where master_join_vqmumt.source_id = airport_heliport.airportheliportusage.id
) as notes_note_view_ugekwr on TRUE;
-- ApronAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.apronareausage_view cascade;
create materialized view airport_heliport.apronareausage_view as
select
    airport_heliport.apronareausage_pt.id::integer as id,
    airport_heliport.apronareausage_pt.nilreason::text AS apronareausage_nilreason,
    coalesce(cast(airport_heliport.apronareausage.type_value as varchar), '(' || airport_heliport.apronareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronareausage.priorpermission_value as varchar) || ' ' || airport_heliport.apronareausage.priorpermission_uom, '(' || airport_heliport.apronareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_soqwdy.id)::jsonb AS selection,
    notes_note_view_msvzwb.annotation::jsonb as annotation
from airport_heliport.apronareausage_pt 
inner join airport_heliport.apronareausage on airport_heliport.apronareausage_pt.apronareausage_id = airport_heliport.apronareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_soqwdy on airport_heliport.apronareausage.selection_id = airport_heliport_conditioncombination_pt_soqwdy.id
left join lateral(
  select
  from master_join master_join_mqketo
  join shared.contactinformation_view shared_contactinformation_lat_deiexy on master_join_mqketo.target_id = shared_contactinformation_lat_deiexy.id
  where master_join_mqketo.source_id = airport_heliport.apronareausage.id
) as shared_contactinformation_view_rmwaik on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xihuav.*) AS annotation
  from master_join master_join_lurfkt
  join notes.note_view notes_note_lat_xihuav on master_join_lurfkt.target_id = notes_note_lat_xihuav.id
  where master_join_lurfkt.source_id = airport_heliport.apronareausage.id
) as notes_note_view_msvzwb on TRUE;
-- FlightRestrictionRoutePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists routes.flightrestrictionroute_view cascade;
create materialized view routes.flightrestrictionroute_view as
select
    routes.flightrestrictionroute_pt.id::integer as id,
    routes.flightrestrictionroute_pt.nilreason::text AS flightrestrictionroute_nilreason,
    coalesce(cast(routes.flightrestrictionroute.priorpermission_value as varchar), '(' || routes.flightrestrictionroute.priorpermission_nilreason || ')')::text as priorpermission,
    routes_flightroutingelement_pt_bnpyhc.routeelement::jsonb as routeelement,
    notes_note_view_orzcnd.annotation::jsonb as annotation
from routes.flightrestrictionroute_pt 
inner join routes.flightrestrictionroute on routes.flightrestrictionroute_pt.flightrestrictionroute_id = routes.flightrestrictionroute.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightroutingelement_lat_isfcge.id) as routeelement
  from master_join master_join_jfavoa
  join routes.flightroutingelement_pt routes_flightroutingelement_lat_isfcge on master_join_jfavoa.target_id = routes_flightroutingelement_lat_isfcge.id
  where master_join_jfavoa.source_id = routes.flightrestrictionroute.id
) as routes_flightroutingelement_pt_bnpyhc on TRUE
left join lateral(
  select
  from master_join master_join_pyknve
  join shared.contactinformation_view shared_contactinformation_lat_ohhsyk on master_join_pyknve.target_id = shared_contactinformation_lat_ohhsyk.id
  where master_join_pyknve.source_id = routes.flightrestrictionroute.id
) as shared_contactinformation_view_pmcnfj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bflona.*) AS annotation
  from master_join master_join_uhbfal
  join notes.note_view notes_note_lat_bflona on master_join_uhbfal.target_id = notes_note_lat_bflona.id
  where master_join_uhbfal.source_id = routes.flightrestrictionroute.id
) as notes_note_view_orzcnd on TRUE;
-- ManoeuvringAreaUsagePropertyType
-- ['shared.contactinformation_view', 'notes.note_view']
drop materialized view if exists airport_heliport.manoeuvringareausage_view cascade;
create materialized view airport_heliport.manoeuvringareausage_view as
select
    airport_heliport.manoeuvringareausage_pt.id::integer as id,
    airport_heliport.manoeuvringareausage_pt.nilreason::text AS manoeuvringareausage_nilreason,
    coalesce(cast(airport_heliport.manoeuvringareausage.type_value as varchar), '(' || airport_heliport.manoeuvringareausage.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.manoeuvringareausage.operation_value as varchar), '(' || airport_heliport.manoeuvringareausage.operation_nilreason || ')')::text as operation,
    coalesce(cast(airport_heliport.manoeuvringareausage.priorpermission_value as varchar) || ' ' || airport_heliport.manoeuvringareausage.priorpermission_uom, '(' || airport_heliport.manoeuvringareausage.priorpermission_nilreason || ')')::text as priorpermission,
    to_jsonb(airport_heliport_conditioncombination_pt_clieeu.id)::jsonb AS selection,
    notes_note_view_olsdsw.annotation::jsonb as annotation
from airport_heliport.manoeuvringareausage_pt 
inner join airport_heliport.manoeuvringareausage on airport_heliport.manoeuvringareausage_pt.manoeuvringareausage_id = airport_heliport.manoeuvringareausage.id
left join airport_heliport.conditioncombination_pt airport_heliport_conditioncombination_pt_clieeu on airport_heliport.manoeuvringareausage.selection_id = airport_heliport_conditioncombination_pt_clieeu.id
left join lateral(
  select
  from master_join master_join_wlmvac
  join shared.contactinformation_view shared_contactinformation_lat_ejlxpc on master_join_wlmvac.target_id = shared_contactinformation_lat_ejlxpc.id
  where master_join_wlmvac.source_id = airport_heliport.manoeuvringareausage.id
) as shared_contactinformation_view_atenvq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zcuvhh.*) AS annotation
  from master_join master_join_tpzfbn
  join notes.note_view notes_note_lat_zcuvhh on master_join_tpzfbn.target_id = notes_note_lat_zcuvhh.id
  where master_join_tpzfbn.source_id = airport_heliport.manoeuvringareausage.id
) as notes_note_view_olsdsw on TRUE;
-- AerialRefuellingTimeSliceType
-- ['notes.note_view', 'routes.routeavailability_view', 'aerial_refuelling.aerialrefuellinganchor_view', 'aerial_refuelling.aerialrefuellingtrack_view', 'aerial_refuelling.authorityforaerialrefuelling_view']
drop materialized view if exists aerial_refuelling.aerialrefuelling_view cascade;
create materialized view aerial_refuelling.aerialrefuelling_view as
select distinct on (aerialrefuelling.identifier,aerialrefuelling_ts.sequence_number)
    (row_number() over ())::integer as row,
    aerial_refuelling.aerialrefuelling.id::integer as id,
    aerial_refuelling.aerialrefuelling_ts.id::integer as ts_id,
    aerial_refuelling.aerialrefuelling_tsp.id::integer as tsp_id,
    aerial_refuelling.aerialrefuelling.identifier::uuid,
    aerial_refuelling.aerialrefuelling_ts.interpretation::text,
    aerial_refuelling.aerialrefuelling_ts.sequence_number::integer,
    aerial_refuelling.aerialrefuelling_ts.correction_number::integer,
    aerial_refuelling.aerialrefuelling_ts.valid_time_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.valid_time_end::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_begin::timestamp,
    aerial_refuelling.aerialrefuelling_ts.feature_lifetime_end::timestamp,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorprefix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatornumber_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatorsuffix_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.designatordirection_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.designatordirection_nilreason || ')')::text as designatordirection,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.name_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.name_nilreason || ')')::text as name,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.type_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.type_nilreason || ')')::text as type,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.radarbeaconsetting_nilreason || ')')::text as radarbeaconsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.xbandradarsetting_nilreason || ')')::text as xbandradarsetting,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.tankerchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.tankerchannel_nilreason || ')')::text as tankerchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.receiverchannel_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.receiverchannel_nilreason || ')')::text as receiverchannel,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.helicopterroute_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.helicopterroute_nilreason || ')')::text as helicopterroute,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.specialrefuelling_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.specialrefuelling_nilreason || ')')::text as specialrefuelling,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.bidirectionaluse_nilreason || ')')::text as bidirectionaluse,
    coalesce(cast(aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_value as varchar), '(' || aerial_refuelling.aerialrefuelling_ts.reversedirectionturn_nilreason || ')')::text as reversedirectionturn,
    coalesce(cast(aerial_refuelling_aerialrefuelling_pt_hvezsz.title as varchar), '(' || aerial_refuelling_aerialrefuelling_pt_hvezsz.nilreason[1] || ')')::text AS oppositetrack,
    aerial_refuelling_aerialrefuelling_pt_hvezsz.href::text AS oppositetrack_href,
    routes_routeavailability_view_ykvcdr.availability::jsonb as availability,
    airspace_airspace_pt_ljmlbs.protectingairspace::jsonb as protectingairspace,
    aerial_refuelling_aerialrefuellingtrack_view_splimz.track::jsonb as track,
    aerial_refuelling_aerialrefuellinganchor_view_xwscbc.anchor::jsonb as anchor,
    aerial_refuelling_authorityforaerialrefuelling_view_abgsbz.managingorganisation::jsonb as managingorganisation,
    notes_note_view_qnbfiz.annotation::jsonb as annotation
from aerial_refuelling.aerialrefuelling 
inner join master_join mj2 on aerial_refuelling.aerialrefuelling.id = mj2.source_id
inner join aerial_refuelling.aerialrefuelling_tsp on mj2.target_id = aerial_refuelling.aerialrefuelling_tsp.id
inner join aerial_refuelling.aerialrefuelling_ts on aerial_refuelling.aerialrefuelling_tsp.aerialrefuellingtimeslice_id = aerial_refuelling.aerialrefuelling_ts.id
left join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_pt_hvezsz on aerial_refuelling.aerialrefuelling_ts.oppositetrack_id = aerial_refuelling_aerialrefuelling_pt_hvezsz.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_wbgwiq.*) as availability
  from master_join master_join_cwcdpa
  join routes.routeavailability_view routes_routeavailability_lat_wbgwiq on master_join_cwcdpa.target_id = routes_routeavailability_lat_wbgwiq.id
  where master_join_cwcdpa.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as routes_routeavailability_view_ykvcdr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_vewwoi.id,
      'title', coalesce(cast(airspace_airspace_lat_vewwoi.title AS varchar), '(' || airspace_airspace_lat_vewwoi.nilreason[1] || ')'),
      'href', airspace_airspace_lat_vewwoi.href
  )) as protectingairspace  from master_join master_join_zjodey
  join airspace.airspace_pt airspace_airspace_lat_vewwoi on master_join_zjodey.target_id = airspace_airspace_lat_vewwoi.id
  where master_join_zjodey.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as airspace_airspace_pt_ljmlbs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellingtrack_lat_mgwbfg.*) as track
  from master_join master_join_iuhvfc
  join aerial_refuelling.aerialrefuellingtrack_view aerial_refuelling_aerialrefuellingtrack_lat_mgwbfg on master_join_iuhvfc.target_id = aerial_refuelling_aerialrefuellingtrack_lat_mgwbfg.id
  where master_join_iuhvfc.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellingtrack_view_splimz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_aerialrefuellinganchor_lat_skraru.*) as anchor
  from master_join master_join_ynywvs
  join aerial_refuelling.aerialrefuellinganchor_view aerial_refuelling_aerialrefuellinganchor_lat_skraru on master_join_ynywvs.target_id = aerial_refuelling_aerialrefuellinganchor_lat_skraru.id
  where master_join_ynywvs.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_aerialrefuellinganchor_view_xwscbc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT aerial_refuelling_authorityforaerialrefuelling_lat_isgzvk.*) as managingorganisation
  from master_join master_join_vmmxnn
  join aerial_refuelling.authorityforaerialrefuelling_view aerial_refuelling_authorityforaerialrefuelling_lat_isgzvk on master_join_vmmxnn.target_id = aerial_refuelling_authorityforaerialrefuelling_lat_isgzvk.id
  where master_join_vmmxnn.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as aerial_refuelling_authorityforaerialrefuelling_view_abgsbz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_quzzlx.*) AS annotation
  from master_join master_join_rumsvx
  join notes.note_view notes_note_lat_quzzlx on master_join_rumsvx.target_id = notes_note_lat_quzzlx.id
  where master_join_rumsvx.source_id = aerial_refuelling.aerialrefuelling_ts.id
) as notes_note_view_qnbfiz on TRUE
where aerial_refuelling.aerialrefuelling.feature_status = 'APPROVED'
  and aerial_refuelling.aerialrefuelling_ts.feature_status = 'APPROVED'
order by aerialrefuelling.identifier, aerialrefuelling_ts.sequence_number, aerialrefuelling_ts.correction_number DESC;
-- AeronauticalGroundLightTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.aeronauticalgroundlight_view cascade;
create materialized view navaids_points.aeronauticalgroundlight_view as
select distinct on (aeronauticalgroundlight.identifier,aeronauticalgroundlight_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.aeronauticalgroundlight.id::integer as id,
    navaids_points.aeronauticalgroundlight_ts.id::integer as ts_id,
    navaids_points.aeronauticalgroundlight_tsp.id::integer as tsp_id,
    navaids_points.aeronauticalgroundlight.identifier::uuid,
    navaids_points.aeronauticalgroundlight_ts.interpretation::text,
    navaids_points.aeronauticalgroundlight_ts.sequence_number::integer,
    navaids_points.aeronauticalgroundlight_ts.correction_number::integer,
    navaids_points.aeronauticalgroundlight_ts.valid_time_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.valid_time_end::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_begin::timestamp,
    navaids_points.aeronauticalgroundlight_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.name_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.type_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.colour_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(navaids_points.aeronauticalgroundlight_ts.flashing_value as varchar), '(' || navaids_points.aeronauticalgroundlight_ts.flashing_nilreason || ')')::text as flashing,
    coalesce(cast(obstacles_verticalstructure_pt_rkavvp.title as varchar), '(' || obstacles_verticalstructure_pt_rkavvp.nilreason[1] || ')')::text AS structurebeacon,
    obstacles_verticalstructure_pt_rkavvp.href::text AS structurebeacon_href,
    coalesce(cast(airport_heliport_airportheliport_pt_axkmhs.title as varchar), '(' || airport_heliport_airportheliport_pt_axkmhs.nilreason[1] || ')')::text AS aerodromebeacon,
    airport_heliport_airportheliport_pt_axkmhs.href::text AS aerodromebeacon_href,
    geometry_elevatedpoint_view_kwzkny.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kwzkny.longitude AS location_longitude,
    geometry_elevatedpoint_view_kwzkny.latitude AS location_latitude,
    geometry_elevatedpoint_view_kwzkny.elevation AS location_elevation,
    geometry_elevatedpoint_view_kwzkny.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kwzkny.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kwzkny.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kwzkny.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ijzrpx.annotation::jsonb as annotation
from navaids_points.aeronauticalgroundlight 
inner join master_join mj2 on navaids_points.aeronauticalgroundlight.id = mj2.source_id
inner join navaids_points.aeronauticalgroundlight_tsp on mj2.target_id = navaids_points.aeronauticalgroundlight_tsp.id
inner join navaids_points.aeronauticalgroundlight_ts on navaids_points.aeronauticalgroundlight_tsp.aeronauticalgroundlighttimeslice_id = navaids_points.aeronauticalgroundlight_ts.id
left join obstacles.verticalstructure_pt obstacles_verticalstructure_pt_rkavvp on navaids_points.aeronauticalgroundlight_ts.structurebeacon_id = obstacles_verticalstructure_pt_rkavvp.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_axkmhs on navaids_points.aeronauticalgroundlight_ts.aerodromebeacon_id = airport_heliport_airportheliport_pt_axkmhs.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kwzkny on navaids_points.aeronauticalgroundlight_ts.location_id = geometry_elevatedpoint_view_kwzkny.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bjahsp.*) AS annotation
  from master_join master_join_ltnwob
  join notes.note_view notes_note_lat_bjahsp on master_join_ltnwob.target_id = notes_note_lat_bjahsp.id
  where master_join_ltnwob.source_id = navaids_points.aeronauticalgroundlight_ts.id
) as notes_note_view_ijzrpx on TRUE
where navaids_points.aeronauticalgroundlight.feature_status = 'APPROVED'
  and navaids_points.aeronauticalgroundlight_ts.feature_status = 'APPROVED'
order by aeronauticalgroundlight.identifier, aeronauticalgroundlight_ts.sequence_number, aeronauticalgroundlight_ts.correction_number DESC;
-- AircraftGroundServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.aircraftgroundservice_view cascade;
create materialized view service.aircraftgroundservice_view as
select distinct on (aircraftgroundservice.identifier,aircraftgroundservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.aircraftgroundservice.id::integer as id,
    service.aircraftgroundservice_ts.id::integer as ts_id,
    service.aircraftgroundservice_tsp.id::integer as tsp_id,
    service.aircraftgroundservice.identifier::uuid,
    service.aircraftgroundservice_ts.interpretation::text,
    service.aircraftgroundservice_ts.sequence_number::integer,
    service.aircraftgroundservice_ts.correction_number::integer,
    service.aircraftgroundservice_ts.valid_time_begin::timestamp,
    service.aircraftgroundservice_ts.valid_time_end::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_begin::timestamp,
    service.aircraftgroundservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.aircraftgroundservice_ts.flightoperations_value as varchar), '(' || service.aircraftgroundservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.aircraftgroundservice_ts.rank_value as varchar), '(' || service.aircraftgroundservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.aircraftgroundservice_ts.complianticao_value as varchar), '(' || service.aircraftgroundservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.aircraftgroundservice_ts.name_value as varchar), '(' || service.aircraftgroundservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.aircraftgroundservice_ts.type_value as varchar), '(' || service.aircraftgroundservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_jiscju.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_jiscju.longitude AS location_longitude,
    geometry_elevatedpoint_view_jiscju.latitude AS location_latitude,
    geometry_elevatedpoint_view_jiscju.elevation AS location_elevation,
    geometry_elevatedpoint_view_jiscju.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_jiscju.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_jiscju.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_jiscju.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hggkdb.title as varchar), '(' || organisation_unit_pt_hggkdb.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_hggkdb.href::text AS serviceprovider_href,
    service_callsigndetail_view_kmazzh.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_wjnckz.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_iqwjtm.availability::jsonb as availability,
    notes_note_view_ymogta.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_uiirth.airportheliport::jsonb as airportheliport
from service.aircraftgroundservice 
inner join master_join mj2 on service.aircraftgroundservice.id = mj2.source_id
inner join service.aircraftgroundservice_tsp on mj2.target_id = service.aircraftgroundservice_tsp.id
inner join service.aircraftgroundservice_ts on service.aircraftgroundservice_tsp.aircraftgroundservicetimeslice_id = service.aircraftgroundservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_jiscju on service.aircraftgroundservice_ts.location_id = geometry_elevatedpoint_view_jiscju.id
left join organisation.unit_pt organisation_unit_pt_hggkdb on service.aircraftgroundservice_ts.serviceprovider_id = organisation_unit_pt_hggkdb.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tvfvfl.*) as callsign
  from master_join master_join_fwabhu
  join service.callsigndetail_view service_callsigndetail_lat_tvfvfl on master_join_fwabhu.target_id = service_callsigndetail_lat_tvfvfl.id
  where master_join_fwabhu.source_id = service.aircraftgroundservice_ts.id
) as service_callsigndetail_view_kmazzh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_yjbogy.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_yjbogy.title AS varchar), '(' || service_radiocommunicationchannel_lat_yjbogy.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_yjbogy.href
  )) as radiocommunication  from master_join master_join_klsrps
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_yjbogy on master_join_klsrps.target_id = service_radiocommunicationchannel_lat_yjbogy.id
  where master_join_klsrps.source_id = service.aircraftgroundservice_ts.id
) as service_radiocommunicationchannel_pt_wjnckz on TRUE
left join lateral(
  select
  from master_join master_join_jcuggq
  join shared.contactinformation_view shared_contactinformation_lat_ybfino on master_join_jcuggq.target_id = shared_contactinformation_lat_ybfino.id
  where master_join_jcuggq.source_id = service.aircraftgroundservice_ts.id
) as shared_contactinformation_view_zajusu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_bjqwvv.*) as availability
  from master_join master_join_rsoavo
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_bjqwvv on master_join_rsoavo.target_id = service_serviceoperationalstatus_lat_bjqwvv.id
  where master_join_rsoavo.source_id = service.aircraftgroundservice_ts.id
) as service_serviceoperationalstatus_view_iqwjtm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yntjul.*) AS annotation
  from master_join master_join_kavibu
  join notes.note_view notes_note_lat_yntjul on master_join_kavibu.target_id = notes_note_lat_yntjul.id
  where master_join_kavibu.source_id = service.aircraftgroundservice_ts.id
) as notes_note_view_ymogta on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wupart.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wupart.title AS varchar), '(' || airport_heliport_airportheliport_lat_wupart.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wupart.href
  )) as airportheliport  from master_join master_join_ueslgt
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wupart on master_join_ueslgt.target_id = airport_heliport_airportheliport_lat_wupart.id
  where master_join_ueslgt.source_id = service.aircraftgroundservice_ts.id
) as airport_heliport_airportheliport_pt_uiirth on TRUE
where service.aircraftgroundservice.feature_status = 'APPROVED'
  and service.aircraftgroundservice_ts.feature_status = 'APPROVED'
order by aircraftgroundservice.identifier, aircraftgroundservice_ts.sequence_number, aircraftgroundservice_ts.correction_number DESC;
-- AircraftStandTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aircraftstandcontamination_view']
drop materialized view if exists airport_heliport.aircraftstand_view cascade;
create materialized view airport_heliport.aircraftstand_view as
select distinct on (aircraftstand.identifier,aircraftstand_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.aircraftstand.id::integer as id,
    airport_heliport.aircraftstand_ts.id::integer as ts_id,
    airport_heliport.aircraftstand_tsp.id::integer as tsp_id,
    airport_heliport.aircraftstand.identifier::uuid,
    airport_heliport.aircraftstand_ts.interpretation::text,
    airport_heliport.aircraftstand_ts.sequence_number::integer,
    airport_heliport.aircraftstand_ts.correction_number::integer,
    airport_heliport.aircraftstand_ts.valid_time_begin::timestamp,
    airport_heliport.aircraftstand_ts.valid_time_end::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_begin::timestamp,
    airport_heliport.aircraftstand_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.aircraftstand_ts.designator_value as varchar), '(' || airport_heliport.aircraftstand_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.aircraftstand_ts.type_value as varchar), '(' || airport_heliport.aircraftstand_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.aircraftstand_ts.visualdockingsystem_value as varchar), '(' || airport_heliport.aircraftstand_ts.visualdockingsystem_nilreason || ')')::text as visualdockingsystem,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jlthfx.*)::jsonb AS surfaceproperties,
    geometry_elevatedpoint_view_tbvosb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_tbvosb.longitude AS location_longitude,
    geometry_elevatedpoint_view_tbvosb.latitude AS location_latitude,
    geometry_elevatedpoint_view_tbvosb.elevation AS location_elevation,
    geometry_elevatedpoint_view_tbvosb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_tbvosb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_tbvosb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_tbvosb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_apronelement_pt_aahmwa.title as varchar), '(' || airport_heliport_apronelement_pt_aahmwa.nilreason[1] || ')')::text AS apronlocation,
    airport_heliport_apronelement_pt_aahmwa.href::text AS apronlocation_href,
    geometry_elevatedsurface_view_cffkmo.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cffkmo.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cffkmo.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cffkmo.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cffkmo.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cffkmo.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstandcontamination_view_lcmeoo.contaminant::jsonb as contaminant,
    notes_note_view_uwfbph.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_ogllmq.availability::jsonb as availability
from airport_heliport.aircraftstand 
inner join master_join mj2 on airport_heliport.aircraftstand.id = mj2.source_id
inner join airport_heliport.aircraftstand_tsp on mj2.target_id = airport_heliport.aircraftstand_tsp.id
inner join airport_heliport.aircraftstand_ts on airport_heliport.aircraftstand_tsp.aircraftstandtimeslice_id = airport_heliport.aircraftstand_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jlthfx on airport_heliport.aircraftstand_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jlthfx.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_tbvosb on airport_heliport.aircraftstand_ts.location_id = geometry_elevatedpoint_view_tbvosb.id
left join airport_heliport.apronelement_pt airport_heliport_apronelement_pt_aahmwa on airport_heliport.aircraftstand_ts.apronlocation_id = airport_heliport_apronelement_pt_aahmwa.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cffkmo on airport_heliport.aircraftstand_ts.extent_id = geometry_elevatedsurface_view_cffkmo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aircraftstandcontamination_lat_gqfmsd.*) as contaminant
  from master_join master_join_tqwkuf
  join airport_heliport.aircraftstandcontamination_view airport_heliport_aircraftstandcontamination_lat_gqfmsd on master_join_tqwkuf.target_id = airport_heliport_aircraftstandcontamination_lat_gqfmsd.id
  where master_join_tqwkuf.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_aircraftstandcontamination_view_lcmeoo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dtpttt.*) AS annotation
  from master_join master_join_dabxfa
  join notes.note_view notes_note_lat_dtpttt on master_join_dabxfa.target_id = notes_note_lat_dtpttt.id
  where master_join_dabxfa.source_id = airport_heliport.aircraftstand_ts.id
) as notes_note_view_uwfbph on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_bqares.*) as availability
  from master_join master_join_tjrxrc
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_bqares on master_join_tjrxrc.target_id = airport_heliport_apronareaavailability_lat_bqares.id
  where master_join_tjrxrc.source_id = airport_heliport.aircraftstand_ts.id
) as airport_heliport_apronareaavailability_view_ogllmq on TRUE
where airport_heliport.aircraftstand.feature_status = 'APPROVED'
  and airport_heliport.aircraftstand_ts.feature_status = 'APPROVED'
order by aircraftstand.identifier, aircraftstand_ts.sequence_number, aircraftstand_ts.correction_number DESC;
-- AirportClearanceServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.airportclearanceservice_view cascade;
create materialized view service.airportclearanceservice_view as
select distinct on (airportclearanceservice.identifier,airportclearanceservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportclearanceservice.id::integer as id,
    service.airportclearanceservice_ts.id::integer as ts_id,
    service.airportclearanceservice_tsp.id::integer as tsp_id,
    service.airportclearanceservice.identifier::uuid,
    service.airportclearanceservice_ts.interpretation::text,
    service.airportclearanceservice_ts.sequence_number::integer,
    service.airportclearanceservice_ts.correction_number::integer,
    service.airportclearanceservice_ts.valid_time_begin::timestamp,
    service.airportclearanceservice_ts.valid_time_end::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_begin::timestamp,
    service.airportclearanceservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportclearanceservice_ts.flightoperations_value as varchar), '(' || service.airportclearanceservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportclearanceservice_ts.rank_value as varchar), '(' || service.airportclearanceservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportclearanceservice_ts.complianticao_value as varchar), '(' || service.airportclearanceservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportclearanceservice_ts.name_value as varchar), '(' || service.airportclearanceservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airportclearanceservice_ts.snowplan_value as varchar), '(' || service.airportclearanceservice_ts.snowplan_nilreason || ')')::text as snowplan,
    geometry_elevatedpoint_view_ldssig.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ldssig.longitude AS location_longitude,
    geometry_elevatedpoint_view_ldssig.latitude AS location_latitude,
    geometry_elevatedpoint_view_ldssig.elevation AS location_elevation,
    geometry_elevatedpoint_view_ldssig.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ldssig.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ldssig.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ldssig.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_fvvbdx.title as varchar), '(' || organisation_unit_pt_fvvbdx.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_fvvbdx.href::text AS serviceprovider_href,
    service_callsigndetail_view_hpekpl.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_jxbyeg.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_ffrckk.availability::jsonb as availability,
    notes_note_view_brllla.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_ataffo.airportheliport::jsonb as airportheliport
from service.airportclearanceservice 
inner join master_join mj2 on service.airportclearanceservice.id = mj2.source_id
inner join service.airportclearanceservice_tsp on mj2.target_id = service.airportclearanceservice_tsp.id
inner join service.airportclearanceservice_ts on service.airportclearanceservice_tsp.airportclearanceservicetimeslice_id = service.airportclearanceservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ldssig on service.airportclearanceservice_ts.location_id = geometry_elevatedpoint_view_ldssig.id
left join organisation.unit_pt organisation_unit_pt_fvvbdx on service.airportclearanceservice_ts.serviceprovider_id = organisation_unit_pt_fvvbdx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_khhcra.*) as callsign
  from master_join master_join_vzgbug
  join service.callsigndetail_view service_callsigndetail_lat_khhcra on master_join_vzgbug.target_id = service_callsigndetail_lat_khhcra.id
  where master_join_vzgbug.source_id = service.airportclearanceservice_ts.id
) as service_callsigndetail_view_hpekpl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_bsrcss.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_bsrcss.title AS varchar), '(' || service_radiocommunicationchannel_lat_bsrcss.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_bsrcss.href
  )) as radiocommunication  from master_join master_join_xjdsyi
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_bsrcss on master_join_xjdsyi.target_id = service_radiocommunicationchannel_lat_bsrcss.id
  where master_join_xjdsyi.source_id = service.airportclearanceservice_ts.id
) as service_radiocommunicationchannel_pt_jxbyeg on TRUE
left join lateral(
  select
  from master_join master_join_jumlxj
  join shared.contactinformation_view shared_contactinformation_lat_mubuoi on master_join_jumlxj.target_id = shared_contactinformation_lat_mubuoi.id
  where master_join_jumlxj.source_id = service.airportclearanceservice_ts.id
) as shared_contactinformation_view_yycaru on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_xnarlw.*) as availability
  from master_join master_join_tmahom
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_xnarlw on master_join_tmahom.target_id = service_serviceoperationalstatus_lat_xnarlw.id
  where master_join_tmahom.source_id = service.airportclearanceservice_ts.id
) as service_serviceoperationalstatus_view_ffrckk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_imined.*) AS annotation
  from master_join master_join_vpaesz
  join notes.note_view notes_note_lat_imined on master_join_vpaesz.target_id = notes_note_lat_imined.id
  where master_join_vpaesz.source_id = service.airportclearanceservice_ts.id
) as notes_note_view_brllla on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_mypzde.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_mypzde.title AS varchar), '(' || airport_heliport_airportheliport_lat_mypzde.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_mypzde.href
  )) as airportheliport  from master_join master_join_ibxofc
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_mypzde on master_join_ibxofc.target_id = airport_heliport_airportheliport_lat_mypzde.id
  where master_join_ibxofc.source_id = service.airportclearanceservice_ts.id
) as airport_heliport_airportheliport_pt_ataffo on TRUE
where service.airportclearanceservice.feature_status = 'APPROVED'
  and service.airportclearanceservice_ts.feature_status = 'APPROVED'
order by airportclearanceservice.identifier, airportclearanceservice_ts.sequence_number, airportclearanceservice_ts.correction_number DESC;
-- AirportHeliportCollocationTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airport_heliport.airportheliportcollocation_view cascade;
create materialized view airport_heliport.airportheliportcollocation_view as
select distinct on (airportheliportcollocation.identifier,airportheliportcollocation_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliportcollocation.id::integer as id,
    airport_heliport.airportheliportcollocation_ts.id::integer as ts_id,
    airport_heliport.airportheliportcollocation_tsp.id::integer as tsp_id,
    airport_heliport.airportheliportcollocation.identifier::uuid,
    airport_heliport.airportheliportcollocation_ts.interpretation::text,
    airport_heliport.airportheliportcollocation_ts.sequence_number::integer,
    airport_heliport.airportheliportcollocation_ts.correction_number::integer,
    airport_heliport.airportheliportcollocation_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.valid_time_end::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliportcollocation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliportcollocation_ts.type_value as varchar), '(' || airport_heliport.airportheliportcollocation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_rjfnse.title as varchar), '(' || airport_heliport_airportheliport_pt_rjfnse.nilreason[1] || ')')::text AS hostairport,
    airport_heliport_airportheliport_pt_rjfnse.href::text AS hostairport_href,
    coalesce(cast(airport_heliport_airportheliport_pt_kftqfw.title as varchar), '(' || airport_heliport_airportheliport_pt_kftqfw.nilreason[1] || ')')::text AS dependentairport,
    airport_heliport_airportheliport_pt_kftqfw.href::text AS dependentairport_href,
    notes_note_view_wjwbid.annotation::jsonb as annotation
from airport_heliport.airportheliportcollocation 
inner join master_join mj2 on airport_heliport.airportheliportcollocation.id = mj2.source_id
inner join airport_heliport.airportheliportcollocation_tsp on mj2.target_id = airport_heliport.airportheliportcollocation_tsp.id
inner join airport_heliport.airportheliportcollocation_ts on airport_heliport.airportheliportcollocation_tsp.airportheliportcollocationtimeslice_id = airport_heliport.airportheliportcollocation_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rjfnse on airport_heliport.airportheliportcollocation_ts.hostairport_id = airport_heliport_airportheliport_pt_rjfnse.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_kftqfw on airport_heliport.airportheliportcollocation_ts.dependentairport_id = airport_heliport_airportheliport_pt_kftqfw.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hsegws.*) AS annotation
  from master_join master_join_xalfep
  join notes.note_view notes_note_lat_hsegws on master_join_xalfep.target_id = notes_note_lat_hsegws.id
  where master_join_xalfep.source_id = airport_heliport.airportheliportcollocation_ts.id
) as notes_note_view_wjwbid on TRUE
where airport_heliport.airportheliportcollocation.feature_status = 'APPROVED'
  and airport_heliport.airportheliportcollocation_ts.feature_status = 'APPROVED'
order by airportheliportcollocation.identifier, airportheliportcollocation_ts.sequence_number, airportheliportcollocation_ts.correction_number DESC;
-- AirportHeliportTimeSliceType
-- ['geometry.elevatedsurface_view', 'shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.city_view', 'airport_heliport.airportheliportresponsibilityorganisation_view', 'airport_heliport.airportheliportcontamination_view', 'airport_heliport.airportheliportavailability_view']
drop materialized view if exists airport_heliport.airportheliport_view cascade;
create materialized view airport_heliport.airportheliport_view as
select distinct on (airportheliport.identifier,airportheliport_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportheliport.id::integer as id,
    airport_heliport.airportheliport_ts.id::integer as ts_id,
    airport_heliport.airportheliport_tsp.id::integer as tsp_id,
    airport_heliport.airportheliport.identifier::uuid,
    airport_heliport.airportheliport_ts.interpretation::text,
    airport_heliport.airportheliport_ts.sequence_number::integer,
    airport_heliport.airportheliport_ts.correction_number::integer,
    airport_heliport.airportheliport_ts.valid_time_begin::timestamp,
    airport_heliport.airportheliport_ts.valid_time_end::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportheliport_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportheliport_ts.designator_value as varchar), '(' || airport_heliport.airportheliport_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airportheliport_ts.name_value as varchar), '(' || airport_heliport.airportheliport_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.airportheliport_ts.locationindicatoricao_value as varchar), '(' || airport_heliport.airportheliport_ts.locationindicatoricao_nilreason || ')')::text as locationindicatoricao,
    coalesce(cast(airport_heliport.airportheliport_ts.designatoriata_value as varchar), '(' || airport_heliport.airportheliport_ts.designatoriata_nilreason || ')')::text as designatoriata,
    coalesce(cast(airport_heliport.airportheliport_ts.type_value as varchar), '(' || airport_heliport.airportheliport_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.airportheliport_ts.certifiedicao_value as varchar), '(' || airport_heliport.airportheliport_ts.certifiedicao_nilreason || ')')::text as certifiedicao,
    coalesce(cast(airport_heliport.airportheliport_ts.privateuse_value as varchar), '(' || airport_heliport.airportheliport_ts.privateuse_nilreason || ')')::text as privateuse,
    coalesce(cast(airport_heliport.airportheliport_ts.controltype_value as varchar), '(' || airport_heliport.airportheliport_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airport_heliport.airportheliport_ts.verticaldatum_value as varchar), '(' || airport_heliport.airportheliport_ts.verticaldatum_nilreason || ')')::text as verticaldatum,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationaccuracy_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.datemagneticvariation_value as varchar), '(' || airport_heliport.airportheliport_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(airport_heliport.airportheliport_ts.magneticvariationchange_value as varchar), '(' || airport_heliport.airportheliport_ts.magneticvariationchange_nilreason || ')')::text as magneticvariationchange,
    coalesce(cast(airport_heliport.airportheliport_ts.altimeterchecklocation_value as varchar), '(' || airport_heliport.airportheliport_ts.altimeterchecklocation_nilreason || ')')::text as altimeterchecklocation,
    coalesce(cast(airport_heliport.airportheliport_ts.secondarypowersupply_value as varchar), '(' || airport_heliport.airportheliport_ts.secondarypowersupply_nilreason || ')')::text as secondarypowersupply,
    coalesce(cast(airport_heliport.airportheliport_ts.winddirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.winddirectionindicator_nilreason || ')')::text as winddirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.landingdirectionindicator_value as varchar), '(' || airport_heliport.airportheliport_ts.landingdirectionindicator_nilreason || ')')::text as landingdirectionindicator,
    coalesce(cast(airport_heliport.airportheliport_ts.abandoned_value as varchar), '(' || airport_heliport.airportheliport_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevation_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevation_uom, '(' || airport_heliport.airportheliport_ts.fieldelevation_nilreason || ')')::text as fieldelevation,
    coalesce(cast(airport_heliport.airportheliport_ts.fieldelevationaccuracy_value as varchar) || ' ' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_uom, '(' || airport_heliport.airportheliport_ts.fieldelevationaccuracy_nilreason || ')')::text as fieldelevationaccuracy,
    coalesce(cast(airport_heliport.airportheliport_ts.referencetemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.referencetemperature_uom, '(' || airport_heliport.airportheliport_ts.referencetemperature_nilreason || ')')::text as referencetemperature,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionaltitude_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionaltitude_uom, '(' || airport_heliport.airportheliport_ts.transitionaltitude_nilreason || ')')::text as transitionaltitude,
    coalesce(cast(airport_heliport.airportheliport_ts.transitionlevel_value as varchar) || ' ' || airport_heliport.airportheliport_ts.transitionlevel_uom, '(' || airport_heliport.airportheliport_ts.transitionlevel_nilreason || ')')::text as transitionlevel,
    coalesce(cast(airport_heliport.airportheliport_ts.lowesttemperature_value as varchar) || ' ' || airport_heliport.airportheliport_ts.lowesttemperature_uom, '(' || airport_heliport.airportheliport_ts.lowesttemperature_nilreason || ')')::text as lowesttemperature,
    to_jsonb(airport_heliport_airportheliportresponsibilityorganisation_view_reuurd.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_oikiet.geom::geometry(Point, 4326) AS arp_geom,
    geometry_elevatedpoint_view_oikiet.longitude AS arp_longitude,
    geometry_elevatedpoint_view_oikiet.latitude AS arp_latitude,
    geometry_elevatedpoint_view_oikiet.elevation AS arp_elevation,
    geometry_elevatedpoint_view_oikiet.geoidUndulation AS arp_geoidundulation,
    geometry_elevatedpoint_view_oikiet.verticalDatum AS arp_verticaldatum,
    geometry_elevatedpoint_view_oikiet.verticalAccuracy AS arp_verticalaccuracy,
    geometry_elevatedpoint_view_oikiet.horizontalAccuracy AS arp_horizontalaccuracy,
    geometry_elevatedsurface_view_ippoup.geom::geometry(POLYGON, 4326) AS aviationboundary_geom,
    geometry_elevatedsurface_view_ippoup.elevation AS aviationboundary_elevation,
    geometry_elevatedsurface_view_ippoup.geoidUndulation AS aviationboundary_geoidundulation,
    geometry_elevatedsurface_view_ippoup.verticalDatum AS aviationboundary_verticaldatum,
    geometry_elevatedsurface_view_ippoup.verticalAccuracy AS aviationboundary_verticalaccuracy,
    geometry_elevatedsurface_view_ippoup.horizontalAccuracy AS aviationboundary_horizontalaccuracy,
    airport_heliport_airportheliportcontamination_view_tbjznl.contaminant::jsonb as contaminant,
    airport_heliport_city_view_incfmg.servedcity::jsonb as servedcity,
    airport_heliport_altimetersource_pt_knqcyf.altimetersource::jsonb as altimetersource,
    airport_heliport_airportheliportavailability_view_tqyplu.availability::jsonb as availability,
    notes_note_view_lljyqc.annotation::jsonb as annotation
from airport_heliport.airportheliport 
inner join master_join mj2 on airport_heliport.airportheliport.id = mj2.source_id
inner join airport_heliport.airportheliport_tsp on mj2.target_id = airport_heliport.airportheliport_tsp.id
inner join airport_heliport.airportheliport_ts on airport_heliport.airportheliport_tsp.airportheliporttimeslice_id = airport_heliport.airportheliport_ts.id
left join airport_heliport.airportheliportresponsibilityorganisation_view airport_heliport_airportheliportresponsibilityorganisation_view_reuurd on airport_heliport.airportheliport_ts.responsibleorganisation_id = airport_heliport_airportheliportresponsibilityorganisation_view_reuurd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_oikiet on airport_heliport.airportheliport_ts.arp_id = geometry_elevatedpoint_view_oikiet.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_ippoup on airport_heliport.airportheliport_ts.aviationboundary_id = geometry_elevatedsurface_view_ippoup.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportcontamination_lat_crmdyh.*) as contaminant
  from master_join master_join_cpfdik
  join airport_heliport.airportheliportcontamination_view airport_heliport_airportheliportcontamination_lat_crmdyh on master_join_cpfdik.target_id = airport_heliport_airportheliportcontamination_lat_crmdyh.id
  where master_join_cpfdik.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportcontamination_view_tbjznl on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_city_lat_lfkygr.*) as servedcity
  from master_join master_join_usupst
  join airport_heliport.city_view airport_heliport_city_lat_lfkygr on master_join_usupst.target_id = airport_heliport_city_lat_lfkygr.id
  where master_join_usupst.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_city_view_incfmg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_altimetersource_lat_puepdx.id,
      'title', coalesce(cast(airport_heliport_altimetersource_lat_puepdx.title AS varchar), '(' || airport_heliport_altimetersource_lat_puepdx.nilreason[1] || ')'),
      'href', airport_heliport_altimetersource_lat_puepdx.href
  )) as altimetersource  from master_join master_join_kbuhid
  join airport_heliport.altimetersource_pt airport_heliport_altimetersource_lat_puepdx on master_join_kbuhid.target_id = airport_heliport_altimetersource_lat_puepdx.id
  where master_join_kbuhid.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_altimetersource_pt_knqcyf on TRUE
left join lateral(
  select
  from master_join master_join_zmlois
  join shared.contactinformation_view shared_contactinformation_lat_epyovr on master_join_zmlois.target_id = shared_contactinformation_lat_epyovr.id
  where master_join_zmlois.source_id = airport_heliport.airportheliport_ts.id
) as shared_contactinformation_view_xgpuag on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_airportheliportavailability_lat_yebtlg.*) as availability
  from master_join master_join_vcoivf
  join airport_heliport.airportheliportavailability_view airport_heliport_airportheliportavailability_lat_yebtlg on master_join_vcoivf.target_id = airport_heliport_airportheliportavailability_lat_yebtlg.id
  where master_join_vcoivf.source_id = airport_heliport.airportheliport_ts.id
) as airport_heliport_airportheliportavailability_view_tqyplu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bhwcfv.*) AS annotation
  from master_join master_join_fuewcj
  join notes.note_view notes_note_lat_bhwcfv on master_join_fuewcj.target_id = notes_note_lat_bhwcfv.id
  where master_join_fuewcj.source_id = airport_heliport.airportheliport_ts.id
) as notes_note_view_lljyqc on TRUE
where airport_heliport.airportheliport.feature_status = 'APPROVED'
  and airport_heliport.airportheliport_ts.feature_status = 'APPROVED'
order by airportheliport.identifier, airportheliport_ts.sequence_number, airportheliport_ts.correction_number DESC;
-- AirportHotSpotTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.airporthotspot_view cascade;
create materialized view airport_heliport.airporthotspot_view as
select distinct on (airporthotspot.identifier,airporthotspot_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airporthotspot.id::integer as id,
    airport_heliport.airporthotspot_ts.id::integer as ts_id,
    airport_heliport.airporthotspot_tsp.id::integer as tsp_id,
    airport_heliport.airporthotspot.identifier::uuid,
    airport_heliport.airporthotspot_ts.interpretation::text,
    airport_heliport.airporthotspot_ts.sequence_number::integer,
    airport_heliport.airporthotspot_ts.correction_number::integer,
    airport_heliport.airporthotspot_ts.valid_time_begin::timestamp,
    airport_heliport.airporthotspot_ts.valid_time_end::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airporthotspot_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airporthotspot_ts.designator_value as varchar), '(' || airport_heliport.airporthotspot_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.airporthotspot_ts.instruction_value as varchar), '(' || airport_heliport.airporthotspot_ts.instruction_nilreason || ')')::text as instruction,
    geometry_elevatedsurface_view_dburdj.geom::geometry(POLYGON, 4326) AS area_geom,
    geometry_elevatedsurface_view_dburdj.elevation AS area_elevation,
    geometry_elevatedsurface_view_dburdj.geoidUndulation AS area_geoidundulation,
    geometry_elevatedsurface_view_dburdj.verticalDatum AS area_verticaldatum,
    geometry_elevatedsurface_view_dburdj.verticalAccuracy AS area_verticalaccuracy,
    geometry_elevatedsurface_view_dburdj.horizontalAccuracy AS area_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_fdcuvb.title as varchar), '(' || airport_heliport_airportheliport_pt_fdcuvb.nilreason[1] || ')')::text AS affectedairport,
    airport_heliport_airportheliport_pt_fdcuvb.href::text AS affectedairport_href,
    notes_note_view_vcaubf.annotation::jsonb as annotation
from airport_heliport.airporthotspot 
inner join master_join mj2 on airport_heliport.airporthotspot.id = mj2.source_id
inner join airport_heliport.airporthotspot_tsp on mj2.target_id = airport_heliport.airporthotspot_tsp.id
inner join airport_heliport.airporthotspot_ts on airport_heliport.airporthotspot_tsp.airporthotspottimeslice_id = airport_heliport.airporthotspot_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dburdj on airport_heliport.airporthotspot_ts.area_id = geometry_elevatedsurface_view_dburdj.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_fdcuvb on airport_heliport.airporthotspot_ts.affectedairport_id = airport_heliport_airportheliport_pt_fdcuvb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hiazln.*) AS annotation
  from master_join master_join_bibeoe
  join notes.note_view notes_note_lat_hiazln on master_join_bibeoe.target_id = notes_note_lat_hiazln.id
  where master_join_bibeoe.source_id = airport_heliport.airporthotspot_ts.id
) as notes_note_view_vcaubf on TRUE
where airport_heliport.airporthotspot.feature_status = 'APPROVED'
  and airport_heliport.airporthotspot_ts.feature_status = 'APPROVED'
order by airporthotspot.identifier, airporthotspot_ts.sequence_number, airporthotspot_ts.correction_number DESC;
-- AirportProtectionAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.airportprotectionareamarking_view cascade;
create materialized view airport_heliport.airportprotectionareamarking_view as
select distinct on (airportprotectionareamarking.identifier,airportprotectionareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.airportprotectionareamarking.id::integer as id,
    airport_heliport.airportprotectionareamarking_ts.id::integer as ts_id,
    airport_heliport.airportprotectionareamarking_tsp.id::integer as tsp_id,
    airport_heliport.airportprotectionareamarking.identifier::uuid,
    airport_heliport.airportprotectionareamarking_ts.interpretation::text,
    airport_heliport.airportprotectionareamarking_ts.sequence_number::integer,
    airport_heliport.airportprotectionareamarking_ts.correction_number::integer,
    airport_heliport.airportprotectionareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.valid_time_end::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.airportprotectionareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.condition_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.airportprotectionareamarking_ts.markinglocation_value as varchar), '(' || airport_heliport.airportprotectionareamarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    airport_heliport_markingelement_view_lmzvvz.element::jsonb as element,
    notes_note_view_ednrmm.annotation::jsonb as annotation
from airport_heliport.airportprotectionareamarking 
inner join master_join mj2 on airport_heliport.airportprotectionareamarking.id = mj2.source_id
inner join airport_heliport.airportprotectionareamarking_tsp on mj2.target_id = airport_heliport.airportprotectionareamarking_tsp.id
inner join airport_heliport.airportprotectionareamarking_ts on airport_heliport.airportprotectionareamarking_tsp.airportprotectionareamarkingtimeslice_id = airport_heliport.airportprotectionareamarking_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_paqxko.*) as element
  from master_join master_join_dvbqew
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_paqxko on master_join_dvbqew.target_id = airport_heliport_markingelement_lat_paqxko.id
  where master_join_dvbqew.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as airport_heliport_markingelement_view_lmzvvz on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sxinph.*) AS annotation
  from master_join master_join_zpegmy
  join notes.note_view notes_note_lat_sxinph on master_join_zpegmy.target_id = notes_note_lat_sxinph.id
  where master_join_zpegmy.source_id = airport_heliport.airportprotectionareamarking_ts.id
) as notes_note_view_ednrmm on TRUE
where airport_heliport.airportprotectionareamarking.feature_status = 'APPROVED'
  and airport_heliport.airportprotectionareamarking_ts.feature_status = 'APPROVED'
order by airportprotectionareamarking.identifier, airportprotectionareamarking_ts.sequence_number, airportprotectionareamarking_ts.correction_number DESC;
-- AirportSuppliesServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'service.oil_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'service.fuel_view', 'service.nitrogen_view', 'service.oxygen_view']
drop materialized view if exists service.airportsuppliesservice_view cascade;
create materialized view service.airportsuppliesservice_view as
select distinct on (airportsuppliesservice.identifier,airportsuppliesservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airportsuppliesservice.id::integer as id,
    service.airportsuppliesservice_ts.id::integer as ts_id,
    service.airportsuppliesservice_tsp.id::integer as tsp_id,
    service.airportsuppliesservice.identifier::uuid,
    service.airportsuppliesservice_ts.interpretation::text,
    service.airportsuppliesservice_ts.sequence_number::integer,
    service.airportsuppliesservice_ts.correction_number::integer,
    service.airportsuppliesservice_ts.valid_time_begin::timestamp,
    service.airportsuppliesservice_ts.valid_time_end::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_begin::timestamp,
    service.airportsuppliesservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airportsuppliesservice_ts.flightoperations_value as varchar), '(' || service.airportsuppliesservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airportsuppliesservice_ts.rank_value as varchar), '(' || service.airportsuppliesservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airportsuppliesservice_ts.complianticao_value as varchar), '(' || service.airportsuppliesservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airportsuppliesservice_ts.name_value as varchar), '(' || service.airportsuppliesservice_ts.name_nilreason || ')')::text as name,
    geometry_elevatedpoint_view_kwvtta.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_kwvtta.longitude AS location_longitude,
    geometry_elevatedpoint_view_kwvtta.latitude AS location_latitude,
    geometry_elevatedpoint_view_kwvtta.elevation AS location_elevation,
    geometry_elevatedpoint_view_kwvtta.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_kwvtta.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_kwvtta.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_kwvtta.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_hpznsd.title as varchar), '(' || organisation_unit_pt_hpznsd.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_hpznsd.href::text AS serviceprovider_href,
    service_callsigndetail_view_mwmrku.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_nuocnh.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_xemiau.availability::jsonb as availability,
    notes_note_view_bspvkq.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_bctqwf.airportheliport::jsonb as airportheliport,
    service_fuel_view_whbbgf.fuelsupply::jsonb as fuelsupply,
    service_oil_view_atocfw.oilsupply::jsonb as oilsupply,
    service_nitrogen_view_dvfnfu.nitrogensupply::jsonb as nitrogensupply,
    service_oxygen_view_hplchb.oxygensupply::jsonb as oxygensupply
from service.airportsuppliesservice 
inner join master_join mj2 on service.airportsuppliesservice.id = mj2.source_id
inner join service.airportsuppliesservice_tsp on mj2.target_id = service.airportsuppliesservice_tsp.id
inner join service.airportsuppliesservice_ts on service.airportsuppliesservice_tsp.airportsuppliesservicetimeslice_id = service.airportsuppliesservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_kwvtta on service.airportsuppliesservice_ts.location_id = geometry_elevatedpoint_view_kwvtta.id
left join organisation.unit_pt organisation_unit_pt_hpznsd on service.airportsuppliesservice_ts.serviceprovider_id = organisation_unit_pt_hpznsd.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_dafpge.*) as callsign
  from master_join master_join_kgedtz
  join service.callsigndetail_view service_callsigndetail_lat_dafpge on master_join_kgedtz.target_id = service_callsigndetail_lat_dafpge.id
  where master_join_kgedtz.source_id = service.airportsuppliesservice_ts.id
) as service_callsigndetail_view_mwmrku on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_sbntvm.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_sbntvm.title AS varchar), '(' || service_radiocommunicationchannel_lat_sbntvm.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_sbntvm.href
  )) as radiocommunication  from master_join master_join_zhjfaa
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_sbntvm on master_join_zhjfaa.target_id = service_radiocommunicationchannel_lat_sbntvm.id
  where master_join_zhjfaa.source_id = service.airportsuppliesservice_ts.id
) as service_radiocommunicationchannel_pt_nuocnh on TRUE
left join lateral(
  select
  from master_join master_join_ajkmal
  join shared.contactinformation_view shared_contactinformation_lat_shajcc on master_join_ajkmal.target_id = shared_contactinformation_lat_shajcc.id
  where master_join_ajkmal.source_id = service.airportsuppliesservice_ts.id
) as shared_contactinformation_view_zasieh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_jbjkpj.*) as availability
  from master_join master_join_mkrskw
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_jbjkpj on master_join_mkrskw.target_id = service_serviceoperationalstatus_lat_jbjkpj.id
  where master_join_mkrskw.source_id = service.airportsuppliesservice_ts.id
) as service_serviceoperationalstatus_view_xemiau on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nbbmgt.*) AS annotation
  from master_join master_join_xabphx
  join notes.note_view notes_note_lat_nbbmgt on master_join_xabphx.target_id = notes_note_lat_nbbmgt.id
  where master_join_xabphx.source_id = service.airportsuppliesservice_ts.id
) as notes_note_view_bspvkq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_azbksl.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_azbksl.title AS varchar), '(' || airport_heliport_airportheliport_lat_azbksl.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_azbksl.href
  )) as airportheliport  from master_join master_join_zdqlxo
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_azbksl on master_join_zdqlxo.target_id = airport_heliport_airportheliport_lat_azbksl.id
  where master_join_zdqlxo.source_id = service.airportsuppliesservice_ts.id
) as airport_heliport_airportheliport_pt_bctqwf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_fuel_lat_ngcppy.*) as fuelsupply
  from master_join master_join_btbkuh
  join service.fuel_view service_fuel_lat_ngcppy on master_join_btbkuh.target_id = service_fuel_lat_ngcppy.id
  where master_join_btbkuh.source_id = service.airportsuppliesservice_ts.id
) as service_fuel_view_whbbgf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oil_lat_jceaxk.*) as oilsupply
  from master_join master_join_mvyiiq
  join service.oil_view service_oil_lat_jceaxk on master_join_mvyiiq.target_id = service_oil_lat_jceaxk.id
  where master_join_mvyiiq.source_id = service.airportsuppliesservice_ts.id
) as service_oil_view_atocfw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_nitrogen_lat_gqislk.*) as nitrogensupply
  from master_join master_join_eutbgg
  join service.nitrogen_view service_nitrogen_lat_gqislk on master_join_eutbgg.target_id = service_nitrogen_lat_gqislk.id
  where master_join_eutbgg.source_id = service.airportsuppliesservice_ts.id
) as service_nitrogen_view_dvfnfu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_oxygen_lat_ogmsvc.*) as oxygensupply
  from master_join master_join_yivarr
  join service.oxygen_view service_oxygen_lat_ogmsvc on master_join_yivarr.target_id = service_oxygen_lat_ogmsvc.id
  where master_join_yivarr.source_id = service.airportsuppliesservice_ts.id
) as service_oxygen_view_hplchb on TRUE
where service.airportsuppliesservice.feature_status = 'APPROVED'
  and service.airportsuppliesservice_ts.feature_status = 'APPROVED'
order by airportsuppliesservice.identifier, airportsuppliesservice_ts.sequence_number, airportsuppliesservice_ts.correction_number DESC;
-- AirspaceBorderCrossingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.airspacebordercrossing_view cascade;
create materialized view routes.airspacebordercrossing_view as
select distinct on (airspacebordercrossing.identifier,airspacebordercrossing_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.airspacebordercrossing.id::integer as id,
    routes.airspacebordercrossing_ts.id::integer as ts_id,
    routes.airspacebordercrossing_tsp.id::integer as tsp_id,
    routes.airspacebordercrossing.identifier::uuid,
    routes.airspacebordercrossing_ts.interpretation::text,
    routes.airspacebordercrossing_ts.sequence_number::integer,
    routes.airspacebordercrossing_ts.correction_number::integer,
    routes.airspacebordercrossing_ts.valid_time_begin::timestamp,
    routes.airspacebordercrossing_ts.valid_time_end::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_begin::timestamp,
    routes.airspacebordercrossing_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace_airspace_pt_fetgay.title as varchar), '(' || airspace_airspace_pt_fetgay.nilreason[1] || ')')::text AS exitedairspace,
    airspace_airspace_pt_fetgay.href::text AS exitedairspace_href,
    coalesce(cast(airspace_airspace_pt_ywmpgs.title as varchar), '(' || airspace_airspace_pt_ywmpgs.nilreason[1] || ')')::text AS enteredairspace,
    airspace_airspace_pt_ywmpgs.href::text AS enteredairspace_href,
    notes_note_view_ejrgce.annotation::jsonb as annotation
from routes.airspacebordercrossing 
inner join master_join mj2 on routes.airspacebordercrossing.id = mj2.source_id
inner join routes.airspacebordercrossing_tsp on mj2.target_id = routes.airspacebordercrossing_tsp.id
inner join routes.airspacebordercrossing_ts on routes.airspacebordercrossing_tsp.airspacebordercrossingtimeslice_id = routes.airspacebordercrossing_ts.id
left join airspace.airspace_pt airspace_airspace_pt_fetgay on routes.airspacebordercrossing_ts.exitedairspace_id = airspace_airspace_pt_fetgay.id
left join airspace.airspace_pt airspace_airspace_pt_ywmpgs on routes.airspacebordercrossing_ts.enteredairspace_id = airspace_airspace_pt_ywmpgs.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_woowmi.*) AS annotation
  from master_join master_join_gnupbo
  join notes.note_view notes_note_lat_woowmi on master_join_gnupbo.target_id = notes_note_lat_woowmi.id
  where master_join_gnupbo.source_id = routes.airspacebordercrossing_ts.id
) as notes_note_view_ejrgce on TRUE
where routes.airspacebordercrossing.feature_status = 'APPROVED'
  and routes.airspacebordercrossing_ts.feature_status = 'APPROVED'
order by airspacebordercrossing.identifier, airspacebordercrossing_ts.sequence_number, airspacebordercrossing_ts.correction_number DESC;
-- AirspaceTimeSliceType
-- ['airspace.airspaceactivation_view', 'notes.note_view', 'airspace.airspacelayerclass_view', 'airspace.airspacegeometrycomponent_view']
drop materialized view if exists airspace.airspace_view cascade;
create materialized view airspace.airspace_view as
select distinct on (airspace.identifier,airspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.airspace.id::integer as id,
    airspace.airspace_ts.id::integer as ts_id,
    airspace.airspace_tsp.id::integer as tsp_id,
    airspace.airspace.identifier::uuid,
    airspace.airspace_ts.interpretation::text,
    airspace.airspace_ts.sequence_number::integer,
    airspace.airspace_ts.correction_number::integer,
    airspace.airspace_ts.valid_time_begin::timestamp,
    airspace.airspace_ts.valid_time_end::timestamp,
    airspace.airspace_ts.feature_lifetime_begin::timestamp,
    airspace.airspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.airspace_ts.type_value as varchar), '(' || airspace.airspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airspace.airspace_ts.designator_value as varchar), '(' || airspace.airspace_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airspace.airspace_ts.localtype_value as varchar), '(' || airspace.airspace_ts.localtype_nilreason || ')')::text as localtype,
    coalesce(cast(airspace.airspace_ts.name_value as varchar), '(' || airspace.airspace_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.airspace_ts.designatoricao_value as varchar), '(' || airspace.airspace_ts.designatoricao_nilreason || ')')::text as designatoricao,
    coalesce(cast(airspace.airspace_ts.controltype_value as varchar), '(' || airspace.airspace_ts.controltype_nilreason || ')')::text as controltype,
    coalesce(cast(airspace.airspace_ts.upperlowerseparation_value as varchar) || ' ' || airspace.airspace_ts.upperlowerseparation_uom, '(' || airspace.airspace_ts.upperlowerseparation_nilreason || ')')::text as upperlowerseparation,
    coalesce(cast(routes_route_pt_kcpiwr.title as varchar), '(' || routes_route_pt_kcpiwr.nilreason[1] || ')')::text AS protectedroute,
    routes_route_pt_kcpiwr.href::text AS protectedroute_href,
    airspace_airspacelayerclass_view_roeeie.clazz::jsonb as clazz,
    airspace_airspacegeometrycomponent_view_tdmkpm.geometrycomponent::jsonb as geometrycomponent,
    airspace_airspaceactivation_view_isqpqt.activation::jsonb as activation,
    notes_note_view_ufgjsz.annotation::jsonb as annotation
from airspace.airspace 
inner join master_join mj2 on airspace.airspace.id = mj2.source_id
inner join airspace.airspace_tsp on mj2.target_id = airspace.airspace_tsp.id
inner join airspace.airspace_ts on airspace.airspace_tsp.airspacetimeslice_id = airspace.airspace_ts.id
left join routes.route_pt routes_route_pt_kcpiwr on airspace.airspace_ts.protectedroute_id = routes_route_pt_kcpiwr.id
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacelayerclass_lat_iiuumx.*) as clazz
  from master_join master_join_ubvhau
  join airspace.airspacelayerclass_view airspace_airspacelayerclass_lat_iiuumx on master_join_ubvhau.target_id = airspace_airspacelayerclass_lat_iiuumx.id
  where master_join_ubvhau.source_id = airspace.airspace_ts.id
) as airspace_airspacelayerclass_view_roeeie on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspacegeometrycomponent_lat_zhwany.*) as geometrycomponent
  from master_join master_join_ntawsz
  join airspace.airspacegeometrycomponent_view airspace_airspacegeometrycomponent_lat_zhwany on master_join_ntawsz.target_id = airspace_airspacegeometrycomponent_lat_zhwany.id
  where master_join_ntawsz.source_id = airspace.airspace_ts.id
) as airspace_airspacegeometrycomponent_view_tdmkpm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airspace_airspaceactivation_lat_wovfye.*) as activation
  from master_join master_join_oenytm
  join airspace.airspaceactivation_view airspace_airspaceactivation_lat_wovfye on master_join_oenytm.target_id = airspace_airspaceactivation_lat_wovfye.id
  where master_join_oenytm.source_id = airspace.airspace_ts.id
) as airspace_airspaceactivation_view_isqpqt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dcqfgu.*) AS annotation
  from master_join master_join_cldsga
  join notes.note_view notes_note_lat_dcqfgu on master_join_cldsga.target_id = notes_note_lat_dcqfgu.id
  where master_join_cldsga.source_id = airspace.airspace_ts.id
) as notes_note_view_ufgjsz on TRUE
where airspace.airspace.feature_status = 'APPROVED'
  and airspace.airspace_ts.feature_status = 'APPROVED'
order by airspace.identifier, airspace_ts.sequence_number, airspace_ts.correction_number DESC;
-- AirTrafficControlServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficcontrolservice_view cascade;
create materialized view service.airtrafficcontrolservice_view as
select distinct on (airtrafficcontrolservice.identifier,airtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficcontrolservice.id::integer as id,
    service.airtrafficcontrolservice_ts.id::integer as ts_id,
    service.airtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.airtrafficcontrolservice.identifier::uuid,
    service.airtrafficcontrolservice_ts.interpretation::text,
    service.airtrafficcontrolservice_ts.sequence_number::integer,
    service.airtrafficcontrolservice_ts.correction_number::integer,
    service.airtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.airtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.airtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficcontrolservice_ts.rank_value as varchar), '(' || service.airtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.airtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficcontrolservice_ts.name_value as varchar), '(' || service.airtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.airtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.airtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.airtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.airtrafficcontrolservice_ts.type_value as varchar), '(' || service.airtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_nbqcxd.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_nbqcxd.longitude AS location_longitude,
    geometry_elevatedpoint_view_nbqcxd.latitude AS location_latitude,
    geometry_elevatedpoint_view_nbqcxd.elevation AS location_elevation,
    geometry_elevatedpoint_view_nbqcxd.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_nbqcxd.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_nbqcxd.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_nbqcxd.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_zjlkff.title as varchar), '(' || organisation_unit_pt_zjlkff.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_zjlkff.href::text AS serviceprovider_href,
    coalesce(cast(navaids_points_directionfinder_pt_kgtsku.title as varchar), '(' || navaids_points_directionfinder_pt_kgtsku.nilreason[1] || ')')::text AS aircraftlocator,
    navaids_points_directionfinder_pt_kgtsku.href::text AS aircraftlocator_href,
    service_callsigndetail_view_dnmihn.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_bnhach.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_aayjqd.availability::jsonb as availability,
    notes_note_view_abfzio.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_yphdzg.clientairport::jsonb as clientairport,
    airspace_airspace_pt_bnxbhj.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_slexqt.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_izowwn.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_cgqayn.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.airtrafficcontrolservice 
inner join master_join mj2 on service.airtrafficcontrolservice.id = mj2.source_id
inner join service.airtrafficcontrolservice_tsp on mj2.target_id = service.airtrafficcontrolservice_tsp.id
inner join service.airtrafficcontrolservice_ts on service.airtrafficcontrolservice_tsp.airtrafficcontrolservicetimeslice_id = service.airtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_nbqcxd on service.airtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_nbqcxd.id
left join organisation.unit_pt organisation_unit_pt_zjlkff on service.airtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_zjlkff.id
left join navaids_points.directionfinder_pt navaids_points_directionfinder_pt_kgtsku on service.airtrafficcontrolservice_ts.aircraftlocator_id = navaids_points_directionfinder_pt_kgtsku.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_befncw.*) as callsign
  from master_join master_join_kyaslm
  join service.callsigndetail_view service_callsigndetail_lat_befncw on master_join_kyaslm.target_id = service_callsigndetail_lat_befncw.id
  where master_join_kyaslm.source_id = service.airtrafficcontrolservice_ts.id
) as service_callsigndetail_view_dnmihn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_xpbzou.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_xpbzou.title AS varchar), '(' || service_radiocommunicationchannel_lat_xpbzou.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_xpbzou.href
  )) as radiocommunication  from master_join master_join_xpfrud
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_xpbzou on master_join_xpfrud.target_id = service_radiocommunicationchannel_lat_xpbzou.id
  where master_join_xpfrud.source_id = service.airtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_bnhach on TRUE
left join lateral(
  select
  from master_join master_join_rlbrch
  join shared.contactinformation_view shared_contactinformation_lat_kfmegn on master_join_rlbrch.target_id = shared_contactinformation_lat_kfmegn.id
  where master_join_rlbrch.source_id = service.airtrafficcontrolservice_ts.id
) as shared_contactinformation_view_mgipke on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_lmvlcr.*) as availability
  from master_join master_join_blfrrd
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_lmvlcr on master_join_blfrrd.target_id = service_serviceoperationalstatus_lat_lmvlcr.id
  where master_join_blfrrd.source_id = service.airtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_aayjqd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tfzuit.*) AS annotation
  from master_join master_join_lwkous
  join notes.note_view notes_note_lat_tfzuit on master_join_lwkous.target_id = notes_note_lat_tfzuit.id
  where master_join_lwkous.source_id = service.airtrafficcontrolservice_ts.id
) as notes_note_view_abfzio on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_wgrrrr.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_wgrrrr.title AS varchar), '(' || airport_heliport_airportheliport_lat_wgrrrr.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_wgrrrr.href
  )) as clientairport  from master_join master_join_ixjtug
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_wgrrrr on master_join_ixjtug.target_id = airport_heliport_airportheliport_lat_wgrrrr.id
  where master_join_ixjtug.source_id = service.airtrafficcontrolservice_ts.id
) as airport_heliport_airportheliport_pt_yphdzg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_djaqnk.id,
      'title', coalesce(cast(airspace_airspace_lat_djaqnk.title AS varchar), '(' || airspace_airspace_lat_djaqnk.nilreason[1] || ')'),
      'href', airspace_airspace_lat_djaqnk.href
  )) as clientairspace  from master_join master_join_nxyzvt
  join airspace.airspace_pt airspace_airspace_lat_djaqnk on master_join_nxyzvt.target_id = airspace_airspace_lat_djaqnk.id
  where master_join_nxyzvt.source_id = service.airtrafficcontrolservice_ts.id
) as airspace_airspace_pt_bnxbhj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_hiimvt.*) as clientroute
  from master_join master_join_kfrrxj
  join routes.routeportion_view routes_routeportion_lat_hiimvt on master_join_kfrrxj.target_id = routes_routeportion_lat_hiimvt.id
  where master_join_kfrrxj.source_id = service.airtrafficcontrolservice_ts.id
) as routes_routeportion_view_slexqt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_sygvcj.id,
      'title', coalesce(cast(holding_holdingpattern_lat_sygvcj.title AS varchar), '(' || holding_holdingpattern_lat_sygvcj.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_sygvcj.href
  )) as clientholding  from master_join master_join_ovsfsw
  join holding.holdingpattern_pt holding_holdingpattern_lat_sygvcj on master_join_ovsfsw.target_id = holding_holdingpattern_lat_sygvcj.id
  where master_join_ovsfsw.source_id = service.airtrafficcontrolservice_ts.id
) as holding_holdingpattern_pt_izowwn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_ogawsy.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_ogawsy.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_ogawsy.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_ogawsy.href
  )) as clientaerialrefuelling  from master_join master_join_iiztua
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_ogawsy on master_join_iiztua.target_id = aerial_refuelling_aerialrefuelling_lat_ogawsy.id
  where master_join_iiztua.source_id = service.airtrafficcontrolservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_cgqayn on TRUE
where service.airtrafficcontrolservice.feature_status = 'APPROVED'
  and service.airtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by airtrafficcontrolservice.identifier, airtrafficcontrolservice_ts.sequence_number, airtrafficcontrolservice_ts.correction_number DESC;
-- AirTrafficManagementServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists service.airtrafficmanagementservice_view cascade;
create materialized view service.airtrafficmanagementservice_view as
select distinct on (airtrafficmanagementservice.identifier,airtrafficmanagementservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.airtrafficmanagementservice.id::integer as id,
    service.airtrafficmanagementservice_ts.id::integer as ts_id,
    service.airtrafficmanagementservice_tsp.id::integer as tsp_id,
    service.airtrafficmanagementservice.identifier::uuid,
    service.airtrafficmanagementservice_ts.interpretation::text,
    service.airtrafficmanagementservice_ts.sequence_number::integer,
    service.airtrafficmanagementservice_ts.correction_number::integer,
    service.airtrafficmanagementservice_ts.valid_time_begin::timestamp,
    service.airtrafficmanagementservice_ts.valid_time_end::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_begin::timestamp,
    service.airtrafficmanagementservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.airtrafficmanagementservice_ts.flightoperations_value as varchar), '(' || service.airtrafficmanagementservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.airtrafficmanagementservice_ts.rank_value as varchar), '(' || service.airtrafficmanagementservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.airtrafficmanagementservice_ts.complianticao_value as varchar), '(' || service.airtrafficmanagementservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.airtrafficmanagementservice_ts.name_value as varchar), '(' || service.airtrafficmanagementservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.airtrafficmanagementservice_ts.type_value as varchar), '(' || service.airtrafficmanagementservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ijirnr.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ijirnr.longitude AS location_longitude,
    geometry_elevatedpoint_view_ijirnr.latitude AS location_latitude,
    geometry_elevatedpoint_view_ijirnr.elevation AS location_elevation,
    geometry_elevatedpoint_view_ijirnr.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ijirnr.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ijirnr.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ijirnr.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_vookcl.title as varchar), '(' || organisation_unit_pt_vookcl.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_vookcl.href::text AS serviceprovider_href,
    service_callsigndetail_view_bzahnt.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_hgnink.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_wwnfrl.availability::jsonb as availability,
    notes_note_view_fcnhep.annotation::jsonb as annotation,
    airspace_airspace_pt_fhhpxm.clientairspace::jsonb as clientairspace,
    aerial_refuelling_aerialrefuelling_pt_lumhwt.clientaerialrefuelling::jsonb as clientaerialrefuelling,
    routes_routeportion_view_rsdeaf.clientroute::jsonb as clientroute
from service.airtrafficmanagementservice 
inner join master_join mj2 on service.airtrafficmanagementservice.id = mj2.source_id
inner join service.airtrafficmanagementservice_tsp on mj2.target_id = service.airtrafficmanagementservice_tsp.id
inner join service.airtrafficmanagementservice_ts on service.airtrafficmanagementservice_tsp.airtrafficmanagementservicetimeslice_id = service.airtrafficmanagementservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ijirnr on service.airtrafficmanagementservice_ts.location_id = geometry_elevatedpoint_view_ijirnr.id
left join organisation.unit_pt organisation_unit_pt_vookcl on service.airtrafficmanagementservice_ts.serviceprovider_id = organisation_unit_pt_vookcl.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_iyzqfe.*) as callsign
  from master_join master_join_trqxbl
  join service.callsigndetail_view service_callsigndetail_lat_iyzqfe on master_join_trqxbl.target_id = service_callsigndetail_lat_iyzqfe.id
  where master_join_trqxbl.source_id = service.airtrafficmanagementservice_ts.id
) as service_callsigndetail_view_bzahnt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_vxutez.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_vxutez.title AS varchar), '(' || service_radiocommunicationchannel_lat_vxutez.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_vxutez.href
  )) as radiocommunication  from master_join master_join_wnmltr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_vxutez on master_join_wnmltr.target_id = service_radiocommunicationchannel_lat_vxutez.id
  where master_join_wnmltr.source_id = service.airtrafficmanagementservice_ts.id
) as service_radiocommunicationchannel_pt_hgnink on TRUE
left join lateral(
  select
  from master_join master_join_tuuart
  join shared.contactinformation_view shared_contactinformation_lat_ewvnck on master_join_tuuart.target_id = shared_contactinformation_lat_ewvnck.id
  where master_join_tuuart.source_id = service.airtrafficmanagementservice_ts.id
) as shared_contactinformation_view_prpcss on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_cwlziv.*) as availability
  from master_join master_join_usnbhx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_cwlziv on master_join_usnbhx.target_id = service_serviceoperationalstatus_lat_cwlziv.id
  where master_join_usnbhx.source_id = service.airtrafficmanagementservice_ts.id
) as service_serviceoperationalstatus_view_wwnfrl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rcwhvq.*) AS annotation
  from master_join master_join_dtyrvs
  join notes.note_view notes_note_lat_rcwhvq on master_join_dtyrvs.target_id = notes_note_lat_rcwhvq.id
  where master_join_dtyrvs.source_id = service.airtrafficmanagementservice_ts.id
) as notes_note_view_fcnhep on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_qxveet.id,
      'title', coalesce(cast(airspace_airspace_lat_qxveet.title AS varchar), '(' || airspace_airspace_lat_qxveet.nilreason[1] || ')'),
      'href', airspace_airspace_lat_qxveet.href
  )) as clientairspace  from master_join master_join_fgftym
  join airspace.airspace_pt airspace_airspace_lat_qxveet on master_join_fgftym.target_id = airspace_airspace_lat_qxveet.id
  where master_join_fgftym.source_id = service.airtrafficmanagementservice_ts.id
) as airspace_airspace_pt_fhhpxm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_itxhic.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_itxhic.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_itxhic.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_itxhic.href
  )) as clientaerialrefuelling  from master_join master_join_stlqbc
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_itxhic on master_join_stlqbc.target_id = aerial_refuelling_aerialrefuelling_lat_itxhic.id
  where master_join_stlqbc.source_id = service.airtrafficmanagementservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_lumhwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_duishk.*) as clientroute
  from master_join master_join_fhshsp
  join routes.routeportion_view routes_routeportion_lat_duishk on master_join_fhshsp.target_id = routes_routeportion_lat_duishk.id
  where master_join_fhshsp.source_id = service.airtrafficmanagementservice_ts.id
) as routes_routeportion_view_rsdeaf on TRUE
where service.airtrafficmanagementservice.feature_status = 'APPROVED'
  and service.airtrafficmanagementservice_ts.feature_status = 'APPROVED'
order by airtrafficmanagementservice.identifier, airtrafficmanagementservice_ts.sequence_number, airtrafficmanagementservice_ts.correction_number DESC;
-- AltimeterSourceTimeSliceType
-- ['notes.note_view', 'airport_heliport.altimetersourcestatus_view']
drop materialized view if exists airport_heliport.altimetersource_view cascade;
create materialized view airport_heliport.altimetersource_view as
select distinct on (altimetersource.identifier,altimetersource_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.altimetersource.id::integer as id,
    airport_heliport.altimetersource_ts.id::integer as ts_id,
    airport_heliport.altimetersource_tsp.id::integer as tsp_id,
    airport_heliport.altimetersource.identifier::uuid,
    airport_heliport.altimetersource_ts.interpretation::text,
    airport_heliport.altimetersource_ts.sequence_number::integer,
    airport_heliport.altimetersource_ts.correction_number::integer,
    airport_heliport.altimetersource_ts.valid_time_begin::timestamp,
    airport_heliport.altimetersource_ts.valid_time_end::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_begin::timestamp,
    airport_heliport.altimetersource_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.altimetersource_ts.isremote_value as varchar), '(' || airport_heliport.altimetersource_ts.isremote_nilreason || ')')::text as isremote,
    coalesce(cast(airport_heliport.altimetersource_ts.isprimary_value as varchar), '(' || airport_heliport.altimetersource_ts.isprimary_nilreason || ')')::text as isprimary,
    airport_heliport_altimetersourcestatus_view_hriyhm.availability::jsonb as availability,
    notes_note_view_gesure.annotation::jsonb as annotation
from airport_heliport.altimetersource 
inner join master_join mj2 on airport_heliport.altimetersource.id = mj2.source_id
inner join airport_heliport.altimetersource_tsp on mj2.target_id = airport_heliport.altimetersource_tsp.id
inner join airport_heliport.altimetersource_ts on airport_heliport.altimetersource_tsp.altimetersourcetimeslice_id = airport_heliport.altimetersource_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_altimetersourcestatus_lat_rgtdnl.*) as availability
  from master_join master_join_efjtkn
  join airport_heliport.altimetersourcestatus_view airport_heliport_altimetersourcestatus_lat_rgtdnl on master_join_efjtkn.target_id = airport_heliport_altimetersourcestatus_lat_rgtdnl.id
  where master_join_efjtkn.source_id = airport_heliport.altimetersource_ts.id
) as airport_heliport_altimetersourcestatus_view_hriyhm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mpsdid.*) AS annotation
  from master_join master_join_pvckow
  join notes.note_view notes_note_lat_mpsdid on master_join_pvckow.target_id = notes_note_lat_mpsdid.id
  where master_join_pvckow.source_id = airport_heliport.altimetersource_ts.id
) as notes_note_view_gesure on TRUE
where airport_heliport.altimetersource.feature_status = 'APPROVED'
  and airport_heliport.altimetersource_ts.feature_status = 'APPROVED'
order by altimetersource.identifier, altimetersource_ts.sequence_number, altimetersource_ts.correction_number DESC;
-- AngleIndicationTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.angleindication_view cascade;
create materialized view navaids_points.angleindication_view as
select distinct on (angleindication.identifier,angleindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.angleindication.id::integer as id,
    navaids_points.angleindication_ts.id::integer as ts_id,
    navaids_points.angleindication_tsp.id::integer as tsp_id,
    navaids_points.angleindication.identifier::uuid,
    navaids_points.angleindication_ts.interpretation::text,
    navaids_points.angleindication_ts.sequence_number::integer,
    navaids_points.angleindication_ts.correction_number::integer,
    navaids_points.angleindication_ts.valid_time_begin::timestamp,
    navaids_points.angleindication_ts.valid_time_end::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.angleindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.angleindication_ts.angle_value as varchar), '(' || navaids_points.angleindication_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.angleindication_ts.angletype_value as varchar), '(' || navaids_points.angleindication_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(navaids_points.angleindication_ts.indicationdirection_value as varchar), '(' || navaids_points.angleindication_ts.indicationdirection_nilreason || ')')::text as indicationdirection,
    coalesce(cast(navaids_points.angleindication_ts.trueangle_value as varchar), '(' || navaids_points.angleindication_ts.trueangle_nilreason || ')')::text as trueangle,
    coalesce(cast(navaids_points.angleindication_ts.cardinaldirection_value as varchar), '(' || navaids_points.angleindication_ts.cardinaldirection_nilreason || ')')::text as cardinaldirection,
    coalesce(cast(navaids_points.angleindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.angleindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.angleindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_oqykck.title as varchar), '(' || navaids_points_designatedpoint_pt_oqykck.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_oqykck.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_lktdnz.title as varchar), '(' || navaids_points_designatedpoint_pt_lktdnz.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_lktdnz.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ndhqpr.title as varchar), '(' || navaids_points_navaid_pt_ndhqpr.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_ndhqpr.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_pgjdlq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_pgjdlq.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_pgjdlq.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cqpceq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cqpceq.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cqpceq.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ltuaql.title as varchar), '(' || airport_heliport_airportheliport_pt_ltuaql.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_ltuaql.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_zofboh.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_zofboh.longitude AS pointchoiceposition_longitude,
    geometry_point_view_zofboh.latitude AS pointchoiceposition_latitude,
    geometry_point_view_zofboh.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_uabrrw.annotation::jsonb as annotation
from navaids_points.angleindication 
inner join master_join mj2 on navaids_points.angleindication.id = mj2.source_id
inner join navaids_points.angleindication_tsp on mj2.target_id = navaids_points.angleindication_tsp.id
inner join navaids_points.angleindication_ts on navaids_points.angleindication_tsp.angleindicationtimeslice_id = navaids_points.angleindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_oqykck on navaids_points.angleindication_ts.fix_id = navaids_points_designatedpoint_pt_oqykck.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_lktdnz on navaids_points.angleindication_ts.angleindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_lktdnz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ndhqpr on navaids_points.angleindication_ts.angleindication_ts_navaidsystem_id = navaids_points_navaid_pt_ndhqpr.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_pgjdlq on navaids_points.angleindication_ts.angleindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_pgjdlq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cqpceq on navaids_points.angleindication_ts.angleindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cqpceq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ltuaql on navaids_points.angleindication_ts.angleindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_ltuaql.id
left join geometry.point_view geometry_point_view_zofboh on navaids_points.angleindication_ts.angleindication_ts_position_id = geometry_point_view_zofboh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kjrktd.*) AS annotation
  from master_join master_join_xdoebw
  join notes.note_view notes_note_lat_kjrktd on master_join_xdoebw.target_id = notes_note_lat_kjrktd.id
  where master_join_xdoebw.source_id = navaids_points.angleindication_ts.id
) as notes_note_view_uabrrw on TRUE
where navaids_points.angleindication.feature_status = 'APPROVED'
  and navaids_points.angleindication_ts.feature_status = 'APPROVED'
order by angleindication.identifier, angleindication_ts.sequence_number, angleindication_ts.correction_number DESC;
-- ApproachLightingSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.approachlightingsystem_view cascade;
create materialized view airport_heliport.approachlightingsystem_view as
select distinct on (approachlightingsystem.identifier,approachlightingsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.approachlightingsystem.id::integer as id,
    airport_heliport.approachlightingsystem_ts.id::integer as ts_id,
    airport_heliport.approachlightingsystem_tsp.id::integer as tsp_id,
    airport_heliport.approachlightingsystem.identifier::uuid,
    airport_heliport.approachlightingsystem_ts.interpretation::text,
    airport_heliport.approachlightingsystem_ts.sequence_number::integer,
    airport_heliport.approachlightingsystem_ts.correction_number::integer,
    airport_heliport.approachlightingsystem_ts.valid_time_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.valid_time_end::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.approachlightingsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.colour_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.classicao_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.classicao_nilreason || ')')::text as classicao,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.type_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.sequencedflashing_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.sequencedflashing_nilreason || ')')::text as sequencedflashing,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.alignmentindicator_value as varchar), '(' || airport_heliport.approachlightingsystem_ts.alignmentindicator_nilreason || ')')::text as alignmentindicator,
    coalesce(cast(airport_heliport.approachlightingsystem_ts.length_value as varchar) || ' ' || airport_heliport.approachlightingsystem_ts.length_uom, '(' || airport_heliport.approachlightingsystem_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_tmxoag.title as varchar), '(' || airport_heliport_runwaydirection_pt_tmxoag.nilreason[1] || ')')::text AS servedrunwaydirection,
    airport_heliport_runwaydirection_pt_tmxoag.href::text AS servedrunwaydirection_href,
    shared_lightelement_view_zltvqc.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_hziklo.availability::jsonb as availability,
    notes_note_view_blirzl.annotation::jsonb as annotation
from airport_heliport.approachlightingsystem 
inner join master_join mj2 on airport_heliport.approachlightingsystem.id = mj2.source_id
inner join airport_heliport.approachlightingsystem_tsp on mj2.target_id = airport_heliport.approachlightingsystem_tsp.id
inner join airport_heliport.approachlightingsystem_ts on airport_heliport.approachlightingsystem_tsp.approachlightingsystemtimeslice_id = airport_heliport.approachlightingsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_tmxoag on airport_heliport.approachlightingsystem_ts.servedrunwaydirection_id = airport_heliport_runwaydirection_pt_tmxoag.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_zwardq.*) as element
  from master_join master_join_sqewqg
  join shared.lightelement_view shared_lightelement_lat_zwardq on master_join_sqewqg.target_id = shared_lightelement_lat_zwardq.id
  where master_join_sqewqg.source_id = airport_heliport.approachlightingsystem_ts.id
) as shared_lightelement_view_zltvqc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tjmrsf.*) as availability
  from master_join master_join_zfabar
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tjmrsf on master_join_zfabar.target_id = airport_heliport_groundlightingavailability_lat_tjmrsf.id
  where master_join_zfabar.source_id = airport_heliport.approachlightingsystem_ts.id
) as airport_heliport_groundlightingavailability_view_hziklo on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_exfbsz.*) AS annotation
  from master_join master_join_dghlcf
  join notes.note_view notes_note_lat_exfbsz on master_join_dghlcf.target_id = notes_note_lat_exfbsz.id
  where master_join_dghlcf.source_id = airport_heliport.approachlightingsystem_ts.id
) as notes_note_view_blirzl on TRUE
where airport_heliport.approachlightingsystem.feature_status = 'APPROVED'
  and airport_heliport.approachlightingsystem_ts.feature_status = 'APPROVED'
order by approachlightingsystem.identifier, approachlightingsystem_ts.sequence_number, approachlightingsystem_ts.correction_number DESC;
-- ApronElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.apronelement_view cascade;
create materialized view airport_heliport.apronelement_view as
select distinct on (apronelement.identifier,apronelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronelement.id::integer as id,
    airport_heliport.apronelement_ts.id::integer as ts_id,
    airport_heliport.apronelement_tsp.id::integer as tsp_id,
    airport_heliport.apronelement.identifier::uuid,
    airport_heliport.apronelement_ts.interpretation::text,
    airport_heliport.apronelement_ts.sequence_number::integer,
    airport_heliport.apronelement_ts.correction_number::integer,
    airport_heliport.apronelement_ts.valid_time_begin::timestamp,
    airport_heliport.apronelement_ts.valid_time_end::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronelement_ts.type_value as varchar), '(' || airport_heliport.apronelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.apronelement_ts.jetwayavailability_value as varchar), '(' || airport_heliport.apronelement_ts.jetwayavailability_nilreason || ')')::text as jetwayavailability,
    coalesce(cast(airport_heliport.apronelement_ts.towingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.towingavailability_nilreason || ')')::text as towingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.dockingavailability_value as varchar), '(' || airport_heliport.apronelement_ts.dockingavailability_nilreason || ')')::text as dockingavailability,
    coalesce(cast(airport_heliport.apronelement_ts.groundpoweravailability_value as varchar), '(' || airport_heliport.apronelement_ts.groundpoweravailability_nilreason || ')')::text as groundpoweravailability,
    coalesce(cast(airport_heliport.apronelement_ts.length_value as varchar) || ' ' || airport_heliport.apronelement_ts.length_uom, '(' || airport_heliport.apronelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.apronelement_ts.width_value as varchar) || ' ' || airport_heliport.apronelement_ts.width_uom, '(' || airport_heliport.apronelement_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport_apron_pt_ikwoba.title as varchar), '(' || airport_heliport_apron_pt_ikwoba.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_ikwoba.href::text AS associatedapron_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_vtjbwc.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_qbvhia.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_qbvhia.elevation AS extent_elevation,
    geometry_elevatedsurface_view_qbvhia.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_qbvhia.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_qbvhia.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_qbvhia.horizontalAccuracy AS extent_horizontalaccuracy,
    service_airportsuppliesservice_pt_woulbb.supplyservice::jsonb as supplyservice,
    notes_note_view_hhhktv.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_cvxekw.availability::jsonb as availability
from airport_heliport.apronelement 
inner join master_join mj2 on airport_heliport.apronelement.id = mj2.source_id
inner join airport_heliport.apronelement_tsp on mj2.target_id = airport_heliport.apronelement_tsp.id
inner join airport_heliport.apronelement_ts on airport_heliport.apronelement_tsp.apronelementtimeslice_id = airport_heliport.apronelement_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_ikwoba on airport_heliport.apronelement_ts.associatedapron_id = airport_heliport_apron_pt_ikwoba.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_vtjbwc on airport_heliport.apronelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_vtjbwc.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_qbvhia on airport_heliport.apronelement_ts.extent_id = geometry_elevatedsurface_view_qbvhia.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_airportsuppliesservice_lat_yczkja.id,
      'title', coalesce(cast(service_airportsuppliesservice_lat_yczkja.title AS varchar), '(' || service_airportsuppliesservice_lat_yczkja.nilreason[1] || ')'),
      'href', service_airportsuppliesservice_lat_yczkja.href
  )) as supplyservice  from master_join master_join_vwgyly
  join service.airportsuppliesservice_pt service_airportsuppliesservice_lat_yczkja on master_join_vwgyly.target_id = service_airportsuppliesservice_lat_yczkja.id
  where master_join_vwgyly.source_id = airport_heliport.apronelement_ts.id
) as service_airportsuppliesservice_pt_woulbb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwdabp.*) AS annotation
  from master_join master_join_ywemxa
  join notes.note_view notes_note_lat_kwdabp on master_join_ywemxa.target_id = notes_note_lat_kwdabp.id
  where master_join_ywemxa.source_id = airport_heliport.apronelement_ts.id
) as notes_note_view_hhhktv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_oujmam.*) as availability
  from master_join master_join_aatmmm
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_oujmam on master_join_aatmmm.target_id = airport_heliport_apronareaavailability_lat_oujmam.id
  where master_join_aatmmm.source_id = airport_heliport.apronelement_ts.id
) as airport_heliport_apronareaavailability_view_cvxekw on TRUE
where airport_heliport.apronelement.feature_status = 'APPROVED'
  and airport_heliport.apronelement_ts.feature_status = 'APPROVED'
order by apronelement.identifier, apronelement_ts.sequence_number, apronelement_ts.correction_number DESC;
-- ApronLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.apronlightsystem_view cascade;
create materialized view airport_heliport.apronlightsystem_view as
select distinct on (apronlightsystem.identifier,apronlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronlightsystem.id::integer as id,
    airport_heliport.apronlightsystem_ts.id::integer as ts_id,
    airport_heliport.apronlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.apronlightsystem.identifier::uuid,
    airport_heliport.apronlightsystem_ts.interpretation::text,
    airport_heliport.apronlightsystem_ts.sequence_number::integer,
    airport_heliport.apronlightsystem_ts.correction_number::integer,
    airport_heliport.apronlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.apronlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.apronlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.apronlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.apronlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.apronlightsystem_ts.colour_value as varchar), '(' || airport_heliport.apronlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.apronlightsystem_ts.position_value as varchar), '(' || airport_heliport.apronlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_apron_pt_osrrjp.title as varchar), '(' || airport_heliport_apron_pt_osrrjp.nilreason[1] || ')')::text AS lightedapron,
    airport_heliport_apron_pt_osrrjp.href::text AS lightedapron_href,
    shared_lightelement_view_gcbefb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_blxxnj.availability::jsonb as availability,
    notes_note_view_rcpiun.annotation::jsonb as annotation
from airport_heliport.apronlightsystem 
inner join master_join mj2 on airport_heliport.apronlightsystem.id = mj2.source_id
inner join airport_heliport.apronlightsystem_tsp on mj2.target_id = airport_heliport.apronlightsystem_tsp.id
inner join airport_heliport.apronlightsystem_ts on airport_heliport.apronlightsystem_tsp.apronlightsystemtimeslice_id = airport_heliport.apronlightsystem_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_osrrjp on airport_heliport.apronlightsystem_ts.lightedapron_id = airport_heliport_apron_pt_osrrjp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_lbeudf.*) as element
  from master_join master_join_kqpjmc
  join shared.lightelement_view shared_lightelement_lat_lbeudf on master_join_kqpjmc.target_id = shared_lightelement_lat_lbeudf.id
  where master_join_kqpjmc.source_id = airport_heliport.apronlightsystem_ts.id
) as shared_lightelement_view_gcbefb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_mjmbre.*) as availability
  from master_join master_join_xqcetc
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_mjmbre on master_join_xqcetc.target_id = airport_heliport_groundlightingavailability_lat_mjmbre.id
  where master_join_xqcetc.source_id = airport_heliport.apronlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_blxxnj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hdopsd.*) AS annotation
  from master_join master_join_jcvzrl
  join notes.note_view notes_note_lat_hdopsd on master_join_jcvzrl.target_id = notes_note_lat_hdopsd.id
  where master_join_jcvzrl.source_id = airport_heliport.apronlightsystem_ts.id
) as notes_note_view_rcpiun on TRUE
where airport_heliport.apronlightsystem.feature_status = 'APPROVED'
  and airport_heliport.apronlightsystem_ts.feature_status = 'APPROVED'
order by apronlightsystem.identifier, apronlightsystem_ts.sequence_number, apronlightsystem_ts.correction_number DESC;
-- ApronMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.apronmarking_view cascade;
create materialized view airport_heliport.apronmarking_view as
select distinct on (apronmarking.identifier,apronmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apronmarking.id::integer as id,
    airport_heliport.apronmarking_ts.id::integer as ts_id,
    airport_heliport.apronmarking_tsp.id::integer as tsp_id,
    airport_heliport.apronmarking.identifier::uuid,
    airport_heliport.apronmarking_ts.interpretation::text,
    airport_heliport.apronmarking_ts.sequence_number::integer,
    airport_heliport.apronmarking_ts.correction_number::integer,
    airport_heliport.apronmarking_ts.valid_time_begin::timestamp,
    airport_heliport.apronmarking_ts.valid_time_end::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apronmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apronmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.apronmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.apronmarking_ts.condition_value as varchar), '(' || airport_heliport.apronmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.apronmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.apronmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_apron_pt_nbpozg.title as varchar), '(' || airport_heliport_apron_pt_nbpozg.nilreason[1] || ')')::text AS markedapron,
    airport_heliport_apron_pt_nbpozg.href::text AS markedapron_href,
    airport_heliport_markingelement_view_lripar.element::jsonb as element,
    notes_note_view_fssxok.annotation::jsonb as annotation
from airport_heliport.apronmarking 
inner join master_join mj2 on airport_heliport.apronmarking.id = mj2.source_id
inner join airport_heliport.apronmarking_tsp on mj2.target_id = airport_heliport.apronmarking_tsp.id
inner join airport_heliport.apronmarking_ts on airport_heliport.apronmarking_tsp.apronmarkingtimeslice_id = airport_heliport.apronmarking_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_nbpozg on airport_heliport.apronmarking_ts.markedapron_id = airport_heliport_apron_pt_nbpozg.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_ylngcs.*) as element
  from master_join master_join_wzgkji
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_ylngcs on master_join_wzgkji.target_id = airport_heliport_markingelement_lat_ylngcs.id
  where master_join_wzgkji.source_id = airport_heliport.apronmarking_ts.id
) as airport_heliport_markingelement_view_lripar on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_olufhv.*) AS annotation
  from master_join master_join_aospdm
  join notes.note_view notes_note_lat_olufhv on master_join_aospdm.target_id = notes_note_lat_olufhv.id
  where master_join_aospdm.source_id = airport_heliport.apronmarking_ts.id
) as notes_note_view_fssxok on TRUE
where airport_heliport.apronmarking.feature_status = 'APPROVED'
  and airport_heliport.apronmarking_ts.feature_status = 'APPROVED'
order by apronmarking.identifier, apronmarking_ts.sequence_number, apronmarking_ts.correction_number DESC;
-- ApronTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'airport_heliport.apronareaavailability_view', 'airport_heliport.aproncontamination_view']
drop materialized view if exists airport_heliport.apron_view cascade;
create materialized view airport_heliport.apron_view as
select distinct on (apron.identifier,apron_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.apron.id::integer as id,
    airport_heliport.apron_ts.id::integer as ts_id,
    airport_heliport.apron_tsp.id::integer as tsp_id,
    airport_heliport.apron.identifier::uuid,
    airport_heliport.apron_ts.interpretation::text,
    airport_heliport.apron_ts.sequence_number::integer,
    airport_heliport.apron_ts.correction_number::integer,
    airport_heliport.apron_ts.valid_time_begin::timestamp,
    airport_heliport.apron_ts.valid_time_end::timestamp,
    airport_heliport.apron_ts.feature_lifetime_begin::timestamp,
    airport_heliport.apron_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.apron_ts.name_value as varchar), '(' || airport_heliport.apron_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airport_heliport.apron_ts.abandoned_value as varchar), '(' || airport_heliport.apron_ts.abandoned_nilreason || ')')::text as abandoned,
    to_jsonb(airport_heliport_surfacecharacteristics_view_hbjuzz.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_gduorq.title as varchar), '(' || airport_heliport_airportheliport_pt_gduorq.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_gduorq.href::text AS associatedairportheliport_href,
    airport_heliport_aproncontamination_view_picmlc.contaminant::jsonb as contaminant,
    notes_note_view_mqjcvu.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_dcbuht.availability::jsonb as availability
from airport_heliport.apron 
inner join master_join mj2 on airport_heliport.apron.id = mj2.source_id
inner join airport_heliport.apron_tsp on mj2.target_id = airport_heliport.apron_tsp.id
inner join airport_heliport.apron_ts on airport_heliport.apron_tsp.aprontimeslice_id = airport_heliport.apron_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_hbjuzz on airport_heliport.apron_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_hbjuzz.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gduorq on airport_heliport.apron_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_gduorq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_aproncontamination_lat_fbpehw.*) as contaminant
  from master_join master_join_fnghxz
  join airport_heliport.aproncontamination_view airport_heliport_aproncontamination_lat_fbpehw on master_join_fnghxz.target_id = airport_heliport_aproncontamination_lat_fbpehw.id
  where master_join_fnghxz.source_id = airport_heliport.apron_ts.id
) as airport_heliport_aproncontamination_view_picmlc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xrkhgn.*) AS annotation
  from master_join master_join_pgfpox
  join notes.note_view notes_note_lat_xrkhgn on master_join_pgfpox.target_id = notes_note_lat_xrkhgn.id
  where master_join_pgfpox.source_id = airport_heliport.apron_ts.id
) as notes_note_view_mqjcvu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_klmfjz.*) as availability
  from master_join master_join_odsllb
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_klmfjz on master_join_odsllb.target_id = airport_heliport_apronareaavailability_lat_klmfjz.id
  where master_join_odsllb.source_id = airport_heliport.apron_ts.id
) as airport_heliport_apronareaavailability_view_dcbuht on TRUE
where airport_heliport.apron.feature_status = 'APPROVED'
  and airport_heliport.apron_ts.feature_status = 'APPROVED'
order by apron.identifier, apron_ts.sequence_number, apron_ts.correction_number DESC;
-- ArrestingGearTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'geometry.elevatedsurface_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.arrestinggear_view cascade;
create materialized view airport_heliport.arrestinggear_view as
select distinct on (arrestinggear.identifier,arrestinggear_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.arrestinggear.id::integer as id,
    airport_heliport.arrestinggear_ts.id::integer as ts_id,
    airport_heliport.arrestinggear_tsp.id::integer as tsp_id,
    airport_heliport.arrestinggear.identifier::uuid,
    airport_heliport.arrestinggear_ts.interpretation::text,
    airport_heliport.arrestinggear_ts.sequence_number::integer,
    airport_heliport.arrestinggear_ts.correction_number::integer,
    airport_heliport.arrestinggear_ts.valid_time_begin::timestamp,
    airport_heliport.arrestinggear_ts.valid_time_end::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_begin::timestamp,
    airport_heliport.arrestinggear_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.arrestinggear_ts.status_value as varchar), '(' || airport_heliport.arrestinggear_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.arrestinggear_ts.engagedevice_value as varchar), '(' || airport_heliport.arrestinggear_ts.engagedevice_nilreason || ')')::text as engagedevice,
    coalesce(cast(airport_heliport.arrestinggear_ts.absorbtype_value as varchar), '(' || airport_heliport.arrestinggear_ts.absorbtype_nilreason || ')')::text as absorbtype,
    coalesce(cast(airport_heliport.arrestinggear_ts.bidirectional_value as varchar), '(' || airport_heliport.arrestinggear_ts.bidirectional_nilreason || ')')::text as bidirectional,
    coalesce(cast(airport_heliport.arrestinggear_ts.length_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.length_uom, '(' || airport_heliport.arrestinggear_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.arrestinggear_ts.width_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.width_uom, '(' || airport_heliport.arrestinggear_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.arrestinggear_ts.location_value as varchar) || ' ' || airport_heliport.arrestinggear_ts.location_uom, '(' || airport_heliport.arrestinggear_ts.location_nilreason || ')')::text as location,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lxevjd.*)::jsonb AS surfaceproperties,
    geometry_elevatedcurve_view_nfoqwe.geom::geometry(LINESTRING, 4326) AS extentcurveextent_geom,
    geometry_elevatedcurve_view_nfoqwe.elevation AS extentcurveextent_elevation,
    geometry_elevatedcurve_view_nfoqwe.geoidUndulation AS extentcurveextent_geoidundulation,
    geometry_elevatedcurve_view_nfoqwe.verticalDatum AS extentcurveextent_verticaldatum,
    geometry_elevatedcurve_view_nfoqwe.verticalAccuracy AS extentcurveextent_verticalaccuracy,
    geometry_elevatedcurve_view_nfoqwe.horizontalAccuracy AS extentcurveextent_horizontalaccuracy,
    geometry_elevatedsurface_view_jmignt.geom::geometry(POLYGON, 4326) AS extentsurfaceextent_geom,
    geometry_elevatedsurface_view_jmignt.elevation AS extentsurfaceextent_elevation,
    geometry_elevatedsurface_view_jmignt.geoidUndulation AS extentsurfaceextent_geoidundulation,
    geometry_elevatedsurface_view_jmignt.verticalDatum AS extentsurfaceextent_verticaldatum,
    geometry_elevatedsurface_view_jmignt.verticalAccuracy AS extentsurfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_jmignt.horizontalAccuracy AS extentsurfaceextent_horizontalaccuracy,
    geometry_elevatedpoint_view_enqtij.geom::geometry(Point, 4326) AS extentpointextent_geom,
    geometry_elevatedpoint_view_enqtij.longitude AS extentpointextent_longitude,
    geometry_elevatedpoint_view_enqtij.latitude AS extentpointextent_latitude,
    geometry_elevatedpoint_view_enqtij.elevation AS extentpointextent_elevation,
    geometry_elevatedpoint_view_enqtij.geoidUndulation AS extentpointextent_geoidundulation,
    geometry_elevatedpoint_view_enqtij.verticalDatum AS extentpointextent_verticaldatum,
    geometry_elevatedpoint_view_enqtij.verticalAccuracy AS extentpointextent_verticalaccuracy,
    geometry_elevatedpoint_view_enqtij.horizontalAccuracy AS extentpointextent_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_ruinkl.runwaydirection::jsonb as runwaydirection,
    notes_note_view_glnfmc.annotation::jsonb as annotation
from airport_heliport.arrestinggear 
inner join master_join mj2 on airport_heliport.arrestinggear.id = mj2.source_id
inner join airport_heliport.arrestinggear_tsp on mj2.target_id = airport_heliport.arrestinggear_tsp.id
inner join airport_heliport.arrestinggear_ts on airport_heliport.arrestinggear_tsp.arrestinggeartimeslice_id = airport_heliport.arrestinggear_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lxevjd on airport_heliport.arrestinggear_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lxevjd.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_nfoqwe on airport_heliport.arrestinggear_ts.extent_curveextent_id = geometry_elevatedcurve_view_nfoqwe.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jmignt on airport_heliport.arrestinggear_ts.extent_surfaceextent_id = geometry_elevatedsurface_view_jmignt.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_enqtij on airport_heliport.arrestinggear_ts.extent_pointextent_id = geometry_elevatedpoint_view_enqtij.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_qglqgc.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_qglqgc.title AS varchar), '(' || airport_heliport_runwaydirection_lat_qglqgc.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_qglqgc.href
  )) as runwaydirection  from master_join master_join_fpwxgo
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_qglqgc on master_join_fpwxgo.target_id = airport_heliport_runwaydirection_lat_qglqgc.id
  where master_join_fpwxgo.source_id = airport_heliport.arrestinggear_ts.id
) as airport_heliport_runwaydirection_pt_ruinkl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qdisbi.*) AS annotation
  from master_join master_join_eaamdt
  join notes.note_view notes_note_lat_qdisbi on master_join_eaamdt.target_id = notes_note_lat_qdisbi.id
  where master_join_eaamdt.source_id = airport_heliport.arrestinggear_ts.id
) as notes_note_view_glnfmc on TRUE
where airport_heliport.arrestinggear.feature_status = 'APPROVED'
  and airport_heliport.arrestinggear_ts.feature_status = 'APPROVED'
order by arrestinggear.identifier, arrestinggear_ts.sequence_number, arrestinggear_ts.correction_number DESC;
-- ArrivalFeederLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalfeederleg_view cascade;
create materialized view procedure.arrivalfeederleg_view as
select distinct on (arrivalfeederleg.identifier,arrivalfeederleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalfeederleg.id::integer as id,
    procedure.arrivalfeederleg_ts.id::integer as ts_id,
    procedure.arrivalfeederleg_tsp.id::integer as tsp_id,
    procedure.arrivalfeederleg.identifier::uuid,
    procedure.arrivalfeederleg_ts.interpretation::text,
    procedure.arrivalfeederleg_ts.sequence_number::integer,
    procedure.arrivalfeederleg_ts.correction_number::integer,
    procedure.arrivalfeederleg_ts.valid_time_begin::timestamp,
    procedure.arrivalfeederleg_ts.valid_time_end::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalfeederleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalfeederleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalfeederleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalfeederleg_ts.legpath_value as varchar), '(' || procedure.arrivalfeederleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalfeederleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalfeederleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalfeederleg_ts.course_value as varchar), '(' || procedure.arrivalfeederleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursetype_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalfeederleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.turndirection_value as varchar), '(' || procedure.arrivalfeederleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.bankangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalfeederleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalfeederleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalfeederleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalfeederleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalfeederleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalfeederleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalfeederleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalfeederleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.speedlimit_uom, '(' || procedure.arrivalfeederleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalfeederleg_ts.length_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.length_uom, '(' || procedure.arrivalfeederleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalfeederleg_ts.duration_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.duration_uom, '(' || procedure.arrivalfeederleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalfeederleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalfeederleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalfeederleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalfeederleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_esjjdk.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_snilpm.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_sijovx.*)::jsonb AS arccentre,
    geometry_curve_view_ocsnrf.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ocsnrf.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_jrbtrt.title as varchar), '(' || navaids_points_angleindication_pt_jrbtrt.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_jrbtrt.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_kftcfw.title as varchar), '(' || navaids_points_distanceindication_pt_kftcfw.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_kftcfw.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_iekrey.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_cypgmp.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_cypgmp.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_cypgmp.href::text AS approach_href,
    shared_aircraftcharacteristic_view_xxlcrm.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_flqorq.designsurface::jsonb as designsurface,
    notes_note_view_chyrpn.annotation::jsonb as annotation
from procedure.arrivalfeederleg 
inner join master_join mj2 on procedure.arrivalfeederleg.id = mj2.source_id
inner join procedure.arrivalfeederleg_tsp on mj2.target_id = procedure.arrivalfeederleg_tsp.id
inner join procedure.arrivalfeederleg_ts on procedure.arrivalfeederleg_tsp.arrivalfeederlegtimeslice_id = procedure.arrivalfeederleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_esjjdk on procedure.arrivalfeederleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_esjjdk.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_snilpm on procedure.arrivalfeederleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_snilpm.id
left join geometry.curve_view geometry_curve_view_ocsnrf on procedure.arrivalfeederleg_ts.trajectory_id = geometry_curve_view_ocsnrf.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_sijovx on procedure.arrivalfeederleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_sijovx.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_jrbtrt on procedure.arrivalfeederleg_ts.angle_id = navaids_points_angleindication_pt_jrbtrt.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_kftcfw on procedure.arrivalfeederleg_ts.distance_id = navaids_points_distanceindication_pt_kftcfw.id
left join procedure.holdinguse_view procedure_holdinguse_view_iekrey on procedure.arrivalfeederleg_ts.holding_id = procedure_holdinguse_view_iekrey.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_cypgmp on procedure.arrivalfeederleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_cypgmp.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_lmidfv.*) as aircraftcategory
  from master_join master_join_ruytlv
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_lmidfv on master_join_ruytlv.target_id = shared_aircraftcharacteristic_lat_lmidfv.id
  where master_join_ruytlv.source_id = procedure.arrivalfeederleg_ts.id
) as shared_aircraftcharacteristic_view_xxlcrm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_bslfng.*) as designsurface
  from master_join master_join_doaosc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_bslfng on master_join_doaosc.target_id = shared_obstacleassessmentarea_lat_bslfng.id
  where master_join_doaosc.source_id = procedure.arrivalfeederleg_ts.id
) as shared_obstacleassessmentarea_view_flqorq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jvpaak.*) AS annotation
  from master_join master_join_nayovr
  join notes.note_view notes_note_lat_jvpaak on master_join_nayovr.target_id = notes_note_lat_jvpaak.id
  where master_join_nayovr.source_id = procedure.arrivalfeederleg_ts.id
) as notes_note_view_chyrpn on TRUE
where procedure.arrivalfeederleg.feature_status = 'APPROVED'
  and procedure.arrivalfeederleg_ts.feature_status = 'APPROVED'
order by arrivalfeederleg.identifier, arrivalfeederleg_ts.sequence_number, arrivalfeederleg_ts.correction_number DESC;
-- ArrivalLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.arrivalleg_view cascade;
create materialized view procedure.arrivalleg_view as
select distinct on (arrivalleg.identifier,arrivalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.arrivalleg.id::integer as id,
    procedure.arrivalleg_ts.id::integer as ts_id,
    procedure.arrivalleg_tsp.id::integer as tsp_id,
    procedure.arrivalleg.identifier::uuid,
    procedure.arrivalleg_ts.interpretation::text,
    procedure.arrivalleg_ts.sequence_number::integer,
    procedure.arrivalleg_ts.correction_number::integer,
    procedure.arrivalleg_ts.valid_time_begin::timestamp,
    procedure.arrivalleg_ts.valid_time_end::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_begin::timestamp,
    procedure.arrivalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.arrivalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.arrivalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.arrivalleg_ts.legpath_value as varchar), '(' || procedure.arrivalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.arrivalleg_ts.legtypearinc_value as varchar), '(' || procedure.arrivalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.arrivalleg_ts.course_value as varchar), '(' || procedure.arrivalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.arrivalleg_ts.coursetype_value as varchar), '(' || procedure.arrivalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.arrivalleg_ts.coursedirection_value as varchar), '(' || procedure.arrivalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.arrivalleg_ts.turndirection_value as varchar), '(' || procedure.arrivalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.arrivalleg_ts.speedreference_value as varchar), '(' || procedure.arrivalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.arrivalleg_ts.speedinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.bankangle_value as varchar), '(' || procedure.arrivalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.arrivalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.arrivalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.arrivalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.arrivalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.arrivalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.arrivalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.arrivalleg_ts.verticalangle_value as varchar), '(' || procedure.arrivalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.arrivalleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.arrivalleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.arrivalleg_ts.speedlimit_value as varchar) || ' ' || procedure.arrivalleg_ts.speedlimit_uom, '(' || procedure.arrivalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.arrivalleg_ts.length_value as varchar) || ' ' || procedure.arrivalleg_ts.length_uom, '(' || procedure.arrivalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.arrivalleg_ts.duration_value as varchar) || ' ' || procedure.arrivalleg_ts.duration_uom, '(' || procedure.arrivalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.arrivalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.upperlimitaltitude_uom, '(' || procedure.arrivalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.arrivalleg_ts.lowerlimitaltitude_uom, '(' || procedure.arrivalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.arrivalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.arrivalleg_ts.altitudeoverrideatc_uom, '(' || procedure.arrivalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_mbxpqs.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jxwhlx.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_hyiqzu.*)::jsonb AS arccentre,
    geometry_curve_view_ykgpsg.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_ykgpsg.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ngplhc.title as varchar), '(' || navaids_points_angleindication_pt_ngplhc.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ngplhc.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_zznytv.title as varchar), '(' || navaids_points_distanceindication_pt_zznytv.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_zznytv.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_iosaiu.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentarrival_pt_snhtrz.title as varchar), '(' || procedure_standardinstrumentarrival_pt_snhtrz.nilreason[1] || ')')::text AS arrival,
    procedure_standardinstrumentarrival_pt_snhtrz.href::text AS arrival_href,
    shared_aircraftcharacteristic_view_lcukny.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_rridlj.designsurface::jsonb as designsurface,
    notes_note_view_wrlism.annotation::jsonb as annotation
from procedure.arrivalleg 
inner join master_join mj2 on procedure.arrivalleg.id = mj2.source_id
inner join procedure.arrivalleg_tsp on mj2.target_id = procedure.arrivalleg_tsp.id
inner join procedure.arrivalleg_ts on procedure.arrivalleg_tsp.arrivallegtimeslice_id = procedure.arrivalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_mbxpqs on procedure.arrivalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_mbxpqs.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jxwhlx on procedure.arrivalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_jxwhlx.id
left join geometry.curve_view geometry_curve_view_ykgpsg on procedure.arrivalleg_ts.trajectory_id = geometry_curve_view_ykgpsg.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_hyiqzu on procedure.arrivalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_hyiqzu.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ngplhc on procedure.arrivalleg_ts.angle_id = navaids_points_angleindication_pt_ngplhc.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_zznytv on procedure.arrivalleg_ts.distance_id = navaids_points_distanceindication_pt_zznytv.id
left join procedure.holdinguse_view procedure_holdinguse_view_iosaiu on procedure.arrivalleg_ts.holding_id = procedure_holdinguse_view_iosaiu.id
left join procedure.standardinstrumentarrival_pt procedure_standardinstrumentarrival_pt_snhtrz on procedure.arrivalleg_ts.arrival_id = procedure_standardinstrumentarrival_pt_snhtrz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_tscqzx.*) as aircraftcategory
  from master_join master_join_xeqtgh
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_tscqzx on master_join_xeqtgh.target_id = shared_aircraftcharacteristic_lat_tscqzx.id
  where master_join_xeqtgh.source_id = procedure.arrivalleg_ts.id
) as shared_aircraftcharacteristic_view_lcukny on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_swbxum.*) as designsurface
  from master_join master_join_huzwtx
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_swbxum on master_join_huzwtx.target_id = shared_obstacleassessmentarea_lat_swbxum.id
  where master_join_huzwtx.source_id = procedure.arrivalleg_ts.id
) as shared_obstacleassessmentarea_view_rridlj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hrgxca.*) AS annotation
  from master_join master_join_mryaxm
  join notes.note_view notes_note_lat_hrgxca on master_join_mryaxm.target_id = notes_note_lat_hrgxca.id
  where master_join_mryaxm.source_id = procedure.arrivalleg_ts.id
) as notes_note_view_wrlism on TRUE
where procedure.arrivalleg.feature_status = 'APPROVED'
  and procedure.arrivalleg_ts.feature_status = 'APPROVED'
order by arrivalleg.identifier, arrivalleg_ts.sequence_number, arrivalleg_ts.correction_number DESC;
-- AuthorityForAirspaceTimeSliceType
-- ['notes.note_view']
drop materialized view if exists airspace.authorityforairspace_view cascade;
create materialized view airspace.authorityforairspace_view as
select distinct on (authorityforairspace.identifier,authorityforairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.authorityforairspace.id::integer as id,
    airspace.authorityforairspace_ts.id::integer as ts_id,
    airspace.authorityforairspace_tsp.id::integer as tsp_id,
    airspace.authorityforairspace.identifier::uuid,
    airspace.authorityforairspace_ts.interpretation::text,
    airspace.authorityforairspace_ts.sequence_number::integer,
    airspace.authorityforairspace_ts.correction_number::integer,
    airspace.authorityforairspace_ts.valid_time_begin::timestamp,
    airspace.authorityforairspace_ts.valid_time_end::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_begin::timestamp,
    airspace.authorityforairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.authorityforairspace_ts.type_value as varchar), '(' || airspace.authorityforairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation_organisationauthority_pt_gztkqo.title as varchar), '(' || organisation_organisationauthority_pt_gztkqo.nilreason[1] || ')')::text AS responsibleorganisation,
    organisation_organisationauthority_pt_gztkqo.href::text AS responsibleorganisation_href,
    coalesce(cast(airspace_airspace_pt_ezybph.title as varchar), '(' || airspace_airspace_pt_ezybph.nilreason[1] || ')')::text AS assignedairspace,
    airspace_airspace_pt_ezybph.href::text AS assignedairspace_href,
    notes_note_view_vrfwqt.annotation::jsonb as annotation
from airspace.authorityforairspace 
inner join master_join mj2 on airspace.authorityforairspace.id = mj2.source_id
inner join airspace.authorityforairspace_tsp on mj2.target_id = airspace.authorityforairspace_tsp.id
inner join airspace.authorityforairspace_ts on airspace.authorityforairspace_tsp.authorityforairspacetimeslice_id = airspace.authorityforairspace_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_gztkqo on airspace.authorityforairspace_ts.responsibleorganisation_id = organisation_organisationauthority_pt_gztkqo.id
left join airspace.airspace_pt airspace_airspace_pt_ezybph on airspace.authorityforairspace_ts.assignedairspace_id = airspace_airspace_pt_ezybph.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lxeaso.*) AS annotation
  from master_join master_join_wlstgf
  join notes.note_view notes_note_lat_lxeaso on master_join_wlstgf.target_id = notes_note_lat_lxeaso.id
  where master_join_wlstgf.source_id = airspace.authorityforairspace_ts.id
) as notes_note_view_vrfwqt on TRUE
where airspace.authorityforairspace.feature_status = 'APPROVED'
  and airspace.authorityforairspace_ts.feature_status = 'APPROVED'
order by authorityforairspace.identifier, authorityforairspace_ts.sequence_number, authorityforairspace_ts.correction_number DESC;
-- AzimuthTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.azimuth_view cascade;
create materialized view navaids_points.azimuth_view as
select distinct on (azimuth.identifier,azimuth_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.azimuth.id::integer as id,
    navaids_points.azimuth_ts.id::integer as ts_id,
    navaids_points.azimuth_tsp.id::integer as tsp_id,
    navaids_points.azimuth.identifier::uuid,
    navaids_points.azimuth_ts.interpretation::text,
    navaids_points.azimuth_ts.sequence_number::integer,
    navaids_points.azimuth_ts.correction_number::integer,
    navaids_points.azimuth_ts.valid_time_begin::timestamp,
    navaids_points.azimuth_ts.valid_time_end::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_begin::timestamp,
    navaids_points.azimuth_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.azimuth_ts.designator_value as varchar), '(' || navaids_points.azimuth_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.azimuth_ts.name_value as varchar), '(' || navaids_points.azimuth_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.azimuth_ts.emissionclass_value as varchar), '(' || navaids_points.azimuth_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.azimuth_ts.mobile_value as varchar), '(' || navaids_points.azimuth_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.datemagneticvariation_value as varchar), '(' || navaids_points.azimuth_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.azimuth_ts.flightchecked_value as varchar), '(' || navaids_points.azimuth_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.azimuth_ts.type_value as varchar), '(' || navaids_points.azimuth_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.azimuth_ts.truebearing_value as varchar), '(' || navaids_points.azimuth_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.azimuth_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.azimuth_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.azimuth_ts.magneticbearing_value as varchar), '(' || navaids_points.azimuth_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalleft_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalleft_nilreason || ')')::text as angleproportionalleft,
    coalesce(cast(navaids_points.azimuth_ts.angleproportionalright_value as varchar), '(' || navaids_points.azimuth_ts.angleproportionalright_nilreason || ')')::text as angleproportionalright,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverleft_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverleft_nilreason || ')')::text as anglecoverleft,
    coalesce(cast(navaids_points.azimuth_ts.anglecoverright_value as varchar), '(' || navaids_points.azimuth_ts.anglecoverright_nilreason || ')')::text as anglecoverright,
    coalesce(cast(navaids_points.azimuth_ts.channel_value as varchar), '(' || navaids_points.azimuth_ts.channel_nilreason || ')')::text as channel,
    geometry_elevatedpoint_view_wxaqme.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_wxaqme.longitude AS location_longitude,
    geometry_elevatedpoint_view_wxaqme.latitude AS location_latitude,
    geometry_elevatedpoint_view_wxaqme.elevation AS location_elevation,
    geometry_elevatedpoint_view_wxaqme.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_wxaqme.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_wxaqme.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_wxaqme.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_tklgrw.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_dczcwf.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_ezrrro.availability::jsonb as availability,
    notes_note_view_gqnatr.annotation::jsonb as annotation
from navaids_points.azimuth 
inner join master_join mj2 on navaids_points.azimuth.id = mj2.source_id
inner join navaids_points.azimuth_tsp on mj2.target_id = navaids_points.azimuth_tsp.id
inner join navaids_points.azimuth_ts on navaids_points.azimuth_tsp.azimuthtimeslice_id = navaids_points.azimuth_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_wxaqme on navaids_points.azimuth_ts.location_id = geometry_elevatedpoint_view_wxaqme.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_zdlwqq.*) as authority
  from master_join master_join_ddsuyb
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_zdlwqq on master_join_ddsuyb.target_id = navaids_points_authorityfornavaidequipment_lat_zdlwqq.id
  where master_join_ddsuyb.source_id = navaids_points.azimuth_ts.id
) as navaids_points_authorityfornavaidequipment_view_tklgrw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_isumne.*) as monitoring
  from master_join master_join_ksrkpl
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_isumne on master_join_ksrkpl.target_id = navaids_points_navaidequipmentmonitoring_lat_isumne.id
  where master_join_ksrkpl.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidequipmentmonitoring_view_dczcwf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_ucquto.*) as availability
  from master_join master_join_uvjady
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_ucquto on master_join_uvjady.target_id = navaids_points_navaidoperationalstatus_lat_ucquto.id
  where master_join_uvjady.source_id = navaids_points.azimuth_ts.id
) as navaids_points_navaidoperationalstatus_view_ezrrro on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qiunls.*) AS annotation
  from master_join master_join_vrsbhv
  join notes.note_view notes_note_lat_qiunls on master_join_vrsbhv.target_id = notes_note_lat_qiunls.id
  where master_join_vrsbhv.source_id = navaids_points.azimuth_ts.id
) as notes_note_view_gqnatr on TRUE
where navaids_points.azimuth.feature_status = 'APPROVED'
  and navaids_points.azimuth_ts.feature_status = 'APPROVED'
order by azimuth.identifier, azimuth_ts.sequence_number, azimuth_ts.correction_number DESC;
-- ChangeOverPointTimeSliceType
-- ['notes.note_view', 'geometry.point_view', 'routes.routeportion_view']
drop materialized view if exists routes.changeoverpoint_view cascade;
create materialized view routes.changeoverpoint_view as
select distinct on (changeoverpoint.identifier,changeoverpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.changeoverpoint.id::integer as id,
    routes.changeoverpoint_ts.id::integer as ts_id,
    routes.changeoverpoint_tsp.id::integer as tsp_id,
    routes.changeoverpoint.identifier::uuid,
    routes.changeoverpoint_ts.interpretation::text,
    routes.changeoverpoint_ts.sequence_number::integer,
    routes.changeoverpoint_ts.correction_number::integer,
    routes.changeoverpoint_ts.valid_time_begin::timestamp,
    routes.changeoverpoint_ts.valid_time_end::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_begin::timestamp,
    routes.changeoverpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.changeoverpoint_ts.distance_value as varchar) || ' ' || routes.changeoverpoint_ts.distance_uom, '(' || routes.changeoverpoint_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points_designatedpoint_pt_zwbfgz.title as varchar), '(' || navaids_points_designatedpoint_pt_zwbfgz.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_zwbfgz.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_amdlma.title as varchar), '(' || navaids_points_navaid_pt_amdlma.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_amdlma.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_yxfmkg.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_yxfmkg.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_yxfmkg.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_cnxpql.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_cnxpql.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_cnxpql.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_rxnobg.title as varchar), '(' || airport_heliport_airportheliport_pt_rxnobg.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_rxnobg.href::text AS locationairportreferencepoint_href,
    geometry_point_view_cwnazj.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_cwnazj.longitude AS locationposition_longitude,
    geometry_point_view_cwnazj.latitude AS locationposition_latitude,
    geometry_point_view_cwnazj.horizontalAccuracy AS locationposition_horizontalaccuracy,
    to_jsonb(routes_routeportion_view_fsvzzc.*)::jsonb AS applicablerouteportion,
    notes_note_view_qknfjz.annotation::jsonb as annotation
from routes.changeoverpoint 
inner join master_join mj2 on routes.changeoverpoint.id = mj2.source_id
inner join routes.changeoverpoint_tsp on mj2.target_id = routes.changeoverpoint_tsp.id
inner join routes.changeoverpoint_ts on routes.changeoverpoint_tsp.changeoverpointtimeslice_id = routes.changeoverpoint_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_zwbfgz on routes.changeoverpoint_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_zwbfgz.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_amdlma on routes.changeoverpoint_ts.location_navaidsystem_id = navaids_points_navaid_pt_amdlma.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_yxfmkg on routes.changeoverpoint_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_yxfmkg.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_cnxpql on routes.changeoverpoint_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_cnxpql.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_rxnobg on routes.changeoverpoint_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_rxnobg.id
left join geometry.point_view geometry_point_view_cwnazj on routes.changeoverpoint_ts.location_position_id = geometry_point_view_cwnazj.id
left join routes.routeportion_view routes_routeportion_view_fsvzzc on routes.changeoverpoint_ts.applicablerouteportion_id = routes_routeportion_view_fsvzzc.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fddwzi.*) AS annotation
  from master_join master_join_aeuzfh
  join notes.note_view notes_note_lat_fddwzi on master_join_aeuzfh.target_id = notes_note_lat_fddwzi.id
  where master_join_aeuzfh.source_id = routes.changeoverpoint_ts.id
) as notes_note_view_qknfjz on TRUE
where routes.changeoverpoint.feature_status = 'APPROVED'
  and routes.changeoverpoint_ts.feature_status = 'APPROVED'
order by changeoverpoint.identifier, changeoverpoint_ts.sequence_number, changeoverpoint_ts.correction_number DESC;
-- CheckpointINSTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointins_view cascade;
create materialized view navaids_points.checkpointins_view as
select distinct on (checkpointins.identifier,checkpointins_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointins.id::integer as id,
    navaids_points.checkpointins_ts.id::integer as ts_id,
    navaids_points.checkpointins_tsp.id::integer as tsp_id,
    navaids_points.checkpointins.identifier::uuid,
    navaids_points.checkpointins_ts.interpretation::text,
    navaids_points.checkpointins_ts.sequence_number::integer,
    navaids_points.checkpointins_ts.correction_number::integer,
    navaids_points.checkpointins_ts.valid_time_begin::timestamp,
    navaids_points.checkpointins_ts.valid_time_end::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointins_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointins_ts.category_value as varchar), '(' || navaids_points.checkpointins_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointins_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointins_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointins_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointins_ts.angle_value as varchar), '(' || navaids_points.checkpointins_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointins_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.upperlimit_uom, '(' || navaids_points.checkpointins_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointins_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointins_ts.lowerlimit_uom, '(' || navaids_points.checkpointins_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointins_ts.distance_value as varchar) || ' ' || navaids_points.checkpointins_ts.distance_uom, '(' || navaids_points.checkpointins_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_ugjutb.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_ugjutb.longitude AS position_longitude,
    geometry_elevatedpoint_view_ugjutb.latitude AS position_latitude,
    geometry_elevatedpoint_view_ugjutb.elevation AS position_elevation,
    geometry_elevatedpoint_view_ugjutb.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_ugjutb.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_ugjutb.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_ugjutb.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_mdmxjg.title as varchar), '(' || airport_heliport_airportheliport_pt_mdmxjg.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_mdmxjg.href::text AS airportheliport_href,
    notes_note_view_oaqpcd.annotation::jsonb as annotation
from navaids_points.checkpointins 
inner join master_join mj2 on navaids_points.checkpointins.id = mj2.source_id
inner join navaids_points.checkpointins_tsp on mj2.target_id = navaids_points.checkpointins_tsp.id
inner join navaids_points.checkpointins_ts on navaids_points.checkpointins_tsp.checkpointinstimeslice_id = navaids_points.checkpointins_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ugjutb on navaids_points.checkpointins_ts.position_id = geometry_elevatedpoint_view_ugjutb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mdmxjg on navaids_points.checkpointins_ts.airportheliport_id = airport_heliport_airportheliport_pt_mdmxjg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vbpbxy.*) AS annotation
  from master_join master_join_zboici
  join notes.note_view notes_note_lat_vbpbxy on master_join_zboici.target_id = notes_note_lat_vbpbxy.id
  where master_join_zboici.source_id = navaids_points.checkpointins_ts.id
) as notes_note_view_oaqpcd on TRUE
where navaids_points.checkpointins.feature_status = 'APPROVED'
  and navaids_points.checkpointins_ts.feature_status = 'APPROVED'
order by checkpointins.identifier, checkpointins_ts.sequence_number, checkpointins_ts.correction_number DESC;
-- CheckpointVORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists navaids_points.checkpointvor_view cascade;
create materialized view navaids_points.checkpointvor_view as
select distinct on (checkpointvor.identifier,checkpointvor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.checkpointvor.id::integer as id,
    navaids_points.checkpointvor_ts.id::integer as ts_id,
    navaids_points.checkpointvor_tsp.id::integer as tsp_id,
    navaids_points.checkpointvor.identifier::uuid,
    navaids_points.checkpointvor_ts.interpretation::text,
    navaids_points.checkpointvor_ts.sequence_number::integer,
    navaids_points.checkpointvor_ts.correction_number::integer,
    navaids_points.checkpointvor_ts.valid_time_begin::timestamp,
    navaids_points.checkpointvor_ts.valid_time_end::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_begin::timestamp,
    navaids_points.checkpointvor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.checkpointvor_ts.category_value as varchar), '(' || navaids_points.checkpointvor_ts.category_nilreason || ')')::text as category,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimitreference_value as varchar), '(' || navaids_points.checkpointvor_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(navaids_points.checkpointvor_ts.altitudeinterpretation_value as varchar), '(' || navaids_points.checkpointvor_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(navaids_points.checkpointvor_ts.angle_value as varchar), '(' || navaids_points.checkpointvor_ts.angle_nilreason || ')')::text as angle,
    coalesce(cast(navaids_points.checkpointvor_ts.upperlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.upperlimit_uom, '(' || navaids_points.checkpointvor_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.lowerlimit_value as varchar) || ' ' || navaids_points.checkpointvor_ts.lowerlimit_uom, '(' || navaids_points.checkpointvor_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(navaids_points.checkpointvor_ts.distance_value as varchar) || ' ' || navaids_points.checkpointvor_ts.distance_uom, '(' || navaids_points.checkpointvor_ts.distance_nilreason || ')')::text as distance,
    geometry_elevatedpoint_view_crfkdv.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_crfkdv.longitude AS position_longitude,
    geometry_elevatedpoint_view_crfkdv.latitude AS position_latitude,
    geometry_elevatedpoint_view_crfkdv.elevation AS position_elevation,
    geometry_elevatedpoint_view_crfkdv.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_crfkdv.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_crfkdv.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_crfkdv.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_jeetfp.title as varchar), '(' || airport_heliport_airportheliport_pt_jeetfp.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_jeetfp.href::text AS airportheliport_href,
    coalesce(cast(navaids_points_vor_pt_dcaqaf.title as varchar), '(' || navaids_points_vor_pt_dcaqaf.nilreason[1] || ')')::text AS checkpointfacility,
    navaids_points_vor_pt_dcaqaf.href::text AS checkpointfacility_href,
    notes_note_view_iqkmrm.annotation::jsonb as annotation
from navaids_points.checkpointvor 
inner join master_join mj2 on navaids_points.checkpointvor.id = mj2.source_id
inner join navaids_points.checkpointvor_tsp on mj2.target_id = navaids_points.checkpointvor_tsp.id
inner join navaids_points.checkpointvor_ts on navaids_points.checkpointvor_tsp.checkpointvortimeslice_id = navaids_points.checkpointvor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_crfkdv on navaids_points.checkpointvor_ts.position_id = geometry_elevatedpoint_view_crfkdv.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jeetfp on navaids_points.checkpointvor_ts.airportheliport_id = airport_heliport_airportheliport_pt_jeetfp.id
left join navaids_points.vor_pt navaids_points_vor_pt_dcaqaf on navaids_points.checkpointvor_ts.checkpointfacility_id = navaids_points_vor_pt_dcaqaf.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jjigri.*) AS annotation
  from master_join master_join_sxccmt
  join notes.note_view notes_note_lat_jjigri on master_join_sxccmt.target_id = notes_note_lat_jjigri.id
  where master_join_sxccmt.source_id = navaids_points.checkpointvor_ts.id
) as notes_note_view_iqkmrm on TRUE
where navaids_points.checkpointvor.feature_status = 'APPROVED'
  and navaids_points.checkpointvor_ts.feature_status = 'APPROVED'
order by checkpointvor.identifier, checkpointvor_ts.sequence_number, checkpointvor_ts.correction_number DESC;
-- CirclingAreaTimeSliceType
-- ['procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'notes.note_view', 'geometry.surface_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists public.circlingarea_view cascade;
create materialized view public.circlingarea_view as
select distinct on (circlingarea.identifier,circlingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    public.circlingarea.id::integer as id,
    public.circlingarea_ts.id::integer as ts_id,
    public.circlingarea_tsp.id::integer as tsp_id,
    public.circlingarea.identifier::uuid,
    public.circlingarea_ts.interpretation::text,
    public.circlingarea_ts.sequence_number::integer,
    public.circlingarea_ts.correction_number::integer,
    public.circlingarea_ts.valid_time_begin::timestamp,
    public.circlingarea_ts.valid_time_end::timestamp,
    public.circlingarea_ts.feature_lifetime_begin::timestamp,
    public.circlingarea_ts.feature_lifetime_end::timestamp,
    geometry_surface_view_vdnwmr.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_surface_view_vdnwmr.horizontalAccuracy as extent_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_lvmjdo.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_lvmjdo.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_lvmjdo.href::text AS approach_href,
    to_jsonb(shared_aircraftcharacteristic_view_spfzkn.*)::jsonb AS aircraftcategory,
    procedure_approachcondition_view_fedjva.condition::jsonb as condition,
    shared_obstacleassessmentarea_view_vhlhyg.designsurface::jsonb as designsurface,
    notes_note_view_dsequn.annotation::jsonb as annotation
from public.circlingarea 
inner join master_join mj2 on public.circlingarea.id = mj2.source_id
inner join public.circlingarea_tsp on mj2.target_id = public.circlingarea_tsp.id
inner join public.circlingarea_ts on public.circlingarea_tsp.circlingareatimeslice_id = public.circlingarea_ts.id
left join geometry.surface_view geometry_surface_view_vdnwmr on public.circlingarea_ts.extent_id = geometry_surface_view_vdnwmr.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_lvmjdo on public.circlingarea_ts.approach_id = procedure_instrumentapproachprocedure_pt_lvmjdo.id
left join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_view_spfzkn on public.circlingarea_ts.aircraftcategory_id = shared_aircraftcharacteristic_view_spfzkn.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_czkxyv.*) as condition
  from master_join master_join_pfaxcf
  join procedure.approachcondition_view procedure_approachcondition_lat_czkxyv on master_join_pfaxcf.target_id = procedure_approachcondition_lat_czkxyv.id
  where master_join_pfaxcf.source_id = public.circlingarea_ts.id
) as procedure_approachcondition_view_fedjva on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_pxrrtw.*) as designsurface
  from master_join master_join_vqdblc
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_pxrrtw on master_join_vqdblc.target_id = shared_obstacleassessmentarea_lat_pxrrtw.id
  where master_join_vqdblc.source_id = public.circlingarea_ts.id
) as shared_obstacleassessmentarea_view_vhlhyg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zjhrxk.*) AS annotation
  from master_join master_join_bitszq
  join notes.note_view notes_note_lat_zjhrxk on master_join_bitszq.target_id = notes_note_lat_zjhrxk.id
  where master_join_bitszq.source_id = public.circlingarea_ts.id
) as notes_note_view_dsequn on TRUE
where public.circlingarea.feature_status = 'APPROVED'
  and public.circlingarea_ts.feature_status = 'APPROVED'
order by circlingarea.identifier, circlingarea_ts.sequence_number, circlingarea_ts.correction_number DESC;
-- DeicingAreaMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.deicingareamarking_view cascade;
create materialized view airport_heliport.deicingareamarking_view as
select distinct on (deicingareamarking.identifier,deicingareamarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingareamarking.id::integer as id,
    airport_heliport.deicingareamarking_ts.id::integer as ts_id,
    airport_heliport.deicingareamarking_tsp.id::integer as tsp_id,
    airport_heliport.deicingareamarking.identifier::uuid,
    airport_heliport.deicingareamarking_ts.interpretation::text,
    airport_heliport.deicingareamarking_ts.sequence_number::integer,
    airport_heliport.deicingareamarking_ts.correction_number::integer,
    airport_heliport.deicingareamarking_ts.valid_time_begin::timestamp,
    airport_heliport.deicingareamarking_ts.valid_time_end::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingareamarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.deicingareamarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.deicingareamarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.deicingareamarking_ts.condition_value as varchar), '(' || airport_heliport.deicingareamarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_deicingarea_pt_gowalo.title as varchar), '(' || airport_heliport_deicingarea_pt_gowalo.nilreason[1] || ')')::text AS markeddeicingarea,
    airport_heliport_deicingarea_pt_gowalo.href::text AS markeddeicingarea_href,
    airport_heliport_markingelement_view_frhjzq.element::jsonb as element,
    notes_note_view_mjmlhc.annotation::jsonb as annotation
from airport_heliport.deicingareamarking 
inner join master_join mj2 on airport_heliport.deicingareamarking.id = mj2.source_id
inner join airport_heliport.deicingareamarking_tsp on mj2.target_id = airport_heliport.deicingareamarking_tsp.id
inner join airport_heliport.deicingareamarking_ts on airport_heliport.deicingareamarking_tsp.deicingareamarkingtimeslice_id = airport_heliport.deicingareamarking_ts.id
left join airport_heliport.deicingarea_pt airport_heliport_deicingarea_pt_gowalo on airport_heliport.deicingareamarking_ts.markeddeicingarea_id = airport_heliport_deicingarea_pt_gowalo.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_pcfzkv.*) as element
  from master_join master_join_snbkoe
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_pcfzkv on master_join_snbkoe.target_id = airport_heliport_markingelement_lat_pcfzkv.id
  where master_join_snbkoe.source_id = airport_heliport.deicingareamarking_ts.id
) as airport_heliport_markingelement_view_frhjzq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ltualg.*) AS annotation
  from master_join master_join_kgmlom
  join notes.note_view notes_note_lat_ltualg on master_join_kgmlom.target_id = notes_note_lat_ltualg.id
  where master_join_kgmlom.source_id = airport_heliport.deicingareamarking_ts.id
) as notes_note_view_mjmlhc on TRUE
where airport_heliport.deicingareamarking.feature_status = 'APPROVED'
  and airport_heliport.deicingareamarking_ts.feature_status = 'APPROVED'
order by deicingareamarking.identifier, deicingareamarking_ts.sequence_number, deicingareamarking_ts.correction_number DESC;
-- DeicingAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.apronareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.deicingarea_view cascade;
create materialized view airport_heliport.deicingarea_view as
select distinct on (deicingarea.identifier,deicingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.deicingarea.id::integer as id,
    airport_heliport.deicingarea_ts.id::integer as ts_id,
    airport_heliport.deicingarea_tsp.id::integer as tsp_id,
    airport_heliport.deicingarea.identifier::uuid,
    airport_heliport.deicingarea_ts.interpretation::text,
    airport_heliport.deicingarea_ts.sequence_number::integer,
    airport_heliport.deicingarea_ts.correction_number::integer,
    airport_heliport.deicingarea_ts.valid_time_begin::timestamp,
    airport_heliport.deicingarea_ts.valid_time_end::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.deicingarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_apron_pt_behxfe.title as varchar), '(' || airport_heliport_apron_pt_behxfe.nilreason[1] || ')')::text AS associatedapron,
    airport_heliport_apron_pt_behxfe.href::text AS associatedapron_href,
    coalesce(cast(airport_heliport_taxiway_pt_lfzgpw.title as varchar), '(' || airport_heliport_taxiway_pt_lfzgpw.nilreason[1] || ')')::text AS taxiwaylocation,
    airport_heliport_taxiway_pt_lfzgpw.href::text AS taxiwaylocation_href,
    coalesce(cast(airport_heliport_aircraftstand_pt_fummqw.title as varchar), '(' || airport_heliport_aircraftstand_pt_fummqw.nilreason[1] || ')')::text AS standlocation,
    airport_heliport_aircraftstand_pt_fummqw.href::text AS standlocation_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_mrweic.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_mfiltn.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mfiltn.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mfiltn.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mfiltn.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mfiltn.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mfiltn.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_xjxpvi.annotation::jsonb as annotation,
    airport_heliport_apronareaavailability_view_zffmkh.availability::jsonb as availability
from airport_heliport.deicingarea 
inner join master_join mj2 on airport_heliport.deicingarea.id = mj2.source_id
inner join airport_heliport.deicingarea_tsp on mj2.target_id = airport_heliport.deicingarea_tsp.id
inner join airport_heliport.deicingarea_ts on airport_heliport.deicingarea_tsp.deicingareatimeslice_id = airport_heliport.deicingarea_ts.id
left join airport_heliport.apron_pt airport_heliport_apron_pt_behxfe on airport_heliport.deicingarea_ts.associatedapron_id = airport_heliport_apron_pt_behxfe.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_lfzgpw on airport_heliport.deicingarea_ts.taxiwaylocation_id = airport_heliport_taxiway_pt_lfzgpw.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_fummqw on airport_heliport.deicingarea_ts.standlocation_id = airport_heliport_aircraftstand_pt_fummqw.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_mrweic on airport_heliport.deicingarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_mrweic.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mfiltn on airport_heliport.deicingarea_ts.extent_id = geometry_elevatedsurface_view_mfiltn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qpesmn.*) AS annotation
  from master_join master_join_rylsdi
  join notes.note_view notes_note_lat_qpesmn on master_join_rylsdi.target_id = notes_note_lat_qpesmn.id
  where master_join_rylsdi.source_id = airport_heliport.deicingarea_ts.id
) as notes_note_view_xjxpvi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_apronareaavailability_lat_vxesus.*) as availability
  from master_join master_join_vuldmq
  join airport_heliport.apronareaavailability_view airport_heliport_apronareaavailability_lat_vxesus on master_join_vuldmq.target_id = airport_heliport_apronareaavailability_lat_vxesus.id
  where master_join_vuldmq.source_id = airport_heliport.deicingarea_ts.id
) as airport_heliport_apronareaavailability_view_zffmkh on TRUE
where airport_heliport.deicingarea.feature_status = 'APPROVED'
  and airport_heliport.deicingarea_ts.feature_status = 'APPROVED'
order by deicingarea.identifier, deicingarea_ts.sequence_number, deicingarea_ts.correction_number DESC;
-- DepartureLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'procedure.departurearrivalcondition_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.departureleg_view cascade;
create materialized view procedure.departureleg_view as
select distinct on (departureleg.identifier,departureleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.departureleg.id::integer as id,
    procedure.departureleg_ts.id::integer as ts_id,
    procedure.departureleg_tsp.id::integer as tsp_id,
    procedure.departureleg.identifier::uuid,
    procedure.departureleg_ts.interpretation::text,
    procedure.departureleg_ts.sequence_number::integer,
    procedure.departureleg_ts.correction_number::integer,
    procedure.departureleg_ts.valid_time_begin::timestamp,
    procedure.departureleg_ts.valid_time_end::timestamp,
    procedure.departureleg_ts.feature_lifetime_begin::timestamp,
    procedure.departureleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.departureleg_ts.endconditiondesignator_value as varchar), '(' || procedure.departureleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.departureleg_ts.legpath_value as varchar), '(' || procedure.departureleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.departureleg_ts.legtypearinc_value as varchar), '(' || procedure.departureleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.departureleg_ts.course_value as varchar), '(' || procedure.departureleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.departureleg_ts.coursetype_value as varchar), '(' || procedure.departureleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.departureleg_ts.coursedirection_value as varchar), '(' || procedure.departureleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.departureleg_ts.turndirection_value as varchar), '(' || procedure.departureleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.departureleg_ts.speedreference_value as varchar), '(' || procedure.departureleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.departureleg_ts.speedinterpretation_value as varchar), '(' || procedure.departureleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.departureleg_ts.bankangle_value as varchar), '(' || procedure.departureleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.departureleg_ts.procedureturnrequired_value as varchar), '(' || procedure.departureleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.departureleg_ts.upperlimitreference_value as varchar), '(' || procedure.departureleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.departureleg_ts.lowerlimitreference_value as varchar), '(' || procedure.departureleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.departureleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.departureleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.departureleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.departureleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.departureleg_ts.verticalangle_value as varchar), '(' || procedure.departureleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.departureleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.departureleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.departureleg_ts.speedlimit_value as varchar) || ' ' || procedure.departureleg_ts.speedlimit_uom, '(' || procedure.departureleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.departureleg_ts.length_value as varchar) || ' ' || procedure.departureleg_ts.length_uom, '(' || procedure.departureleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.departureleg_ts.duration_value as varchar) || ' ' || procedure.departureleg_ts.duration_uom, '(' || procedure.departureleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.departureleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.upperlimitaltitude_uom, '(' || procedure.departureleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.departureleg_ts.lowerlimitaltitude_uom, '(' || procedure.departureleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.departureleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.departureleg_ts.altitudeoverrideatc_uom, '(' || procedure.departureleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.departureleg_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || procedure.departureleg_ts.minimumobstacleclearancealtitude_uom, '(' || procedure.departureleg_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vglcue.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_bvlsux.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_emkobd.*)::jsonb AS arccentre,
    geometry_curve_view_vxhbin.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_vxhbin.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_ccadhz.title as varchar), '(' || navaids_points_angleindication_pt_ccadhz.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_ccadhz.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_nclgxy.title as varchar), '(' || navaids_points_distanceindication_pt_nclgxy.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_nclgxy.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_gpiqtb.*)::jsonb AS holding,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_tzztjs.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_tzztjs.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_tzztjs.href::text AS departure_href,
    shared_aircraftcharacteristic_view_wpbedq.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_tfkdrm.designsurface::jsonb as designsurface,
    notes_note_view_wfqjpd.annotation::jsonb as annotation,
    procedure_departurearrivalcondition_view_jvowid.condition::jsonb as condition
from procedure.departureleg 
inner join master_join mj2 on procedure.departureleg.id = mj2.source_id
inner join procedure.departureleg_tsp on mj2.target_id = procedure.departureleg_tsp.id
inner join procedure.departureleg_ts on procedure.departureleg_tsp.departurelegtimeslice_id = procedure.departureleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vglcue on procedure.departureleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vglcue.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_bvlsux on procedure.departureleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_bvlsux.id
left join geometry.curve_view geometry_curve_view_vxhbin on procedure.departureleg_ts.trajectory_id = geometry_curve_view_vxhbin.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_emkobd on procedure.departureleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_emkobd.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_ccadhz on procedure.departureleg_ts.angle_id = navaids_points_angleindication_pt_ccadhz.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_nclgxy on procedure.departureleg_ts.distance_id = navaids_points_distanceindication_pt_nclgxy.id
left join procedure.holdinguse_view procedure_holdinguse_view_gpiqtb on procedure.departureleg_ts.holding_id = procedure_holdinguse_view_gpiqtb.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_tzztjs on procedure.departureleg_ts.departure_id = procedure_standardinstrumentdeparture_pt_tzztjs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_stfjhs.*) as aircraftcategory
  from master_join master_join_qjwrfx
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_stfjhs on master_join_qjwrfx.target_id = shared_aircraftcharacteristic_lat_stfjhs.id
  where master_join_qjwrfx.source_id = procedure.departureleg_ts.id
) as shared_aircraftcharacteristic_view_wpbedq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_ozogya.*) as designsurface
  from master_join master_join_jtfdrx
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_ozogya on master_join_jtfdrx.target_id = shared_obstacleassessmentarea_lat_ozogya.id
  where master_join_jtfdrx.source_id = procedure.departureleg_ts.id
) as shared_obstacleassessmentarea_view_tfkdrm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pdswgk.*) AS annotation
  from master_join master_join_bplvxn
  join notes.note_view notes_note_lat_pdswgk on master_join_bplvxn.target_id = notes_note_lat_pdswgk.id
  where master_join_bplvxn.source_id = procedure.departureleg_ts.id
) as notes_note_view_wfqjpd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_departurearrivalcondition_lat_jmoxij.*) as condition
  from master_join master_join_unrjss
  join procedure.departurearrivalcondition_view procedure_departurearrivalcondition_lat_jmoxij on master_join_unrjss.target_id = procedure_departurearrivalcondition_lat_jmoxij.id
  where master_join_unrjss.source_id = procedure.departureleg_ts.id
) as procedure_departurearrivalcondition_view_jvowid on TRUE
where procedure.departureleg.feature_status = 'APPROVED'
  and procedure.departureleg_ts.feature_status = 'APPROVED'
order by departureleg.identifier, departureleg_ts.sequence_number, departureleg_ts.correction_number DESC;
-- DesignatedPointTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.designatedpoint_view cascade;
create materialized view navaids_points.designatedpoint_view as
select distinct on (designatedpoint.identifier,designatedpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.designatedpoint.id::integer as id,
    navaids_points.designatedpoint_ts.id::integer as ts_id,
    navaids_points.designatedpoint_tsp.id::integer as tsp_id,
    navaids_points.designatedpoint.identifier::uuid,
    navaids_points.designatedpoint_ts.interpretation::text,
    navaids_points.designatedpoint_ts.sequence_number::integer,
    navaids_points.designatedpoint_ts.correction_number::integer,
    navaids_points.designatedpoint_ts.valid_time_begin::timestamp,
    navaids_points.designatedpoint_ts.valid_time_end::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_begin::timestamp,
    navaids_points.designatedpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.designatedpoint_ts.designator_value as varchar), '(' || navaids_points.designatedpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.designatedpoint_ts.type_value as varchar), '(' || navaids_points.designatedpoint_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.designatedpoint_ts.name_value as varchar), '(' || navaids_points.designatedpoint_ts.name_nilreason || ')')::text as name,
    geometry_point_view_jgcgzv.geom::geometry(Point, 4326) AS location_geom,
    geometry_point_view_jgcgzv.longitude AS location_longitude,
    geometry_point_view_jgcgzv.latitude AS location_latitude,
    geometry_point_view_jgcgzv.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_owllis.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_owllis.nilreason[1] || ')')::text AS aimingpoint,
    airport_heliport_touchdownliftoff_pt_owllis.href::text AS aimingpoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_jutpgv.title as varchar), '(' || airport_heliport_airportheliport_pt_jutpgv.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_jutpgv.href::text AS airportheliport_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_scwywn.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_scwywn.nilreason[1] || ')')::text AS runwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_scwywn.href::text AS runwaypoint_href,
    notes_note_view_sexena.annotation::jsonb as annotation
from navaids_points.designatedpoint 
inner join master_join mj2 on navaids_points.designatedpoint.id = mj2.source_id
inner join navaids_points.designatedpoint_tsp on mj2.target_id = navaids_points.designatedpoint_tsp.id
inner join navaids_points.designatedpoint_ts on navaids_points.designatedpoint_tsp.designatedpointtimeslice_id = navaids_points.designatedpoint_ts.id
left join geometry.point_view geometry_point_view_jgcgzv on navaids_points.designatedpoint_ts.location_id = geometry_point_view_jgcgzv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_owllis on navaids_points.designatedpoint_ts.aimingpoint_id = airport_heliport_touchdownliftoff_pt_owllis.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jutpgv on navaids_points.designatedpoint_ts.airportheliport_id = airport_heliport_airportheliport_pt_jutpgv.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_scwywn on navaids_points.designatedpoint_ts.runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_scwywn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tiybdh.*) AS annotation
  from master_join master_join_qenwbv
  join notes.note_view notes_note_lat_tiybdh on master_join_qenwbv.target_id = notes_note_lat_tiybdh.id
  where master_join_qenwbv.source_id = navaids_points.designatedpoint_ts.id
) as notes_note_view_sexena on TRUE
where navaids_points.designatedpoint.feature_status = 'APPROVED'
  and navaids_points.designatedpoint_ts.feature_status = 'APPROVED'
order by designatedpoint.identifier, designatedpoint_ts.sequence_number, designatedpoint_ts.correction_number DESC;
-- DirectionFinderTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.directionfinder_view cascade;
create materialized view navaids_points.directionfinder_view as
select distinct on (directionfinder.identifier,directionfinder_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.directionfinder.id::integer as id,
    navaids_points.directionfinder_ts.id::integer as ts_id,
    navaids_points.directionfinder_tsp.id::integer as tsp_id,
    navaids_points.directionfinder.identifier::uuid,
    navaids_points.directionfinder_ts.interpretation::text,
    navaids_points.directionfinder_ts.sequence_number::integer,
    navaids_points.directionfinder_ts.correction_number::integer,
    navaids_points.directionfinder_ts.valid_time_begin::timestamp,
    navaids_points.directionfinder_ts.valid_time_end::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_begin::timestamp,
    navaids_points.directionfinder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.directionfinder_ts.designator_value as varchar), '(' || navaids_points.directionfinder_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.directionfinder_ts.name_value as varchar), '(' || navaids_points.directionfinder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.directionfinder_ts.emissionclass_value as varchar), '(' || navaids_points.directionfinder_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.directionfinder_ts.mobile_value as varchar), '(' || navaids_points.directionfinder_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.directionfinder_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.directionfinder_ts.datemagneticvariation_value as varchar), '(' || navaids_points.directionfinder_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.directionfinder_ts.flightchecked_value as varchar), '(' || navaids_points.directionfinder_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.directionfinder_ts.doppler_value as varchar), '(' || navaids_points.directionfinder_ts.doppler_nilreason || ')')::text as doppler,
    geometry_elevatedpoint_view_viuxnw.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_viuxnw.longitude AS location_longitude,
    geometry_elevatedpoint_view_viuxnw.latitude AS location_latitude,
    geometry_elevatedpoint_view_viuxnw.elevation AS location_elevation,
    geometry_elevatedpoint_view_viuxnw.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_viuxnw.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_viuxnw.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_viuxnw.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_osgxoz.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_uiyvgn.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_sbogyc.availability::jsonb as availability,
    notes_note_view_xsoipp.annotation::jsonb as annotation,
    service_informationservice_pt_idfdqg.informationprovision::jsonb as informationprovision
from navaids_points.directionfinder 
inner join master_join mj2 on navaids_points.directionfinder.id = mj2.source_id
inner join navaids_points.directionfinder_tsp on mj2.target_id = navaids_points.directionfinder_tsp.id
inner join navaids_points.directionfinder_ts on navaids_points.directionfinder_tsp.directionfindertimeslice_id = navaids_points.directionfinder_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_viuxnw on navaids_points.directionfinder_ts.location_id = geometry_elevatedpoint_view_viuxnw.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_dlhgds.*) as authority
  from master_join master_join_mwwlth
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_dlhgds on master_join_mwwlth.target_id = navaids_points_authorityfornavaidequipment_lat_dlhgds.id
  where master_join_mwwlth.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_authorityfornavaidequipment_view_osgxoz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_gguwuv.*) as monitoring
  from master_join master_join_itfexg
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_gguwuv on master_join_itfexg.target_id = navaids_points_navaidequipmentmonitoring_lat_gguwuv.id
  where master_join_itfexg.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidequipmentmonitoring_view_uiyvgn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_sdmrbe.*) as availability
  from master_join master_join_mxzwkz
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_sdmrbe on master_join_mxzwkz.target_id = navaids_points_navaidoperationalstatus_lat_sdmrbe.id
  where master_join_mxzwkz.source_id = navaids_points.directionfinder_ts.id
) as navaids_points_navaidoperationalstatus_view_sbogyc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fkmjkm.*) AS annotation
  from master_join master_join_cvwrky
  join notes.note_view notes_note_lat_fkmjkm on master_join_cvwrky.target_id = notes_note_lat_fkmjkm.id
  where master_join_cvwrky.source_id = navaids_points.directionfinder_ts.id
) as notes_note_view_xsoipp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_informationservice_lat_aedxpg.id,
      'title', coalesce(cast(service_informationservice_lat_aedxpg.title AS varchar), '(' || service_informationservice_lat_aedxpg.nilreason[1] || ')'),
      'href', service_informationservice_lat_aedxpg.href
  )) as informationprovision  from master_join master_join_eocpmh
  join service.informationservice_pt service_informationservice_lat_aedxpg on master_join_eocpmh.target_id = service_informationservice_lat_aedxpg.id
  where master_join_eocpmh.source_id = navaids_points.directionfinder_ts.id
) as service_informationservice_pt_idfdqg on TRUE
where navaids_points.directionfinder.feature_status = 'APPROVED'
  and navaids_points.directionfinder_ts.feature_status = 'APPROVED'
order by directionfinder.identifier, directionfinder_ts.sequence_number, directionfinder_ts.correction_number DESC;
-- DistanceIndicationTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.distanceindication_view cascade;
create materialized view navaids_points.distanceindication_view as
select distinct on (distanceindication.identifier,distanceindication_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.distanceindication.id::integer as id,
    navaids_points.distanceindication_ts.id::integer as ts_id,
    navaids_points.distanceindication_tsp.id::integer as tsp_id,
    navaids_points.distanceindication.identifier::uuid,
    navaids_points.distanceindication_ts.interpretation::text,
    navaids_points.distanceindication_ts.sequence_number::integer,
    navaids_points.distanceindication_ts.correction_number::integer,
    navaids_points.distanceindication_ts.valid_time_begin::timestamp,
    navaids_points.distanceindication_ts.valid_time_end::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_begin::timestamp,
    navaids_points.distanceindication_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.distanceindication_ts.type_value as varchar), '(' || navaids_points.distanceindication_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.distanceindication_ts.distance_value as varchar) || ' ' || navaids_points.distanceindication_ts.distance_uom, '(' || navaids_points.distanceindication_ts.distance_nilreason || ')')::text as distance,
    coalesce(cast(navaids_points.distanceindication_ts.minimumreceptionaltitude_value as varchar) || ' ' || navaids_points.distanceindication_ts.minimumreceptionaltitude_uom, '(' || navaids_points.distanceindication_ts.minimumreceptionaltitude_nilreason || ')')::text as minimumreceptionaltitude,
    coalesce(cast(navaids_points_designatedpoint_pt_ldchvh.title as varchar), '(' || navaids_points_designatedpoint_pt_ldchvh.nilreason[1] || ')')::text AS fix,
    navaids_points_designatedpoint_pt_ldchvh.href::text AS fix_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ytzusi.title as varchar), '(' || navaids_points_designatedpoint_pt_ytzusi.nilreason[1] || ')')::text AS pointchoicefixdesignatedpoint,
    navaids_points_designatedpoint_pt_ytzusi.href::text AS pointchoicefixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_uydtfm.title as varchar), '(' || navaids_points_navaid_pt_uydtfm.nilreason[1] || ')')::text AS pointchoicenavaidsystem,
    navaids_points_navaid_pt_uydtfm.href::text AS pointchoicenavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_bkukiq.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_bkukiq.nilreason[1] || ')')::text AS pointchoiceaimingpoint,
    airport_heliport_touchdownliftoff_pt_bkukiq.href::text AS pointchoiceaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_jvnniq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_jvnniq.nilreason[1] || ')')::text AS pointchoicerunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_jvnniq.href::text AS pointchoicerunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_mjgkpp.title as varchar), '(' || airport_heliport_airportheliport_pt_mjgkpp.nilreason[1] || ')')::text AS pointchoiceairportreferencepoint,
    airport_heliport_airportheliport_pt_mjgkpp.href::text AS pointchoiceairportreferencepoint_href,
    geometry_point_view_ligrwn.geom::geometry(Point, 4326) AS pointchoiceposition_geom,
    geometry_point_view_ligrwn.longitude AS pointchoiceposition_longitude,
    geometry_point_view_ligrwn.latitude AS pointchoiceposition_latitude,
    geometry_point_view_ligrwn.horizontalAccuracy AS pointchoiceposition_horizontalaccuracy,
    notes_note_view_prrrye.annotation::jsonb as annotation
from navaids_points.distanceindication 
inner join master_join mj2 on navaids_points.distanceindication.id = mj2.source_id
inner join navaids_points.distanceindication_tsp on mj2.target_id = navaids_points.distanceindication_tsp.id
inner join navaids_points.distanceindication_ts on navaids_points.distanceindication_tsp.distanceindicationtimeslice_id = navaids_points.distanceindication_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ldchvh on navaids_points.distanceindication_ts.fix_id = navaids_points_designatedpoint_pt_ldchvh.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ytzusi on navaids_points.distanceindication_ts.distanceindication_ts_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ytzusi.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_uydtfm on navaids_points.distanceindication_ts.distanceindication_ts_navaidsystem_id = navaids_points_navaid_pt_uydtfm.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_bkukiq on navaids_points.distanceindication_ts.distanceindication_ts_aimingpoint_id = airport_heliport_touchdownliftoff_pt_bkukiq.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_jvnniq on navaids_points.distanceindication_ts.distanceindication_ts_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_jvnniq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_mjgkpp on navaids_points.distanceindication_ts.distanceindication_ts_airportreferencepoint_id = airport_heliport_airportheliport_pt_mjgkpp.id
left join geometry.point_view geometry_point_view_ligrwn on navaids_points.distanceindication_ts.distanceindication_ts_position_id = geometry_point_view_ligrwn.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_izhfyc.*) AS annotation
  from master_join master_join_cwagua
  join notes.note_view notes_note_lat_izhfyc on master_join_cwagua.target_id = notes_note_lat_izhfyc.id
  where master_join_cwagua.source_id = navaids_points.distanceindication_ts.id
) as notes_note_view_prrrye on TRUE
where navaids_points.distanceindication.feature_status = 'APPROVED'
  and navaids_points.distanceindication_ts.feature_status = 'APPROVED'
order by distanceindication.identifier, distanceindication_ts.sequence_number, distanceindication_ts.correction_number DESC;
-- DMETimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.dme_view cascade;
create materialized view navaids_points.dme_view as
select distinct on (dme.identifier,dme_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.dme.id::integer as id,
    navaids_points.dme_ts.id::integer as ts_id,
    navaids_points.dme_tsp.id::integer as tsp_id,
    navaids_points.dme.identifier::uuid,
    navaids_points.dme_ts.interpretation::text,
    navaids_points.dme_ts.sequence_number::integer,
    navaids_points.dme_ts.correction_number::integer,
    navaids_points.dme_ts.valid_time_begin::timestamp,
    navaids_points.dme_ts.valid_time_end::timestamp,
    navaids_points.dme_ts.feature_lifetime_begin::timestamp,
    navaids_points.dme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.dme_ts.designator_value as varchar), '(' || navaids_points.dme_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.dme_ts.name_value as varchar), '(' || navaids_points.dme_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.dme_ts.emissionclass_value as varchar), '(' || navaids_points.dme_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.dme_ts.mobile_value as varchar), '(' || navaids_points.dme_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.dme_ts.magneticvariation_value as varchar), '(' || navaids_points.dme_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.dme_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.dme_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.dme_ts.datemagneticvariation_value as varchar), '(' || navaids_points.dme_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.dme_ts.flightchecked_value as varchar), '(' || navaids_points.dme_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.dme_ts.type_value as varchar), '(' || navaids_points.dme_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.dme_ts.channel_value as varchar), '(' || navaids_points.dme_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.dme_ts.ghostfrequency_value as varchar) || ' ' || navaids_points.dme_ts.ghostfrequency_uom, '(' || navaids_points.dme_ts.ghostfrequency_nilreason || ')')::text as ghostfrequency,
    coalesce(cast(navaids_points.dme_ts.displace_value as varchar) || ' ' || navaids_points.dme_ts.displace_uom, '(' || navaids_points.dme_ts.displace_nilreason || ')')::text as displace,
    geometry_elevatedpoint_view_fsveqj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fsveqj.longitude AS location_longitude,
    geometry_elevatedpoint_view_fsveqj.latitude AS location_latitude,
    geometry_elevatedpoint_view_fsveqj.elevation AS location_elevation,
    geometry_elevatedpoint_view_fsveqj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fsveqj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fsveqj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fsveqj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_dtaaog.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mudckk.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_wmbzbj.availability::jsonb as availability,
    notes_note_view_xijezc.annotation::jsonb as annotation
from navaids_points.dme 
inner join master_join mj2 on navaids_points.dme.id = mj2.source_id
inner join navaids_points.dme_tsp on mj2.target_id = navaids_points.dme_tsp.id
inner join navaids_points.dme_ts on navaids_points.dme_tsp.dmetimeslice_id = navaids_points.dme_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fsveqj on navaids_points.dme_ts.location_id = geometry_elevatedpoint_view_fsveqj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_booecr.*) as authority
  from master_join master_join_lniwup
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_booecr on master_join_lniwup.target_id = navaids_points_authorityfornavaidequipment_lat_booecr.id
  where master_join_lniwup.source_id = navaids_points.dme_ts.id
) as navaids_points_authorityfornavaidequipment_view_dtaaog on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_nbyvxf.*) as monitoring
  from master_join master_join_dftdfr
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_nbyvxf on master_join_dftdfr.target_id = navaids_points_navaidequipmentmonitoring_lat_nbyvxf.id
  where master_join_dftdfr.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mudckk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_pwcadw.*) as availability
  from master_join master_join_dwvxho
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_pwcadw on master_join_dwvxho.target_id = navaids_points_navaidoperationalstatus_lat_pwcadw.id
  where master_join_dwvxho.source_id = navaids_points.dme_ts.id
) as navaids_points_navaidoperationalstatus_view_wmbzbj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gtqfhe.*) AS annotation
  from master_join master_join_bqhaep
  join notes.note_view notes_note_lat_gtqfhe on master_join_bqhaep.target_id = notes_note_lat_gtqfhe.id
  where master_join_bqhaep.source_id = navaids_points.dme_ts.id
) as notes_note_view_xijezc on TRUE
where navaids_points.dme.feature_status = 'APPROVED'
  and navaids_points.dme_ts.feature_status = 'APPROVED'
order by dme.identifier, dme_ts.sequence_number, dme_ts.correction_number DESC;
-- ElevationTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.elevation_view cascade;
create materialized view navaids_points.elevation_view as
select distinct on (elevation.identifier,elevation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.elevation.id::integer as id,
    navaids_points.elevation_ts.id::integer as ts_id,
    navaids_points.elevation_tsp.id::integer as tsp_id,
    navaids_points.elevation.identifier::uuid,
    navaids_points.elevation_ts.interpretation::text,
    navaids_points.elevation_ts.sequence_number::integer,
    navaids_points.elevation_ts.correction_number::integer,
    navaids_points.elevation_ts.valid_time_begin::timestamp,
    navaids_points.elevation_ts.valid_time_end::timestamp,
    navaids_points.elevation_ts.feature_lifetime_begin::timestamp,
    navaids_points.elevation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.elevation_ts.designator_value as varchar), '(' || navaids_points.elevation_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.elevation_ts.name_value as varchar), '(' || navaids_points.elevation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.elevation_ts.emissionclass_value as varchar), '(' || navaids_points.elevation_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.elevation_ts.mobile_value as varchar), '(' || navaids_points.elevation_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.elevation_ts.magneticvariation_value as varchar), '(' || navaids_points.elevation_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.elevation_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.elevation_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.elevation_ts.datemagneticvariation_value as varchar), '(' || navaids_points.elevation_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.elevation_ts.flightchecked_value as varchar), '(' || navaids_points.elevation_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.elevation_ts.anglenominal_value as varchar), '(' || navaids_points.elevation_ts.anglenominal_nilreason || ')')::text as anglenominal,
    coalesce(cast(navaids_points.elevation_ts.angleminimum_value as varchar), '(' || navaids_points.elevation_ts.angleminimum_nilreason || ')')::text as angleminimum,
    coalesce(cast(navaids_points.elevation_ts.anglespan_value as varchar), '(' || navaids_points.elevation_ts.anglespan_nilreason || ')')::text as anglespan,
    coalesce(cast(navaids_points.elevation_ts.angleaccuracy_value as varchar), '(' || navaids_points.elevation_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    geometry_elevatedpoint_view_sgpxdb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_sgpxdb.longitude AS location_longitude,
    geometry_elevatedpoint_view_sgpxdb.latitude AS location_latitude,
    geometry_elevatedpoint_view_sgpxdb.elevation AS location_elevation,
    geometry_elevatedpoint_view_sgpxdb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_sgpxdb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_sgpxdb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_sgpxdb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_uunqvu.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mfjokr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_enygxv.availability::jsonb as availability,
    notes_note_view_lkezgf.annotation::jsonb as annotation
from navaids_points.elevation 
inner join master_join mj2 on navaids_points.elevation.id = mj2.source_id
inner join navaids_points.elevation_tsp on mj2.target_id = navaids_points.elevation_tsp.id
inner join navaids_points.elevation_ts on navaids_points.elevation_tsp.elevationtimeslice_id = navaids_points.elevation_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_sgpxdb on navaids_points.elevation_ts.location_id = geometry_elevatedpoint_view_sgpxdb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_onptgd.*) as authority
  from master_join master_join_hoddld
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_onptgd on master_join_hoddld.target_id = navaids_points_authorityfornavaidequipment_lat_onptgd.id
  where master_join_hoddld.source_id = navaids_points.elevation_ts.id
) as navaids_points_authorityfornavaidequipment_view_uunqvu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_nqjqbi.*) as monitoring
  from master_join master_join_faubgy
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_nqjqbi on master_join_faubgy.target_id = navaids_points_navaidequipmentmonitoring_lat_nqjqbi.id
  where master_join_faubgy.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mfjokr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_emhkxh.*) as availability
  from master_join master_join_repvzy
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_emhkxh on master_join_repvzy.target_id = navaids_points_navaidoperationalstatus_lat_emhkxh.id
  where master_join_repvzy.source_id = navaids_points.elevation_ts.id
) as navaids_points_navaidoperationalstatus_view_enygxv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qxalat.*) AS annotation
  from master_join master_join_hhwemd
  join notes.note_view notes_note_lat_qxalat on master_join_hhwemd.target_id = notes_note_lat_qxalat.id
  where master_join_hhwemd.source_id = navaids_points.elevation_ts.id
) as notes_note_view_lkezgf on TRUE
where navaids_points.elevation.feature_status = 'APPROVED'
  and navaids_points.elevation_ts.feature_status = 'APPROVED'
order by elevation.identifier, elevation_ts.sequence_number, elevation_ts.correction_number DESC;
-- FinalLegTimeSliceType
-- ['procedure.approachcondition_view', 'public.fasdatablock_view', 'shared.obstacleassessmentarea_view', 'notes.note_view', 'geometry.point_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.finalleg_view cascade;
create materialized view procedure.finalleg_view as
select distinct on (finalleg.identifier,finalleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.finalleg.id::integer as id,
    procedure.finalleg_ts.id::integer as ts_id,
    procedure.finalleg_tsp.id::integer as tsp_id,
    procedure.finalleg.identifier::uuid,
    procedure.finalleg_ts.interpretation::text,
    procedure.finalleg_ts.sequence_number::integer,
    procedure.finalleg_ts.correction_number::integer,
    procedure.finalleg_ts.valid_time_begin::timestamp,
    procedure.finalleg_ts.valid_time_end::timestamp,
    procedure.finalleg_ts.feature_lifetime_begin::timestamp,
    procedure.finalleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.finalleg_ts.endconditiondesignator_value as varchar), '(' || procedure.finalleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.finalleg_ts.legpath_value as varchar), '(' || procedure.finalleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.finalleg_ts.legtypearinc_value as varchar), '(' || procedure.finalleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.finalleg_ts.course_value as varchar), '(' || procedure.finalleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.finalleg_ts.coursetype_value as varchar), '(' || procedure.finalleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.finalleg_ts.coursedirection_value as varchar), '(' || procedure.finalleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.finalleg_ts.turndirection_value as varchar), '(' || procedure.finalleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.finalleg_ts.speedreference_value as varchar), '(' || procedure.finalleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.finalleg_ts.speedinterpretation_value as varchar), '(' || procedure.finalleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.finalleg_ts.bankangle_value as varchar), '(' || procedure.finalleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.finalleg_ts.procedureturnrequired_value as varchar), '(' || procedure.finalleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.finalleg_ts.upperlimitreference_value as varchar), '(' || procedure.finalleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.finalleg_ts.lowerlimitreference_value as varchar), '(' || procedure.finalleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.finalleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.finalleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.finalleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.finalleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.finalleg_ts.verticalangle_value as varchar), '(' || procedure.finalleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.finalleg_ts.guidancesystem_value as varchar), '(' || procedure.finalleg_ts.guidancesystem_nilreason || ')')::text as guidancesystem,
    coalesce(cast(procedure.finalleg_ts.landingsystemcategory_value as varchar), '(' || procedure.finalleg_ts.landingsystemcategory_nilreason || ')')::text as landingsystemcategory,
    coalesce(cast(procedure.finalleg_ts.rnpdmeauthorized_value as varchar), '(' || procedure.finalleg_ts.rnpdmeauthorized_nilreason || ')')::text as rnpdmeauthorized,
    coalesce(cast(procedure.finalleg_ts.courseoffsetangle_value as varchar), '(' || procedure.finalleg_ts.courseoffsetangle_nilreason || ')')::text as courseoffsetangle,
    coalesce(cast(procedure.finalleg_ts.courseoffsetside_value as varchar), '(' || procedure.finalleg_ts.courseoffsetside_nilreason || ')')::text as courseoffsetside,
    coalesce(cast(procedure.finalleg_ts.coursecentrelineintersect_value as varchar), '(' || procedure.finalleg_ts.coursecentrelineintersect_nilreason || ')')::text as coursecentrelineintersect,
    coalesce(cast(procedure.finalleg_ts.speedlimit_value as varchar) || ' ' || procedure.finalleg_ts.speedlimit_uom, '(' || procedure.finalleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.finalleg_ts.length_value as varchar) || ' ' || procedure.finalleg_ts.length_uom, '(' || procedure.finalleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.finalleg_ts.duration_value as varchar) || ' ' || procedure.finalleg_ts.duration_uom, '(' || procedure.finalleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.finalleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.upperlimitaltitude_uom, '(' || procedure.finalleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.finalleg_ts.lowerlimitaltitude_uom, '(' || procedure.finalleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.finalleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.finalleg_ts.altitudeoverrideatc_uom, '(' || procedure.finalleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.finalleg_ts.minimumbarovnavtemperature_value as varchar) || ' ' || procedure.finalleg_ts.minimumbarovnavtemperature_uom, '(' || procedure.finalleg_ts.minimumbarovnavtemperature_nilreason || ')')::text as minimumbarovnavtemperature,
    coalesce(cast(procedure.finalleg_ts.coursecentrelinedistance_value as varchar) || ' ' || procedure.finalleg_ts.coursecentrelinedistance_uom, '(' || procedure.finalleg_ts.coursecentrelinedistance_nilreason || ')')::text as coursecentrelinedistance,
    coalesce(cast(procedure.finalleg_ts.courseoffsetdistance_value as varchar) || ' ' || procedure.finalleg_ts.courseoffsetdistance_uom, '(' || procedure.finalleg_ts.courseoffsetdistance_nilreason || ')')::text as courseoffsetdistance,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xprpql.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_trlogs.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_xafvtz.*)::jsonb AS arccentre,
    to_jsonb(navaids_points_terminalsegmentpoint_view_rklrnw.*)::jsonb AS visualdescentpoint,
    geometry_curve_view_usleea.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_usleea.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_nufzad.title as varchar), '(' || navaids_points_angleindication_pt_nufzad.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_nufzad.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_tbwiqr.title as varchar), '(' || navaids_points_distanceindication_pt_tbwiqr.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_tbwiqr.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_knkywz.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_yoqzcc.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_yoqzcc.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_yoqzcc.href::text AS approach_href,
    coalesce(cast(navaids_points_designatedpoint_pt_yvsyjb.title as varchar), '(' || navaids_points_designatedpoint_pt_yvsyjb.nilreason[1] || ')')::text AS finalpathalignmentpointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_yvsyjb.href::text AS finalpathalignmentpointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_geocqn.title as varchar), '(' || navaids_points_navaid_pt_geocqn.nilreason[1] || ')')::text AS finalpathalignmentpointnavaidsystem,
    navaids_points_navaid_pt_geocqn.href::text AS finalpathalignmentpointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_qakkpf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_qakkpf.nilreason[1] || ')')::text AS finalpathalignmentpointaimingpoint,
    airport_heliport_touchdownliftoff_pt_qakkpf.href::text AS finalpathalignmentpointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_zsuwys.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_zsuwys.nilreason[1] || ')')::text AS finalpathalignmentpointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_zsuwys.href::text AS finalpathalignmentpointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_gvcqyv.title as varchar), '(' || airport_heliport_airportheliport_pt_gvcqyv.nilreason[1] || ')')::text AS finalpathalignmentpointairportreferencepoint,
    airport_heliport_airportheliport_pt_gvcqyv.href::text AS finalpathalignmentpointairportreferencepoint_href,
    geometry_point_view_ajqwpe.geom::geometry(Point, 4326) AS finalpathalignmentpointposition_geom,
    geometry_point_view_ajqwpe.longitude AS finalpathalignmentpointposition_longitude,
    geometry_point_view_ajqwpe.latitude AS finalpathalignmentpointposition_latitude,
    geometry_point_view_ajqwpe.horizontalAccuracy AS finalpathalignmentpointposition_horizontalaccuracy,
    to_jsonb(public_fasdatablock_view_nkwros.*)::jsonb AS fasdata,
    shared_aircraftcharacteristic_view_bsilaz.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_bpslju.designsurface::jsonb as designsurface,
    notes_note_view_slspjb.annotation::jsonb as annotation,
    procedure_approachcondition_view_iwkilq.condition::jsonb as condition
from procedure.finalleg 
inner join master_join mj2 on procedure.finalleg.id = mj2.source_id
inner join procedure.finalleg_tsp on mj2.target_id = procedure.finalleg_tsp.id
inner join procedure.finalleg_ts on procedure.finalleg_tsp.finallegtimeslice_id = procedure.finalleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xprpql on procedure.finalleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_xprpql.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_trlogs on procedure.finalleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_trlogs.id
left join geometry.curve_view geometry_curve_view_usleea on procedure.finalleg_ts.trajectory_id = geometry_curve_view_usleea.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_xafvtz on procedure.finalleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_xafvtz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_nufzad on procedure.finalleg_ts.angle_id = navaids_points_angleindication_pt_nufzad.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_tbwiqr on procedure.finalleg_ts.distance_id = navaids_points_distanceindication_pt_tbwiqr.id
left join procedure.holdinguse_view procedure_holdinguse_view_knkywz on procedure.finalleg_ts.holding_id = procedure_holdinguse_view_knkywz.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_yoqzcc on procedure.finalleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_yoqzcc.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_yvsyjb on procedure.finalleg_ts.finalpathalignmentpoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_yvsyjb.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_geocqn on procedure.finalleg_ts.finalpathalignmentpoint_navaidsystem_id = navaids_points_navaid_pt_geocqn.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_qakkpf on procedure.finalleg_ts.finalpathalignmentpoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_qakkpf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_zsuwys on procedure.finalleg_ts.finalpathalignmentpoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_zsuwys.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gvcqyv on procedure.finalleg_ts.finalpathalignmentpoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_gvcqyv.id
left join geometry.point_view geometry_point_view_ajqwpe on procedure.finalleg_ts.finalpathalignmentpoint_position_id = geometry_point_view_ajqwpe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_rklrnw on procedure.finalleg_ts.visualdescentpoint_id = navaids_points_terminalsegmentpoint_view_rklrnw.id
left join public.fasdatablock_view public_fasdatablock_view_nkwros on procedure.finalleg_ts.fasdata_id = public_fasdatablock_view_nkwros.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_hhhnvy.*) as aircraftcategory
  from master_join master_join_yircfx
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_hhhnvy on master_join_yircfx.target_id = shared_aircraftcharacteristic_lat_hhhnvy.id
  where master_join_yircfx.source_id = procedure.finalleg_ts.id
) as shared_aircraftcharacteristic_view_bsilaz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_fjpyym.*) as designsurface
  from master_join master_join_jexzmn
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_fjpyym on master_join_jexzmn.target_id = shared_obstacleassessmentarea_lat_fjpyym.id
  where master_join_jexzmn.source_id = procedure.finalleg_ts.id
) as shared_obstacleassessmentarea_view_bpslju on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_omiaxs.*) AS annotation
  from master_join master_join_ubngfi
  join notes.note_view notes_note_lat_omiaxs on master_join_ubngfi.target_id = notes_note_lat_omiaxs.id
  where master_join_ubngfi.source_id = procedure.finalleg_ts.id
) as notes_note_view_slspjb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_hzjohy.*) as condition
  from master_join master_join_scytzj
  join procedure.approachcondition_view procedure_approachcondition_lat_hzjohy on master_join_scytzj.target_id = procedure_approachcondition_lat_hzjohy.id
  where master_join_scytzj.source_id = procedure.finalleg_ts.id
) as procedure_approachcondition_view_iwkilq on TRUE
where procedure.finalleg.feature_status = 'APPROVED'
  and procedure.finalleg_ts.feature_status = 'APPROVED'
order by finalleg.identifier, finalleg_ts.sequence_number, finalleg_ts.correction_number DESC;
-- FireFightingServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.firefightingservice_view cascade;
create materialized view service.firefightingservice_view as
select distinct on (firefightingservice.identifier,firefightingservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.firefightingservice.id::integer as id,
    service.firefightingservice_ts.id::integer as ts_id,
    service.firefightingservice_tsp.id::integer as tsp_id,
    service.firefightingservice.identifier::uuid,
    service.firefightingservice_ts.interpretation::text,
    service.firefightingservice_ts.sequence_number::integer,
    service.firefightingservice_ts.correction_number::integer,
    service.firefightingservice_ts.valid_time_begin::timestamp,
    service.firefightingservice_ts.valid_time_end::timestamp,
    service.firefightingservice_ts.feature_lifetime_begin::timestamp,
    service.firefightingservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.firefightingservice_ts.flightoperations_value as varchar), '(' || service.firefightingservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.firefightingservice_ts.rank_value as varchar), '(' || service.firefightingservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.firefightingservice_ts.complianticao_value as varchar), '(' || service.firefightingservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.firefightingservice_ts.name_value as varchar), '(' || service.firefightingservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.firefightingservice_ts.category_value as varchar), '(' || service.firefightingservice_ts.category_nilreason || ')')::text as category,
    coalesce(cast(service.firefightingservice_ts.standard_value as varchar), '(' || service.firefightingservice_ts.standard_nilreason || ')')::text as standard,
    geometry_elevatedpoint_view_fgftcm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fgftcm.longitude AS location_longitude,
    geometry_elevatedpoint_view_fgftcm.latitude AS location_latitude,
    geometry_elevatedpoint_view_fgftcm.elevation AS location_elevation,
    geometry_elevatedpoint_view_fgftcm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fgftcm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fgftcm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fgftcm.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_rckrjd.title as varchar), '(' || organisation_unit_pt_rckrjd.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_rckrjd.href::text AS serviceprovider_href,
    service_callsigndetail_view_dvijvh.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_yvuurn.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_bmguja.availability::jsonb as availability,
    notes_note_view_fisemm.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_vjyyxk.airportheliport::jsonb as airportheliport
from service.firefightingservice 
inner join master_join mj2 on service.firefightingservice.id = mj2.source_id
inner join service.firefightingservice_tsp on mj2.target_id = service.firefightingservice_tsp.id
inner join service.firefightingservice_ts on service.firefightingservice_tsp.firefightingservicetimeslice_id = service.firefightingservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fgftcm on service.firefightingservice_ts.location_id = geometry_elevatedpoint_view_fgftcm.id
left join organisation.unit_pt organisation_unit_pt_rckrjd on service.firefightingservice_ts.serviceprovider_id = organisation_unit_pt_rckrjd.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_tqladn.*) as callsign
  from master_join master_join_jjrbwu
  join service.callsigndetail_view service_callsigndetail_lat_tqladn on master_join_jjrbwu.target_id = service_callsigndetail_lat_tqladn.id
  where master_join_jjrbwu.source_id = service.firefightingservice_ts.id
) as service_callsigndetail_view_dvijvh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_sdqufi.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_sdqufi.title AS varchar), '(' || service_radiocommunicationchannel_lat_sdqufi.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_sdqufi.href
  )) as radiocommunication  from master_join master_join_ymzlsi
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_sdqufi on master_join_ymzlsi.target_id = service_radiocommunicationchannel_lat_sdqufi.id
  where master_join_ymzlsi.source_id = service.firefightingservice_ts.id
) as service_radiocommunicationchannel_pt_yvuurn on TRUE
left join lateral(
  select
  from master_join master_join_cjfawj
  join shared.contactinformation_view shared_contactinformation_lat_wrglty on master_join_cjfawj.target_id = shared_contactinformation_lat_wrglty.id
  where master_join_cjfawj.source_id = service.firefightingservice_ts.id
) as shared_contactinformation_view_vwvknq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_olnrod.*) as availability
  from master_join master_join_wgkbnx
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_olnrod on master_join_wgkbnx.target_id = service_serviceoperationalstatus_lat_olnrod.id
  where master_join_wgkbnx.source_id = service.firefightingservice_ts.id
) as service_serviceoperationalstatus_view_bmguja on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jfbynm.*) AS annotation
  from master_join master_join_tbedbl
  join notes.note_view notes_note_lat_jfbynm on master_join_tbedbl.target_id = notes_note_lat_jfbynm.id
  where master_join_tbedbl.source_id = service.firefightingservice_ts.id
) as notes_note_view_fisemm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lgpcot.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lgpcot.title AS varchar), '(' || airport_heliport_airportheliport_lat_lgpcot.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lgpcot.href
  )) as airportheliport  from master_join master_join_vhehng
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lgpcot on master_join_vhehng.target_id = airport_heliport_airportheliport_lat_lgpcot.id
  where master_join_vhehng.source_id = service.firefightingservice_ts.id
) as airport_heliport_airportheliport_pt_vjyyxk on TRUE
where service.firefightingservice.feature_status = 'APPROVED'
  and service.firefightingservice_ts.feature_status = 'APPROVED'
order by firefightingservice.identifier, firefightingservice_ts.sequence_number, firefightingservice_ts.correction_number DESC;
-- FlightRestrictionTimeSliceType
-- ['routes.flightrestrictionroute_view', 'notes.note_view', 'routes.flightconditioncombination_view']
drop materialized view if exists routes.flightrestriction_view cascade;
create materialized view routes.flightrestriction_view as
select distinct on (flightrestriction.identifier,flightrestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.flightrestriction.id::integer as id,
    routes.flightrestriction_ts.id::integer as ts_id,
    routes.flightrestriction_tsp.id::integer as tsp_id,
    routes.flightrestriction.identifier::uuid,
    routes.flightrestriction_ts.interpretation::text,
    routes.flightrestriction_ts.sequence_number::integer,
    routes.flightrestriction_ts.correction_number::integer,
    routes.flightrestriction_ts.valid_time_begin::timestamp,
    routes.flightrestriction_ts.valid_time_end::timestamp,
    routes.flightrestriction_ts.feature_lifetime_begin::timestamp,
    routes.flightrestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.flightrestriction_ts.designator_value as varchar), '(' || routes.flightrestriction_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(routes.flightrestriction_ts.type_value as varchar), '(' || routes.flightrestriction_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.flightrestriction_ts.instruction_value as varchar), '(' || routes.flightrestriction_ts.instruction_nilreason || ')')::text as instruction,
    to_jsonb(routes_flightconditioncombination_view_rqvrxj.*)::jsonb AS flight,
    routes_flightrestrictionroute_view_pwnwuh.regulatedroute::jsonb as regulatedroute,
    notes_note_view_dvrpac.annotation::jsonb as annotation
from routes.flightrestriction 
inner join master_join mj2 on routes.flightrestriction.id = mj2.source_id
inner join routes.flightrestriction_tsp on mj2.target_id = routes.flightrestriction_tsp.id
inner join routes.flightrestriction_ts on routes.flightrestriction_tsp.flightrestrictiontimeslice_id = routes.flightrestriction_ts.id
left join routes.flightconditioncombination_view routes_flightconditioncombination_view_rqvrxj on routes.flightrestriction_ts.flight_id = routes_flightconditioncombination_view_rqvrxj.id
left join lateral(
  select jsonb_agg(DISTINCT routes_flightrestrictionroute_lat_xxsxsl.*) as regulatedroute
  from master_join master_join_cmgyjo
  join routes.flightrestrictionroute_view routes_flightrestrictionroute_lat_xxsxsl on master_join_cmgyjo.target_id = routes_flightrestrictionroute_lat_xxsxsl.id
  where master_join_cmgyjo.source_id = routes.flightrestriction_ts.id
) as routes_flightrestrictionroute_view_pwnwuh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_annyre.*) AS annotation
  from master_join master_join_efabiu
  join notes.note_view notes_note_lat_annyre on master_join_efabiu.target_id = notes_note_lat_annyre.id
  where master_join_efabiu.source_id = routes.flightrestriction_ts.id
) as notes_note_view_dvrpac on TRUE
where routes.flightrestriction.feature_status = 'APPROVED'
  and routes.flightrestriction_ts.feature_status = 'APPROVED'
order by flightrestriction.identifier, flightrestriction_ts.sequence_number, flightrestriction_ts.correction_number DESC;
-- FloatingDockSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.floatingdocksite_view cascade;
create materialized view airport_heliport.floatingdocksite_view as
select distinct on (floatingdocksite.identifier,floatingdocksite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.floatingdocksite.id::integer as id,
    airport_heliport.floatingdocksite_ts.id::integer as ts_id,
    airport_heliport.floatingdocksite_tsp.id::integer as tsp_id,
    airport_heliport.floatingdocksite.identifier::uuid,
    airport_heliport.floatingdocksite_ts.interpretation::text,
    airport_heliport.floatingdocksite_ts.sequence_number::integer,
    airport_heliport.floatingdocksite_ts.correction_number::integer,
    airport_heliport.floatingdocksite_ts.valid_time_begin::timestamp,
    airport_heliport.floatingdocksite_ts.valid_time_end::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.floatingdocksite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_mvyako.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mvyako.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mvyako.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mvyako.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mvyako.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mvyako.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_oqkkhe.annotation::jsonb as annotation
from airport_heliport.floatingdocksite 
inner join master_join mj2 on airport_heliport.floatingdocksite.id = mj2.source_id
inner join airport_heliport.floatingdocksite_tsp on mj2.target_id = airport_heliport.floatingdocksite_tsp.id
inner join airport_heliport.floatingdocksite_ts on airport_heliport.floatingdocksite_tsp.floatingdocksitetimeslice_id = airport_heliport.floatingdocksite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mvyako on airport_heliport.floatingdocksite_ts.extent_id = geometry_elevatedsurface_view_mvyako.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ivtdxr.*) AS annotation
  from master_join master_join_kzrscm
  join notes.note_view notes_note_lat_ivtdxr on master_join_kzrscm.target_id = notes_note_lat_ivtdxr.id
  where master_join_kzrscm.source_id = airport_heliport.floatingdocksite_ts.id
) as notes_note_view_oqkkhe on TRUE
where airport_heliport.floatingdocksite.feature_status = 'APPROVED'
  and airport_heliport.floatingdocksite_ts.feature_status = 'APPROVED'
order by floatingdocksite.identifier, floatingdocksite_ts.sequence_number, floatingdocksite_ts.correction_number DESC;
-- GeoBorderTimeSliceType
-- ['geometry.curve_view', 'notes.note_view']
drop materialized view if exists airspace.geoborder_view cascade;
create materialized view airspace.geoborder_view as
select distinct on (geoborder.identifier,geoborder_ts.sequence_number)
    (row_number() over ())::integer as row,
    airspace.geoborder.id::integer as id,
    airspace.geoborder_ts.id::integer as ts_id,
    airspace.geoborder_tsp.id::integer as tsp_id,
    airspace.geoborder.identifier::uuid,
    airspace.geoborder_ts.interpretation::text,
    airspace.geoborder_ts.sequence_number::integer,
    airspace.geoborder_ts.correction_number::integer,
    airspace.geoborder_ts.valid_time_begin::timestamp,
    airspace.geoborder_ts.valid_time_end::timestamp,
    airspace.geoborder_ts.feature_lifetime_begin::timestamp,
    airspace.geoborder_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airspace.geoborder_ts.name_value as varchar), '(' || airspace.geoborder_ts.name_nilreason || ')')::text as name,
    coalesce(cast(airspace.geoborder_ts.type_value as varchar), '(' || airspace.geoborder_ts.type_nilreason || ')')::text as type,
    geometry_curve_view_kirneo.geom::geometry(LINESTRING, 4326) AS border_geom,
    geometry_curve_view_kirneo.horizontalAccuracy as border_horizontalaccuracy,
    notes_note_view_ptkfov.annotation::jsonb as annotation
from airspace.geoborder 
inner join master_join mj2 on airspace.geoborder.id = mj2.source_id
inner join airspace.geoborder_tsp on mj2.target_id = airspace.geoborder_tsp.id
inner join airspace.geoborder_ts on airspace.geoborder_tsp.geobordertimeslice_id = airspace.geoborder_ts.id
left join geometry.curve_view geometry_curve_view_kirneo on airspace.geoborder_ts.border_id = geometry_curve_view_kirneo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cpuyiz.*) AS annotation
  from master_join master_join_mstfef
  join notes.note_view notes_note_lat_cpuyiz on master_join_mstfef.target_id = notes_note_lat_cpuyiz.id
  where master_join_mstfef.source_id = airspace.geoborder_ts.id
) as notes_note_view_ptkfov on TRUE
where airspace.geoborder.feature_status = 'APPROVED'
  and airspace.geoborder_ts.feature_status = 'APPROVED'
order by geoborder.identifier, geoborder_ts.sequence_number, geoborder_ts.correction_number DESC;
-- GlidepathTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.glidepath_view cascade;
create materialized view navaids_points.glidepath_view as
select distinct on (glidepath.identifier,glidepath_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.glidepath.id::integer as id,
    navaids_points.glidepath_ts.id::integer as ts_id,
    navaids_points.glidepath_tsp.id::integer as tsp_id,
    navaids_points.glidepath.identifier::uuid,
    navaids_points.glidepath_ts.interpretation::text,
    navaids_points.glidepath_ts.sequence_number::integer,
    navaids_points.glidepath_ts.correction_number::integer,
    navaids_points.glidepath_ts.valid_time_begin::timestamp,
    navaids_points.glidepath_ts.valid_time_end::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_begin::timestamp,
    navaids_points.glidepath_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.glidepath_ts.designator_value as varchar), '(' || navaids_points.glidepath_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.glidepath_ts.name_value as varchar), '(' || navaids_points.glidepath_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.glidepath_ts.emissionclass_value as varchar), '(' || navaids_points.glidepath_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.glidepath_ts.mobile_value as varchar), '(' || navaids_points.glidepath_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.datemagneticvariation_value as varchar), '(' || navaids_points.glidepath_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.glidepath_ts.flightchecked_value as varchar), '(' || navaids_points.glidepath_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.glidepath_ts.slope_value as varchar), '(' || navaids_points.glidepath_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(navaids_points.glidepath_ts.angleaccuracy_value as varchar), '(' || navaids_points.glidepath_ts.angleaccuracy_nilreason || ')')::text as angleaccuracy,
    coalesce(cast(navaids_points.glidepath_ts.frequency_value as varchar) || ' ' || navaids_points.glidepath_ts.frequency_uom, '(' || navaids_points.glidepath_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points.glidepath_ts.rdh_value as varchar) || ' ' || navaids_points.glidepath_ts.rdh_uom, '(' || navaids_points.glidepath_ts.rdh_nilreason || ')')::text as rdh,
    coalesce(cast(navaids_points.glidepath_ts.rdhaccuracy_value as varchar) || ' ' || navaids_points.glidepath_ts.rdhaccuracy_uom, '(' || navaids_points.glidepath_ts.rdhaccuracy_nilreason || ')')::text as rdhaccuracy,
    geometry_elevatedpoint_view_yxjnwq.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yxjnwq.longitude AS location_longitude,
    geometry_elevatedpoint_view_yxjnwq.latitude AS location_latitude,
    geometry_elevatedpoint_view_yxjnwq.elevation AS location_elevation,
    geometry_elevatedpoint_view_yxjnwq.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yxjnwq.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yxjnwq.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yxjnwq.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_gfrmxx.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_mvlyos.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_shzpyl.availability::jsonb as availability,
    notes_note_view_hvaffw.annotation::jsonb as annotation
from navaids_points.glidepath 
inner join master_join mj2 on navaids_points.glidepath.id = mj2.source_id
inner join navaids_points.glidepath_tsp on mj2.target_id = navaids_points.glidepath_tsp.id
inner join navaids_points.glidepath_ts on navaids_points.glidepath_tsp.glidepathtimeslice_id = navaids_points.glidepath_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yxjnwq on navaids_points.glidepath_ts.location_id = geometry_elevatedpoint_view_yxjnwq.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ucxgqy.*) as authority
  from master_join master_join_yptqmm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ucxgqy on master_join_yptqmm.target_id = navaids_points_authorityfornavaidequipment_lat_ucxgqy.id
  where master_join_yptqmm.source_id = navaids_points.glidepath_ts.id
) as navaids_points_authorityfornavaidequipment_view_gfrmxx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_zekaes.*) as monitoring
  from master_join master_join_cstvbj
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_zekaes on master_join_cstvbj.target_id = navaids_points_navaidequipmentmonitoring_lat_zekaes.id
  where master_join_cstvbj.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidequipmentmonitoring_view_mvlyos on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wovcxt.*) as availability
  from master_join master_join_uhzwya
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wovcxt on master_join_uhzwya.target_id = navaids_points_navaidoperationalstatus_lat_wovcxt.id
  where master_join_uhzwya.source_id = navaids_points.glidepath_ts.id
) as navaids_points_navaidoperationalstatus_view_shzpyl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mxvvnt.*) AS annotation
  from master_join master_join_abrkso
  join notes.note_view notes_note_lat_mxvvnt on master_join_abrkso.target_id = notes_note_lat_mxvvnt.id
  where master_join_abrkso.source_id = navaids_points.glidepath_ts.id
) as notes_note_view_hvaffw on TRUE
where navaids_points.glidepath.feature_status = 'APPROVED'
  and navaids_points.glidepath_ts.feature_status = 'APPROVED'
order by glidepath.identifier, glidepath_ts.sequence_number, glidepath_ts.correction_number DESC;
-- GroundTrafficControlServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.groundtrafficcontrolservice_view cascade;
create materialized view service.groundtrafficcontrolservice_view as
select distinct on (groundtrafficcontrolservice.identifier,groundtrafficcontrolservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.groundtrafficcontrolservice.id::integer as id,
    service.groundtrafficcontrolservice_ts.id::integer as ts_id,
    service.groundtrafficcontrolservice_tsp.id::integer as tsp_id,
    service.groundtrafficcontrolservice.identifier::uuid,
    service.groundtrafficcontrolservice_ts.interpretation::text,
    service.groundtrafficcontrolservice_ts.sequence_number::integer,
    service.groundtrafficcontrolservice_ts.correction_number::integer,
    service.groundtrafficcontrolservice_ts.valid_time_begin::timestamp,
    service.groundtrafficcontrolservice_ts.valid_time_end::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_begin::timestamp,
    service.groundtrafficcontrolservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.groundtrafficcontrolservice_ts.flightoperations_value as varchar), '(' || service.groundtrafficcontrolservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.groundtrafficcontrolservice_ts.rank_value as varchar), '(' || service.groundtrafficcontrolservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.groundtrafficcontrolservice_ts.complianticao_value as varchar), '(' || service.groundtrafficcontrolservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.groundtrafficcontrolservice_ts.name_value as varchar), '(' || service.groundtrafficcontrolservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.groundtrafficcontrolservice_ts.radarassisted_value as varchar), '(' || service.groundtrafficcontrolservice_ts.radarassisted_nilreason || ')')::text as radarassisted,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkenabled_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkenabled_nilreason || ')')::text as datalinkenabled,
    coalesce(cast(service.groundtrafficcontrolservice_ts.datalinkchannel_value as varchar), '(' || service.groundtrafficcontrolservice_ts.datalinkchannel_nilreason || ')')::text as datalinkchannel,
    coalesce(cast(service.groundtrafficcontrolservice_ts.type_value as varchar), '(' || service.groundtrafficcontrolservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_yfdatp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_yfdatp.longitude AS location_longitude,
    geometry_elevatedpoint_view_yfdatp.latitude AS location_latitude,
    geometry_elevatedpoint_view_yfdatp.elevation AS location_elevation,
    geometry_elevatedpoint_view_yfdatp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_yfdatp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_yfdatp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_yfdatp.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_pyyrje.title as varchar), '(' || organisation_unit_pt_pyyrje.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_pyyrje.href::text AS serviceprovider_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lzwwgx.title as varchar), '(' || airport_heliport_airportheliport_pt_lzwwgx.nilreason[1] || ')')::text AS clientairport,
    airport_heliport_airportheliport_pt_lzwwgx.href::text AS clientairport_href,
    service_callsigndetail_view_nxkmfx.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_fazzvf.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_gnnzou.availability::jsonb as availability,
    notes_note_view_eehxhp.annotation::jsonb as annotation
from service.groundtrafficcontrolservice 
inner join master_join mj2 on service.groundtrafficcontrolservice.id = mj2.source_id
inner join service.groundtrafficcontrolservice_tsp on mj2.target_id = service.groundtrafficcontrolservice_tsp.id
inner join service.groundtrafficcontrolservice_ts on service.groundtrafficcontrolservice_tsp.groundtrafficcontrolservicetimeslice_id = service.groundtrafficcontrolservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yfdatp on service.groundtrafficcontrolservice_ts.location_id = geometry_elevatedpoint_view_yfdatp.id
left join organisation.unit_pt organisation_unit_pt_pyyrje on service.groundtrafficcontrolservice_ts.serviceprovider_id = organisation_unit_pt_pyyrje.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lzwwgx on service.groundtrafficcontrolservice_ts.clientairport_id = airport_heliport_airportheliport_pt_lzwwgx.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_lokptu.*) as callsign
  from master_join master_join_dzacyr
  join service.callsigndetail_view service_callsigndetail_lat_lokptu on master_join_dzacyr.target_id = service_callsigndetail_lat_lokptu.id
  where master_join_dzacyr.source_id = service.groundtrafficcontrolservice_ts.id
) as service_callsigndetail_view_nxkmfx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_kywubp.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_kywubp.title AS varchar), '(' || service_radiocommunicationchannel_lat_kywubp.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_kywubp.href
  )) as radiocommunication  from master_join master_join_twwfcd
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_kywubp on master_join_twwfcd.target_id = service_radiocommunicationchannel_lat_kywubp.id
  where master_join_twwfcd.source_id = service.groundtrafficcontrolservice_ts.id
) as service_radiocommunicationchannel_pt_fazzvf on TRUE
left join lateral(
  select
  from master_join master_join_xpauqg
  join shared.contactinformation_view shared_contactinformation_lat_arllxc on master_join_xpauqg.target_id = shared_contactinformation_lat_arllxc.id
  where master_join_xpauqg.source_id = service.groundtrafficcontrolservice_ts.id
) as shared_contactinformation_view_hdabfm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_vbzkur.*) as availability
  from master_join master_join_qmjlly
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_vbzkur on master_join_qmjlly.target_id = service_serviceoperationalstatus_lat_vbzkur.id
  where master_join_qmjlly.source_id = service.groundtrafficcontrolservice_ts.id
) as service_serviceoperationalstatus_view_gnnzou on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_edickm.*) AS annotation
  from master_join master_join_zymguz
  join notes.note_view notes_note_lat_edickm on master_join_zymguz.target_id = notes_note_lat_edickm.id
  where master_join_zymguz.source_id = service.groundtrafficcontrolservice_ts.id
) as notes_note_view_eehxhp on TRUE
where service.groundtrafficcontrolservice.feature_status = 'APPROVED'
  and service.groundtrafficcontrolservice_ts.feature_status = 'APPROVED'
order by groundtrafficcontrolservice.identifier, groundtrafficcontrolservice_ts.sequence_number, groundtrafficcontrolservice_ts.correction_number DESC;
-- GuidanceLineLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.guidancelinelightsystem_view cascade;
create materialized view airport_heliport.guidancelinelightsystem_view as
select distinct on (guidancelinelightsystem.identifier,guidancelinelightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinelightsystem.id::integer as id,
    airport_heliport.guidancelinelightsystem_ts.id::integer as ts_id,
    airport_heliport.guidancelinelightsystem_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinelightsystem.identifier::uuid,
    airport_heliport.guidancelinelightsystem_ts.interpretation::text,
    airport_heliport.guidancelinelightsystem_ts.sequence_number::integer,
    airport_heliport.guidancelinelightsystem_ts.correction_number::integer,
    airport_heliport.guidancelinelightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinelightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.guidancelinelightsystem_ts.colour_value as varchar), '(' || airport_heliport.guidancelinelightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_guidanceline_pt_jnoluj.title as varchar), '(' || airport_heliport_guidanceline_pt_jnoluj.nilreason[1] || ')')::text AS lightedguidanceline,
    airport_heliport_guidanceline_pt_jnoluj.href::text AS lightedguidanceline_href,
    shared_lightelement_view_punujb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_wbqjtd.availability::jsonb as availability,
    notes_note_view_nqwadi.annotation::jsonb as annotation
from airport_heliport.guidancelinelightsystem 
inner join master_join mj2 on airport_heliport.guidancelinelightsystem.id = mj2.source_id
inner join airport_heliport.guidancelinelightsystem_tsp on mj2.target_id = airport_heliport.guidancelinelightsystem_tsp.id
inner join airport_heliport.guidancelinelightsystem_ts on airport_heliport.guidancelinelightsystem_tsp.guidancelinelightsystemtimeslice_id = airport_heliport.guidancelinelightsystem_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_jnoluj on airport_heliport.guidancelinelightsystem_ts.lightedguidanceline_id = airport_heliport_guidanceline_pt_jnoluj.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_yroizk.*) as element
  from master_join master_join_lyiork
  join shared.lightelement_view shared_lightelement_lat_yroizk on master_join_lyiork.target_id = shared_lightelement_lat_yroizk.id
  where master_join_lyiork.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as shared_lightelement_view_punujb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_ragxet.*) as availability
  from master_join master_join_swhele
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_ragxet on master_join_swhele.target_id = airport_heliport_groundlightingavailability_lat_ragxet.id
  where master_join_swhele.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_wbqjtd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ckxwzc.*) AS annotation
  from master_join master_join_ruicon
  join notes.note_view notes_note_lat_ckxwzc on master_join_ruicon.target_id = notes_note_lat_ckxwzc.id
  where master_join_ruicon.source_id = airport_heliport.guidancelinelightsystem_ts.id
) as notes_note_view_nqwadi on TRUE
where airport_heliport.guidancelinelightsystem.feature_status = 'APPROVED'
  and airport_heliport.guidancelinelightsystem_ts.feature_status = 'APPROVED'
order by guidancelinelightsystem.identifier, guidancelinelightsystem_ts.sequence_number, guidancelinelightsystem_ts.correction_number DESC;
-- GuidanceLineMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.guidancelinemarking_view cascade;
create materialized view airport_heliport.guidancelinemarking_view as
select distinct on (guidancelinemarking.identifier,guidancelinemarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidancelinemarking.id::integer as id,
    airport_heliport.guidancelinemarking_ts.id::integer as ts_id,
    airport_heliport.guidancelinemarking_tsp.id::integer as tsp_id,
    airport_heliport.guidancelinemarking.identifier::uuid,
    airport_heliport.guidancelinemarking_ts.interpretation::text,
    airport_heliport.guidancelinemarking_ts.sequence_number::integer,
    airport_heliport.guidancelinemarking_ts.correction_number::integer,
    airport_heliport.guidancelinemarking_ts.valid_time_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.valid_time_end::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidancelinemarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.guidancelinemarking_ts.condition_value as varchar), '(' || airport_heliport.guidancelinemarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_guidanceline_pt_iwbnkh.title as varchar), '(' || airport_heliport_guidanceline_pt_iwbnkh.nilreason[1] || ')')::text AS markedguidanceline,
    airport_heliport_guidanceline_pt_iwbnkh.href::text AS markedguidanceline_href,
    airport_heliport_markingelement_view_fdzeur.element::jsonb as element,
    notes_note_view_wcjoas.annotation::jsonb as annotation
from airport_heliport.guidancelinemarking 
inner join master_join mj2 on airport_heliport.guidancelinemarking.id = mj2.source_id
inner join airport_heliport.guidancelinemarking_tsp on mj2.target_id = airport_heliport.guidancelinemarking_tsp.id
inner join airport_heliport.guidancelinemarking_ts on airport_heliport.guidancelinemarking_tsp.guidancelinemarkingtimeslice_id = airport_heliport.guidancelinemarking_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_iwbnkh on airport_heliport.guidancelinemarking_ts.markedguidanceline_id = airport_heliport_guidanceline_pt_iwbnkh.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_csknzd.*) as element
  from master_join master_join_cffaay
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_csknzd on master_join_cffaay.target_id = airport_heliport_markingelement_lat_csknzd.id
  where master_join_cffaay.source_id = airport_heliport.guidancelinemarking_ts.id
) as airport_heliport_markingelement_view_fdzeur on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xeghxg.*) AS annotation
  from master_join master_join_ykrjcm
  join notes.note_view notes_note_lat_xeghxg on master_join_ykrjcm.target_id = notes_note_lat_xeghxg.id
  where master_join_ykrjcm.source_id = airport_heliport.guidancelinemarking_ts.id
) as notes_note_view_wcjoas on TRUE
where airport_heliport.guidancelinemarking.feature_status = 'APPROVED'
  and airport_heliport.guidancelinemarking_ts.feature_status = 'APPROVED'
order by guidancelinemarking.identifier, guidancelinemarking_ts.sequence_number, guidancelinemarking_ts.correction_number DESC;
-- GuidanceLineTimeSliceType
-- ['geometry.elevatedcurve_view', 'notes.note_view']
drop materialized view if exists airport_heliport.guidanceline_view cascade;
create materialized view airport_heliport.guidanceline_view as
select distinct on (guidanceline.identifier,guidanceline_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.guidanceline.id::integer as id,
    airport_heliport.guidanceline_ts.id::integer as ts_id,
    airport_heliport.guidanceline_tsp.id::integer as tsp_id,
    airport_heliport.guidanceline.identifier::uuid,
    airport_heliport.guidanceline_ts.interpretation::text,
    airport_heliport.guidanceline_ts.sequence_number::integer,
    airport_heliport.guidanceline_ts.correction_number::integer,
    airport_heliport.guidanceline_ts.valid_time_begin::timestamp,
    airport_heliport.guidanceline_ts.valid_time_end::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_begin::timestamp,
    airport_heliport.guidanceline_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.guidanceline_ts.designator_value as varchar), '(' || airport_heliport.guidanceline_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.guidanceline_ts.type_value as varchar), '(' || airport_heliport.guidanceline_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.guidanceline_ts.usagedirection_value as varchar), '(' || airport_heliport.guidanceline_ts.usagedirection_nilreason || ')')::text as usagedirection,
    coalesce(cast(airport_heliport.guidanceline_ts.maxspeed_value as varchar) || ' ' || airport_heliport.guidanceline_ts.maxspeed_uom, '(' || airport_heliport.guidanceline_ts.maxspeed_nilreason || ')')::text as maxspeed,
    geometry_elevatedcurve_view_cvvzsp.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_elevatedcurve_view_cvvzsp.elevation AS extent_elevation,
    geometry_elevatedcurve_view_cvvzsp.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedcurve_view_cvvzsp.verticalDatum AS extent_verticaldatum,
    geometry_elevatedcurve_view_cvvzsp.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedcurve_view_cvvzsp.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_hpwxug.connectedtouchdownliftoff::jsonb as connectedtouchdownliftoff,
    airport_heliport_runwaycentrelinepoint_pt_pbkxmv.connectedrunwaycentrelinepoint::jsonb as connectedrunwaycentrelinepoint,
    airport_heliport_apron_pt_dmjdgr.connectedapron::jsonb as connectedapron,
    airport_heliport_aircraftstand_pt_txmagb.connectedstand::jsonb as connectedstand,
    airport_heliport_taxiway_pt_inkfio.connectedtaxiway::jsonb as connectedtaxiway,
    notes_note_view_durzdd.annotation::jsonb as annotation
from airport_heliport.guidanceline 
inner join master_join mj2 on airport_heliport.guidanceline.id = mj2.source_id
inner join airport_heliport.guidanceline_tsp on mj2.target_id = airport_heliport.guidanceline_tsp.id
inner join airport_heliport.guidanceline_ts on airport_heliport.guidanceline_tsp.guidancelinetimeslice_id = airport_heliport.guidanceline_ts.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_cvvzsp on airport_heliport.guidanceline_ts.extent_id = geometry_elevatedcurve_view_cvvzsp.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_ajsexd.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_ajsexd.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_ajsexd.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_ajsexd.href
  )) as connectedtouchdownliftoff  from master_join master_join_evwacw
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_ajsexd on master_join_evwacw.target_id = airport_heliport_touchdownliftoff_lat_ajsexd.id
  where master_join_evwacw.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_touchdownliftoff_pt_hpwxug on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaycentrelinepoint_lat_qgkkhs.id,
      'title', coalesce(cast(airport_heliport_runwaycentrelinepoint_lat_qgkkhs.title AS varchar), '(' || airport_heliport_runwaycentrelinepoint_lat_qgkkhs.nilreason[1] || ')'),
      'href', airport_heliport_runwaycentrelinepoint_lat_qgkkhs.href
  )) as connectedrunwaycentrelinepoint  from master_join master_join_ppinqg
  join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_lat_qgkkhs on master_join_ppinqg.target_id = airport_heliport_runwaycentrelinepoint_lat_qgkkhs.id
  where master_join_ppinqg.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_runwaycentrelinepoint_pt_pbkxmv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_apron_lat_uiiotq.id,
      'title', coalesce(cast(airport_heliport_apron_lat_uiiotq.title AS varchar), '(' || airport_heliport_apron_lat_uiiotq.nilreason[1] || ')'),
      'href', airport_heliport_apron_lat_uiiotq.href
  )) as connectedapron  from master_join master_join_dfjgvt
  join airport_heliport.apron_pt airport_heliport_apron_lat_uiiotq on master_join_dfjgvt.target_id = airport_heliport_apron_lat_uiiotq.id
  where master_join_dfjgvt.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_apron_pt_dmjdgr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_jfgjld.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_jfgjld.title AS varchar), '(' || airport_heliport_aircraftstand_lat_jfgjld.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_jfgjld.href
  )) as connectedstand  from master_join master_join_tnormq
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_jfgjld on master_join_tnormq.target_id = airport_heliport_aircraftstand_lat_jfgjld.id
  where master_join_tnormq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_aircraftstand_pt_txmagb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_taxiway_lat_knotnc.id,
      'title', coalesce(cast(airport_heliport_taxiway_lat_knotnc.title AS varchar), '(' || airport_heliport_taxiway_lat_knotnc.nilreason[1] || ')'),
      'href', airport_heliport_taxiway_lat_knotnc.href
  )) as connectedtaxiway  from master_join master_join_zodmaq
  join airport_heliport.taxiway_pt airport_heliport_taxiway_lat_knotnc on master_join_zodmaq.target_id = airport_heliport_taxiway_lat_knotnc.id
  where master_join_zodmaq.source_id = airport_heliport.guidanceline_ts.id
) as airport_heliport_taxiway_pt_inkfio on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cbrffr.*) AS annotation
  from master_join master_join_jfnzsm
  join notes.note_view notes_note_lat_cbrffr on master_join_jfnzsm.target_id = notes_note_lat_cbrffr.id
  where master_join_jfnzsm.source_id = airport_heliport.guidanceline_ts.id
) as notes_note_view_durzdd on TRUE
where airport_heliport.guidanceline.feature_status = 'APPROVED'
  and airport_heliport.guidanceline_ts.feature_status = 'APPROVED'
order by guidanceline.identifier, guidanceline_ts.sequence_number, guidanceline_ts.correction_number DESC;
-- HoldingAssessmentTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view']
drop materialized view if exists shared.holdingassessment_view cascade;
create materialized view shared.holdingassessment_view as
select distinct on (holdingassessment.identifier,holdingassessment_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.holdingassessment.id::integer as id,
    shared.holdingassessment_ts.id::integer as ts_id,
    shared.holdingassessment_tsp.id::integer as tsp_id,
    shared.holdingassessment.identifier::uuid,
    shared.holdingassessment_ts.interpretation::text,
    shared.holdingassessment_ts.sequence_number::integer,
    shared.holdingassessment_ts.correction_number::integer,
    shared.holdingassessment_ts.valid_time_begin::timestamp,
    shared.holdingassessment_ts.valid_time_end::timestamp,
    shared.holdingassessment_ts.feature_lifetime_begin::timestamp,
    shared.holdingassessment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.holdingassessment_ts.upperlimitreference_value as varchar), '(' || shared.holdingassessment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(shared.holdingassessment_ts.lowerlimitreference_value as varchar), '(' || shared.holdingassessment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(shared.holdingassessment_ts.patterntemplate_value as varchar), '(' || shared.holdingassessment_ts.patterntemplate_nilreason || ')')::text as patterntemplate,
    coalesce(cast(shared.holdingassessment_ts.turbulentair_value as varchar), '(' || shared.holdingassessment_ts.turbulentair_nilreason || ')')::text as turbulentair,
    coalesce(cast(shared.holdingassessment_ts.upperlimit_value as varchar) || ' ' || shared.holdingassessment_ts.upperlimit_uom, '(' || shared.holdingassessment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(shared.holdingassessment_ts.lowerlimit_value as varchar) || ' ' || shared.holdingassessment_ts.lowerlimit_uom, '(' || shared.holdingassessment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(shared.holdingassessment_ts.speedlimit_value as varchar) || ' ' || shared.holdingassessment_ts.speedlimit_uom, '(' || shared.holdingassessment_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(shared.holdingassessment_ts.leglengthtoward_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthtoward_uom, '(' || shared.holdingassessment_ts.leglengthtoward_nilreason || ')')::text as leglengthtoward,
    coalesce(cast(shared.holdingassessment_ts.leglengthaway_value as varchar) || ' ' || shared.holdingassessment_ts.leglengthaway_uom, '(' || shared.holdingassessment_ts.leglengthaway_nilreason || ')')::text as leglengthaway,
    coalesce(cast(holding_unplannedholding_pt_mqqkeu.title as varchar), '(' || holding_unplannedholding_pt_mqqkeu.nilreason[1] || ')')::text AS unplannedholding,
    holding_unplannedholding_pt_mqqkeu.href::text AS unplannedholding_href,
    coalesce(cast(holding_holdingpattern_pt_jtntoh.title as varchar), '(' || holding_holdingpattern_pt_jtntoh.nilreason[1] || ')')::text AS assessedholdingpattern,
    holding_holdingpattern_pt_jtntoh.href::text AS assessedholdingpattern_href,
    shared_obstacleassessmentarea_view_dftdle.obstacleassessment::jsonb as obstacleassessment,
    notes_note_view_rxuojp.annotation::jsonb as annotation
from shared.holdingassessment 
inner join master_join mj2 on shared.holdingassessment.id = mj2.source_id
inner join shared.holdingassessment_tsp on mj2.target_id = shared.holdingassessment_tsp.id
inner join shared.holdingassessment_ts on shared.holdingassessment_tsp.holdingassessmenttimeslice_id = shared.holdingassessment_ts.id
left join holding.unplannedholding_pt holding_unplannedholding_pt_mqqkeu on shared.holdingassessment_ts.unplannedholding_id = holding_unplannedholding_pt_mqqkeu.id
left join holding.holdingpattern_pt holding_holdingpattern_pt_jtntoh on shared.holdingassessment_ts.assessedholdingpattern_id = holding_holdingpattern_pt_jtntoh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_hdggqw.*) as obstacleassessment
  from master_join master_join_sickza
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_hdggqw on master_join_sickza.target_id = shared_obstacleassessmentarea_lat_hdggqw.id
  where master_join_sickza.source_id = shared.holdingassessment_ts.id
) as shared_obstacleassessmentarea_view_dftdle on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bvagiu.*) AS annotation
  from master_join master_join_uhtkdr
  join notes.note_view notes_note_lat_bvagiu on master_join_uhtkdr.target_id = notes_note_lat_bvagiu.id
  where master_join_uhtkdr.source_id = shared.holdingassessment_ts.id
) as notes_note_view_rxuojp on TRUE
where shared.holdingassessment.feature_status = 'APPROVED'
  and shared.holdingassessment_ts.feature_status = 'APPROVED'
order by holdingassessment.identifier, holdingassessment_ts.sequence_number, holdingassessment_ts.correction_number DESC;
-- HoldingPatternTimeSliceType
-- ['holding.holdingpatterndistance_view', 'geometry.curve_view', 'notes.note_view', 'holding.holdingpatternduration_view']
drop materialized view if exists holding.holdingpattern_view cascade;
create materialized view holding.holdingpattern_view as
select distinct on (holdingpattern.identifier,holdingpattern_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.holdingpattern.id::integer as id,
    holding.holdingpattern_ts.id::integer as ts_id,
    holding.holdingpattern_tsp.id::integer as tsp_id,
    holding.holdingpattern.identifier::uuid,
    holding.holdingpattern_ts.interpretation::text,
    holding.holdingpattern_ts.sequence_number::integer,
    holding.holdingpattern_ts.correction_number::integer,
    holding.holdingpattern_ts.valid_time_begin::timestamp,
    holding.holdingpattern_ts.valid_time_end::timestamp,
    holding.holdingpattern_ts.feature_lifetime_begin::timestamp,
    holding.holdingpattern_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.holdingpattern_ts.type_value as varchar), '(' || holding.holdingpattern_ts.type_nilreason || ')')::text as type,
    coalesce(cast(holding.holdingpattern_ts.outboundcourse_value as varchar), '(' || holding.holdingpattern_ts.outboundcourse_nilreason || ')')::text as outboundcourse,
    coalesce(cast(holding.holdingpattern_ts.outboundcoursetype_value as varchar), '(' || holding.holdingpattern_ts.outboundcoursetype_nilreason || ')')::text as outboundcoursetype,
    coalesce(cast(holding.holdingpattern_ts.inboundcourse_value as varchar), '(' || holding.holdingpattern_ts.inboundcourse_nilreason || ')')::text as inboundcourse,
    coalesce(cast(holding.holdingpattern_ts.turndirection_value as varchar), '(' || holding.holdingpattern_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(holding.holdingpattern_ts.upperlimitreference_value as varchar), '(' || holding.holdingpattern_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(holding.holdingpattern_ts.lowerlimitreference_value as varchar), '(' || holding.holdingpattern_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(holding.holdingpattern_ts.instruction_value as varchar), '(' || holding.holdingpattern_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(holding.holdingpattern_ts.nonstandardholding_value as varchar), '(' || holding.holdingpattern_ts.nonstandardholding_nilreason || ')')::text as nonstandardholding,
    coalesce(cast(holding.holdingpattern_ts.upperlimit_value as varchar) || ' ' || holding.holdingpattern_ts.upperlimit_uom, '(' || holding.holdingpattern_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(holding.holdingpattern_ts.lowerlimit_value as varchar) || ' ' || holding.holdingpattern_ts.lowerlimit_uom, '(' || holding.holdingpattern_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(holding.holdingpattern_ts.speedlimit_value as varchar) || ' ' || holding.holdingpattern_ts.speedlimit_uom, '(' || holding.holdingpattern_ts.speedlimit_nilreason || ')')::text as speedlimit,
    to_jsonb(holding_holdingpatternduration_view_jmpeek.*)::jsonb AS outboundlegspanendtime,
    to_jsonb(holding_holdingpatterndistance_view_guevxk.*)::jsonb AS outboundlegspanenddistance,
    geometry_curve_view_kaecon.geom::geometry(LINESTRING, 4326) AS extent_geom,
    geometry_curve_view_kaecon.horizontalAccuracy as extent_horizontalaccuracy,
    notes_note_view_fialss.annotation::jsonb as annotation
from holding.holdingpattern 
inner join master_join mj2 on holding.holdingpattern.id = mj2.source_id
inner join holding.holdingpattern_tsp on mj2.target_id = holding.holdingpattern_tsp.id
inner join holding.holdingpattern_ts on holding.holdingpattern_tsp.holdingpatterntimeslice_id = holding.holdingpattern_ts.id
left join holding.holdingpatternduration_view holding_holdingpatternduration_view_jmpeek on holding.holdingpattern_ts.outboundlegspan_endtime_id = holding_holdingpatternduration_view_jmpeek.id
left join holding.holdingpatterndistance_view holding_holdingpatterndistance_view_guevxk on holding.holdingpattern_ts.outboundlegspan_enddistance_id = holding_holdingpatterndistance_view_guevxk.id
left join geometry.curve_view geometry_curve_view_kaecon on holding.holdingpattern_ts.extent_id = geometry_curve_view_kaecon.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fudtgu.*) AS annotation
  from master_join master_join_gjrdfd
  join notes.note_view notes_note_lat_fudtgu on master_join_gjrdfd.target_id = notes_note_lat_fudtgu.id
  where master_join_gjrdfd.source_id = holding.holdingpattern_ts.id
) as notes_note_view_fialss on TRUE
where holding.holdingpattern.feature_status = 'APPROVED'
  and holding.holdingpattern_ts.feature_status = 'APPROVED'
order by holdingpattern.identifier, holdingpattern_ts.sequence_number, holdingpattern_ts.correction_number DESC;
-- InformationServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists service.informationservice_view cascade;
create materialized view service.informationservice_view as
select distinct on (informationservice.identifier,informationservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.informationservice.id::integer as id,
    service.informationservice_ts.id::integer as ts_id,
    service.informationservice_tsp.id::integer as tsp_id,
    service.informationservice.identifier::uuid,
    service.informationservice_ts.interpretation::text,
    service.informationservice_ts.sequence_number::integer,
    service.informationservice_ts.correction_number::integer,
    service.informationservice_ts.valid_time_begin::timestamp,
    service.informationservice_ts.valid_time_end::timestamp,
    service.informationservice_ts.feature_lifetime_begin::timestamp,
    service.informationservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.informationservice_ts.flightoperations_value as varchar), '(' || service.informationservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.informationservice_ts.rank_value as varchar), '(' || service.informationservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.informationservice_ts.complianticao_value as varchar), '(' || service.informationservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.informationservice_ts.name_value as varchar), '(' || service.informationservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.informationservice_ts.type_value as varchar), '(' || service.informationservice_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.informationservice_ts.voice_value as varchar), '(' || service.informationservice_ts.voice_nilreason || ')')::text as voice,
    coalesce(cast(service.informationservice_ts.datalink_value as varchar), '(' || service.informationservice_ts.datalink_nilreason || ')')::text as datalink,
    coalesce(cast(service.informationservice_ts.recorded_value as varchar), '(' || service.informationservice_ts.recorded_nilreason || ')')::text as recorded,
    geometry_elevatedpoint_view_pmufpz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_pmufpz.longitude AS location_longitude,
    geometry_elevatedpoint_view_pmufpz.latitude AS location_latitude,
    geometry_elevatedpoint_view_pmufpz.elevation AS location_elevation,
    geometry_elevatedpoint_view_pmufpz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_pmufpz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_pmufpz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_pmufpz.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_cxxhvi.title as varchar), '(' || organisation_unit_pt_cxxhvi.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_cxxhvi.href::text AS serviceprovider_href,
    service_callsigndetail_view_oswksa.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_ytgrdg.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_whteku.availability::jsonb as availability,
    notes_note_view_tqvdwj.annotation::jsonb as annotation,
    navaids_points_vor_pt_zkpyqu.navaidbroadcast::jsonb as navaidbroadcast,
    airspace_airspace_pt_njbhgi.clientairspace::jsonb as clientairspace,
    airport_heliport_airportheliport_pt_qdtdic.clientairport::jsonb as clientairport,
    routes_routeportion_view_hqfjwt.clientroute::jsonb as clientroute,
    holding_holdingpattern_pt_bvfwzh.clientholding::jsonb as clientholding,
    aerial_refuelling_aerialrefuelling_pt_umxxpc.clientaerialrefuelling::jsonb as clientaerialrefuelling
from service.informationservice 
inner join master_join mj2 on service.informationservice.id = mj2.source_id
inner join service.informationservice_tsp on mj2.target_id = service.informationservice_tsp.id
inner join service.informationservice_ts on service.informationservice_tsp.informationservicetimeslice_id = service.informationservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pmufpz on service.informationservice_ts.location_id = geometry_elevatedpoint_view_pmufpz.id
left join organisation.unit_pt organisation_unit_pt_cxxhvi on service.informationservice_ts.serviceprovider_id = organisation_unit_pt_cxxhvi.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_fvurtn.*) as callsign
  from master_join master_join_otgdea
  join service.callsigndetail_view service_callsigndetail_lat_fvurtn on master_join_otgdea.target_id = service_callsigndetail_lat_fvurtn.id
  where master_join_otgdea.source_id = service.informationservice_ts.id
) as service_callsigndetail_view_oswksa on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_qxxmdy.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_qxxmdy.title AS varchar), '(' || service_radiocommunicationchannel_lat_qxxmdy.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_qxxmdy.href
  )) as radiocommunication  from master_join master_join_zwvimr
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_qxxmdy on master_join_zwvimr.target_id = service_radiocommunicationchannel_lat_qxxmdy.id
  where master_join_zwvimr.source_id = service.informationservice_ts.id
) as service_radiocommunicationchannel_pt_ytgrdg on TRUE
left join lateral(
  select
  from master_join master_join_xbrmqu
  join shared.contactinformation_view shared_contactinformation_lat_lujvbz on master_join_xbrmqu.target_id = shared_contactinformation_lat_lujvbz.id
  where master_join_xbrmqu.source_id = service.informationservice_ts.id
) as shared_contactinformation_view_esbqkx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_xrvymo.*) as availability
  from master_join master_join_nxamcs
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_xrvymo on master_join_nxamcs.target_id = service_serviceoperationalstatus_lat_xrvymo.id
  where master_join_nxamcs.source_id = service.informationservice_ts.id
) as service_serviceoperationalstatus_view_whteku on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_yofwvc.*) AS annotation
  from master_join master_join_ownjyy
  join notes.note_view notes_note_lat_yofwvc on master_join_ownjyy.target_id = notes_note_lat_yofwvc.id
  where master_join_ownjyy.source_id = service.informationservice_ts.id
) as notes_note_view_tqvdwj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_vor_lat_mzebmk.id,
      'title', coalesce(cast(navaids_points_vor_lat_mzebmk.title AS varchar), '(' || navaids_points_vor_lat_mzebmk.nilreason[1] || ')'),
      'href', navaids_points_vor_lat_mzebmk.href
  )) as navaidbroadcast  from master_join master_join_cmxrjq
  join navaids_points.vor_pt navaids_points_vor_lat_mzebmk on master_join_cmxrjq.target_id = navaids_points_vor_lat_mzebmk.id
  where master_join_cmxrjq.source_id = service.informationservice_ts.id
) as navaids_points_vor_pt_zkpyqu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_tzrhhv.id,
      'title', coalesce(cast(airspace_airspace_lat_tzrhhv.title AS varchar), '(' || airspace_airspace_lat_tzrhhv.nilreason[1] || ')'),
      'href', airspace_airspace_lat_tzrhhv.href
  )) as clientairspace  from master_join master_join_qwqzew
  join airspace.airspace_pt airspace_airspace_lat_tzrhhv on master_join_qwqzew.target_id = airspace_airspace_lat_tzrhhv.id
  where master_join_qwqzew.source_id = service.informationservice_ts.id
) as airspace_airspace_pt_njbhgi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_dpaact.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_dpaact.title AS varchar), '(' || airport_heliport_airportheliport_lat_dpaact.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_dpaact.href
  )) as clientairport  from master_join master_join_gfgqoh
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_dpaact on master_join_gfgqoh.target_id = airport_heliport_airportheliport_lat_dpaact.id
  where master_join_gfgqoh.source_id = service.informationservice_ts.id
) as airport_heliport_airportheliport_pt_qdtdic on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_dapucg.*) as clientroute
  from master_join master_join_uvdzzh
  join routes.routeportion_view routes_routeportion_lat_dapucg on master_join_uvdzzh.target_id = routes_routeportion_lat_dapucg.id
  where master_join_uvdzzh.source_id = service.informationservice_ts.id
) as routes_routeportion_view_hqfjwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', holding_holdingpattern_lat_tlhfhr.id,
      'title', coalesce(cast(holding_holdingpattern_lat_tlhfhr.title AS varchar), '(' || holding_holdingpattern_lat_tlhfhr.nilreason[1] || ')'),
      'href', holding_holdingpattern_lat_tlhfhr.href
  )) as clientholding  from master_join master_join_pkwyep
  join holding.holdingpattern_pt holding_holdingpattern_lat_tlhfhr on master_join_pkwyep.target_id = holding_holdingpattern_lat_tlhfhr.id
  where master_join_pkwyep.source_id = service.informationservice_ts.id
) as holding_holdingpattern_pt_bvfwzh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', aerial_refuelling_aerialrefuelling_lat_aanujq.id,
      'title', coalesce(cast(aerial_refuelling_aerialrefuelling_lat_aanujq.title AS varchar), '(' || aerial_refuelling_aerialrefuelling_lat_aanujq.nilreason[1] || ')'),
      'href', aerial_refuelling_aerialrefuelling_lat_aanujq.href
  )) as clientaerialrefuelling  from master_join master_join_ogrxzx
  join aerial_refuelling.aerialrefuelling_pt aerial_refuelling_aerialrefuelling_lat_aanujq on master_join_ogrxzx.target_id = aerial_refuelling_aerialrefuelling_lat_aanujq.id
  where master_join_ogrxzx.source_id = service.informationservice_ts.id
) as aerial_refuelling_aerialrefuelling_pt_umxxpc on TRUE
where service.informationservice.feature_status = 'APPROVED'
  and service.informationservice_ts.feature_status = 'APPROVED'
order by informationservice.identifier, informationservice_ts.sequence_number, informationservice_ts.correction_number DESC;
-- InitialLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.initialleg_view cascade;
create materialized view procedure.initialleg_view as
select distinct on (initialleg.identifier,initialleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.initialleg.id::integer as id,
    procedure.initialleg_ts.id::integer as ts_id,
    procedure.initialleg_tsp.id::integer as tsp_id,
    procedure.initialleg.identifier::uuid,
    procedure.initialleg_ts.interpretation::text,
    procedure.initialleg_ts.sequence_number::integer,
    procedure.initialleg_ts.correction_number::integer,
    procedure.initialleg_ts.valid_time_begin::timestamp,
    procedure.initialleg_ts.valid_time_end::timestamp,
    procedure.initialleg_ts.feature_lifetime_begin::timestamp,
    procedure.initialleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.initialleg_ts.endconditiondesignator_value as varchar), '(' || procedure.initialleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.initialleg_ts.legpath_value as varchar), '(' || procedure.initialleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.initialleg_ts.legtypearinc_value as varchar), '(' || procedure.initialleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.initialleg_ts.course_value as varchar), '(' || procedure.initialleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.initialleg_ts.coursetype_value as varchar), '(' || procedure.initialleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.initialleg_ts.coursedirection_value as varchar), '(' || procedure.initialleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.initialleg_ts.turndirection_value as varchar), '(' || procedure.initialleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.initialleg_ts.speedreference_value as varchar), '(' || procedure.initialleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.initialleg_ts.speedinterpretation_value as varchar), '(' || procedure.initialleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.initialleg_ts.bankangle_value as varchar), '(' || procedure.initialleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.initialleg_ts.procedureturnrequired_value as varchar), '(' || procedure.initialleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.initialleg_ts.upperlimitreference_value as varchar), '(' || procedure.initialleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.initialleg_ts.lowerlimitreference_value as varchar), '(' || procedure.initialleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.initialleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.initialleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.initialleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.initialleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.initialleg_ts.verticalangle_value as varchar), '(' || procedure.initialleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.initialleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.initialleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.initialleg_ts.speedlimit_value as varchar) || ' ' || procedure.initialleg_ts.speedlimit_uom, '(' || procedure.initialleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.initialleg_ts.length_value as varchar) || ' ' || procedure.initialleg_ts.length_uom, '(' || procedure.initialleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.initialleg_ts.duration_value as varchar) || ' ' || procedure.initialleg_ts.duration_uom, '(' || procedure.initialleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.initialleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.upperlimitaltitude_uom, '(' || procedure.initialleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.initialleg_ts.lowerlimitaltitude_uom, '(' || procedure.initialleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.initialleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.initialleg_ts.altitudeoverrideatc_uom, '(' || procedure.initialleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_fxwsxe.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dpsfcp.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_zbeyhg.*)::jsonb AS arccentre,
    geometry_curve_view_uzvvgu.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_uzvvgu.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_msahfr.title as varchar), '(' || navaids_points_angleindication_pt_msahfr.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_msahfr.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_alnaox.title as varchar), '(' || navaids_points_distanceindication_pt_alnaox.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_alnaox.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_oobgmy.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_mifphs.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_mifphs.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_mifphs.href::text AS approach_href,
    shared_aircraftcharacteristic_view_nxwzsq.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_vexpzf.designsurface::jsonb as designsurface,
    notes_note_view_gojadv.annotation::jsonb as annotation
from procedure.initialleg 
inner join master_join mj2 on procedure.initialleg.id = mj2.source_id
inner join procedure.initialleg_tsp on mj2.target_id = procedure.initialleg_tsp.id
inner join procedure.initialleg_ts on procedure.initialleg_tsp.initiallegtimeslice_id = procedure.initialleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_fxwsxe on procedure.initialleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_fxwsxe.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dpsfcp on procedure.initialleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_dpsfcp.id
left join geometry.curve_view geometry_curve_view_uzvvgu on procedure.initialleg_ts.trajectory_id = geometry_curve_view_uzvvgu.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_zbeyhg on procedure.initialleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_zbeyhg.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_msahfr on procedure.initialleg_ts.angle_id = navaids_points_angleindication_pt_msahfr.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_alnaox on procedure.initialleg_ts.distance_id = navaids_points_distanceindication_pt_alnaox.id
left join procedure.holdinguse_view procedure_holdinguse_view_oobgmy on procedure.initialleg_ts.holding_id = procedure_holdinguse_view_oobgmy.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_mifphs on procedure.initialleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_mifphs.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qtlgpf.*) as aircraftcategory
  from master_join master_join_hgffim
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qtlgpf on master_join_hgffim.target_id = shared_aircraftcharacteristic_lat_qtlgpf.id
  where master_join_hgffim.source_id = procedure.initialleg_ts.id
) as shared_aircraftcharacteristic_view_nxwzsq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_tjfdaz.*) as designsurface
  from master_join master_join_amqnga
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_tjfdaz on master_join_amqnga.target_id = shared_obstacleassessmentarea_lat_tjfdaz.id
  where master_join_amqnga.source_id = procedure.initialleg_ts.id
) as shared_obstacleassessmentarea_view_vexpzf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lvleza.*) AS annotation
  from master_join master_join_pmosyb
  join notes.note_view notes_note_lat_lvleza on master_join_pmosyb.target_id = notes_note_lat_lvleza.id
  where master_join_pmosyb.source_id = procedure.initialleg_ts.id
) as notes_note_view_gojadv on TRUE
where procedure.initialleg.feature_status = 'APPROVED'
  and procedure.initialleg_ts.feature_status = 'APPROVED'
order by initialleg.identifier, initialleg_ts.sequence_number, initialleg_ts.correction_number DESC;
-- InstrumentApproachProcedureTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'notes.note_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view', 'procedure.finalprofile_view', 'procedure.missedapproachgroup_view']
drop materialized view if exists procedure.instrumentapproachprocedure_view cascade;
create materialized view procedure.instrumentapproachprocedure_view as
select distinct on (instrumentapproachprocedure.identifier,instrumentapproachprocedure_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.instrumentapproachprocedure.id::integer as id,
    procedure.instrumentapproachprocedure_ts.id::integer as ts_id,
    procedure.instrumentapproachprocedure_tsp.id::integer as tsp_id,
    procedure.instrumentapproachprocedure.identifier::uuid,
    procedure.instrumentapproachprocedure_ts.interpretation::text,
    procedure.instrumentapproachprocedure_ts.sequence_number::integer,
    procedure.instrumentapproachprocedure_ts.correction_number::integer,
    procedure.instrumentapproachprocedure_ts.valid_time_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.valid_time_end::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_begin::timestamp,
    procedure.instrumentapproachprocedure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.instruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.designcriteria_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.codingstandard_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.flightchecked_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.name_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.rnav_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachprefix_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachprefix_nilreason || ')')::text as approachprefix,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.approachtype_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.approachtype_nilreason || ')')::text as approachtype,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.multipleidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.multipleidentification_nilreason || ')')::text as multipleidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coptertrack_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coptertrack_nilreason || ')')::text as coptertrack,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.circlingidentification_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.circlingidentification_nilreason || ')')::text as circlingidentification,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.coursereversalinstruction_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.coursereversalinstruction_nilreason || ')')::text as coursereversalinstruction,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.additionalequipment_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.additionalequipment_nilreason || ')')::text as additionalequipment,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.channelgnss_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.channelgnss_nilreason || ')')::text as channelgnss,
    coalesce(cast(procedure.instrumentapproachprocedure_ts.waasreliable_value as varchar), '(' || procedure.instrumentapproachprocedure_ts.waasreliable_nilreason || ')')::text as waasreliable,
    coalesce(cast(navaids_points_navaid_pt_jllteg.title as varchar), '(' || navaids_points_navaid_pt_jllteg.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_jllteg.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_ylukrf.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_ylukrf.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_ylukrf.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ecloxz.title as varchar), '(' || surveillance_radarsystem_pt_ecloxz.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_ecloxz.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_gollsa.title as varchar), '(' || procedure_safealtitudearea_pt_gollsa.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_gollsa.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_ptfeyl.*)::jsonb AS landing,
    to_jsonb(procedure_finalprofile_view_uksiia.*)::jsonb AS finalprofile,
    procedure_procedureavailability_view_kvpixi.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_plruoo.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_wljcqk.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_jbdxvb.flighttransition::jsonb as flighttransition,
    notes_note_view_qdlkou.annotation::jsonb as annotation,
    procedure_missedapproachgroup_view_zskvpt.missedinstruction::jsonb as missedinstruction
from procedure.instrumentapproachprocedure 
inner join master_join mj2 on procedure.instrumentapproachprocedure.id = mj2.source_id
inner join procedure.instrumentapproachprocedure_tsp on mj2.target_id = procedure.instrumentapproachprocedure_tsp.id
inner join procedure.instrumentapproachprocedure_ts on procedure.instrumentapproachprocedure_tsp.instrumentapproachproceduretimeslice_id = procedure.instrumentapproachprocedure_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jllteg on procedure.instrumentapproachprocedure_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_jllteg.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_ylukrf on procedure.instrumentapproachprocedure_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_ylukrf.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ecloxz on procedure.instrumentapproachprocedure_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ecloxz.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_gollsa on procedure.instrumentapproachprocedure_ts.safealtitude_id = procedure_safealtitudearea_pt_gollsa.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_ptfeyl on procedure.instrumentapproachprocedure_ts.landing_id = procedure_landingtakeoffareacollection_view_ptfeyl.id
left join procedure.finalprofile_view procedure_finalprofile_view_uksiia on procedure.instrumentapproachprocedure_ts.finalprofile_id = procedure_finalprofile_view_uksiia.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_sjtqyu.*) as availability
  from master_join master_join_iqopih
  join procedure.procedureavailability_view procedure_procedureavailability_lat_sjtqyu on master_join_iqopih.target_id = procedure_procedureavailability_lat_sjtqyu.id
  where master_join_iqopih.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_procedureavailability_view_kvpixi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_oywsqv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_oywsqv.title AS varchar), '(' || airport_heliport_airportheliport_lat_oywsqv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_oywsqv.href
  )) as airportheliport  from master_join master_join_rlbvoy
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_oywsqv on master_join_rlbvoy.target_id = airport_heliport_airportheliport_lat_oywsqv.id
  where master_join_rlbvoy.source_id = procedure.instrumentapproachprocedure_ts.id
) as airport_heliport_airportheliport_pt_plruoo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_irbwmk.*) as aircraftcharacteristic
  from master_join master_join_znjgec
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_irbwmk on master_join_znjgec.target_id = shared_aircraftcharacteristic_lat_irbwmk.id
  where master_join_znjgec.source_id = procedure.instrumentapproachprocedure_ts.id
) as shared_aircraftcharacteristic_view_wljcqk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_fejywx.*) as flighttransition
  from master_join master_join_vsswmv
  join procedure.proceduretransition_view procedure_proceduretransition_lat_fejywx on master_join_vsswmv.target_id = procedure_proceduretransition_lat_fejywx.id
  where master_join_vsswmv.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_proceduretransition_view_jbdxvb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_lnhlrl.*) AS annotation
  from master_join master_join_mmijok
  join notes.note_view notes_note_lat_lnhlrl on master_join_mmijok.target_id = notes_note_lat_lnhlrl.id
  where master_join_mmijok.source_id = procedure.instrumentapproachprocedure_ts.id
) as notes_note_view_qdlkou on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_missedapproachgroup_lat_kcwkbw.*) as missedinstruction
  from master_join master_join_yeccpm
  join procedure.missedapproachgroup_view procedure_missedapproachgroup_lat_kcwkbw on master_join_yeccpm.target_id = procedure_missedapproachgroup_lat_kcwkbw.id
  where master_join_yeccpm.source_id = procedure.instrumentapproachprocedure_ts.id
) as procedure_missedapproachgroup_view_zskvpt on TRUE
where procedure.instrumentapproachprocedure.feature_status = 'APPROVED'
  and procedure.instrumentapproachprocedure_ts.feature_status = 'APPROVED'
order by instrumentapproachprocedure.identifier, instrumentapproachprocedure_ts.sequence_number, instrumentapproachprocedure_ts.correction_number DESC;
-- IntermediateLegTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.intermediateleg_view cascade;
create materialized view procedure.intermediateleg_view as
select distinct on (intermediateleg.identifier,intermediateleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.intermediateleg.id::integer as id,
    procedure.intermediateleg_ts.id::integer as ts_id,
    procedure.intermediateleg_tsp.id::integer as tsp_id,
    procedure.intermediateleg.identifier::uuid,
    procedure.intermediateleg_ts.interpretation::text,
    procedure.intermediateleg_ts.sequence_number::integer,
    procedure.intermediateleg_ts.correction_number::integer,
    procedure.intermediateleg_ts.valid_time_begin::timestamp,
    procedure.intermediateleg_ts.valid_time_end::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_begin::timestamp,
    procedure.intermediateleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.intermediateleg_ts.endconditiondesignator_value as varchar), '(' || procedure.intermediateleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.intermediateleg_ts.legpath_value as varchar), '(' || procedure.intermediateleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.intermediateleg_ts.legtypearinc_value as varchar), '(' || procedure.intermediateleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.intermediateleg_ts.course_value as varchar), '(' || procedure.intermediateleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.intermediateleg_ts.coursetype_value as varchar), '(' || procedure.intermediateleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.intermediateleg_ts.coursedirection_value as varchar), '(' || procedure.intermediateleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.intermediateleg_ts.turndirection_value as varchar), '(' || procedure.intermediateleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.intermediateleg_ts.speedreference_value as varchar), '(' || procedure.intermediateleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.intermediateleg_ts.speedinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.bankangle_value as varchar), '(' || procedure.intermediateleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.intermediateleg_ts.procedureturnrequired_value as varchar), '(' || procedure.intermediateleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitreference_value as varchar), '(' || procedure.intermediateleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.intermediateleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.intermediateleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.intermediateleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.intermediateleg_ts.verticalangle_value as varchar), '(' || procedure.intermediateleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.intermediateleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.intermediateleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.intermediateleg_ts.speedlimit_value as varchar) || ' ' || procedure.intermediateleg_ts.speedlimit_uom, '(' || procedure.intermediateleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.intermediateleg_ts.length_value as varchar) || ' ' || procedure.intermediateleg_ts.length_uom, '(' || procedure.intermediateleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.intermediateleg_ts.duration_value as varchar) || ' ' || procedure.intermediateleg_ts.duration_uom, '(' || procedure.intermediateleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.intermediateleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.upperlimitaltitude_uom, '(' || procedure.intermediateleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.intermediateleg_ts.lowerlimitaltitude_uom, '(' || procedure.intermediateleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.intermediateleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.intermediateleg_ts.altitudeoverrideatc_uom, '(' || procedure.intermediateleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    to_jsonb(navaids_points_terminalsegmentpoint_view_vhkpmo.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_wnllau.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_jqyqty.*)::jsonb AS arccentre,
    geometry_curve_view_qncrch.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_qncrch.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_zwnudn.title as varchar), '(' || navaids_points_angleindication_pt_zwnudn.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_zwnudn.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_exxhbf.title as varchar), '(' || navaids_points_distanceindication_pt_exxhbf.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_exxhbf.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_valivx.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_pdfljk.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_pdfljk.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_pdfljk.href::text AS approach_href,
    shared_aircraftcharacteristic_view_vbekxy.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_taiadn.designsurface::jsonb as designsurface,
    notes_note_view_etwmpo.annotation::jsonb as annotation
from procedure.intermediateleg 
inner join master_join mj2 on procedure.intermediateleg.id = mj2.source_id
inner join procedure.intermediateleg_tsp on mj2.target_id = procedure.intermediateleg_tsp.id
inner join procedure.intermediateleg_ts on procedure.intermediateleg_tsp.intermediatelegtimeslice_id = procedure.intermediateleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_vhkpmo on procedure.intermediateleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_vhkpmo.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_wnllau on procedure.intermediateleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_wnllau.id
left join geometry.curve_view geometry_curve_view_qncrch on procedure.intermediateleg_ts.trajectory_id = geometry_curve_view_qncrch.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_jqyqty on procedure.intermediateleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_jqyqty.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_zwnudn on procedure.intermediateleg_ts.angle_id = navaids_points_angleindication_pt_zwnudn.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_exxhbf on procedure.intermediateleg_ts.distance_id = navaids_points_distanceindication_pt_exxhbf.id
left join procedure.holdinguse_view procedure_holdinguse_view_valivx on procedure.intermediateleg_ts.holding_id = procedure_holdinguse_view_valivx.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_pdfljk on procedure.intermediateleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_pdfljk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_ekgjpc.*) as aircraftcategory
  from master_join master_join_ennqld
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_ekgjpc on master_join_ennqld.target_id = shared_aircraftcharacteristic_lat_ekgjpc.id
  where master_join_ennqld.source_id = procedure.intermediateleg_ts.id
) as shared_aircraftcharacteristic_view_vbekxy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_pdzbxj.*) as designsurface
  from master_join master_join_dlffzi
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_pdzbxj on master_join_dlffzi.target_id = shared_obstacleassessmentarea_lat_pdzbxj.id
  where master_join_dlffzi.source_id = procedure.intermediateleg_ts.id
) as shared_obstacleassessmentarea_view_taiadn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ksvjyg.*) AS annotation
  from master_join master_join_zkyyse
  join notes.note_view notes_note_lat_ksvjyg on master_join_zkyyse.target_id = notes_note_lat_ksvjyg.id
  where master_join_zkyyse.source_id = procedure.intermediateleg_ts.id
) as notes_note_view_etwmpo on TRUE
where procedure.intermediateleg.feature_status = 'APPROVED'
  and procedure.intermediateleg_ts.feature_status = 'APPROVED'
order by intermediateleg.identifier, intermediateleg_ts.sequence_number, intermediateleg_ts.correction_number DESC;
-- LocalizerTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.localizer_view cascade;
create materialized view navaids_points.localizer_view as
select distinct on (localizer.identifier,localizer_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.localizer.id::integer as id,
    navaids_points.localizer_ts.id::integer as ts_id,
    navaids_points.localizer_tsp.id::integer as tsp_id,
    navaids_points.localizer.identifier::uuid,
    navaids_points.localizer_ts.interpretation::text,
    navaids_points.localizer_ts.sequence_number::integer,
    navaids_points.localizer_ts.correction_number::integer,
    navaids_points.localizer_ts.valid_time_begin::timestamp,
    navaids_points.localizer_ts.valid_time_end::timestamp,
    navaids_points.localizer_ts.feature_lifetime_begin::timestamp,
    navaids_points.localizer_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.localizer_ts.designator_value as varchar), '(' || navaids_points.localizer_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.localizer_ts.name_value as varchar), '(' || navaids_points.localizer_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.localizer_ts.emissionclass_value as varchar), '(' || navaids_points.localizer_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.localizer_ts.mobile_value as varchar), '(' || navaids_points.localizer_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.localizer_ts.magneticvariation_value as varchar), '(' || navaids_points.localizer_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.localizer_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.localizer_ts.datemagneticvariation_value as varchar), '(' || navaids_points.localizer_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.localizer_ts.flightchecked_value as varchar), '(' || navaids_points.localizer_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.localizer_ts.magneticbearing_value as varchar), '(' || navaids_points.localizer_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.localizer_ts.magneticbearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.magneticbearingaccuracy_nilreason || ')')::text as magneticbearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.truebearing_value as varchar), '(' || navaids_points.localizer_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.localizer_ts.truebearingaccuracy_value as varchar), '(' || navaids_points.localizer_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(navaids_points.localizer_ts.declination_value as varchar), '(' || navaids_points.localizer_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.localizer_ts.widthcourse_value as varchar), '(' || navaids_points.localizer_ts.widthcourse_nilreason || ')')::text as widthcourse,
    coalesce(cast(navaids_points.localizer_ts.widthcourseaccuracy_value as varchar), '(' || navaids_points.localizer_ts.widthcourseaccuracy_nilreason || ')')::text as widthcourseaccuracy,
    coalesce(cast(navaids_points.localizer_ts.backcourseusable_value as varchar), '(' || navaids_points.localizer_ts.backcourseusable_nilreason || ')')::text as backcourseusable,
    coalesce(cast(navaids_points.localizer_ts.frequency_value as varchar) || ' ' || navaids_points.localizer_ts.frequency_uom, '(' || navaids_points.localizer_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_fmzqmi.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_fmzqmi.longitude AS location_longitude,
    geometry_elevatedpoint_view_fmzqmi.latitude AS location_latitude,
    geometry_elevatedpoint_view_fmzqmi.elevation AS location_elevation,
    geometry_elevatedpoint_view_fmzqmi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_fmzqmi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_fmzqmi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_fmzqmi.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_qgxfcf.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_kkpbsq.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_gharpx.availability::jsonb as availability,
    notes_note_view_rbhsiu.annotation::jsonb as annotation
from navaids_points.localizer 
inner join master_join mj2 on navaids_points.localizer.id = mj2.source_id
inner join navaids_points.localizer_tsp on mj2.target_id = navaids_points.localizer_tsp.id
inner join navaids_points.localizer_ts on navaids_points.localizer_tsp.localizertimeslice_id = navaids_points.localizer_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_fmzqmi on navaids_points.localizer_ts.location_id = geometry_elevatedpoint_view_fmzqmi.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_uqufrf.*) as authority
  from master_join master_join_paediw
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_uqufrf on master_join_paediw.target_id = navaids_points_authorityfornavaidequipment_lat_uqufrf.id
  where master_join_paediw.source_id = navaids_points.localizer_ts.id
) as navaids_points_authorityfornavaidequipment_view_qgxfcf on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_kpvrsd.*) as monitoring
  from master_join master_join_enzwif
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_kpvrsd on master_join_enzwif.target_id = navaids_points_navaidequipmentmonitoring_lat_kpvrsd.id
  where master_join_enzwif.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidequipmentmonitoring_view_kkpbsq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_fpqqfu.*) as availability
  from master_join master_join_chgbcs
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_fpqqfu on master_join_chgbcs.target_id = navaids_points_navaidoperationalstatus_lat_fpqqfu.id
  where master_join_chgbcs.source_id = navaids_points.localizer_ts.id
) as navaids_points_navaidoperationalstatus_view_gharpx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mpuguv.*) AS annotation
  from master_join master_join_seyiqy
  join notes.note_view notes_note_lat_mpuguv on master_join_seyiqy.target_id = notes_note_lat_mpuguv.id
  where master_join_seyiqy.source_id = navaids_points.localizer_ts.id
) as notes_note_view_rbhsiu on TRUE
where navaids_points.localizer.feature_status = 'APPROVED'
  and navaids_points.localizer_ts.feature_status = 'APPROVED'
order by localizer.identifier, localizer_ts.sequence_number, localizer_ts.correction_number DESC;
-- MarkerBeaconTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.markerbeacon_view cascade;
create materialized view navaids_points.markerbeacon_view as
select distinct on (markerbeacon.identifier,markerbeacon_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.markerbeacon.id::integer as id,
    navaids_points.markerbeacon_ts.id::integer as ts_id,
    navaids_points.markerbeacon_tsp.id::integer as tsp_id,
    navaids_points.markerbeacon.identifier::uuid,
    navaids_points.markerbeacon_ts.interpretation::text,
    navaids_points.markerbeacon_ts.sequence_number::integer,
    navaids_points.markerbeacon_ts.correction_number::integer,
    navaids_points.markerbeacon_ts.valid_time_begin::timestamp,
    navaids_points.markerbeacon_ts.valid_time_end::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_begin::timestamp,
    navaids_points.markerbeacon_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.markerbeacon_ts.designator_value as varchar), '(' || navaids_points.markerbeacon_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.markerbeacon_ts.name_value as varchar), '(' || navaids_points.markerbeacon_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.markerbeacon_ts.emissionclass_value as varchar), '(' || navaids_points.markerbeacon_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.markerbeacon_ts.mobile_value as varchar), '(' || navaids_points.markerbeacon_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.markerbeacon_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.markerbeacon_ts.datemagneticvariation_value as varchar), '(' || navaids_points.markerbeacon_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.markerbeacon_ts.flightchecked_value as varchar), '(' || navaids_points.markerbeacon_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.markerbeacon_ts.class_value as varchar), '(' || navaids_points.markerbeacon_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.markerbeacon_ts.axisbearing_value as varchar), '(' || navaids_points.markerbeacon_ts.axisbearing_nilreason || ')')::text as axisbearing,
    coalesce(cast(navaids_points.markerbeacon_ts.auralmorsecode_value as varchar), '(' || navaids_points.markerbeacon_ts.auralmorsecode_nilreason || ')')::text as auralmorsecode,
    coalesce(cast(navaids_points.markerbeacon_ts.frequency_value as varchar) || ' ' || navaids_points.markerbeacon_ts.frequency_uom, '(' || navaids_points.markerbeacon_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_mioqsm.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_mioqsm.longitude AS location_longitude,
    geometry_elevatedpoint_view_mioqsm.latitude AS location_latitude,
    geometry_elevatedpoint_view_mioqsm.elevation AS location_elevation,
    geometry_elevatedpoint_view_mioqsm.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_mioqsm.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_mioqsm.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_mioqsm.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_uagnxo.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_jujohj.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hbjdol.availability::jsonb as availability,
    notes_note_view_sznzlq.annotation::jsonb as annotation
from navaids_points.markerbeacon 
inner join master_join mj2 on navaids_points.markerbeacon.id = mj2.source_id
inner join navaids_points.markerbeacon_tsp on mj2.target_id = navaids_points.markerbeacon_tsp.id
inner join navaids_points.markerbeacon_ts on navaids_points.markerbeacon_tsp.markerbeacontimeslice_id = navaids_points.markerbeacon_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_mioqsm on navaids_points.markerbeacon_ts.location_id = geometry_elevatedpoint_view_mioqsm.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_qmyjtp.*) as authority
  from master_join master_join_puawyq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_qmyjtp on master_join_puawyq.target_id = navaids_points_authorityfornavaidequipment_lat_qmyjtp.id
  where master_join_puawyq.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_authorityfornavaidequipment_view_uagnxo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_pibpdq.*) as monitoring
  from master_join master_join_asedeo
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_pibpdq on master_join_asedeo.target_id = navaids_points_navaidequipmentmonitoring_lat_pibpdq.id
  where master_join_asedeo.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidequipmentmonitoring_view_jujohj on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_yszofo.*) as availability
  from master_join master_join_tcetcl
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_yszofo on master_join_tcetcl.target_id = navaids_points_navaidoperationalstatus_lat_yszofo.id
  where master_join_tcetcl.source_id = navaids_points.markerbeacon_ts.id
) as navaids_points_navaidoperationalstatus_view_hbjdol on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_zqhttx.*) AS annotation
  from master_join master_join_axznwu
  join notes.note_view notes_note_lat_zqhttx on master_join_axznwu.target_id = notes_note_lat_zqhttx.id
  where master_join_axznwu.source_id = navaids_points.markerbeacon_ts.id
) as notes_note_view_sznzlq on TRUE
where navaids_points.markerbeacon.feature_status = 'APPROVED'
  and navaids_points.markerbeacon_ts.feature_status = 'APPROVED'
order by markerbeacon.identifier, markerbeacon_ts.sequence_number, markerbeacon_ts.correction_number DESC;
-- MarkingBuoyTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.markingbuoy_view cascade;
create materialized view airport_heliport.markingbuoy_view as
select distinct on (markingbuoy.identifier,markingbuoy_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.markingbuoy.id::integer as id,
    airport_heliport.markingbuoy_ts.id::integer as ts_id,
    airport_heliport.markingbuoy_tsp.id::integer as tsp_id,
    airport_heliport.markingbuoy.identifier::uuid,
    airport_heliport.markingbuoy_ts.interpretation::text,
    airport_heliport.markingbuoy_ts.sequence_number::integer,
    airport_heliport.markingbuoy_ts.correction_number::integer,
    airport_heliport.markingbuoy_ts.valid_time_begin::timestamp,
    airport_heliport.markingbuoy_ts.valid_time_end::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_begin::timestamp,
    airport_heliport.markingbuoy_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.markingbuoy_ts.type_value as varchar), '(' || airport_heliport.markingbuoy_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.markingbuoy_ts.colour_value as varchar), '(' || airport_heliport.markingbuoy_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport_seaplanelandingarea_pt_mcgkic.title as varchar), '(' || airport_heliport_seaplanelandingarea_pt_mcgkic.nilreason[1] || ')')::text AS theseaplanelandingarea,
    airport_heliport_seaplanelandingarea_pt_mcgkic.href::text AS theseaplanelandingarea_href,
    geometry_elevatedpoint_view_rbvesp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rbvesp.longitude AS location_longitude,
    geometry_elevatedpoint_view_rbvesp.latitude AS location_latitude,
    geometry_elevatedpoint_view_rbvesp.elevation AS location_elevation,
    geometry_elevatedpoint_view_rbvesp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rbvesp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rbvesp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rbvesp.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_dwnqaw.annotation::jsonb as annotation
from airport_heliport.markingbuoy 
inner join master_join mj2 on airport_heliport.markingbuoy.id = mj2.source_id
inner join airport_heliport.markingbuoy_tsp on mj2.target_id = airport_heliport.markingbuoy_tsp.id
inner join airport_heliport.markingbuoy_ts on airport_heliport.markingbuoy_tsp.markingbuoytimeslice_id = airport_heliport.markingbuoy_ts.id
left join airport_heliport.seaplanelandingarea_pt airport_heliport_seaplanelandingarea_pt_mcgkic on airport_heliport.markingbuoy_ts.theseaplanelandingarea_id = airport_heliport_seaplanelandingarea_pt_mcgkic.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rbvesp on airport_heliport.markingbuoy_ts.location_id = geometry_elevatedpoint_view_rbvesp.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mftarx.*) AS annotation
  from master_join master_join_xjkpiz
  join notes.note_view notes_note_lat_mftarx on master_join_xjkpiz.target_id = notes_note_lat_mftarx.id
  where master_join_xjkpiz.source_id = airport_heliport.markingbuoy_ts.id
) as notes_note_view_dwnqaw on TRUE
where airport_heliport.markingbuoy.feature_status = 'APPROVED'
  and airport_heliport.markingbuoy_ts.feature_status = 'APPROVED'
order by markingbuoy.identifier, markingbuoy_ts.sequence_number, markingbuoy_ts.correction_number DESC;
-- MissedApproachLegTimeSliceType
-- ['procedure.approachcondition_view', 'shared.obstacleassessmentarea_view', 'notes.note_view', 'navaids_points.terminalsegmentpoint_view', 'geometry.curve_view', 'shared.aircraftcharacteristic_view', 'procedure.holdinguse_view']
drop materialized view if exists procedure.missedapproachleg_view cascade;
create materialized view procedure.missedapproachleg_view as
select distinct on (missedapproachleg.identifier,missedapproachleg_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.missedapproachleg.id::integer as id,
    procedure.missedapproachleg_ts.id::integer as ts_id,
    procedure.missedapproachleg_tsp.id::integer as tsp_id,
    procedure.missedapproachleg.identifier::uuid,
    procedure.missedapproachleg_ts.interpretation::text,
    procedure.missedapproachleg_ts.sequence_number::integer,
    procedure.missedapproachleg_ts.correction_number::integer,
    procedure.missedapproachleg_ts.valid_time_begin::timestamp,
    procedure.missedapproachleg_ts.valid_time_end::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_begin::timestamp,
    procedure.missedapproachleg_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.missedapproachleg_ts.endconditiondesignator_value as varchar), '(' || procedure.missedapproachleg_ts.endconditiondesignator_nilreason || ')')::text as endconditiondesignator,
    coalesce(cast(procedure.missedapproachleg_ts.legpath_value as varchar), '(' || procedure.missedapproachleg_ts.legpath_nilreason || ')')::text as legpath,
    coalesce(cast(procedure.missedapproachleg_ts.legtypearinc_value as varchar), '(' || procedure.missedapproachleg_ts.legtypearinc_nilreason || ')')::text as legtypearinc,
    coalesce(cast(procedure.missedapproachleg_ts.course_value as varchar), '(' || procedure.missedapproachleg_ts.course_nilreason || ')')::text as course,
    coalesce(cast(procedure.missedapproachleg_ts.coursetype_value as varchar), '(' || procedure.missedapproachleg_ts.coursetype_nilreason || ')')::text as coursetype,
    coalesce(cast(procedure.missedapproachleg_ts.coursedirection_value as varchar), '(' || procedure.missedapproachleg_ts.coursedirection_nilreason || ')')::text as coursedirection,
    coalesce(cast(procedure.missedapproachleg_ts.turndirection_value as varchar), '(' || procedure.missedapproachleg_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(procedure.missedapproachleg_ts.speedreference_value as varchar), '(' || procedure.missedapproachleg_ts.speedreference_nilreason || ')')::text as speedreference,
    coalesce(cast(procedure.missedapproachleg_ts.speedinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.speedinterpretation_nilreason || ')')::text as speedinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.bankangle_value as varchar), '(' || procedure.missedapproachleg_ts.bankangle_nilreason || ')')::text as bankangle,
    coalesce(cast(procedure.missedapproachleg_ts.procedureturnrequired_value as varchar), '(' || procedure.missedapproachleg_ts.procedureturnrequired_nilreason || ')')::text as procedureturnrequired,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitreference_value as varchar), '(' || procedure.missedapproachleg_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeinterpretation_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeinterpretation_nilreason || ')')::text as altitudeinterpretation,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverridereference_value as varchar), '(' || procedure.missedapproachleg_ts.altitudeoverridereference_nilreason || ')')::text as altitudeoverridereference,
    coalesce(cast(procedure.missedapproachleg_ts.verticalangle_value as varchar), '(' || procedure.missedapproachleg_ts.verticalangle_nilreason || ')')::text as verticalangle,
    coalesce(cast(procedure.missedapproachleg_ts.type_value as varchar), '(' || procedure.missedapproachleg_ts.type_nilreason || ')')::text as type,
    coalesce(cast(procedure.missedapproachleg_ts.thresholdaftermapt_value as varchar), '(' || procedure.missedapproachleg_ts.thresholdaftermapt_nilreason || ')')::text as thresholdaftermapt,
    coalesce(cast(procedure.missedapproachleg_ts.requirednavigationperformance_value as varchar), '(' || procedure.missedapproachleg_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(procedure.missedapproachleg_ts.speedlimit_value as varchar) || ' ' || procedure.missedapproachleg_ts.speedlimit_uom, '(' || procedure.missedapproachleg_ts.speedlimit_nilreason || ')')::text as speedlimit,
    coalesce(cast(procedure.missedapproachleg_ts.length_value as varchar) || ' ' || procedure.missedapproachleg_ts.length_uom, '(' || procedure.missedapproachleg_ts.length_nilreason || ')')::text as length,
    coalesce(cast(procedure.missedapproachleg_ts.duration_value as varchar) || ' ' || procedure.missedapproachleg_ts.duration_uom, '(' || procedure.missedapproachleg_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(procedure.missedapproachleg_ts.upperlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.upperlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.upperlimitaltitude_nilreason || ')')::text as upperlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.lowerlimitaltitude_value as varchar) || ' ' || procedure.missedapproachleg_ts.lowerlimitaltitude_uom, '(' || procedure.missedapproachleg_ts.lowerlimitaltitude_nilreason || ')')::text as lowerlimitaltitude,
    coalesce(cast(procedure.missedapproachleg_ts.altitudeoverrideatc_value as varchar) || ' ' || procedure.missedapproachleg_ts.altitudeoverrideatc_uom, '(' || procedure.missedapproachleg_ts.altitudeoverrideatc_nilreason || ')')::text as altitudeoverrideatc,
    coalesce(cast(procedure.missedapproachleg_ts.heightmapt_value as varchar) || ' ' || procedure.missedapproachleg_ts.heightmapt_uom, '(' || procedure.missedapproachleg_ts.heightmapt_nilreason || ')')::text as heightmapt,
    to_jsonb(navaids_points_terminalsegmentpoint_view_qqvcdr.*)::jsonb AS startpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_dhhnov.*)::jsonb AS endpoint,
    to_jsonb(navaids_points_terminalsegmentpoint_view_yrjacz.*)::jsonb AS arccentre,
    geometry_curve_view_uskrli.geom::geometry(LINESTRING, 4326) AS trajectory_geom,
    geometry_curve_view_uskrli.horizontalAccuracy as trajectory_horizontalaccuracy,
    coalesce(cast(navaids_points_angleindication_pt_cblppx.title as varchar), '(' || navaids_points_angleindication_pt_cblppx.nilreason[1] || ')')::text AS angle,
    navaids_points_angleindication_pt_cblppx.href::text AS angle_href,
    coalesce(cast(navaids_points_distanceindication_pt_jvzvuy.title as varchar), '(' || navaids_points_distanceindication_pt_jvzvuy.nilreason[1] || ')')::text AS distance,
    navaids_points_distanceindication_pt_jvzvuy.href::text AS distance_href,
    to_jsonb(procedure_holdinguse_view_lfxmfn.*)::jsonb AS holding,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_zygckd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_zygckd.nilreason[1] || ')')::text AS approach,
    procedure_instrumentapproachprocedure_pt_zygckd.href::text AS approach_href,
    shared_aircraftcharacteristic_view_ihxiwp.aircraftcategory::jsonb as aircraftcategory,
    shared_obstacleassessmentarea_view_wuqxzw.designsurface::jsonb as designsurface,
    notes_note_view_wnbukr.annotation::jsonb as annotation,
    procedure_approachcondition_view_xblxrv.condition::jsonb as condition
from procedure.missedapproachleg 
inner join master_join mj2 on procedure.missedapproachleg.id = mj2.source_id
inner join procedure.missedapproachleg_tsp on mj2.target_id = procedure.missedapproachleg_tsp.id
inner join procedure.missedapproachleg_ts on procedure.missedapproachleg_tsp.missedapproachlegtimeslice_id = procedure.missedapproachleg_ts.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_qqvcdr on procedure.missedapproachleg_ts.startpoint_id = navaids_points_terminalsegmentpoint_view_qqvcdr.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_dhhnov on procedure.missedapproachleg_ts.endpoint_id = navaids_points_terminalsegmentpoint_view_dhhnov.id
left join geometry.curve_view geometry_curve_view_uskrli on procedure.missedapproachleg_ts.trajectory_id = geometry_curve_view_uskrli.id
left join navaids_points.terminalsegmentpoint_view navaids_points_terminalsegmentpoint_view_yrjacz on procedure.missedapproachleg_ts.arccentre_id = navaids_points_terminalsegmentpoint_view_yrjacz.id
left join navaids_points.angleindication_pt navaids_points_angleindication_pt_cblppx on procedure.missedapproachleg_ts.angle_id = navaids_points_angleindication_pt_cblppx.id
left join navaids_points.distanceindication_pt navaids_points_distanceindication_pt_jvzvuy on procedure.missedapproachleg_ts.distance_id = navaids_points_distanceindication_pt_jvzvuy.id
left join procedure.holdinguse_view procedure_holdinguse_view_lfxmfn on procedure.missedapproachleg_ts.holding_id = procedure_holdinguse_view_lfxmfn.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_zygckd on procedure.missedapproachleg_ts.approach_id = procedure_instrumentapproachprocedure_pt_zygckd.id
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_jcbfmx.*) as aircraftcategory
  from master_join master_join_yzujvd
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_jcbfmx on master_join_yzujvd.target_id = shared_aircraftcharacteristic_lat_jcbfmx.id
  where master_join_yzujvd.source_id = procedure.missedapproachleg_ts.id
) as shared_aircraftcharacteristic_view_ihxiwp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_obstacleassessmentarea_lat_nqgucu.*) as designsurface
  from master_join master_join_ndicqp
  join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_lat_nqgucu on master_join_ndicqp.target_id = shared_obstacleassessmentarea_lat_nqgucu.id
  where master_join_ndicqp.source_id = procedure.missedapproachleg_ts.id
) as shared_obstacleassessmentarea_view_wuqxzw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_dpywok.*) AS annotation
  from master_join master_join_vegbxt
  join notes.note_view notes_note_lat_dpywok on master_join_vegbxt.target_id = notes_note_lat_dpywok.id
  where master_join_vegbxt.source_id = procedure.missedapproachleg_ts.id
) as notes_note_view_wnbukr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_approachcondition_lat_mxdmda.*) as condition
  from master_join master_join_yqtvec
  join procedure.approachcondition_view procedure_approachcondition_lat_mxdmda on master_join_yqtvec.target_id = procedure_approachcondition_lat_mxdmda.id
  where master_join_yqtvec.source_id = procedure.missedapproachleg_ts.id
) as procedure_approachcondition_view_xblxrv on TRUE
where procedure.missedapproachleg.feature_status = 'APPROVED'
  and procedure.missedapproachleg_ts.feature_status = 'APPROVED'
order by missedapproachleg.identifier, missedapproachleg_ts.sequence_number, missedapproachleg_ts.correction_number DESC;
-- NavaidTimeSliceType
-- ['navaids_points.navaidcomponent_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view']
drop materialized view if exists navaids_points.navaid_view cascade;
create materialized view navaids_points.navaid_view as
select distinct on (navaid.identifier,navaid_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.navaid.id::integer as id,
    navaids_points.navaid_ts.id::integer as ts_id,
    navaids_points.navaid_tsp.id::integer as tsp_id,
    navaids_points.navaid.identifier::uuid,
    navaids_points.navaid_ts.interpretation::text,
    navaids_points.navaid_ts.sequence_number::integer,
    navaids_points.navaid_ts.correction_number::integer,
    navaids_points.navaid_ts.valid_time_begin::timestamp,
    navaids_points.navaid_ts.valid_time_end::timestamp,
    navaids_points.navaid_ts.feature_lifetime_begin::timestamp,
    navaids_points.navaid_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.navaid_ts.type_value as varchar), '(' || navaids_points.navaid_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.navaid_ts.designator_value as varchar), '(' || navaids_points.navaid_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.navaid_ts.name_value as varchar), '(' || navaids_points.navaid_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.navaid_ts.flightchecked_value as varchar), '(' || navaids_points.navaid_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.navaid_ts.purpose_value as varchar), '(' || navaids_points.navaid_ts.purpose_nilreason || ')')::text as purpose,
    coalesce(cast(navaids_points.navaid_ts.signalperformance_value as varchar), '(' || navaids_points.navaid_ts.signalperformance_nilreason || ')')::text as signalperformance,
    coalesce(cast(navaids_points.navaid_ts.coursequality_value as varchar), '(' || navaids_points.navaid_ts.coursequality_nilreason || ')')::text as coursequality,
    coalesce(cast(navaids_points.navaid_ts.integritylevel_value as varchar), '(' || navaids_points.navaid_ts.integritylevel_nilreason || ')')::text as integritylevel,
    geometry_elevatedpoint_view_afudzp.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_afudzp.longitude AS location_longitude,
    geometry_elevatedpoint_view_afudzp.latitude AS location_latitude,
    geometry_elevatedpoint_view_afudzp.elevation AS location_elevation,
    geometry_elevatedpoint_view_afudzp.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_afudzp.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_afudzp.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_afudzp.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_touchdownliftoff_pt_kcebfo.touchdownliftoff::jsonb as touchdownliftoff,
    navaids_points_navaidcomponent_view_gwumzh.navaidequipment::jsonb as navaidequipment,
    airport_heliport_runwaydirection_pt_acwhlm.runwaydirection::jsonb as runwaydirection,
    airport_heliport_airportheliport_pt_affyzo.servedairport::jsonb as servedairport,
    navaids_points_navaidoperationalstatus_view_qbjokh.availability::jsonb as availability,
    notes_note_view_wxtaiz.annotation::jsonb as annotation
from navaids_points.navaid 
inner join master_join mj2 on navaids_points.navaid.id = mj2.source_id
inner join navaids_points.navaid_tsp on mj2.target_id = navaids_points.navaid_tsp.id
inner join navaids_points.navaid_ts on navaids_points.navaid_tsp.navaidtimeslice_id = navaids_points.navaid_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_afudzp on navaids_points.navaid_ts.location_id = geometry_elevatedpoint_view_afudzp.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_touchdownliftoff_lat_venvvi.id,
      'title', coalesce(cast(airport_heliport_touchdownliftoff_lat_venvvi.title AS varchar), '(' || airport_heliport_touchdownliftoff_lat_venvvi.nilreason[1] || ')'),
      'href', airport_heliport_touchdownliftoff_lat_venvvi.href
  )) as touchdownliftoff  from master_join master_join_rmcnzq
  join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_lat_venvvi on master_join_rmcnzq.target_id = airport_heliport_touchdownliftoff_lat_venvvi.id
  where master_join_rmcnzq.source_id = navaids_points.navaid_ts.id
) as airport_heliport_touchdownliftoff_pt_kcebfo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidcomponent_lat_ekkttk.*) as navaidequipment
  from master_join master_join_nhidxf
  join navaids_points.navaidcomponent_view navaids_points_navaidcomponent_lat_ekkttk on master_join_nhidxf.target_id = navaids_points_navaidcomponent_lat_ekkttk.id
  where master_join_nhidxf.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidcomponent_view_gwumzh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_apsvha.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_apsvha.title AS varchar), '(' || airport_heliport_runwaydirection_lat_apsvha.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_apsvha.href
  )) as runwaydirection  from master_join master_join_lqgali
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_apsvha on master_join_lqgali.target_id = airport_heliport_runwaydirection_lat_apsvha.id
  where master_join_lqgali.source_id = navaids_points.navaid_ts.id
) as airport_heliport_runwaydirection_pt_acwhlm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_pgsggv.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_pgsggv.title AS varchar), '(' || airport_heliport_airportheliport_lat_pgsggv.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_pgsggv.href
  )) as servedairport  from master_join master_join_dxytio
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_pgsggv on master_join_dxytio.target_id = airport_heliport_airportheliport_lat_pgsggv.id
  where master_join_dxytio.source_id = navaids_points.navaid_ts.id
) as airport_heliport_airportheliport_pt_affyzo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_mdvobc.*) as availability
  from master_join master_join_ejgcel
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_mdvobc on master_join_ejgcel.target_id = navaids_points_navaidoperationalstatus_lat_mdvobc.id
  where master_join_ejgcel.source_id = navaids_points.navaid_ts.id
) as navaids_points_navaidoperationalstatus_view_qbjokh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hysfmk.*) AS annotation
  from master_join master_join_iceskh
  join notes.note_view notes_note_lat_hysfmk on master_join_iceskh.target_id = notes_note_lat_hysfmk.id
  where master_join_iceskh.source_id = navaids_points.navaid_ts.id
) as notes_note_view_wxtaiz on TRUE
where navaids_points.navaid.feature_status = 'APPROVED'
  and navaids_points.navaid_ts.feature_status = 'APPROVED'
order by navaid.identifier, navaid_ts.sequence_number, navaid_ts.correction_number DESC;
-- NavigationAreaRestrictionTimeSliceType
-- ['shared.obstacleassessmentarea_view', 'notes.note_view', 'shared.circlesector_view']
drop materialized view if exists procedure.navigationarearestriction_view cascade;
create materialized view procedure.navigationarearestriction_view as
select distinct on (navigationarearestriction.identifier,navigationarearestriction_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarearestriction.id::integer as id,
    procedure.navigationarearestriction_ts.id::integer as ts_id,
    procedure.navigationarearestriction_tsp.id::integer as tsp_id,
    procedure.navigationarearestriction.identifier::uuid,
    procedure.navigationarearestriction_ts.interpretation::text,
    procedure.navigationarearestriction_ts.sequence_number::integer,
    procedure.navigationarearestriction_ts.correction_number::integer,
    procedure.navigationarearestriction_ts.valid_time_begin::timestamp,
    procedure.navigationarearestriction_ts.valid_time_end::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarearestriction_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarearestriction_ts.type_value as varchar), '(' || procedure.navigationarearestriction_ts.type_nilreason || ')')::text as type,
    to_jsonb(shared_obstacleassessmentarea_view_sdddqh.*)::jsonb AS designsurface,
    to_jsonb(shared_circlesector_view_gsanqk.*)::jsonb AS sectordefinition,
    notes_note_view_pplznj.annotation::jsonb as annotation
from procedure.navigationarearestriction 
inner join master_join mj2 on procedure.navigationarearestriction.id = mj2.source_id
inner join procedure.navigationarearestriction_tsp on mj2.target_id = procedure.navigationarearestriction_tsp.id
inner join procedure.navigationarearestriction_ts on procedure.navigationarearestriction_tsp.navigationarearestrictiontimeslice_id = procedure.navigationarearestriction_ts.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_sdddqh on procedure.navigationarearestriction_ts.designsurface_id = shared_obstacleassessmentarea_view_sdddqh.id
left join shared.circlesector_view shared_circlesector_view_gsanqk on procedure.navigationarearestriction_ts.sectordefinition_id = shared_circlesector_view_gsanqk.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ascuhd.*) AS annotation
  from master_join master_join_ihujmf
  join notes.note_view notes_note_lat_ascuhd on master_join_ihujmf.target_id = notes_note_lat_ascuhd.id
  where master_join_ihujmf.source_id = procedure.navigationarearestriction_ts.id
) as notes_note_view_pplznj on TRUE
where procedure.navigationarearestriction.feature_status = 'APPROVED'
  and procedure.navigationarearestriction_ts.feature_status = 'APPROVED'
order by navigationarearestriction.identifier, navigationarearestriction_ts.sequence_number, navigationarearestriction_ts.correction_number DESC;
-- NavigationAreaTimeSliceType
-- ['notes.note_view', 'procedure.navigationareasector_view', 'geometry.point_view']
drop materialized view if exists procedure.navigationarea_view cascade;
create materialized view procedure.navigationarea_view as
select distinct on (navigationarea.identifier,navigationarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.navigationarea.id::integer as id,
    procedure.navigationarea_ts.id::integer as ts_id,
    procedure.navigationarea_tsp.id::integer as tsp_id,
    procedure.navigationarea.identifier::uuid,
    procedure.navigationarea_ts.interpretation::text,
    procedure.navigationarea_ts.sequence_number::integer,
    procedure.navigationarea_ts.correction_number::integer,
    procedure.navigationarea_ts.valid_time_begin::timestamp,
    procedure.navigationarea_ts.valid_time_end::timestamp,
    procedure.navigationarea_ts.feature_lifetime_begin::timestamp,
    procedure.navigationarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.navigationarea_ts.navigationareatype_value as varchar), '(' || procedure.navigationarea_ts.navigationareatype_nilreason || ')')::text as navigationareatype,
    coalesce(cast(procedure.navigationarea_ts.minimumceiling_value as varchar) || ' ' || procedure.navigationarea_ts.minimumceiling_uom, '(' || procedure.navigationarea_ts.minimumceiling_nilreason || ')')::text as minimumceiling,
    coalesce(cast(procedure.navigationarea_ts.minimumvisibility_value as varchar) || ' ' || procedure.navigationarea_ts.minimumvisibility_uom, '(' || procedure.navigationarea_ts.minimumvisibility_nilreason || ')')::text as minimumvisibility,
    coalesce(cast(procedure_standardinstrumentdeparture_pt_sngegd.title as varchar), '(' || procedure_standardinstrumentdeparture_pt_sngegd.nilreason[1] || ')')::text AS departure,
    procedure_standardinstrumentdeparture_pt_sngegd.href::text AS departure_href,
    coalesce(cast(navaids_points_designatedpoint_pt_ggdjxx.title as varchar), '(' || navaids_points_designatedpoint_pt_ggdjxx.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_ggdjxx.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_xddfwx.title as varchar), '(' || navaids_points_navaid_pt_xddfwx.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_xddfwx.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_taovnp.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_taovnp.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_taovnp.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_qdqcay.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_qdqcay.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_qdqcay.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bruazb.title as varchar), '(' || airport_heliport_airportheliport_pt_bruazb.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_bruazb.href::text AS centrepointairportreferencepoint_href,
    geometry_point_view_efodjw.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_efodjw.longitude AS centrepointposition_longitude,
    geometry_point_view_efodjw.latitude AS centrepointposition_latitude,
    geometry_point_view_efodjw.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_navigationareasector_view_wdurms.sector::jsonb as sector,
    notes_note_view_nvwyib.annotation::jsonb as annotation
from procedure.navigationarea 
inner join master_join mj2 on procedure.navigationarea.id = mj2.source_id
inner join procedure.navigationarea_tsp on mj2.target_id = procedure.navigationarea_tsp.id
inner join procedure.navigationarea_ts on procedure.navigationarea_tsp.navigationareatimeslice_id = procedure.navigationarea_ts.id
left join procedure.standardinstrumentdeparture_pt procedure_standardinstrumentdeparture_pt_sngegd on procedure.navigationarea_ts.departure_id = procedure_standardinstrumentdeparture_pt_sngegd.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ggdjxx on procedure.navigationarea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ggdjxx.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_xddfwx on procedure.navigationarea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_xddfwx.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_taovnp on procedure.navigationarea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_taovnp.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_qdqcay on procedure.navigationarea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_qdqcay.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bruazb on procedure.navigationarea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_bruazb.id
left join geometry.point_view geometry_point_view_efodjw on procedure.navigationarea_ts.centrepoint_position_id = geometry_point_view_efodjw.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_navigationareasector_lat_lfpgsu.*) as sector
  from master_join master_join_naviwy
  join procedure.navigationareasector_view procedure_navigationareasector_lat_lfpgsu on master_join_naviwy.target_id = procedure_navigationareasector_lat_lfpgsu.id
  where master_join_naviwy.source_id = procedure.navigationarea_ts.id
) as procedure_navigationareasector_view_wdurms on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jwstof.*) AS annotation
  from master_join master_join_iblrsb
  join notes.note_view notes_note_lat_jwstof on master_join_iblrsb.target_id = notes_note_lat_jwstof.id
  where master_join_iblrsb.source_id = procedure.navigationarea_ts.id
) as notes_note_view_nvwyib on TRUE
where procedure.navigationarea.feature_status = 'APPROVED'
  and procedure.navigationarea_ts.feature_status = 'APPROVED'
order by navigationarea.identifier, navigationarea_ts.sequence_number, navigationarea_ts.correction_number DESC;
-- NDBTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.ndb_view cascade;
create materialized view navaids_points.ndb_view as
select distinct on (ndb.identifier,ndb_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.ndb.id::integer as id,
    navaids_points.ndb_ts.id::integer as ts_id,
    navaids_points.ndb_tsp.id::integer as tsp_id,
    navaids_points.ndb.identifier::uuid,
    navaids_points.ndb_ts.interpretation::text,
    navaids_points.ndb_ts.sequence_number::integer,
    navaids_points.ndb_ts.correction_number::integer,
    navaids_points.ndb_ts.valid_time_begin::timestamp,
    navaids_points.ndb_ts.valid_time_end::timestamp,
    navaids_points.ndb_ts.feature_lifetime_begin::timestamp,
    navaids_points.ndb_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.ndb_ts.designator_value as varchar), '(' || navaids_points.ndb_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.ndb_ts.name_value as varchar), '(' || navaids_points.ndb_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.ndb_ts.emissionclass_value as varchar), '(' || navaids_points.ndb_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.ndb_ts.mobile_value as varchar), '(' || navaids_points.ndb_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.ndb_ts.magneticvariation_value as varchar), '(' || navaids_points.ndb_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.ndb_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.ndb_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.ndb_ts.datemagneticvariation_value as varchar), '(' || navaids_points.ndb_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.ndb_ts.flightchecked_value as varchar), '(' || navaids_points.ndb_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.ndb_ts.class_value as varchar), '(' || navaids_points.ndb_ts.class_nilreason || ')')::text as class,
    coalesce(cast(navaids_points.ndb_ts.emissionband_value as varchar), '(' || navaids_points.ndb_ts.emissionband_nilreason || ')')::text as emissionband,
    coalesce(cast(navaids_points.ndb_ts.frequency_value as varchar) || ' ' || navaids_points.ndb_ts.frequency_uom, '(' || navaids_points.ndb_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_evqaej.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_evqaej.longitude AS location_longitude,
    geometry_elevatedpoint_view_evqaej.latitude AS location_latitude,
    geometry_elevatedpoint_view_evqaej.elevation AS location_elevation,
    geometry_elevatedpoint_view_evqaej.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_evqaej.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_evqaej.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_evqaej.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_wvhjqg.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_rztque.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_hgppem.availability::jsonb as availability,
    notes_note_view_jvuqiv.annotation::jsonb as annotation
from navaids_points.ndb 
inner join master_join mj2 on navaids_points.ndb.id = mj2.source_id
inner join navaids_points.ndb_tsp on mj2.target_id = navaids_points.ndb_tsp.id
inner join navaids_points.ndb_ts on navaids_points.ndb_tsp.ndbtimeslice_id = navaids_points.ndb_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_evqaej on navaids_points.ndb_ts.location_id = geometry_elevatedpoint_view_evqaej.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_wskscn.*) as authority
  from master_join master_join_pjhqsm
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_wskscn on master_join_pjhqsm.target_id = navaids_points_authorityfornavaidequipment_lat_wskscn.id
  where master_join_pjhqsm.source_id = navaids_points.ndb_ts.id
) as navaids_points_authorityfornavaidequipment_view_wvhjqg on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_cxplat.*) as monitoring
  from master_join master_join_loozna
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_cxplat on master_join_loozna.target_id = navaids_points_navaidequipmentmonitoring_lat_cxplat.id
  where master_join_loozna.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidequipmentmonitoring_view_rztque on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wwdoox.*) as availability
  from master_join master_join_fwxveg
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wwdoox on master_join_fwxveg.target_id = navaids_points_navaidoperationalstatus_lat_wwdoox.id
  where master_join_fwxveg.source_id = navaids_points.ndb_ts.id
) as navaids_points_navaidoperationalstatus_view_hgppem on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xooszj.*) AS annotation
  from master_join master_join_yzonpa
  join notes.note_view notes_note_lat_xooszj on master_join_yzonpa.target_id = notes_note_lat_xooszj.id
  where master_join_yzonpa.source_id = navaids_points.ndb_ts.id
) as notes_note_view_jvuqiv on TRUE
where navaids_points.ndb.feature_status = 'APPROVED'
  and navaids_points.ndb_ts.feature_status = 'APPROVED'
order by ndb.identifier, ndb_ts.sequence_number, ndb_ts.correction_number DESC;
-- NonMovementAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.nonmovementarea_view cascade;
create materialized view airport_heliport.nonmovementarea_view as
select distinct on (nonmovementarea.identifier,nonmovementarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.nonmovementarea.id::integer as id,
    airport_heliport.nonmovementarea_ts.id::integer as ts_id,
    airport_heliport.nonmovementarea_tsp.id::integer as tsp_id,
    airport_heliport.nonmovementarea.identifier::uuid,
    airport_heliport.nonmovementarea_ts.interpretation::text,
    airport_heliport.nonmovementarea_ts.sequence_number::integer,
    airport_heliport.nonmovementarea_ts.correction_number::integer,
    airport_heliport.nonmovementarea_ts.valid_time_begin::timestamp,
    airport_heliport.nonmovementarea_ts.valid_time_end::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.nonmovementarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport_airportheliport_pt_hcaspl.title as varchar), '(' || airport_heliport_airportheliport_pt_hcaspl.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_hcaspl.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_hkatpe.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_hkatpe.elevation AS extent_elevation,
    geometry_elevatedsurface_view_hkatpe.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_hkatpe.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_hkatpe.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_hkatpe.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_ekbdyg.annotation::jsonb as annotation
from airport_heliport.nonmovementarea 
inner join master_join mj2 on airport_heliport.nonmovementarea.id = mj2.source_id
inner join airport_heliport.nonmovementarea_tsp on mj2.target_id = airport_heliport.nonmovementarea_tsp.id
inner join airport_heliport.nonmovementarea_ts on airport_heliport.nonmovementarea_tsp.nonmovementareatimeslice_id = airport_heliport.nonmovementarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_hcaspl on airport_heliport.nonmovementarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_hcaspl.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_hkatpe on airport_heliport.nonmovementarea_ts.extent_id = geometry_elevatedsurface_view_hkatpe.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oewhza.*) AS annotation
  from master_join master_join_liimgw
  join notes.note_view notes_note_lat_oewhza on master_join_liimgw.target_id = notes_note_lat_oewhza.id
  where master_join_liimgw.source_id = airport_heliport.nonmovementarea_ts.id
) as notes_note_view_ekbdyg on TRUE
where airport_heliport.nonmovementarea.feature_status = 'APPROVED'
  and airport_heliport.nonmovementarea_ts.feature_status = 'APPROVED'
order by nonmovementarea.identifier, nonmovementarea_ts.sequence_number, nonmovementarea_ts.correction_number DESC;
-- ObstacleAreaTimeSliceType
-- ['notes.note_view', 'geometry.surface_view']
drop materialized view if exists obstacles.obstaclearea_view cascade;
create materialized view obstacles.obstaclearea_view as
select distinct on (obstaclearea.identifier,obstaclearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.obstaclearea.id::integer as id,
    obstacles.obstaclearea_ts.id::integer as ts_id,
    obstacles.obstaclearea_tsp.id::integer as tsp_id,
    obstacles.obstaclearea.identifier::uuid,
    obstacles.obstaclearea_ts.interpretation::text,
    obstacles.obstaclearea_ts.sequence_number::integer,
    obstacles.obstaclearea_ts.correction_number::integer,
    obstacles.obstaclearea_ts.valid_time_begin::timestamp,
    obstacles.obstaclearea_ts.valid_time_end::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_begin::timestamp,
    obstacles.obstaclearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.obstaclearea_ts.type_value as varchar), '(' || obstacles.obstaclearea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.obstaclearea_ts.obstructionidsurfacecondition_value as varchar), '(' || obstacles.obstaclearea_ts.obstructionidsurfacecondition_nilreason || ')')::text as obstructionidsurfacecondition,
    coalesce(cast(airport_heliport_airportheliport_pt_zuqzlo.title as varchar), '(' || airport_heliport_airportheliport_pt_zuqzlo.nilreason[1] || ')')::text AS referenceownerairport,
    airport_heliport_airportheliport_pt_zuqzlo.href::text AS referenceownerairport_href,
    coalesce(cast(airport_heliport_runwaydirection_pt_wultin.title as varchar), '(' || airport_heliport_runwaydirection_pt_wultin.nilreason[1] || ')')::text AS referenceownerrunway,
    airport_heliport_runwaydirection_pt_wultin.href::text AS referenceownerrunway_href,
    coalesce(cast(organisation_organisationauthority_pt_fjnqqq.title as varchar), '(' || organisation_organisationauthority_pt_fjnqqq.nilreason[1] || ')')::text AS referenceownerorganisation,
    organisation_organisationauthority_pt_fjnqqq.href::text AS referenceownerorganisation_href,
    geometry_surface_view_efmlvb.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_surface_view_efmlvb.horizontalAccuracy as surfaceextent_horizontalaccuracy,
    obstacles_verticalstructure_pt_jefoez.obstacle::jsonb as obstacle,
    notes_note_view_vhwniy.annotation::jsonb as annotation
from obstacles.obstaclearea 
inner join master_join mj2 on obstacles.obstaclearea.id = mj2.source_id
inner join obstacles.obstaclearea_tsp on mj2.target_id = obstacles.obstaclearea_tsp.id
inner join obstacles.obstaclearea_ts on obstacles.obstaclearea_tsp.obstacleareatimeslice_id = obstacles.obstaclearea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zuqzlo on obstacles.obstaclearea_ts.reference_ownerairport_id = airport_heliport_airportheliport_pt_zuqzlo.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_wultin on obstacles.obstaclearea_ts.reference_ownerrunway_id = airport_heliport_runwaydirection_pt_wultin.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_fjnqqq on obstacles.obstaclearea_ts.reference_ownerorganisation_id = organisation_organisationauthority_pt_fjnqqq.id
left join geometry.surface_view geometry_surface_view_efmlvb on obstacles.obstaclearea_ts.surfaceextent_id = geometry_surface_view_efmlvb.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', obstacles_verticalstructure_lat_nwosno.id,
      'title', coalesce(cast(obstacles_verticalstructure_lat_nwosno.title AS varchar), '(' || obstacles_verticalstructure_lat_nwosno.nilreason[1] || ')'),
      'href', obstacles_verticalstructure_lat_nwosno.href
  )) as obstacle  from master_join master_join_ngjjnm
  join obstacles.verticalstructure_pt obstacles_verticalstructure_lat_nwosno on master_join_ngjjnm.target_id = obstacles_verticalstructure_lat_nwosno.id
  where master_join_ngjjnm.source_id = obstacles.obstaclearea_ts.id
) as obstacles_verticalstructure_pt_jefoez on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_azwbbs.*) AS annotation
  from master_join master_join_fkwlhi
  join notes.note_view notes_note_lat_azwbbs on master_join_fkwlhi.target_id = notes_note_lat_azwbbs.id
  where master_join_fkwlhi.source_id = obstacles.obstaclearea_ts.id
) as notes_note_view_vhwniy on TRUE
where obstacles.obstaclearea.feature_status = 'APPROVED'
  and obstacles.obstaclearea_ts.feature_status = 'APPROVED'
order by obstaclearea.identifier, obstaclearea_ts.sequence_number, obstaclearea_ts.correction_number DESC;
-- OrganisationAuthorityTimeSliceType
-- ['shared.contactinformation_view', 'notes.note_view', 'organisation.organisationauthorityassociation_view']
drop materialized view if exists organisation.organisationauthority_view cascade;
create materialized view organisation.organisationauthority_view as
select distinct on (organisationauthority.identifier,organisationauthority_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.organisationauthority.id::integer as id,
    organisation.organisationauthority_ts.id::integer as ts_id,
    organisation.organisationauthority_tsp.id::integer as tsp_id,
    organisation.organisationauthority.identifier::uuid,
    organisation.organisationauthority_ts.interpretation::text,
    organisation.organisationauthority_ts.sequence_number::integer,
    organisation.organisationauthority_ts.correction_number::integer,
    organisation.organisationauthority_ts.valid_time_begin::timestamp,
    organisation.organisationauthority_ts.valid_time_end::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_begin::timestamp,
    organisation.organisationauthority_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.organisationauthority_ts.name_value as varchar), '(' || organisation.organisationauthority_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.organisationauthority_ts.designator_value as varchar), '(' || organisation.organisationauthority_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.organisationauthority_ts.type_value as varchar), '(' || organisation.organisationauthority_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.organisationauthority_ts.military_value as varchar), '(' || organisation.organisationauthority_ts.military_nilreason || ')')::text as military,
    organisation_organisationauthorityassociation_view_zcbdff.relatedorganisationauthority::jsonb as relatedorganisationauthority,
    notes_note_view_wovlhe.annotation::jsonb as annotation
from organisation.organisationauthority 
inner join master_join mj2 on organisation.organisationauthority.id = mj2.source_id
inner join organisation.organisationauthority_tsp on mj2.target_id = organisation.organisationauthority_tsp.id
inner join organisation.organisationauthority_ts on organisation.organisationauthority_tsp.organisationauthoritytimeslice_id = organisation.organisationauthority_ts.id
left join lateral(
  select
  from master_join master_join_adekxk
  join shared.contactinformation_view shared_contactinformation_lat_qmzojt on master_join_adekxk.target_id = shared_contactinformation_lat_qmzojt.id
  where master_join_adekxk.source_id = organisation.organisationauthority_ts.id
) as shared_contactinformation_view_qzxcto on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_organisationauthorityassociation_lat_xlyqbp.*) as relatedorganisationauthority
  from master_join master_join_bllqhc
  join organisation.organisationauthorityassociation_view organisation_organisationauthorityassociation_lat_xlyqbp on master_join_bllqhc.target_id = organisation_organisationauthorityassociation_lat_xlyqbp.id
  where master_join_bllqhc.source_id = organisation.organisationauthority_ts.id
) as organisation_organisationauthorityassociation_view_zcbdff on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_coojia.*) AS annotation
  from master_join master_join_bcvcka
  join notes.note_view notes_note_lat_coojia on master_join_bcvcka.target_id = notes_note_lat_coojia.id
  where master_join_bcvcka.source_id = organisation.organisationauthority_ts.id
) as notes_note_view_wovlhe on TRUE
where organisation.organisationauthority.feature_status = 'APPROVED'
  and organisation.organisationauthority_ts.feature_status = 'APPROVED'
order by organisationauthority.identifier, organisationauthority_ts.sequence_number, organisationauthority_ts.correction_number DESC;
-- PassengerLoadingBridgeTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view']
drop materialized view if exists airport_heliport.passengerloadingbridge_view cascade;
create materialized view airport_heliport.passengerloadingbridge_view as
select distinct on (passengerloadingbridge.identifier,passengerloadingbridge_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.passengerloadingbridge.id::integer as id,
    airport_heliport.passengerloadingbridge_ts.id::integer as ts_id,
    airport_heliport.passengerloadingbridge_tsp.id::integer as tsp_id,
    airport_heliport.passengerloadingbridge.identifier::uuid,
    airport_heliport.passengerloadingbridge_ts.interpretation::text,
    airport_heliport.passengerloadingbridge_ts.sequence_number::integer,
    airport_heliport.passengerloadingbridge_ts.correction_number::integer,
    airport_heliport.passengerloadingbridge_ts.valid_time_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.valid_time_end::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_begin::timestamp,
    airport_heliport.passengerloadingbridge_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.passengerloadingbridge_ts.type_value as varchar), '(' || airport_heliport.passengerloadingbridge_ts.type_nilreason || ')')::text as type,
    geometry_elevatedsurface_view_jcjxfi.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jcjxfi.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jcjxfi.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jcjxfi.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jcjxfi.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jcjxfi.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_wclkno.associatedstand::jsonb as associatedstand,
    notes_note_view_wrlbvw.annotation::jsonb as annotation
from airport_heliport.passengerloadingbridge 
inner join master_join mj2 on airport_heliport.passengerloadingbridge.id = mj2.source_id
inner join airport_heliport.passengerloadingbridge_tsp on mj2.target_id = airport_heliport.passengerloadingbridge_tsp.id
inner join airport_heliport.passengerloadingbridge_ts on airport_heliport.passengerloadingbridge_tsp.passengerloadingbridgetimeslice_id = airport_heliport.passengerloadingbridge_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jcjxfi on airport_heliport.passengerloadingbridge_ts.extent_id = geometry_elevatedsurface_view_jcjxfi.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_zoxcui.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_zoxcui.title AS varchar), '(' || airport_heliport_aircraftstand_lat_zoxcui.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_zoxcui.href
  )) as associatedstand  from master_join master_join_kpstko
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_zoxcui on master_join_kpstko.target_id = airport_heliport_aircraftstand_lat_zoxcui.id
  where master_join_kpstko.source_id = airport_heliport.passengerloadingbridge_ts.id
) as airport_heliport_aircraftstand_pt_wclkno on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vggzhg.*) AS annotation
  from master_join master_join_njpdmw
  join notes.note_view notes_note_lat_vggzhg on master_join_njpdmw.target_id = notes_note_lat_vggzhg.id
  where master_join_njpdmw.source_id = airport_heliport.passengerloadingbridge_ts.id
) as notes_note_view_wrlbvw on TRUE
where airport_heliport.passengerloadingbridge.feature_status = 'APPROVED'
  and airport_heliport.passengerloadingbridge_ts.feature_status = 'APPROVED'
order by passengerloadingbridge.identifier, passengerloadingbridge_ts.sequence_number, passengerloadingbridge_ts.correction_number DESC;
-- PassengerServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists service.passengerservice_view cascade;
create materialized view service.passengerservice_view as
select distinct on (passengerservice.identifier,passengerservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.passengerservice.id::integer as id,
    service.passengerservice_ts.id::integer as ts_id,
    service.passengerservice_tsp.id::integer as tsp_id,
    service.passengerservice.identifier::uuid,
    service.passengerservice_ts.interpretation::text,
    service.passengerservice_ts.sequence_number::integer,
    service.passengerservice_ts.correction_number::integer,
    service.passengerservice_ts.valid_time_begin::timestamp,
    service.passengerservice_ts.valid_time_end::timestamp,
    service.passengerservice_ts.feature_lifetime_begin::timestamp,
    service.passengerservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.passengerservice_ts.flightoperations_value as varchar), '(' || service.passengerservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.passengerservice_ts.rank_value as varchar), '(' || service.passengerservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.passengerservice_ts.complianticao_value as varchar), '(' || service.passengerservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.passengerservice_ts.name_value as varchar), '(' || service.passengerservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.passengerservice_ts.type_value as varchar), '(' || service.passengerservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_scatzb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_scatzb.longitude AS location_longitude,
    geometry_elevatedpoint_view_scatzb.latitude AS location_latitude,
    geometry_elevatedpoint_view_scatzb.elevation AS location_elevation,
    geometry_elevatedpoint_view_scatzb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_scatzb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_scatzb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_scatzb.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_mxnxbf.title as varchar), '(' || organisation_unit_pt_mxnxbf.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_mxnxbf.href::text AS serviceprovider_href,
    service_callsigndetail_view_xovbio.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_upwnjo.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_jxxsap.availability::jsonb as availability,
    notes_note_view_pyschb.annotation::jsonb as annotation,
    airport_heliport_airportheliport_pt_zmtopv.airportheliport::jsonb as airportheliport
from service.passengerservice 
inner join master_join mj2 on service.passengerservice.id = mj2.source_id
inner join service.passengerservice_tsp on mj2.target_id = service.passengerservice_tsp.id
inner join service.passengerservice_ts on service.passengerservice_tsp.passengerservicetimeslice_id = service.passengerservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_scatzb on service.passengerservice_ts.location_id = geometry_elevatedpoint_view_scatzb.id
left join organisation.unit_pt organisation_unit_pt_mxnxbf on service.passengerservice_ts.serviceprovider_id = organisation_unit_pt_mxnxbf.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_accnoc.*) as callsign
  from master_join master_join_xzcstm
  join service.callsigndetail_view service_callsigndetail_lat_accnoc on master_join_xzcstm.target_id = service_callsigndetail_lat_accnoc.id
  where master_join_xzcstm.source_id = service.passengerservice_ts.id
) as service_callsigndetail_view_xovbio on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_wneysu.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_wneysu.title AS varchar), '(' || service_radiocommunicationchannel_lat_wneysu.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_wneysu.href
  )) as radiocommunication  from master_join master_join_ksfzil
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_wneysu on master_join_ksfzil.target_id = service_radiocommunicationchannel_lat_wneysu.id
  where master_join_ksfzil.source_id = service.passengerservice_ts.id
) as service_radiocommunicationchannel_pt_upwnjo on TRUE
left join lateral(
  select
  from master_join master_join_tbuoiv
  join shared.contactinformation_view shared_contactinformation_lat_dxhgmj on master_join_tbuoiv.target_id = shared_contactinformation_lat_dxhgmj.id
  where master_join_tbuoiv.source_id = service.passengerservice_ts.id
) as shared_contactinformation_view_eqyyjs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_spvgnj.*) as availability
  from master_join master_join_renkou
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_spvgnj on master_join_renkou.target_id = service_serviceoperationalstatus_lat_spvgnj.id
  where master_join_renkou.source_id = service.passengerservice_ts.id
) as service_serviceoperationalstatus_view_jxxsap on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuerww.*) AS annotation
  from master_join master_join_azmbmn
  join notes.note_view notes_note_lat_vuerww on master_join_azmbmn.target_id = notes_note_lat_vuerww.id
  where master_join_azmbmn.source_id = service.passengerservice_ts.id
) as notes_note_view_pyschb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_trqjid.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_trqjid.title AS varchar), '(' || airport_heliport_airportheliport_lat_trqjid.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_trqjid.href
  )) as airportheliport  from master_join master_join_nzmwus
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_trqjid on master_join_nzmwus.target_id = airport_heliport_airportheliport_lat_trqjid.id
  where master_join_nzmwus.source_id = service.passengerservice_ts.id
) as airport_heliport_airportheliport_pt_zmtopv on TRUE
where service.passengerservice.feature_status = 'APPROVED'
  and service.passengerservice_ts.feature_status = 'APPROVED'
order by passengerservice.identifier, passengerservice_ts.sequence_number, passengerservice_ts.correction_number DESC;
-- PilotControlledLightingTimeSliceType
-- ['airport_heliport.lightactivation_view', 'notes.note_view']
drop materialized view if exists service.pilotcontrolledlighting_view cascade;
create materialized view service.pilotcontrolledlighting_view as
select distinct on (pilotcontrolledlighting.identifier,pilotcontrolledlighting_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.pilotcontrolledlighting.id::integer as id,
    service.pilotcontrolledlighting_ts.id::integer as ts_id,
    service.pilotcontrolledlighting_tsp.id::integer as tsp_id,
    service.pilotcontrolledlighting.identifier::uuid,
    service.pilotcontrolledlighting_ts.interpretation::text,
    service.pilotcontrolledlighting_ts.sequence_number::integer,
    service.pilotcontrolledlighting_ts.correction_number::integer,
    service.pilotcontrolledlighting_ts.valid_time_begin::timestamp,
    service.pilotcontrolledlighting_ts.valid_time_end::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_begin::timestamp,
    service.pilotcontrolledlighting_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.pilotcontrolledlighting_ts.type_value as varchar), '(' || service.pilotcontrolledlighting_ts.type_nilreason || ')')::text as type,
    coalesce(cast(service.pilotcontrolledlighting_ts.intensitysteps_value as varchar), '(' || service.pilotcontrolledlighting_ts.intensitysteps_nilreason || ')')::text as intensitysteps,
    coalesce(cast(service.pilotcontrolledlighting_ts.standbyintensity_value as varchar), '(' || service.pilotcontrolledlighting_ts.standbyintensity_nilreason || ')')::text as standbyintensity,
    coalesce(cast(service.pilotcontrolledlighting_ts.activationinstruction_value as varchar), '(' || service.pilotcontrolledlighting_ts.activationinstruction_nilreason || ')')::text as activationinstruction,
    coalesce(cast(service.pilotcontrolledlighting_ts.duration_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.duration_uom, '(' || service.pilotcontrolledlighting_ts.duration_nilreason || ')')::text as duration,
    coalesce(cast(service.pilotcontrolledlighting_ts.radiofrequency_value as varchar) || ' ' || service.pilotcontrolledlighting_ts.radiofrequency_uom, '(' || service.pilotcontrolledlighting_ts.radiofrequency_nilreason || ')')::text as radiofrequency,
    airport_heliport_lightactivation_view_ppyncm.controlledlightintensity::jsonb as controlledlightintensity,
    notes_note_view_umvwsy.annotation::jsonb as annotation
from service.pilotcontrolledlighting 
inner join master_join mj2 on service.pilotcontrolledlighting.id = mj2.source_id
inner join service.pilotcontrolledlighting_tsp on mj2.target_id = service.pilotcontrolledlighting_tsp.id
inner join service.pilotcontrolledlighting_ts on service.pilotcontrolledlighting_tsp.pilotcontrolledlightingtimeslice_id = service.pilotcontrolledlighting_ts.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_lightactivation_lat_ckmxyu.*) as controlledlightintensity
  from master_join master_join_pfvvkf
  join airport_heliport.lightactivation_view airport_heliport_lightactivation_lat_ckmxyu on master_join_pfvvkf.target_id = airport_heliport_lightactivation_lat_ckmxyu.id
  where master_join_pfvvkf.source_id = service.pilotcontrolledlighting_ts.id
) as airport_heliport_lightactivation_view_ppyncm on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ebjipx.*) AS annotation
  from master_join master_join_zrotvp
  join notes.note_view notes_note_lat_ebjipx on master_join_zrotvp.target_id = notes_note_lat_ebjipx.id
  where master_join_zrotvp.source_id = service.pilotcontrolledlighting_ts.id
) as notes_note_view_umvwsy on TRUE
where service.pilotcontrolledlighting.feature_status = 'APPROVED'
  and service.pilotcontrolledlighting_ts.feature_status = 'APPROVED'
order by pilotcontrolledlighting.identifier, pilotcontrolledlighting_ts.sequence_number, pilotcontrolledlighting_ts.correction_number DESC;
-- PrecisionApproachRadarTimeSliceType
-- ['shared.contactinformation_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.reflector_view']
drop materialized view if exists surveillance.precisionapproachradar_view cascade;
create materialized view surveillance.precisionapproachradar_view as
select distinct on (precisionapproachradar.identifier,precisionapproachradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.precisionapproachradar.id::integer as id,
    surveillance.precisionapproachradar_ts.id::integer as ts_id,
    surveillance.precisionapproachradar_tsp.id::integer as tsp_id,
    surveillance.precisionapproachradar.identifier::uuid,
    surveillance.precisionapproachradar_ts.interpretation::text,
    surveillance.precisionapproachradar_ts.sequence_number::integer,
    surveillance.precisionapproachradar_ts.correction_number::integer,
    surveillance.precisionapproachradar_ts.valid_time_begin::timestamp,
    surveillance.precisionapproachradar_ts.valid_time_end::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_begin::timestamp,
    surveillance.precisionapproachradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.precisionapproachradar_ts.name_value as varchar), '(' || surveillance.precisionapproachradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.precisionapproachradar_ts.serialnumber_value as varchar), '(' || surveillance.precisionapproachradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.precisionapproachradar_ts.dualchannel_value as varchar), '(' || surveillance.precisionapproachradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.precisionapproachradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.precisionapproachradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.precisionapproachradar_ts.standbypower_value as varchar), '(' || surveillance.precisionapproachradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.precisionapproachradar_ts.digital_value as varchar), '(' || surveillance.precisionapproachradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.precisionapproachradar_ts.militaryuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialuseonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.precisionapproachradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.precisionapproachradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.precisionapproachradar_ts.precisionapproachradartype_value as varchar), '(' || surveillance.precisionapproachradar_ts.precisionapproachradartype_nilreason || ')')::text as precisionapproachradartype,
    coalesce(cast(surveillance.precisionapproachradar_ts.slope_value as varchar), '(' || surveillance.precisionapproachradar_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(surveillance.precisionapproachradar_ts.slopeaccuracy_value as varchar), '(' || surveillance.precisionapproachradar_ts.slopeaccuracy_nilreason || ')')::text as slopeaccuracy,
    coalesce(cast(surveillance.precisionapproachradar_ts.range_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.range_uom, '(' || surveillance.precisionapproachradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.precisionapproachradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.precisionapproachradar_ts.rangeaccuracy_uom, '(' || surveillance.precisionapproachradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    geometry_elevatedpoint_view_bxpixl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bxpixl.longitude AS location_longitude,
    geometry_elevatedpoint_view_bxpixl.latitude AS location_latitude,
    geometry_elevatedpoint_view_bxpixl.elevation AS location_elevation,
    geometry_elevatedpoint_view_bxpixl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bxpixl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bxpixl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bxpixl.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ggxkvu.annotation::jsonb as annotation,
    surveillance_reflector_view_hljmhb.reflector::jsonb as reflector
from surveillance.precisionapproachradar 
inner join master_join mj2 on surveillance.precisionapproachradar.id = mj2.source_id
inner join surveillance.precisionapproachradar_tsp on mj2.target_id = surveillance.precisionapproachradar_tsp.id
inner join surveillance.precisionapproachradar_ts on surveillance.precisionapproachradar_tsp.precisionapproachradartimeslice_id = surveillance.precisionapproachradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bxpixl on surveillance.precisionapproachradar_ts.location_id = geometry_elevatedpoint_view_bxpixl.id
left join lateral(
  select
  from master_join master_join_dmgfzh
  join shared.contactinformation_view shared_contactinformation_lat_rbbtwx on master_join_dmgfzh.target_id = shared_contactinformation_lat_rbbtwx.id
  where master_join_dmgfzh.source_id = surveillance.precisionapproachradar_ts.id
) as shared_contactinformation_view_hygdvp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sogyeh.*) AS annotation
  from master_join master_join_cvxsgi
  join notes.note_view notes_note_lat_sogyeh on master_join_cvxsgi.target_id = notes_note_lat_sogyeh.id
  where master_join_cvxsgi.source_id = surveillance.precisionapproachradar_ts.id
) as notes_note_view_ggxkvu on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_reflector_lat_xthphf.*) as reflector
  from master_join master_join_eynlzj
  join surveillance.reflector_view surveillance_reflector_lat_xthphf on master_join_eynlzj.target_id = surveillance_reflector_lat_xthphf.id
  where master_join_eynlzj.source_id = surveillance.precisionapproachradar_ts.id
) as surveillance_reflector_view_hljmhb on TRUE
where surveillance.precisionapproachradar.feature_status = 'APPROVED'
  and surveillance.precisionapproachradar_ts.feature_status = 'APPROVED'
order by precisionapproachradar.identifier, precisionapproachradar_ts.sequence_number, precisionapproachradar_ts.correction_number DESC;
-- PrimarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.primarysurveillanceradar_view cascade;
create materialized view surveillance.primarysurveillanceradar_view as
select distinct on (primarysurveillanceradar.identifier,primarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.primarysurveillanceradar.id::integer as id,
    surveillance.primarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.primarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.primarysurveillanceradar.identifier::uuid,
    surveillance.primarysurveillanceradar_ts.interpretation::text,
    surveillance.primarysurveillanceradar_ts.sequence_number::integer,
    surveillance.primarysurveillanceradar_ts.correction_number::integer,
    surveillance.primarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.primarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.type_value as varchar), '(' || surveillance.primarysurveillanceradar_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.range_uom, '(' || surveillance.primarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.primarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.primarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_ipyqop.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ipyqop.longitude AS location_longitude,
    geometry_elevatedpoint_view_ipyqop.latitude AS location_latitude,
    geometry_elevatedpoint_view_ipyqop.elevation AS location_elevation,
    geometry_elevatedpoint_view_ipyqop.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ipyqop.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ipyqop.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ipyqop.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_ldmkpo.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_ivetps.groundstation::jsonb as groundstation
from surveillance.primarysurveillanceradar 
inner join master_join mj2 on surveillance.primarysurveillanceradar.id = mj2.source_id
inner join surveillance.primarysurveillanceradar_tsp on mj2.target_id = surveillance.primarysurveillanceradar_tsp.id
inner join surveillance.primarysurveillanceradar_ts on surveillance.primarysurveillanceradar_tsp.primarysurveillanceradartimeslice_id = surveillance.primarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ipyqop on surveillance.primarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_ipyqop.id
left join lateral(
  select
  from master_join master_join_tmpong
  join shared.contactinformation_view shared_contactinformation_lat_ycrzhc on master_join_tmpong.target_id = shared_contactinformation_lat_ycrzhc.id
  where master_join_tmpong.source_id = surveillance.primarysurveillanceradar_ts.id
) as shared_contactinformation_view_fcadsc on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gczait.*) AS annotation
  from master_join master_join_kwxnfg
  join notes.note_view notes_note_lat_gczait on master_join_kwxnfg.target_id = notes_note_lat_gczait.id
  where master_join_kwxnfg.source_id = surveillance.primarysurveillanceradar_ts.id
) as notes_note_view_ldmkpo on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_xlqtkz.*) as groundstation
  from master_join master_join_sopvod
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_xlqtkz on master_join_sopvod.target_id = surveillance_surveillancegroundstation_lat_xlqtkz.id
  where master_join_sopvod.source_id = surveillance.primarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_ivetps on TRUE
where surveillance.primarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.primarysurveillanceradar_ts.feature_status = 'APPROVED'
order by primarysurveillanceradar.identifier, primarysurveillanceradar_ts.sequence_number, primarysurveillanceradar_ts.correction_number DESC;
-- ProcedureDMETimeSliceType
-- ['notes.note_view']
drop materialized view if exists procedure.proceduredme_view cascade;
create materialized view procedure.proceduredme_view as
select distinct on (proceduredme.identifier,proceduredme_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.proceduredme.id::integer as id,
    procedure.proceduredme_ts.id::integer as ts_id,
    procedure.proceduredme_tsp.id::integer as tsp_id,
    procedure.proceduredme.identifier::uuid,
    procedure.proceduredme_ts.interpretation::text,
    procedure.proceduredme_ts.sequence_number::integer,
    procedure.proceduredme_ts.correction_number::integer,
    procedure.proceduredme_ts.valid_time_begin::timestamp,
    procedure.proceduredme_ts.valid_time_end::timestamp,
    procedure.proceduredme_ts.feature_lifetime_begin::timestamp,
    procedure.proceduredme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.proceduredme_ts.criticaldme_value as varchar), '(' || procedure.proceduredme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(procedure.proceduredme_ts.satisfactory_value as varchar), '(' || procedure.proceduredme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_jqpasb.title as varchar), '(' || navaids_points_dme_pt_jqpasb.nilreason[1] || ')')::text AS dme,
    navaids_points_dme_pt_jqpasb.href::text AS dme_href,
    notes_note_view_oxvzgw.annotation::jsonb as annotation
from procedure.proceduredme 
inner join master_join mj2 on procedure.proceduredme.id = mj2.source_id
inner join procedure.proceduredme_tsp on mj2.target_id = procedure.proceduredme_tsp.id
inner join procedure.proceduredme_ts on procedure.proceduredme_tsp.proceduredmetimeslice_id = procedure.proceduredme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_jqpasb on procedure.proceduredme_ts.dme_id = navaids_points_dme_pt_jqpasb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_hmrftw.*) AS annotation
  from master_join master_join_jlwrxp
  join notes.note_view notes_note_lat_hmrftw on master_join_jlwrxp.target_id = notes_note_lat_hmrftw.id
  where master_join_jlwrxp.source_id = procedure.proceduredme_ts.id
) as notes_note_view_oxvzgw on TRUE
where procedure.proceduredme.feature_status = 'APPROVED'
  and procedure.proceduredme_ts.feature_status = 'APPROVED'
order by proceduredme.identifier, proceduredme_ts.sequence_number, proceduredme_ts.correction_number DESC;
-- RadarSystemTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'surveillance.radarcomponent_view']
drop materialized view if exists surveillance.radarsystem_view cascade;
create materialized view surveillance.radarsystem_view as
select distinct on (radarsystem.identifier,radarsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.radarsystem.id::integer as id,
    surveillance.radarsystem_ts.id::integer as ts_id,
    surveillance.radarsystem_tsp.id::integer as tsp_id,
    surveillance.radarsystem.identifier::uuid,
    surveillance.radarsystem_ts.interpretation::text,
    surveillance.radarsystem_ts.sequence_number::integer,
    surveillance.radarsystem_ts.correction_number::integer,
    surveillance.radarsystem_ts.valid_time_begin::timestamp,
    surveillance.radarsystem_ts.valid_time_end::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_begin::timestamp,
    surveillance.radarsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.radarsystem_ts.type_value as varchar), '(' || surveillance.radarsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(surveillance.radarsystem_ts.model_value as varchar), '(' || surveillance.radarsystem_ts.model_nilreason || ')')::text as model,
    coalesce(cast(surveillance.radarsystem_ts.generalterrainmonitor_value as varchar), '(' || surveillance.radarsystem_ts.generalterrainmonitor_nilreason || ')')::text as generalterrainmonitor,
    coalesce(cast(surveillance.radarsystem_ts.broadcastidentifier_value as varchar), '(' || surveillance.radarsystem_ts.broadcastidentifier_nilreason || ')')::text as broadcastidentifier,
    coalesce(cast(airport_heliport_airportheliport_pt_ohhtdd.title as varchar), '(' || airport_heliport_airportheliport_pt_ohhtdd.nilreason[1] || ')')::text AS airportheliport,
    airport_heliport_airportheliport_pt_ohhtdd.href::text AS airportheliport_href,
    geometry_elevatedpoint_view_srvwoi.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_srvwoi.longitude AS location_longitude,
    geometry_elevatedpoint_view_srvwoi.latitude AS location_latitude,
    geometry_elevatedpoint_view_srvwoi.elevation AS location_elevation,
    geometry_elevatedpoint_view_srvwoi.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_srvwoi.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_srvwoi.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_srvwoi.horizontalAccuracy AS location_horizontalaccuracy,
    surveillance_radarcomponent_view_gjcqtc.radarequipment::jsonb as radarequipment,
    organisation_organisationauthority_pt_zemlfy.office::jsonb as office,
    airport_heliport_runway_pt_xoeuil.parrunway::jsonb as parrunway,
    notes_note_view_gyysva.annotation::jsonb as annotation
from surveillance.radarsystem 
inner join master_join mj2 on surveillance.radarsystem.id = mj2.source_id
inner join surveillance.radarsystem_tsp on mj2.target_id = surveillance.radarsystem_tsp.id
inner join surveillance.radarsystem_ts on surveillance.radarsystem_tsp.radarsystemtimeslice_id = surveillance.radarsystem_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ohhtdd on surveillance.radarsystem_ts.airportheliport_id = airport_heliport_airportheliport_pt_ohhtdd.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_srvwoi on surveillance.radarsystem_ts.location_id = geometry_elevatedpoint_view_srvwoi.id
left join lateral(
  select jsonb_agg(DISTINCT surveillance_radarcomponent_lat_vucpfd.*) as radarequipment
  from master_join master_join_nlghgs
  join surveillance.radarcomponent_view surveillance_radarcomponent_lat_vucpfd on master_join_nlghgs.target_id = surveillance_radarcomponent_lat_vucpfd.id
  where master_join_nlghgs.source_id = surveillance.radarsystem_ts.id
) as surveillance_radarcomponent_view_gjcqtc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_theaqn.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_theaqn.title AS varchar), '(' || organisation_organisationauthority_lat_theaqn.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_theaqn.href
  )) as office  from master_join master_join_ctnbwo
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_theaqn on master_join_ctnbwo.target_id = organisation_organisationauthority_lat_theaqn.id
  where master_join_ctnbwo.source_id = surveillance.radarsystem_ts.id
) as organisation_organisationauthority_pt_zemlfy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_rgmfok.id,
      'title', coalesce(cast(airport_heliport_runway_lat_rgmfok.title AS varchar), '(' || airport_heliport_runway_lat_rgmfok.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_rgmfok.href
  )) as parrunway  from master_join master_join_mdvczo
  join airport_heliport.runway_pt airport_heliport_runway_lat_rgmfok on master_join_mdvczo.target_id = airport_heliport_runway_lat_rgmfok.id
  where master_join_mdvczo.source_id = surveillance.radarsystem_ts.id
) as airport_heliport_runway_pt_xoeuil on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nwtqri.*) AS annotation
  from master_join master_join_ggpfbj
  join notes.note_view notes_note_lat_nwtqri on master_join_ggpfbj.target_id = notes_note_lat_nwtqri.id
  where master_join_ggpfbj.source_id = surveillance.radarsystem_ts.id
) as notes_note_view_gyysva on TRUE
where surveillance.radarsystem.feature_status = 'APPROVED'
  and surveillance.radarsystem_ts.feature_status = 'APPROVED'
order by radarsystem.identifier, radarsystem_ts.sequence_number, radarsystem_ts.correction_number DESC;
-- RadioCommunicationChannelTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'service.radiocommunicationoperationalstatus_view']
drop materialized view if exists service.radiocommunicationchannel_view cascade;
create materialized view service.radiocommunicationchannel_view as
select distinct on (radiocommunicationchannel.identifier,radiocommunicationchannel_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.radiocommunicationchannel.id::integer as id,
    service.radiocommunicationchannel_ts.id::integer as ts_id,
    service.radiocommunicationchannel_tsp.id::integer as tsp_id,
    service.radiocommunicationchannel.identifier::uuid,
    service.radiocommunicationchannel_ts.interpretation::text,
    service.radiocommunicationchannel_ts.sequence_number::integer,
    service.radiocommunicationchannel_ts.correction_number::integer,
    service.radiocommunicationchannel_ts.valid_time_begin::timestamp,
    service.radiocommunicationchannel_ts.valid_time_end::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_begin::timestamp,
    service.radiocommunicationchannel_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.radiocommunicationchannel_ts.mode_value as varchar), '(' || service.radiocommunicationchannel_ts.mode_nilreason || ')')::text as mode,
    coalesce(cast(service.radiocommunicationchannel_ts.rank_value as varchar), '(' || service.radiocommunicationchannel_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.radiocommunicationchannel_ts.channel_value as varchar), '(' || service.radiocommunicationchannel_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(service.radiocommunicationchannel_ts.logon_value as varchar), '(' || service.radiocommunicationchannel_ts.logon_nilreason || ')')::text as logon,
    coalesce(cast(service.radiocommunicationchannel_ts.emissiontype_value as varchar), '(' || service.radiocommunicationchannel_ts.emissiontype_nilreason || ')')::text as emissiontype,
    coalesce(cast(service.radiocommunicationchannel_ts.selectivecall_value as varchar), '(' || service.radiocommunicationchannel_ts.selectivecall_nilreason || ')')::text as selectivecall,
    coalesce(cast(service.radiocommunicationchannel_ts.flightchecked_value as varchar), '(' || service.radiocommunicationchannel_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(service.radiocommunicationchannel_ts.trafficdirection_value as varchar), '(' || service.radiocommunicationchannel_ts.trafficdirection_nilreason || ')')::text as trafficdirection,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencytransmission_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencytransmission_uom, '(' || service.radiocommunicationchannel_ts.frequencytransmission_nilreason || ')')::text as frequencytransmission,
    coalesce(cast(service.radiocommunicationchannel_ts.frequencyreception_value as varchar) || ' ' || service.radiocommunicationchannel_ts.frequencyreception_uom, '(' || service.radiocommunicationchannel_ts.frequencyreception_nilreason || ')')::text as frequencyreception,
    geometry_elevatedpoint_view_xvfozw.geom::geometry(MULTIPOINT, 4326) as location_geom,
    geometry_elevatedpoint_view_xvfozw.attr::jsonb as location,
    service_radiocommunicationoperationalstatus_view_uvnnza.availability::jsonb as availability,
    notes_note_view_oxndcs.annotation::jsonb as annotation
from service.radiocommunicationchannel 
inner join master_join mj2 on service.radiocommunicationchannel.id = mj2.source_id
inner join service.radiocommunicationchannel_tsp on mj2.target_id = service.radiocommunicationchannel_tsp.id
inner join service.radiocommunicationchannel_ts on service.radiocommunicationchannel_tsp.radiocommunicationchanneltimeslice_id = service.radiocommunicationchannel_ts.id
left join lateral(
  select
    ST_Collect(DISTINCT geometry_elevatedpoint_lat_djncsc.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_elevatedpoint_lat_djncsc.id,
      'longitude', geometry_elevatedpoint_lat_djncsc.longitude,
      'latitude', geometry_elevatedpoint_lat_djncsc.latitude,
      'elevation', geometry_elevatedpoint_lat_djncsc.elevation,
      'geoidUndulation', geometry_elevatedpoint_lat_djncsc.geoidUndulation,
      'verticalDatum', geometry_elevatedpoint_lat_djncsc.verticalDatum,
      'verticalAccuracy', geometry_elevatedpoint_lat_djncsc.verticalAccuracy,
      'horizontalAccuracy', geometry_elevatedpoint_lat_djncsc.horizontalAccuracy
    )) AS attr
  from master_join master_join_pwgxsm
  join geometry.elevatedpoint_view geometry_elevatedpoint_lat_djncsc on master_join_pwgxsm.target_id = geometry_elevatedpoint_lat_djncsc.id
  where master_join_pwgxsm.source_id = service.radiocommunicationchannel_ts.id
) as geometry_elevatedpoint_view_xvfozw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_radiocommunicationoperationalstatus_lat_iyvaco.*) as availability
  from master_join master_join_tizeam
  join service.radiocommunicationoperationalstatus_view service_radiocommunicationoperationalstatus_lat_iyvaco on master_join_tizeam.target_id = service_radiocommunicationoperationalstatus_lat_iyvaco.id
  where master_join_tizeam.source_id = service.radiocommunicationchannel_ts.id
) as service_radiocommunicationoperationalstatus_view_uvnnza on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tpmcdc.*) AS annotation
  from master_join master_join_spcsdj
  join notes.note_view notes_note_lat_tpmcdc on master_join_spcsdj.target_id = notes_note_lat_tpmcdc.id
  where master_join_spcsdj.source_id = service.radiocommunicationchannel_ts.id
) as notes_note_view_oxndcs on TRUE
where service.radiocommunicationchannel.feature_status = 'APPROVED'
  and service.radiocommunicationchannel_ts.feature_status = 'APPROVED'
order by radiocommunicationchannel.identifier, radiocommunicationchannel_ts.sequence_number, radiocommunicationchannel_ts.correction_number DESC;
-- RadioFrequencyAreaTimeSliceType
-- ['notes.note_view', 'geometry.surface_view', 'shared.circlesector_view']
drop materialized view if exists shared.radiofrequencyarea_view cascade;
create materialized view shared.radiofrequencyarea_view as
select distinct on (radiofrequencyarea.identifier,radiofrequencyarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.radiofrequencyarea.id::integer as id,
    shared.radiofrequencyarea_ts.id::integer as ts_id,
    shared.radiofrequencyarea_tsp.id::integer as tsp_id,
    shared.radiofrequencyarea.identifier::uuid,
    shared.radiofrequencyarea_ts.interpretation::text,
    shared.radiofrequencyarea_ts.sequence_number::integer,
    shared.radiofrequencyarea_ts.correction_number::integer,
    shared.radiofrequencyarea_ts.valid_time_begin::timestamp,
    shared.radiofrequencyarea_ts.valid_time_end::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_begin::timestamp,
    shared.radiofrequencyarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.radiofrequencyarea_ts.type_value as varchar), '(' || shared.radiofrequencyarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.radiofrequencyarea_ts.anglescallop_value as varchar), '(' || shared.radiofrequencyarea_ts.anglescallop_nilreason || ')')::text as anglescallop,
    coalesce(cast(shared.radiofrequencyarea_ts.signaltype_value as varchar), '(' || shared.radiofrequencyarea_ts.signaltype_nilreason || ')')::text as signaltype,
    coalesce(cast(service_radiocommunicationchannel_pt_pcljex.title as varchar), '(' || service_radiocommunicationchannel_pt_pcljex.nilreason[1] || ')')::text AS equipmentfrequency,
    service_radiocommunicationchannel_pt_pcljex.href::text AS equipmentfrequency_href,
    coalesce(cast(navaids_points_specialnavigationstation_pt_rngdlm.title as varchar), '(' || navaids_points_specialnavigationstation_pt_rngdlm.nilreason[1] || ')')::text AS equipmentspecialnavigationstation,
    navaids_points_specialnavigationstation_pt_rngdlm.href::text AS equipmentspecialnavigationstation_href,
    coalesce(cast(surveillance_precisionapproachradar_pt_sormbm.title as varchar), '(' || surveillance_precisionapproachradar_pt_sormbm.nilreason[1] || ')')::text AS equipmentprecisionapproachradar,
    surveillance_precisionapproachradar_pt_sormbm.href::text AS equipmentprecisionapproachradar_href,
    coalesce(cast(surveillance_secondarysurveillanceradar_pt_evciwa.title as varchar), '(' || surveillance_secondarysurveillanceradar_pt_evciwa.nilreason[1] || ')')::text AS equipmentradar,
    surveillance_secondarysurveillanceradar_pt_evciwa.href::text AS equipmentradar_href,
    shared_circlesector_view_ldbduh.sector::jsonb as sector,
    geometry_surface_view_suzbrk.geom::geometry(MULTIPOLYGON, 4326) as extent_geom,
    geometry_surface_view_suzbrk.attr::jsonb as extent,
    notes_note_view_uplbme.annotation::jsonb as annotation
from shared.radiofrequencyarea 
inner join master_join mj2 on shared.radiofrequencyarea.id = mj2.source_id
inner join shared.radiofrequencyarea_tsp on mj2.target_id = shared.radiofrequencyarea_tsp.id
inner join shared.radiofrequencyarea_ts on shared.radiofrequencyarea_tsp.radiofrequencyareatimeslice_id = shared.radiofrequencyarea_ts.id
left join service.radiocommunicationchannel_pt service_radiocommunicationchannel_pt_pcljex on shared.radiofrequencyarea_ts.equipment_frequency_id = service_radiocommunicationchannel_pt_pcljex.id
left join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_pt_rngdlm on shared.radiofrequencyarea_ts.equipment_specialnavigationstation_id = navaids_points_specialnavigationstation_pt_rngdlm.id
left join surveillance.precisionapproachradar_pt surveillance_precisionapproachradar_pt_sormbm on shared.radiofrequencyarea_ts.equipment_precisionapproachradar_id = surveillance_precisionapproachradar_pt_sormbm.id
left join surveillance.secondarysurveillanceradar_pt surveillance_secondarysurveillanceradar_pt_evciwa on shared.radiofrequencyarea_ts.equipment_radar_id = surveillance_secondarysurveillanceradar_pt_evciwa.id
left join lateral(
  select jsonb_agg(DISTINCT shared_circlesector_lat_bpmfkl.*) as sector
  from master_join master_join_hinsma
  join shared.circlesector_view shared_circlesector_lat_bpmfkl on master_join_hinsma.target_id = shared_circlesector_lat_bpmfkl.id
  where master_join_hinsma.source_id = shared.radiofrequencyarea_ts.id
) as shared_circlesector_view_ldbduh on TRUE
left join lateral(
  select
    ST_Collect(DISTINCT geometry_surface_lat_valcqg.geom) AS geom,
    jsonb_agg(DISTINCT jsonb_build_object(
      'id', geometry_surface_lat_valcqg.id,
      'horizontalAccuracy', geometry_surface_lat_valcqg.horizontalAccuracy
    )) AS attr
  from master_join master_join_hujsxq
  join geometry.surface_view geometry_surface_lat_valcqg on master_join_hujsxq.target_id = geometry_surface_lat_valcqg.id
  where master_join_hujsxq.source_id = shared.radiofrequencyarea_ts.id
) as geometry_surface_view_suzbrk on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kqobju.*) AS annotation
  from master_join master_join_yafxto
  join notes.note_view notes_note_lat_kqobju on master_join_yafxto.target_id = notes_note_lat_kqobju.id
  where master_join_yafxto.source_id = shared.radiofrequencyarea_ts.id
) as notes_note_view_uplbme on TRUE
where shared.radiofrequencyarea.feature_status = 'APPROVED'
  and shared.radiofrequencyarea_ts.feature_status = 'APPROVED'
order by radiofrequencyarea.identifier, radiofrequencyarea_ts.sequence_number, radiofrequencyarea_ts.correction_number DESC;
-- RoadTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.road_view cascade;
create materialized view airport_heliport.road_view as
select distinct on (road.identifier,road_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.road.id::integer as id,
    airport_heliport.road_ts.id::integer as ts_id,
    airport_heliport.road_tsp.id::integer as tsp_id,
    airport_heliport.road.identifier::uuid,
    airport_heliport.road_ts.interpretation::text,
    airport_heliport.road_ts.sequence_number::integer,
    airport_heliport.road_ts.correction_number::integer,
    airport_heliport.road_ts.valid_time_begin::timestamp,
    airport_heliport.road_ts.valid_time_end::timestamp,
    airport_heliport.road_ts.feature_lifetime_begin::timestamp,
    airport_heliport.road_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.road_ts.designator_value as varchar), '(' || airport_heliport.road_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.road_ts.status_value as varchar), '(' || airport_heliport.road_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.road_ts.type_value as varchar), '(' || airport_heliport.road_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.road_ts.abandoned_value as varchar), '(' || airport_heliport.road_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport_airportheliport_pt_tlppzc.title as varchar), '(' || airport_heliport_airportheliport_pt_tlppzc.nilreason[1] || ')')::text AS associatedairport,
    airport_heliport_airportheliport_pt_tlppzc.href::text AS associatedairport_href,
    to_jsonb(airport_heliport_surfacecharacteristics_view_lcccro.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_uprdvh.geom::geometry(POLYGON, 4326) AS surfaceextent_geom,
    geometry_elevatedsurface_view_uprdvh.elevation AS surfaceextent_elevation,
    geometry_elevatedsurface_view_uprdvh.geoidUndulation AS surfaceextent_geoidundulation,
    geometry_elevatedsurface_view_uprdvh.verticalDatum AS surfaceextent_verticaldatum,
    geometry_elevatedsurface_view_uprdvh.verticalAccuracy AS surfaceextent_verticalaccuracy,
    geometry_elevatedsurface_view_uprdvh.horizontalAccuracy AS surfaceextent_horizontalaccuracy,
    airport_heliport_aircraftstand_pt_sfyssn.accessiblestand::jsonb as accessiblestand,
    notes_note_view_feogwz.annotation::jsonb as annotation
from airport_heliport.road 
inner join master_join mj2 on airport_heliport.road.id = mj2.source_id
inner join airport_heliport.road_tsp on mj2.target_id = airport_heliport.road_tsp.id
inner join airport_heliport.road_ts on airport_heliport.road_tsp.roadtimeslice_id = airport_heliport.road_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tlppzc on airport_heliport.road_ts.associatedairport_id = airport_heliport_airportheliport_pt_tlppzc.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_lcccro on airport_heliport.road_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_lcccro.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_uprdvh on airport_heliport.road_ts.surfaceextent_id = geometry_elevatedsurface_view_uprdvh.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_aircraftstand_lat_rsbuud.id,
      'title', coalesce(cast(airport_heliport_aircraftstand_lat_rsbuud.title AS varchar), '(' || airport_heliport_aircraftstand_lat_rsbuud.nilreason[1] || ')'),
      'href', airport_heliport_aircraftstand_lat_rsbuud.href
  )) as accessiblestand  from master_join master_join_oqvxgo
  join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_lat_rsbuud on master_join_oqvxgo.target_id = airport_heliport_aircraftstand_lat_rsbuud.id
  where master_join_oqvxgo.source_id = airport_heliport.road_ts.id
) as airport_heliport_aircraftstand_pt_sfyssn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gfimia.*) AS annotation
  from master_join master_join_bgnnvo
  join notes.note_view notes_note_lat_gfimia on master_join_bgnnvo.target_id = notes_note_lat_gfimia.id
  where master_join_bgnnvo.source_id = airport_heliport.road_ts.id
) as notes_note_view_feogwz on TRUE
where airport_heliport.road.feature_status = 'APPROVED'
  and airport_heliport.road_ts.feature_status = 'APPROVED'
order by road.identifier, road_ts.sequence_number, road_ts.correction_number DESC;
-- RouteDMETimeSliceType
-- ['notes.note_view', 'routes.routeportion_view']
drop materialized view if exists routes.routedme_view cascade;
create materialized view routes.routedme_view as
select distinct on (routedme.identifier,routedme_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routedme.id::integer as id,
    routes.routedme_ts.id::integer as ts_id,
    routes.routedme_tsp.id::integer as tsp_id,
    routes.routedme.identifier::uuid,
    routes.routedme_ts.interpretation::text,
    routes.routedme_ts.sequence_number::integer,
    routes.routedme_ts.correction_number::integer,
    routes.routedme_ts.valid_time_begin::timestamp,
    routes.routedme_ts.valid_time_end::timestamp,
    routes.routedme_ts.feature_lifetime_begin::timestamp,
    routes.routedme_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routedme_ts.criticaldme_value as varchar), '(' || routes.routedme_ts.criticaldme_nilreason || ')')::text as criticaldme,
    coalesce(cast(routes.routedme_ts.satisfactory_value as varchar), '(' || routes.routedme_ts.satisfactory_nilreason || ')')::text as satisfactory,
    coalesce(cast(navaids_points_dme_pt_wtelrd.title as varchar), '(' || navaids_points_dme_pt_wtelrd.nilreason[1] || ')')::text AS referenceddme,
    navaids_points_dme_pt_wtelrd.href::text AS referenceddme_href,
    to_jsonb(routes_routeportion_view_evulia.*)::jsonb AS applicablerouteportion,
    notes_note_view_vehzvw.annotation::jsonb as annotation
from routes.routedme 
inner join master_join mj2 on routes.routedme.id = mj2.source_id
inner join routes.routedme_tsp on mj2.target_id = routes.routedme_tsp.id
inner join routes.routedme_ts on routes.routedme_tsp.routedmetimeslice_id = routes.routedme_ts.id
left join navaids_points.dme_pt navaids_points_dme_pt_wtelrd on routes.routedme_ts.referenceddme_id = navaids_points_dme_pt_wtelrd.id
left join routes.routeportion_view routes_routeportion_view_evulia on routes.routedme_ts.applicablerouteportion_id = routes_routeportion_view_evulia.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_depbcb.*) AS annotation
  from master_join master_join_qnfdxd
  join notes.note_view notes_note_lat_depbcb on master_join_qnfdxd.target_id = notes_note_lat_depbcb.id
  where master_join_qnfdxd.source_id = routes.routedme_ts.id
) as notes_note_view_vehzvw on TRUE
where routes.routedme.feature_status = 'APPROVED'
  and routes.routedme_ts.feature_status = 'APPROVED'
order by routedme.identifier, routedme_ts.sequence_number, routedme_ts.correction_number DESC;
-- RouteSegmentTimeSliceType
-- ['notes.note_view', 'routes.routeavailability_view', 'geometry.curve_view', 'navaids_points.enroutesegmentpoint_view', 'shared.obstacleassessmentarea_view']
drop materialized view if exists routes.routesegment_view cascade;
create materialized view routes.routesegment_view as
select distinct on (routesegment.identifier,routesegment_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.routesegment.id::integer as id,
    routes.routesegment_ts.id::integer as ts_id,
    routes.routesegment_tsp.id::integer as tsp_id,
    routes.routesegment.identifier::uuid,
    routes.routesegment_ts.interpretation::text,
    routes.routesegment_ts.sequence_number::integer,
    routes.routesegment_ts.correction_number::integer,
    routes.routesegment_ts.valid_time_begin::timestamp,
    routes.routesegment_ts.valid_time_end::timestamp,
    routes.routesegment_ts.feature_lifetime_begin::timestamp,
    routes.routesegment_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.routesegment_ts.level_value as varchar), '(' || routes.routesegment_ts.level_nilreason || ')')::text as level,
    coalesce(cast(routes.routesegment_ts.upperlimitreference_value as varchar), '(' || routes.routesegment_ts.upperlimitreference_nilreason || ')')::text as upperlimitreference,
    coalesce(cast(routes.routesegment_ts.lowerlimitreference_value as varchar), '(' || routes.routesegment_ts.lowerlimitreference_nilreason || ')')::text as lowerlimitreference,
    coalesce(cast(routes.routesegment_ts.pathtype_value as varchar), '(' || routes.routesegment_ts.pathtype_nilreason || ')')::text as pathtype,
    coalesce(cast(routes.routesegment_ts.truetrack_value as varchar), '(' || routes.routesegment_ts.truetrack_nilreason || ')')::text as truetrack,
    coalesce(cast(routes.routesegment_ts.magnetictrack_value as varchar), '(' || routes.routesegment_ts.magnetictrack_nilreason || ')')::text as magnetictrack,
    coalesce(cast(routes.routesegment_ts.reversetruetrack_value as varchar), '(' || routes.routesegment_ts.reversetruetrack_nilreason || ')')::text as reversetruetrack,
    coalesce(cast(routes.routesegment_ts.reversemagnetictrack_value as varchar), '(' || routes.routesegment_ts.reversemagnetictrack_nilreason || ')')::text as reversemagnetictrack,
    coalesce(cast(routes.routesegment_ts.turndirection_value as varchar), '(' || routes.routesegment_ts.turndirection_nilreason || ')')::text as turndirection,
    coalesce(cast(routes.routesegment_ts.signalgap_value as varchar), '(' || routes.routesegment_ts.signalgap_nilreason || ')')::text as signalgap,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.minimumcrossingatendreference_nilreason || ')')::text as minimumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatendreference_value as varchar), '(' || routes.routesegment_ts.maximumcrossingatendreference_nilreason || ')')::text as maximumcrossingatendreference,
    coalesce(cast(routes.routesegment_ts.navigationtype_value as varchar), '(' || routes.routesegment_ts.navigationtype_nilreason || ')')::text as navigationtype,
    coalesce(cast(routes.routesegment_ts.requirednavigationperformance_value as varchar), '(' || routes.routesegment_ts.requirednavigationperformance_nilreason || ')')::text as requirednavigationperformance,
    coalesce(cast(routes.routesegment_ts.designatorsuffix_value as varchar), '(' || routes.routesegment_ts.designatorsuffix_nilreason || ')')::text as designatorsuffix,
    coalesce(cast(routes.routesegment_ts.upperlimit_value as varchar) || ' ' || routes.routesegment_ts.upperlimit_uom, '(' || routes.routesegment_ts.upperlimit_nilreason || ')')::text as upperlimit,
    coalesce(cast(routes.routesegment_ts.lowerlimit_value as varchar) || ' ' || routes.routesegment_ts.lowerlimit_uom, '(' || routes.routesegment_ts.lowerlimit_nilreason || ')')::text as lowerlimit,
    coalesce(cast(routes.routesegment_ts.minimumobstacleclearancealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumobstacleclearancealtitude_uom, '(' || routes.routesegment_ts.minimumobstacleclearancealtitude_nilreason || ')')::text as minimumobstacleclearancealtitude,
    coalesce(cast(routes.routesegment_ts.length_value as varchar) || ' ' || routes.routesegment_ts.length_uom, '(' || routes.routesegment_ts.length_nilreason || ')')::text as length,
    coalesce(cast(routes.routesegment_ts.widthleft_value as varchar) || ' ' || routes.routesegment_ts.widthleft_uom, '(' || routes.routesegment_ts.widthleft_nilreason || ')')::text as widthleft,
    coalesce(cast(routes.routesegment_ts.widthright_value as varchar) || ' ' || routes.routesegment_ts.widthright_uom, '(' || routes.routesegment_ts.widthright_nilreason || ')')::text as widthright,
    coalesce(cast(routes.routesegment_ts.minimumenroutealtitude_value as varchar) || ' ' || routes.routesegment_ts.minimumenroutealtitude_uom, '(' || routes.routesegment_ts.minimumenroutealtitude_nilreason || ')')::text as minimumenroutealtitude,
    coalesce(cast(routes.routesegment_ts.minimumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.minimumcrossingatend_uom, '(' || routes.routesegment_ts.minimumcrossingatend_nilreason || ')')::text as minimumcrossingatend,
    coalesce(cast(routes.routesegment_ts.maximumcrossingatend_value as varchar) || ' ' || routes.routesegment_ts.maximumcrossingatend_uom, '(' || routes.routesegment_ts.maximumcrossingatend_nilreason || ')')::text as maximumcrossingatend,
    to_jsonb(navaids_points_enroutesegmentpoint_view_qdhhzf.*)::jsonb AS start,
    to_jsonb(navaids_points_enroutesegmentpoint_view_inrkqo.*)::jsonb AS end,
    coalesce(cast(routes_route_pt_hzfllj.title as varchar), '(' || routes_route_pt_hzfllj.nilreason[1] || ')')::text AS routeformed,
    routes_route_pt_hzfllj.href::text AS routeformed_href,
    to_jsonb(shared_obstacleassessmentarea_view_calbjw.*)::jsonb AS evaluationarea,
    geometry_curve_view_qlzxbx.geom::geometry(LINESTRING, 4326) AS curveextent_geom,
    geometry_curve_view_qlzxbx.horizontalAccuracy as curveextent_horizontalaccuracy,
    routes_routeavailability_view_jzpczl.availability::jsonb as availability,
    notes_note_view_mawwnr.annotation::jsonb as annotation
from routes.routesegment 
inner join master_join mj2 on routes.routesegment.id = mj2.source_id
inner join routes.routesegment_tsp on mj2.target_id = routes.routesegment_tsp.id
inner join routes.routesegment_ts on routes.routesegment_tsp.routesegmenttimeslice_id = routes.routesegment_ts.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_qdhhzf on routes.routesegment_ts.start_id = navaids_points_enroutesegmentpoint_view_qdhhzf.id
left join routes.route_pt routes_route_pt_hzfllj on routes.routesegment_ts.routeformed_id = routes_route_pt_hzfllj.id
left join shared.obstacleassessmentarea_view shared_obstacleassessmentarea_view_calbjw on routes.routesegment_ts.evaluationarea_id = shared_obstacleassessmentarea_view_calbjw.id
left join geometry.curve_view geometry_curve_view_qlzxbx on routes.routesegment_ts.curveextent_id = geometry_curve_view_qlzxbx.id
left join navaids_points.enroutesegmentpoint_view navaids_points_enroutesegmentpoint_view_inrkqo on routes.routesegment_ts.end_id = navaids_points_enroutesegmentpoint_view_inrkqo.id
left join lateral(
  select jsonb_agg(DISTINCT routes_routeavailability_lat_bflute.*) as availability
  from master_join master_join_zawxxw
  join routes.routeavailability_view routes_routeavailability_lat_bflute on master_join_zawxxw.target_id = routes_routeavailability_lat_bflute.id
  where master_join_zawxxw.source_id = routes.routesegment_ts.id
) as routes_routeavailability_view_jzpczl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_snewwy.*) AS annotation
  from master_join master_join_fizbae
  join notes.note_view notes_note_lat_snewwy on master_join_fizbae.target_id = notes_note_lat_snewwy.id
  where master_join_fizbae.source_id = routes.routesegment_ts.id
) as notes_note_view_mawwnr on TRUE
where routes.routesegment.feature_status = 'APPROVED'
  and routes.routesegment_ts.feature_status = 'APPROVED'
order by routesegment.identifier, routesegment_ts.sequence_number, routesegment_ts.correction_number DESC;
-- RouteTimeSliceType
-- ['notes.note_view']
drop materialized view if exists routes.route_view cascade;
create materialized view routes.route_view as
select distinct on (route.identifier,route_ts.sequence_number)
    (row_number() over ())::integer as row,
    routes.route.id::integer as id,
    routes.route_ts.id::integer as ts_id,
    routes.route_tsp.id::integer as tsp_id,
    routes.route.identifier::uuid,
    routes.route_ts.interpretation::text,
    routes.route_ts.sequence_number::integer,
    routes.route_ts.correction_number::integer,
    routes.route_ts.valid_time_begin::timestamp,
    routes.route_ts.valid_time_end::timestamp,
    routes.route_ts.feature_lifetime_begin::timestamp,
    routes.route_ts.feature_lifetime_end::timestamp,
    coalesce(cast(routes.route_ts.designatorprefix_value as varchar), '(' || routes.route_ts.designatorprefix_nilreason || ')')::text as designatorprefix,
    coalesce(cast(routes.route_ts.designatorsecondletter_value as varchar), '(' || routes.route_ts.designatorsecondletter_nilreason || ')')::text as designatorsecondletter,
    coalesce(cast(routes.route_ts.designatornumber_value as varchar), '(' || routes.route_ts.designatornumber_nilreason || ')')::text as designatornumber,
    coalesce(cast(routes.route_ts.multipleidentifier_value as varchar), '(' || routes.route_ts.multipleidentifier_nilreason || ')')::text as multipleidentifier,
    coalesce(cast(routes.route_ts.locationdesignator_value as varchar), '(' || routes.route_ts.locationdesignator_nilreason || ')')::text as locationdesignator,
    coalesce(cast(routes.route_ts.name_value as varchar), '(' || routes.route_ts.name_nilreason || ')')::text as name,
    coalesce(cast(routes.route_ts.type_value as varchar), '(' || routes.route_ts.type_nilreason || ')')::text as type,
    coalesce(cast(routes.route_ts.flightrule_value as varchar), '(' || routes.route_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(routes.route_ts.internationaluse_value as varchar), '(' || routes.route_ts.internationaluse_nilreason || ')')::text as internationaluse,
    coalesce(cast(routes.route_ts.militaryuse_value as varchar), '(' || routes.route_ts.militaryuse_nilreason || ')')::text as militaryuse,
    coalesce(cast(routes.route_ts.militarytrainingtype_value as varchar), '(' || routes.route_ts.militarytrainingtype_nilreason || ')')::text as militarytrainingtype,
    coalesce(cast(organisation_organisationauthority_pt_ivfzxg.title as varchar), '(' || organisation_organisationauthority_pt_ivfzxg.nilreason[1] || ')')::text AS userorganisation,
    organisation_organisationauthority_pt_ivfzxg.href::text AS userorganisation_href,
    notes_note_view_pcmnwg.annotation::jsonb as annotation
from routes.route 
inner join master_join mj2 on routes.route.id = mj2.source_id
inner join routes.route_tsp on mj2.target_id = routes.route_tsp.id
inner join routes.route_ts on routes.route_tsp.routetimeslice_id = routes.route_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ivfzxg on routes.route_ts.userorganisation_id = organisation_organisationauthority_pt_ivfzxg.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cffssi.*) AS annotation
  from master_join master_join_awgjzw
  join notes.note_view notes_note_lat_cffssi on master_join_awgjzw.target_id = notes_note_lat_cffssi.id
  where master_join_awgjzw.source_id = routes.route_ts.id
) as notes_note_view_pcmnwg on TRUE
where routes.route.feature_status = 'APPROVED'
  and routes.route_ts.feature_status = 'APPROVED'
order by route.identifier, route_ts.sequence_number, route_ts.correction_number DESC;
-- RulesProceduresTimeSliceType
-- ['notes.note_view']
drop materialized view if exists rules_procedures.rulesprocedures_view cascade;
create materialized view rules_procedures.rulesprocedures_view as
select distinct on (rulesprocedures.identifier,rulesprocedures_ts.sequence_number)
    (row_number() over ())::integer as row,
    rules_procedures.rulesprocedures.id::integer as id,
    rules_procedures.rulesprocedures_ts.id::integer as ts_id,
    rules_procedures.rulesprocedures_tsp.id::integer as tsp_id,
    rules_procedures.rulesprocedures.identifier::uuid,
    rules_procedures.rulesprocedures_ts.interpretation::text,
    rules_procedures.rulesprocedures_ts.sequence_number::integer,
    rules_procedures.rulesprocedures_ts.correction_number::integer,
    rules_procedures.rulesprocedures_ts.valid_time_begin::timestamp,
    rules_procedures.rulesprocedures_ts.valid_time_end::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_begin::timestamp,
    rules_procedures.rulesprocedures_ts.feature_lifetime_end::timestamp,
    coalesce(cast(rules_procedures.rulesprocedures_ts.category_value as varchar), '(' || rules_procedures.rulesprocedures_ts.category_nilreason || ')')::text as category,
    coalesce(cast(rules_procedures.rulesprocedures_ts.title_value as varchar), '(' || rules_procedures.rulesprocedures_ts.title_nilreason || ')')::text as title,
    airport_heliport_airportheliport_pt_vmhigh.affectedlocation::jsonb as affectedlocation,
    airspace_airspace_pt_lekfpv.affectedarea::jsonb as affectedarea,
    notes_note_view_mtmkfj.annotation::jsonb as annotation
from rules_procedures.rulesprocedures 
inner join master_join mj2 on rules_procedures.rulesprocedures.id = mj2.source_id
inner join rules_procedures.rulesprocedures_tsp on mj2.target_id = rules_procedures.rulesprocedures_tsp.id
inner join rules_procedures.rulesprocedures_ts on rules_procedures.rulesprocedures_tsp.rulesprocedurestimeslice_id = rules_procedures.rulesprocedures_ts.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_lvvkgf.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_lvvkgf.title AS varchar), '(' || airport_heliport_airportheliport_lat_lvvkgf.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_lvvkgf.href
  )) as affectedlocation  from master_join master_join_quvbhm
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_lvvkgf on master_join_quvbhm.target_id = airport_heliport_airportheliport_lat_lvvkgf.id
  where master_join_quvbhm.source_id = rules_procedures.rulesprocedures_ts.id
) as airport_heliport_airportheliport_pt_vmhigh on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_vwfpoa.id,
      'title', coalesce(cast(airspace_airspace_lat_vwfpoa.title AS varchar), '(' || airspace_airspace_lat_vwfpoa.nilreason[1] || ')'),
      'href', airspace_airspace_lat_vwfpoa.href
  )) as affectedarea  from master_join master_join_sndkup
  join airspace.airspace_pt airspace_airspace_lat_vwfpoa on master_join_sndkup.target_id = airspace_airspace_lat_vwfpoa.id
  where master_join_sndkup.source_id = rules_procedures.rulesprocedures_ts.id
) as airspace_airspace_pt_lekfpv on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gorznn.*) AS annotation
  from master_join master_join_jxcjut
  join notes.note_view notes_note_lat_gorznn on master_join_jxcjut.target_id = notes_note_lat_gorznn.id
  where master_join_jxcjut.source_id = rules_procedures.rulesprocedures_ts.id
) as notes_note_view_mtmkfj on TRUE
where rules_procedures.rulesprocedures.feature_status = 'APPROVED'
  and rules_procedures.rulesprocedures_ts.feature_status = 'APPROVED'
order by rulesprocedures.identifier, rulesprocedures_ts.sequence_number, rulesprocedures_ts.correction_number DESC;
-- RunwayBlastPadTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.surfacecharacteristics_view']
drop materialized view if exists airport_heliport.runwayblastpad_view cascade;
create materialized view airport_heliport.runwayblastpad_view as
select distinct on (runwayblastpad.identifier,runwayblastpad_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayblastpad.id::integer as id,
    airport_heliport.runwayblastpad_ts.id::integer as ts_id,
    airport_heliport.runwayblastpad_tsp.id::integer as tsp_id,
    airport_heliport.runwayblastpad.identifier::uuid,
    airport_heliport.runwayblastpad_ts.interpretation::text,
    airport_heliport.runwayblastpad_ts.sequence_number::integer,
    airport_heliport.runwayblastpad_ts.correction_number::integer,
    airport_heliport.runwayblastpad_ts.valid_time_begin::timestamp,
    airport_heliport.runwayblastpad_ts.valid_time_end::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayblastpad_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayblastpad_ts.status_value as varchar), '(' || airport_heliport.runwayblastpad_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayblastpad_ts.length_value as varchar) || ' ' || airport_heliport.runwayblastpad_ts.length_uom, '(' || airport_heliport.runwayblastpad_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport_runwaydirection_pt_imumzg.title as varchar), '(' || airport_heliport_runwaydirection_pt_imumzg.nilreason[1] || ')')::text AS usedrunwaydirection,
    airport_heliport_runwaydirection_pt_imumzg.href::text AS usedrunwaydirection_href,
    geometry_elevatedsurface_view_jikiee.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_jikiee.elevation AS extent_elevation,
    geometry_elevatedsurface_view_jikiee.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_jikiee.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_jikiee.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_jikiee.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_zzujkz.*)::jsonb AS surfaceproperties,
    notes_note_view_plwhrl.annotation::jsonb as annotation
from airport_heliport.runwayblastpad 
inner join master_join mj2 on airport_heliport.runwayblastpad.id = mj2.source_id
inner join airport_heliport.runwayblastpad_tsp on mj2.target_id = airport_heliport.runwayblastpad_tsp.id
inner join airport_heliport.runwayblastpad_ts on airport_heliport.runwayblastpad_tsp.runwayblastpadtimeslice_id = airport_heliport.runwayblastpad_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_imumzg on airport_heliport.runwayblastpad_ts.usedrunwaydirection_id = airport_heliport_runwaydirection_pt_imumzg.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_jikiee on airport_heliport.runwayblastpad_ts.extent_id = geometry_elevatedsurface_view_jikiee.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_zzujkz on airport_heliport.runwayblastpad_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_zzujkz.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_utajnj.*) AS annotation
  from master_join master_join_zxlzuu
  join notes.note_view notes_note_lat_utajnj on master_join_zxlzuu.target_id = notes_note_lat_utajnj.id
  where master_join_zxlzuu.source_id = airport_heliport.runwayblastpad_ts.id
) as notes_note_view_plwhrl on TRUE
where airport_heliport.runwayblastpad.feature_status = 'APPROVED'
  and airport_heliport.runwayblastpad_ts.feature_status = 'APPROVED'
order by runwayblastpad.identifier, runwayblastpad_ts.sequence_number, runwayblastpad_ts.correction_number DESC;
-- RunwayCentrelinePointTimeSliceType
-- ['airport_heliport.runwaydeclareddistance_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.navaidequipmentdistance_view']
drop materialized view if exists airport_heliport.runwaycentrelinepoint_view cascade;
create materialized view airport_heliport.runwaycentrelinepoint_view as
select distinct on (runwaycentrelinepoint.identifier,runwaycentrelinepoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaycentrelinepoint.id::integer as id,
    airport_heliport.runwaycentrelinepoint_ts.id::integer as ts_id,
    airport_heliport.runwaycentrelinepoint_tsp.id::integer as tsp_id,
    airport_heliport.runwaycentrelinepoint.identifier::uuid,
    airport_heliport.runwaycentrelinepoint_ts.interpretation::text,
    airport_heliport.runwaycentrelinepoint_ts.sequence_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.correction_number::integer,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.valid_time_end::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaycentrelinepoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.role_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.role_nilreason || ')')::text as role,
    coalesce(cast(airport_heliport.runwaycentrelinepoint_ts.designator_value as varchar), '(' || airport_heliport.runwaycentrelinepoint_ts.designator_nilreason || ')')::text as designator,
    geometry_elevatedpoint_view_bxcrsl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bxcrsl.longitude AS location_longitude,
    geometry_elevatedpoint_view_bxcrsl.latitude AS location_latitude,
    geometry_elevatedpoint_view_bxcrsl.elevation AS location_elevation,
    geometry_elevatedpoint_view_bxcrsl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bxcrsl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bxcrsl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bxcrsl.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_hswpat.title as varchar), '(' || airport_heliport_runwaydirection_pt_hswpat.nilreason[1] || ')')::text AS onrunway,
    airport_heliport_runwaydirection_pt_hswpat.href::text AS onrunway_href,
    airport_heliport_runwaydeclareddistance_view_aevxrt.associateddeclareddistance::jsonb as associateddeclareddistance,
    airport_heliport_navaidequipmentdistance_view_jdcahx.navaidequipment::jsonb as navaidequipment,
    notes_note_view_uyvbsk.annotation::jsonb as annotation
from airport_heliport.runwaycentrelinepoint 
inner join master_join mj2 on airport_heliport.runwaycentrelinepoint.id = mj2.source_id
inner join airport_heliport.runwaycentrelinepoint_tsp on mj2.target_id = airport_heliport.runwaycentrelinepoint_tsp.id
inner join airport_heliport.runwaycentrelinepoint_ts on airport_heliport.runwaycentrelinepoint_tsp.runwaycentrelinepointtimeslice_id = airport_heliport.runwaycentrelinepoint_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bxcrsl on airport_heliport.runwaycentrelinepoint_ts.location_id = geometry_elevatedpoint_view_bxcrsl.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_hswpat on airport_heliport.runwaycentrelinepoint_ts.onrunway_id = airport_heliport_runwaydirection_pt_hswpat.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaydeclareddistance_lat_parajb.*) as associateddeclareddistance
  from master_join master_join_pvaygo
  join airport_heliport.runwaydeclareddistance_view airport_heliport_runwaydeclareddistance_lat_parajb on master_join_pvaygo.target_id = airport_heliport_runwaydeclareddistance_lat_parajb.id
  where master_join_pvaygo.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_runwaydeclareddistance_view_aevxrt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_navaidequipmentdistance_lat_sevobp.*) as navaidequipment
  from master_join master_join_lnmrqg
  join airport_heliport.navaidequipmentdistance_view airport_heliport_navaidequipmentdistance_lat_sevobp on master_join_lnmrqg.target_id = airport_heliport_navaidequipmentdistance_lat_sevobp.id
  where master_join_lnmrqg.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as airport_heliport_navaidequipmentdistance_view_jdcahx on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ondtnt.*) AS annotation
  from master_join master_join_sgnkyb
  join notes.note_view notes_note_lat_ondtnt on master_join_sgnkyb.target_id = notes_note_lat_ondtnt.id
  where master_join_sgnkyb.source_id = airport_heliport.runwaycentrelinepoint_ts.id
) as notes_note_view_uyvbsk on TRUE
where airport_heliport.runwaycentrelinepoint.feature_status = 'APPROVED'
  and airport_heliport.runwaycentrelinepoint_ts.feature_status = 'APPROVED'
order by runwaycentrelinepoint.identifier, runwaycentrelinepoint_ts.sequence_number, runwaycentrelinepoint_ts.correction_number DESC;
-- RunwayDirectionLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwaydirectionlightsystem_view cascade;
create materialized view airport_heliport.runwaydirectionlightsystem_view as
select distinct on (runwaydirectionlightsystem.identifier,runwaydirectionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirectionlightsystem.id::integer as id,
    airport_heliport.runwaydirectionlightsystem_ts.id::integer as ts_id,
    airport_heliport.runwaydirectionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirectionlightsystem.identifier::uuid,
    airport_heliport.runwaydirectionlightsystem_ts.interpretation::text,
    airport_heliport.runwaydirectionlightsystem_ts.sequence_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.correction_number::integer,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirectionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwaydirectionlightsystem_ts.position_value as varchar), '(' || airport_heliport.runwaydirectionlightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwaydirection_pt_ooseuh.title as varchar), '(' || airport_heliport_runwaydirection_pt_ooseuh.nilreason[1] || ')')::text AS associatedrunwaydirection,
    airport_heliport_runwaydirection_pt_ooseuh.href::text AS associatedrunwaydirection_href,
    shared_lightelement_view_aawnjx.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_ysrnyw.availability::jsonb as availability,
    notes_note_view_gbnvgd.annotation::jsonb as annotation
from airport_heliport.runwaydirectionlightsystem 
inner join master_join mj2 on airport_heliport.runwaydirectionlightsystem.id = mj2.source_id
inner join airport_heliport.runwaydirectionlightsystem_tsp on mj2.target_id = airport_heliport.runwaydirectionlightsystem_tsp.id
inner join airport_heliport.runwaydirectionlightsystem_ts on airport_heliport.runwaydirectionlightsystem_tsp.runwaydirectionlightsystemtimeslice_id = airport_heliport.runwaydirectionlightsystem_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_ooseuh on airport_heliport.runwaydirectionlightsystem_ts.associatedrunwaydirection_id = airport_heliport_runwaydirection_pt_ooseuh.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_efffmx.*) as element
  from master_join master_join_gevegn
  join shared.lightelement_view shared_lightelement_lat_efffmx on master_join_gevegn.target_id = shared_lightelement_lat_efffmx.id
  where master_join_gevegn.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as shared_lightelement_view_aawnjx on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_nexuyk.*) as availability
  from master_join master_join_betwnv
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_nexuyk on master_join_betwnv.target_id = airport_heliport_groundlightingavailability_lat_nexuyk.id
  where master_join_betwnv.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_ysrnyw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_anvwqc.*) AS annotation
  from master_join master_join_zdczjo
  join notes.note_view notes_note_lat_anvwqc on master_join_zdczjo.target_id = notes_note_lat_anvwqc.id
  where master_join_zdczjo.source_id = airport_heliport.runwaydirectionlightsystem_ts.id
) as notes_note_view_gbnvgd on TRUE
where airport_heliport.runwaydirectionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwaydirectionlightsystem_ts.feature_status = 'APPROVED'
order by runwaydirectionlightsystem.identifier, runwaydirectionlightsystem_ts.sequence_number, runwaydirectionlightsystem_ts.correction_number DESC;
-- RunwayDirectionTimeSliceType
-- ['airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwaydirection_view cascade;
create materialized view airport_heliport.runwaydirection_view as
select distinct on (runwaydirection.identifier,runwaydirection_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaydirection.id::integer as id,
    airport_heliport.runwaydirection_ts.id::integer as ts_id,
    airport_heliport.runwaydirection_tsp.id::integer as tsp_id,
    airport_heliport.runwaydirection.identifier::uuid,
    airport_heliport.runwaydirection_ts.interpretation::text,
    airport_heliport.runwaydirection_ts.sequence_number::integer,
    airport_heliport.runwaydirection_ts.correction_number::integer,
    airport_heliport.runwaydirection_ts.valid_time_begin::timestamp,
    airport_heliport.runwaydirection_ts.valid_time_end::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaydirection_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaydirection_ts.designator_value as varchar), '(' || airport_heliport.runwaydirection_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.truebearingaccuracy_value as varchar), '(' || airport_heliport.runwaydirection_ts.truebearingaccuracy_nilreason || ')')::text as truebearingaccuracy,
    coalesce(cast(airport_heliport.runwaydirection_ts.magneticbearing_value as varchar), '(' || airport_heliport.runwaydirection_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(airport_heliport.runwaydirection_ts.patternvfr_value as varchar), '(' || airport_heliport.runwaydirection_ts.patternvfr_nilreason || ')')::text as patternvfr,
    coalesce(cast(airport_heliport.runwaydirection_ts.slopetdz_value as varchar), '(' || airport_heliport.runwaydirection_ts.slopetdz_nilreason || ')')::text as slopetdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingtype_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingtype_nilreason || ')')::text as approachmarkingtype,
    coalesce(cast(airport_heliport.runwaydirection_ts.approachmarkingcondition_value as varchar), '(' || airport_heliport.runwaydirection_ts.approachmarkingcondition_nilreason || ')')::text as approachmarkingcondition,
    coalesce(cast(airport_heliport.runwaydirection_ts.classlightingjar_value as varchar), '(' || airport_heliport.runwaydirection_ts.classlightingjar_nilreason || ')')::text as classlightingjar,
    coalesce(cast(airport_heliport.runwaydirection_ts.precisionapproachguidance_value as varchar), '(' || airport_heliport.runwaydirection_ts.precisionapproachguidance_nilreason || ')')::text as precisionapproachguidance,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdz_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdz_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdz_nilreason || ')')::text as elevationtdz,
    coalesce(cast(airport_heliport.runwaydirection_ts.elevationtdzaccuracy_value as varchar) || ' ' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_uom, '(' || airport_heliport.runwaydirection_ts.elevationtdzaccuracy_nilreason || ')')::text as elevationtdzaccuracy,
    coalesce(cast(airport_heliport_runway_pt_wlvjcf.title as varchar), '(' || airport_heliport_runway_pt_wlvjcf.nilreason[1] || ')')::text AS usedrunway,
    airport_heliport_runway_pt_wlvjcf.href::text AS usedrunway_href,
    coalesce(cast(airport_heliport_runwayelement_pt_rdlebr.title as varchar), '(' || airport_heliport_runwayelement_pt_rdlebr.nilreason[1] || ')')::text AS startingelement,
    airport_heliport_runwayelement_pt_rdlebr.href::text AS startingelement_href,
    notes_note_view_cmfafz.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_uqnlkb.availability::jsonb as availability
from airport_heliport.runwaydirection 
inner join master_join mj2 on airport_heliport.runwaydirection.id = mj2.source_id
inner join airport_heliport.runwaydirection_tsp on mj2.target_id = airport_heliport.runwaydirection_tsp.id
inner join airport_heliport.runwaydirection_ts on airport_heliport.runwaydirection_tsp.runwaydirectiontimeslice_id = airport_heliport.runwaydirection_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_wlvjcf on airport_heliport.runwaydirection_ts.usedrunway_id = airport_heliport_runway_pt_wlvjcf.id
left join airport_heliport.runwayelement_pt airport_heliport_runwayelement_pt_rdlebr on airport_heliport.runwaydirection_ts.startingelement_id = airport_heliport_runwayelement_pt_rdlebr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_kwqahg.*) AS annotation
  from master_join master_join_abfmfe
  join notes.note_view notes_note_lat_kwqahg on master_join_abfmfe.target_id = notes_note_lat_kwqahg.id
  where master_join_abfmfe.source_id = airport_heliport.runwaydirection_ts.id
) as notes_note_view_cmfafz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_zooxvi.*) as availability
  from master_join master_join_yffwoz
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_zooxvi on master_join_yffwoz.target_id = airport_heliport_manoeuvringareaavailability_lat_zooxvi.id
  where master_join_yffwoz.source_id = airport_heliport.runwaydirection_ts.id
) as airport_heliport_manoeuvringareaavailability_view_uqnlkb on TRUE
where airport_heliport.runwaydirection.feature_status = 'APPROVED'
  and airport_heliport.runwaydirection_ts.feature_status = 'APPROVED'
order by runwaydirection.identifier, runwaydirection_ts.sequence_number, runwaydirection_ts.correction_number DESC;
-- RunwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayelement_view cascade;
create materialized view airport_heliport.runwayelement_view as
select distinct on (runwayelement.identifier,runwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayelement.id::integer as id,
    airport_heliport.runwayelement_ts.id::integer as ts_id,
    airport_heliport.runwayelement_tsp.id::integer as tsp_id,
    airport_heliport.runwayelement.identifier::uuid,
    airport_heliport.runwayelement_ts.interpretation::text,
    airport_heliport.runwayelement_ts.sequence_number::integer,
    airport_heliport.runwayelement_ts.correction_number::integer,
    airport_heliport.runwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.runwayelement_ts.valid_time_end::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayelement_ts.type_value as varchar), '(' || airport_heliport.runwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.runwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.runwayelement_ts.length_value as varchar) || ' ' || airport_heliport.runwayelement_ts.length_uom, '(' || airport_heliport.runwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.runwayelement_ts.width_value as varchar) || ' ' || airport_heliport.runwayelement_ts.width_uom, '(' || airport_heliport.runwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_cdeyjr.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_rsmzlq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_rsmzlq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_rsmzlq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_rsmzlq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_rsmzlq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_rsmzlq.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_runway_pt_dugoxh.associatedrunway::jsonb as associatedrunway,
    notes_note_view_duxfue.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_fwbmmx.availability::jsonb as availability
from airport_heliport.runwayelement 
inner join master_join mj2 on airport_heliport.runwayelement.id = mj2.source_id
inner join airport_heliport.runwayelement_tsp on mj2.target_id = airport_heliport.runwayelement_tsp.id
inner join airport_heliport.runwayelement_ts on airport_heliport.runwayelement_tsp.runwayelementtimeslice_id = airport_heliport.runwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_cdeyjr on airport_heliport.runwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_cdeyjr.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_rsmzlq on airport_heliport.runwayelement_ts.extent_id = geometry_elevatedsurface_view_rsmzlq.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_mrwokf.id,
      'title', coalesce(cast(airport_heliport_runway_lat_mrwokf.title AS varchar), '(' || airport_heliport_runway_lat_mrwokf.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_mrwokf.href
  )) as associatedrunway  from master_join master_join_bscoax
  join airport_heliport.runway_pt airport_heliport_runway_lat_mrwokf on master_join_bscoax.target_id = airport_heliport_runway_lat_mrwokf.id
  where master_join_bscoax.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_runway_pt_dugoxh on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_uotznk.*) AS annotation
  from master_join master_join_sarfes
  join notes.note_view notes_note_lat_uotznk on master_join_sarfes.target_id = notes_note_lat_uotznk.id
  where master_join_sarfes.source_id = airport_heliport.runwayelement_ts.id
) as notes_note_view_duxfue on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_mplbny.*) as availability
  from master_join master_join_zcuemc
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_mplbny on master_join_zcuemc.target_id = airport_heliport_manoeuvringareaavailability_lat_mplbny.id
  where master_join_zcuemc.source_id = airport_heliport.runwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_fwbmmx on TRUE
where airport_heliport.runwayelement.feature_status = 'APPROVED'
  and airport_heliport.runwayelement_ts.feature_status = 'APPROVED'
order by runwayelement.identifier, runwayelement_ts.sequence_number, runwayelement_ts.correction_number DESC;
-- RunwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.runwaymarking_view cascade;
create materialized view airport_heliport.runwaymarking_view as
select distinct on (runwaymarking.identifier,runwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwaymarking.id::integer as id,
    airport_heliport.runwaymarking_ts.id::integer as ts_id,
    airport_heliport.runwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.runwaymarking.identifier::uuid,
    airport_heliport.runwaymarking_ts.interpretation::text,
    airport_heliport.runwaymarking_ts.sequence_number::integer,
    airport_heliport.runwaymarking_ts.correction_number::integer,
    airport_heliport.runwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.runwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.runwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.runwaymarking_ts.condition_value as varchar), '(' || airport_heliport.runwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.runwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.runwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_runway_pt_wwwdll.title as varchar), '(' || airport_heliport_runway_pt_wwwdll.nilreason[1] || ')')::text AS markedrunway,
    airport_heliport_runway_pt_wwwdll.href::text AS markedrunway_href,
    airport_heliport_markingelement_view_llhhql.element::jsonb as element,
    notes_note_view_oqxyrw.annotation::jsonb as annotation
from airport_heliport.runwaymarking 
inner join master_join mj2 on airport_heliport.runwaymarking.id = mj2.source_id
inner join airport_heliport.runwaymarking_tsp on mj2.target_id = airport_heliport.runwaymarking_tsp.id
inner join airport_heliport.runwaymarking_ts on airport_heliport.runwaymarking_tsp.runwaymarkingtimeslice_id = airport_heliport.runwaymarking_ts.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_wwwdll on airport_heliport.runwaymarking_ts.markedrunway_id = airport_heliport_runway_pt_wwwdll.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_dyvlys.*) as element
  from master_join master_join_qmiigr
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_dyvlys on master_join_qmiigr.target_id = airport_heliport_markingelement_lat_dyvlys.id
  where master_join_qmiigr.source_id = airport_heliport.runwaymarking_ts.id
) as airport_heliport_markingelement_view_llhhql on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vuqoyt.*) AS annotation
  from master_join master_join_ydaxbo
  join notes.note_view notes_note_lat_vuqoyt on master_join_ydaxbo.target_id = notes_note_lat_vuqoyt.id
  where master_join_ydaxbo.source_id = airport_heliport.runwaymarking_ts.id
) as notes_note_view_oqxyrw on TRUE
where airport_heliport.runwaymarking.feature_status = 'APPROVED'
  and airport_heliport.runwaymarking_ts.feature_status = 'APPROVED'
order by runwaymarking.identifier, runwaymarking_ts.sequence_number, runwaymarking_ts.correction_number DESC;
-- RunwayProtectAreaLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.runwayprotectarealightsystem_view cascade;
create materialized view airport_heliport.runwayprotectarealightsystem_view as
select distinct on (runwayprotectarealightsystem.identifier,runwayprotectarealightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarealightsystem.id::integer as id,
    airport_heliport.runwayprotectarealightsystem_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarealightsystem_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarealightsystem.identifier::uuid,
    airport_heliport.runwayprotectarealightsystem_ts.interpretation::text,
    airport_heliport.runwayprotectarealightsystem_ts.sequence_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.correction_number::integer,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarealightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.colour_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.runwayprotectarealightsystem_ts.position_value as varchar), '(' || airport_heliport.runwayprotectarealightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_runwayprotectarea_pt_kuxuds.title as varchar), '(' || airport_heliport_runwayprotectarea_pt_kuxuds.nilreason[1] || ')')::text AS lightedarea,
    airport_heliport_runwayprotectarea_pt_kuxuds.href::text AS lightedarea_href,
    shared_lightelement_view_kdzqhp.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_zuspmy.availability::jsonb as availability,
    notes_note_view_nzxxnq.annotation::jsonb as annotation
from airport_heliport.runwayprotectarealightsystem 
inner join master_join mj2 on airport_heliport.runwayprotectarealightsystem.id = mj2.source_id
inner join airport_heliport.runwayprotectarealightsystem_tsp on mj2.target_id = airport_heliport.runwayprotectarealightsystem_tsp.id
inner join airport_heliport.runwayprotectarealightsystem_ts on airport_heliport.runwayprotectarealightsystem_tsp.runwayprotectarealightsystemtimeslice_id = airport_heliport.runwayprotectarealightsystem_ts.id
left join airport_heliport.runwayprotectarea_pt airport_heliport_runwayprotectarea_pt_kuxuds on airport_heliport.runwayprotectarealightsystem_ts.lightedarea_id = airport_heliport_runwayprotectarea_pt_kuxuds.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_ijlopz.*) as element
  from master_join master_join_cnruex
  join shared.lightelement_view shared_lightelement_lat_ijlopz on master_join_cnruex.target_id = shared_lightelement_lat_ijlopz.id
  where master_join_cnruex.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as shared_lightelement_view_kdzqhp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_eccahb.*) as availability
  from master_join master_join_rhypkz
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_eccahb on master_join_rhypkz.target_id = airport_heliport_groundlightingavailability_lat_eccahb.id
  where master_join_rhypkz.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_zuspmy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vvbytq.*) AS annotation
  from master_join master_join_cpqxbm
  join notes.note_view notes_note_lat_vvbytq on master_join_cpqxbm.target_id = notes_note_lat_vvbytq.id
  where master_join_cpqxbm.source_id = airport_heliport.runwayprotectarealightsystem_ts.id
) as notes_note_view_nzxxnq on TRUE
where airport_heliport.runwayprotectarealightsystem.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarealightsystem_ts.feature_status = 'APPROVED'
order by runwayprotectarealightsystem.identifier, runwayprotectarealightsystem_ts.sequence_number, runwayprotectarealightsystem_ts.correction_number DESC;
-- RunwayProtectAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.runwayprotectarea_view cascade;
create materialized view airport_heliport.runwayprotectarea_view as
select distinct on (runwayprotectarea.identifier,runwayprotectarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayprotectarea.id::integer as id,
    airport_heliport.runwayprotectarea_ts.id::integer as ts_id,
    airport_heliport.runwayprotectarea_tsp.id::integer as tsp_id,
    airport_heliport.runwayprotectarea.identifier::uuid,
    airport_heliport.runwayprotectarea_ts.interpretation::text,
    airport_heliport.runwayprotectarea_ts.sequence_number::integer,
    airport_heliport.runwayprotectarea_ts.correction_number::integer,
    airport_heliport.runwayprotectarea_ts.valid_time_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.valid_time_end::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayprotectarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.lighting_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.obstaclefree_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.type_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.status_value as varchar), '(' || airport_heliport.runwayprotectarea_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.width_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.width_uom, '(' || airport_heliport.runwayprotectarea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.runwayprotectarea_ts.length_value as varchar) || ' ' || airport_heliport.runwayprotectarea_ts.length_uom, '(' || airport_heliport.runwayprotectarea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_jcmmxb.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_onrzqj.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_onrzqj.elevation AS extent_elevation,
    geometry_elevatedsurface_view_onrzqj.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_onrzqj.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_onrzqj.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_onrzqj.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_runwaydirection_pt_hbahdh.title as varchar), '(' || airport_heliport_runwaydirection_pt_hbahdh.nilreason[1] || ')')::text AS protectedrunwaydirection,
    airport_heliport_runwaydirection_pt_hbahdh.href::text AS protectedrunwaydirection_href,
    notes_note_view_bsmvat.annotation::jsonb as annotation
from airport_heliport.runwayprotectarea 
inner join master_join mj2 on airport_heliport.runwayprotectarea.id = mj2.source_id
inner join airport_heliport.runwayprotectarea_tsp on mj2.target_id = airport_heliport.runwayprotectarea_tsp.id
inner join airport_heliport.runwayprotectarea_ts on airport_heliport.runwayprotectarea_tsp.runwayprotectareatimeslice_id = airport_heliport.runwayprotectarea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_jcmmxb on airport_heliport.runwayprotectarea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_jcmmxb.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_onrzqj on airport_heliport.runwayprotectarea_ts.extent_id = geometry_elevatedsurface_view_onrzqj.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_hbahdh on airport_heliport.runwayprotectarea_ts.protectedrunwaydirection_id = airport_heliport_runwaydirection_pt_hbahdh.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vovcwn.*) AS annotation
  from master_join master_join_hkjsti
  join notes.note_view notes_note_lat_vovcwn on master_join_hkjsti.target_id = notes_note_lat_vovcwn.id
  where master_join_hkjsti.source_id = airport_heliport.runwayprotectarea_ts.id
) as notes_note_view_bsmvat on TRUE
where airport_heliport.runwayprotectarea.feature_status = 'APPROVED'
  and airport_heliport.runwayprotectarea_ts.feature_status = 'APPROVED'
order by runwayprotectarea.identifier, runwayprotectarea_ts.sequence_number, runwayprotectarea_ts.correction_number DESC;
-- RunwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.runwaycontamination_view', 'notes.note_view', 'airport_heliport.runwaysectioncontamination_view']
drop materialized view if exists airport_heliport.runway_view cascade;
create materialized view airport_heliport.runway_view as
select distinct on (runway.identifier,runway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runway.id::integer as id,
    airport_heliport.runway_ts.id::integer as ts_id,
    airport_heliport.runway_tsp.id::integer as tsp_id,
    airport_heliport.runway.identifier::uuid,
    airport_heliport.runway_ts.interpretation::text,
    airport_heliport.runway_ts.sequence_number::integer,
    airport_heliport.runway_ts.correction_number::integer,
    airport_heliport.runway_ts.valid_time_begin::timestamp,
    airport_heliport.runway_ts.valid_time_end::timestamp,
    airport_heliport.runway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runway_ts.designator_value as varchar), '(' || airport_heliport.runway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.runway_ts.type_value as varchar), '(' || airport_heliport.runway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.runway_ts.abandoned_value as varchar), '(' || airport_heliport.runway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.runway_ts.nominallength_value as varchar) || ' ' || airport_heliport.runway_ts.nominallength_uom, '(' || airport_heliport.runway_ts.nominallength_nilreason || ')')::text as nominallength,
    coalesce(cast(airport_heliport.runway_ts.lengthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.lengthaccuracy_uom, '(' || airport_heliport.runway_ts.lengthaccuracy_nilreason || ')')::text as lengthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.nominalwidth_value as varchar) || ' ' || airport_heliport.runway_ts.nominalwidth_uom, '(' || airport_heliport.runway_ts.nominalwidth_nilreason || ')')::text as nominalwidth,
    coalesce(cast(airport_heliport.runway_ts.widthaccuracy_value as varchar) || ' ' || airport_heliport.runway_ts.widthaccuracy_uom, '(' || airport_heliport.runway_ts.widthaccuracy_nilreason || ')')::text as widthaccuracy,
    coalesce(cast(airport_heliport.runway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.runway_ts.widthshoulder_uom, '(' || airport_heliport.runway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.runway_ts.lengthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.lengthstrip_uom, '(' || airport_heliport.runway_ts.lengthstrip_nilreason || ')')::text as lengthstrip,
    coalesce(cast(airport_heliport.runway_ts.widthstrip_value as varchar) || ' ' || airport_heliport.runway_ts.widthstrip_uom, '(' || airport_heliport.runway_ts.widthstrip_nilreason || ')')::text as widthstrip,
    coalesce(cast(airport_heliport.runway_ts.lengthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.lengthoffset_uom, '(' || airport_heliport.runway_ts.lengthoffset_nilreason || ')')::text as lengthoffset,
    coalesce(cast(airport_heliport.runway_ts.widthoffset_value as varchar) || ' ' || airport_heliport.runway_ts.widthoffset_uom, '(' || airport_heliport.runway_ts.widthoffset_nilreason || ')')::text as widthoffset,
    to_jsonb(airport_heliport_surfacecharacteristics_view_pepfle.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_tkcblk.title as varchar), '(' || airport_heliport_airportheliport_pt_tkcblk.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_tkcblk.href::text AS associatedairportheliport_href,
    airport_heliport_runwaycontamination_view_rjxmna.overallcontaminant::jsonb as overallcontaminant,
    notes_note_view_odheoi.annotation::jsonb as annotation,
    airport_heliport_runwaysectioncontamination_view_akssnf.areacontaminant::jsonb as areacontaminant
from airport_heliport.runway 
inner join master_join mj2 on airport_heliport.runway.id = mj2.source_id
inner join airport_heliport.runway_tsp on mj2.target_id = airport_heliport.runway_tsp.id
inner join airport_heliport.runway_ts on airport_heliport.runway_tsp.runwaytimeslice_id = airport_heliport.runway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_pepfle on airport_heliport.runway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_pepfle.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_tkcblk on airport_heliport.runway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_tkcblk.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaycontamination_lat_yiezct.*) as overallcontaminant
  from master_join master_join_ndjmsu
  join airport_heliport.runwaycontamination_view airport_heliport_runwaycontamination_lat_yiezct on master_join_ndjmsu.target_id = airport_heliport_runwaycontamination_lat_yiezct.id
  where master_join_ndjmsu.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaycontamination_view_rjxmna on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_seexve.*) AS annotation
  from master_join master_join_wrxoti
  join notes.note_view notes_note_lat_seexve on master_join_wrxoti.target_id = notes_note_lat_seexve.id
  where master_join_wrxoti.source_id = airport_heliport.runway_ts.id
) as notes_note_view_odheoi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_runwaysectioncontamination_lat_ckhohe.*) as areacontaminant
  from master_join master_join_cifqni
  join airport_heliport.runwaysectioncontamination_view airport_heliport_runwaysectioncontamination_lat_ckhohe on master_join_cifqni.target_id = airport_heliport_runwaysectioncontamination_lat_ckhohe.id
  where master_join_cifqni.source_id = airport_heliport.runway_ts.id
) as airport_heliport_runwaysectioncontamination_view_akssnf on TRUE
where airport_heliport.runway.feature_status = 'APPROVED'
  and airport_heliport.runway_ts.feature_status = 'APPROVED'
order by runway.identifier, runway_ts.sequence_number, runway_ts.correction_number DESC;
-- RunwayVisualRangeTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.runwayvisualrange_view cascade;
create materialized view airport_heliport.runwayvisualrange_view as
select distinct on (runwayvisualrange.identifier,runwayvisualrange_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.runwayvisualrange.id::integer as id,
    airport_heliport.runwayvisualrange_ts.id::integer as ts_id,
    airport_heliport.runwayvisualrange_tsp.id::integer as tsp_id,
    airport_heliport.runwayvisualrange.identifier::uuid,
    airport_heliport.runwayvisualrange_ts.interpretation::text,
    airport_heliport.runwayvisualrange_ts.sequence_number::integer,
    airport_heliport.runwayvisualrange_ts.correction_number::integer,
    airport_heliport.runwayvisualrange_ts.valid_time_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.valid_time_end::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_begin::timestamp,
    airport_heliport.runwayvisualrange_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.runwayvisualrange_ts.readingposition_value as varchar), '(' || airport_heliport.runwayvisualrange_ts.readingposition_nilreason || ')')::text as readingposition,
    geometry_elevatedpoint_view_bqzptl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_bqzptl.longitude AS location_longitude,
    geometry_elevatedpoint_view_bqzptl.latitude AS location_latitude,
    geometry_elevatedpoint_view_bqzptl.elevation AS location_elevation,
    geometry_elevatedpoint_view_bqzptl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_bqzptl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_bqzptl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_bqzptl.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runwaydirection_pt_vkgnnq.associatedrunwaydirection::jsonb as associatedrunwaydirection,
    notes_note_view_mgqujg.annotation::jsonb as annotation
from airport_heliport.runwayvisualrange 
inner join master_join mj2 on airport_heliport.runwayvisualrange.id = mj2.source_id
inner join airport_heliport.runwayvisualrange_tsp on mj2.target_id = airport_heliport.runwayvisualrange_tsp.id
inner join airport_heliport.runwayvisualrange_ts on airport_heliport.runwayvisualrange_tsp.runwayvisualrangetimeslice_id = airport_heliport.runwayvisualrange_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_bqzptl on airport_heliport.runwayvisualrange_ts.location_id = geometry_elevatedpoint_view_bqzptl.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runwaydirection_lat_frguem.id,
      'title', coalesce(cast(airport_heliport_runwaydirection_lat_frguem.title AS varchar), '(' || airport_heliport_runwaydirection_lat_frguem.nilreason[1] || ')'),
      'href', airport_heliport_runwaydirection_lat_frguem.href
  )) as associatedrunwaydirection  from master_join master_join_gawfyd
  join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_lat_frguem on master_join_gawfyd.target_id = airport_heliport_runwaydirection_lat_frguem.id
  where master_join_gawfyd.source_id = airport_heliport.runwayvisualrange_ts.id
) as airport_heliport_runwaydirection_pt_vkgnnq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_drogvz.*) AS annotation
  from master_join master_join_ttbxyl
  join notes.note_view notes_note_lat_drogvz on master_join_ttbxyl.target_id = notes_note_lat_drogvz.id
  where master_join_ttbxyl.source_id = airport_heliport.runwayvisualrange_ts.id
) as notes_note_view_mgqujg on TRUE
where airport_heliport.runwayvisualrange.feature_status = 'APPROVED'
  and airport_heliport.runwayvisualrange_ts.feature_status = 'APPROVED'
order by runwayvisualrange.identifier, runwayvisualrange_ts.sequence_number, runwayvisualrange_ts.correction_number DESC;
-- SafeAltitudeAreaTimeSliceType
-- ['procedure.safealtitudeareasector_view', 'notes.note_view', 'geometry.point_view']
drop materialized view if exists procedure.safealtitudearea_view cascade;
create materialized view procedure.safealtitudearea_view as
select distinct on (safealtitudearea.identifier,safealtitudearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.safealtitudearea.id::integer as id,
    procedure.safealtitudearea_ts.id::integer as ts_id,
    procedure.safealtitudearea_tsp.id::integer as tsp_id,
    procedure.safealtitudearea.identifier::uuid,
    procedure.safealtitudearea_ts.interpretation::text,
    procedure.safealtitudearea_ts.sequence_number::integer,
    procedure.safealtitudearea_ts.correction_number::integer,
    procedure.safealtitudearea_ts.valid_time_begin::timestamp,
    procedure.safealtitudearea_ts.valid_time_end::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_begin::timestamp,
    procedure.safealtitudearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.safealtitudearea_ts.safeareatype_value as varchar), '(' || procedure.safealtitudearea_ts.safeareatype_nilreason || ')')::text as safeareatype,
    coalesce(cast(navaids_points_designatedpoint_pt_dxjjgs.title as varchar), '(' || navaids_points_designatedpoint_pt_dxjjgs.nilreason[1] || ')')::text AS centrepointfixdesignatedpoint,
    navaids_points_designatedpoint_pt_dxjjgs.href::text AS centrepointfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_cnawjt.title as varchar), '(' || navaids_points_navaid_pt_cnawjt.nilreason[1] || ')')::text AS centrepointnavaidsystem,
    navaids_points_navaid_pt_cnawjt.href::text AS centrepointnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rttzbf.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rttzbf.nilreason[1] || ')')::text AS centrepointaimingpoint,
    airport_heliport_touchdownliftoff_pt_rttzbf.href::text AS centrepointaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_xdazmm.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_xdazmm.nilreason[1] || ')')::text AS centrepointrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_xdazmm.href::text AS centrepointrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_lsnszl.title as varchar), '(' || airport_heliport_airportheliport_pt_lsnszl.nilreason[1] || ')')::text AS centrepointairportreferencepoint,
    airport_heliport_airportheliport_pt_lsnszl.href::text AS centrepointairportreferencepoint_href,
    airport_heliport_airportheliport_pt_ljwpll.location::jsonb as location,
    geometry_point_view_kcopcd.geom::geometry(Point, 4326) AS centrepointposition_geom,
    geometry_point_view_kcopcd.longitude AS centrepointposition_longitude,
    geometry_point_view_kcopcd.latitude AS centrepointposition_latitude,
    geometry_point_view_kcopcd.horizontalAccuracy AS centrepointposition_horizontalaccuracy,
    procedure_safealtitudeareasector_view_nccnty.sector::jsonb as sector,
    notes_note_view_zxnjln.annotation::jsonb as annotation
from procedure.safealtitudearea 
inner join master_join mj2 on procedure.safealtitudearea.id = mj2.source_id
inner join procedure.safealtitudearea_tsp on mj2.target_id = procedure.safealtitudearea_tsp.id
inner join procedure.safealtitudearea_ts on procedure.safealtitudearea_tsp.safealtitudeareatimeslice_id = procedure.safealtitudearea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_dxjjgs on procedure.safealtitudearea_ts.centrepoint_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_dxjjgs.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_cnawjt on procedure.safealtitudearea_ts.centrepoint_navaidsystem_id = navaids_points_navaid_pt_cnawjt.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rttzbf on procedure.safealtitudearea_ts.centrepoint_aimingpoint_id = airport_heliport_touchdownliftoff_pt_rttzbf.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_xdazmm on procedure.safealtitudearea_ts.centrepoint_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_xdazmm.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_lsnszl on procedure.safealtitudearea_ts.centrepoint_airportreferencepoint_id = airport_heliport_airportheliport_pt_lsnszl.id
left join geometry.point_view geometry_point_view_kcopcd on procedure.safealtitudearea_ts.centrepoint_position_id = geometry_point_view_kcopcd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_safealtitudeareasector_lat_daaarb.*) as sector
  from master_join master_join_evsajb
  join procedure.safealtitudeareasector_view procedure_safealtitudeareasector_lat_daaarb on master_join_evsajb.target_id = procedure_safealtitudeareasector_lat_daaarb.id
  where master_join_evsajb.source_id = procedure.safealtitudearea_ts.id
) as procedure_safealtitudeareasector_view_nccnty on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_objwfy.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_objwfy.title AS varchar), '(' || airport_heliport_airportheliport_lat_objwfy.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_objwfy.href
  )) as location  from master_join master_join_bkqgxr
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_objwfy on master_join_bkqgxr.target_id = airport_heliport_airportheliport_lat_objwfy.id
  where master_join_bkqgxr.source_id = procedure.safealtitudearea_ts.id
) as airport_heliport_airportheliport_pt_ljwpll on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_eawivc.*) AS annotation
  from master_join master_join_aidwoj
  join notes.note_view notes_note_lat_eawivc on master_join_aidwoj.target_id = notes_note_lat_eawivc.id
  where master_join_aidwoj.source_id = procedure.safealtitudearea_ts.id
) as notes_note_view_zxnjln on TRUE
where procedure.safealtitudearea.feature_status = 'APPROVED'
  and procedure.safealtitudearea_ts.feature_status = 'APPROVED'
order by safealtitudearea.identifier, safealtitudearea_ts.sequence_number, safealtitudearea_ts.correction_number DESC;
-- SDFTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.sdf_view cascade;
create materialized view navaids_points.sdf_view as
select distinct on (sdf.identifier,sdf_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.sdf.id::integer as id,
    navaids_points.sdf_ts.id::integer as ts_id,
    navaids_points.sdf_tsp.id::integer as tsp_id,
    navaids_points.sdf.identifier::uuid,
    navaids_points.sdf_ts.interpretation::text,
    navaids_points.sdf_ts.sequence_number::integer,
    navaids_points.sdf_ts.correction_number::integer,
    navaids_points.sdf_ts.valid_time_begin::timestamp,
    navaids_points.sdf_ts.valid_time_end::timestamp,
    navaids_points.sdf_ts.feature_lifetime_begin::timestamp,
    navaids_points.sdf_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.sdf_ts.designator_value as varchar), '(' || navaids_points.sdf_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.sdf_ts.name_value as varchar), '(' || navaids_points.sdf_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.sdf_ts.emissionclass_value as varchar), '(' || navaids_points.sdf_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.sdf_ts.mobile_value as varchar), '(' || navaids_points.sdf_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.sdf_ts.magneticvariation_value as varchar), '(' || navaids_points.sdf_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.sdf_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.sdf_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.sdf_ts.datemagneticvariation_value as varchar), '(' || navaids_points.sdf_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.sdf_ts.flightchecked_value as varchar), '(' || navaids_points.sdf_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.sdf_ts.magneticbearing_value as varchar), '(' || navaids_points.sdf_ts.magneticbearing_nilreason || ')')::text as magneticbearing,
    coalesce(cast(navaids_points.sdf_ts.truebearing_value as varchar), '(' || navaids_points.sdf_ts.truebearing_nilreason || ')')::text as truebearing,
    coalesce(cast(navaids_points.sdf_ts.frequency_value as varchar) || ' ' || navaids_points.sdf_ts.frequency_uom, '(' || navaids_points.sdf_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_flmzvb.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_flmzvb.longitude AS location_longitude,
    geometry_elevatedpoint_view_flmzvb.latitude AS location_latitude,
    geometry_elevatedpoint_view_flmzvb.elevation AS location_elevation,
    geometry_elevatedpoint_view_flmzvb.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_flmzvb.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_flmzvb.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_flmzvb.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ohzyzz.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_epozjm.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_ircilg.availability::jsonb as availability,
    notes_note_view_vdkshq.annotation::jsonb as annotation
from navaids_points.sdf 
inner join master_join mj2 on navaids_points.sdf.id = mj2.source_id
inner join navaids_points.sdf_tsp on mj2.target_id = navaids_points.sdf_tsp.id
inner join navaids_points.sdf_ts on navaids_points.sdf_tsp.sdftimeslice_id = navaids_points.sdf_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_flmzvb on navaids_points.sdf_ts.location_id = geometry_elevatedpoint_view_flmzvb.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_kwkavh.*) as authority
  from master_join master_join_jayvul
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_kwkavh on master_join_jayvul.target_id = navaids_points_authorityfornavaidequipment_lat_kwkavh.id
  where master_join_jayvul.source_id = navaids_points.sdf_ts.id
) as navaids_points_authorityfornavaidequipment_view_ohzyzz on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_qtdrin.*) as monitoring
  from master_join master_join_ekbses
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_qtdrin on master_join_ekbses.target_id = navaids_points_navaidequipmentmonitoring_lat_qtdrin.id
  where master_join_ekbses.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidequipmentmonitoring_view_epozjm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_vebvcg.*) as availability
  from master_join master_join_mtsyzc
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_vebvcg on master_join_mtsyzc.target_id = navaids_points_navaidoperationalstatus_lat_vebvcg.id
  where master_join_mtsyzc.source_id = navaids_points.sdf_ts.id
) as navaids_points_navaidoperationalstatus_view_ircilg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jgsbuz.*) AS annotation
  from master_join master_join_nuvdec
  join notes.note_view notes_note_lat_jgsbuz on master_join_nuvdec.target_id = notes_note_lat_jgsbuz.id
  where master_join_nuvdec.source_id = navaids_points.sdf_ts.id
) as notes_note_view_vdkshq on TRUE
where navaids_points.sdf.feature_status = 'APPROVED'
  and navaids_points.sdf_ts.feature_status = 'APPROVED'
order by sdf.identifier, sdf_ts.sequence_number, sdf_ts.correction_number DESC;
-- SeaplaneLandingAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view']
drop materialized view if exists airport_heliport.seaplanelandingarea_view cascade;
create materialized view airport_heliport.seaplanelandingarea_view as
select distinct on (seaplanelandingarea.identifier,seaplanelandingarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanelandingarea.id::integer as id,
    airport_heliport.seaplanelandingarea_ts.id::integer as ts_id,
    airport_heliport.seaplanelandingarea_tsp.id::integer as tsp_id,
    airport_heliport.seaplanelandingarea.identifier::uuid,
    airport_heliport.seaplanelandingarea_ts.interpretation::text,
    airport_heliport.seaplanelandingarea_ts.sequence_number::integer,
    airport_heliport.seaplanelandingarea_ts.correction_number::integer,
    airport_heliport.seaplanelandingarea_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.valid_time_end::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanelandingarea_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_fwxdiu.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_fwxdiu.elevation AS extent_elevation,
    geometry_elevatedsurface_view_fwxdiu.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_fwxdiu.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_fwxdiu.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_fwxdiu.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_seaplanerampsite_pt_qnvmff.rampsite::jsonb as rampsite,
    airport_heliport_floatingdocksite_pt_zcrmpw.docksite::jsonb as docksite,
    notes_note_view_vboxzq.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_tkefpm.availability::jsonb as availability
from airport_heliport.seaplanelandingarea 
inner join master_join mj2 on airport_heliport.seaplanelandingarea.id = mj2.source_id
inner join airport_heliport.seaplanelandingarea_tsp on mj2.target_id = airport_heliport.seaplanelandingarea_tsp.id
inner join airport_heliport.seaplanelandingarea_ts on airport_heliport.seaplanelandingarea_tsp.seaplanelandingareatimeslice_id = airport_heliport.seaplanelandingarea_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_fwxdiu on airport_heliport.seaplanelandingarea_ts.extent_id = geometry_elevatedsurface_view_fwxdiu.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_seaplanerampsite_lat_lgutsu.id,
      'title', coalesce(cast(airport_heliport_seaplanerampsite_lat_lgutsu.title AS varchar), '(' || airport_heliport_seaplanerampsite_lat_lgutsu.nilreason[1] || ')'),
      'href', airport_heliport_seaplanerampsite_lat_lgutsu.href
  )) as rampsite  from master_join master_join_pwenac
  join airport_heliport.seaplanerampsite_pt airport_heliport_seaplanerampsite_lat_lgutsu on master_join_pwenac.target_id = airport_heliport_seaplanerampsite_lat_lgutsu.id
  where master_join_pwenac.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_seaplanerampsite_pt_qnvmff on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_floatingdocksite_lat_uqwsdf.id,
      'title', coalesce(cast(airport_heliport_floatingdocksite_lat_uqwsdf.title AS varchar), '(' || airport_heliport_floatingdocksite_lat_uqwsdf.nilreason[1] || ')'),
      'href', airport_heliport_floatingdocksite_lat_uqwsdf.href
  )) as docksite  from master_join master_join_roqxoe
  join airport_heliport.floatingdocksite_pt airport_heliport_floatingdocksite_lat_uqwsdf on master_join_roqxoe.target_id = airport_heliport_floatingdocksite_lat_uqwsdf.id
  where master_join_roqxoe.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_floatingdocksite_pt_zcrmpw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vabeor.*) AS annotation
  from master_join master_join_jibnvw
  join notes.note_view notes_note_lat_vabeor on master_join_jibnvw.target_id = notes_note_lat_vabeor.id
  where master_join_jibnvw.source_id = airport_heliport.seaplanelandingarea_ts.id
) as notes_note_view_vboxzq on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_faqybj.*) as availability
  from master_join master_join_mkpeqv
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_faqybj on master_join_mkpeqv.target_id = airport_heliport_manoeuvringareaavailability_lat_faqybj.id
  where master_join_mkpeqv.source_id = airport_heliport.seaplanelandingarea_ts.id
) as airport_heliport_manoeuvringareaavailability_view_tkefpm on TRUE
where airport_heliport.seaplanelandingarea.feature_status = 'APPROVED'
  and airport_heliport.seaplanelandingarea_ts.feature_status = 'APPROVED'
order by seaplanelandingarea.identifier, seaplanelandingarea_ts.sequence_number, seaplanelandingarea_ts.correction_number DESC;
-- SeaplaneRampSiteTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'geometry.elevatedcurve_view']
drop materialized view if exists airport_heliport.seaplanerampsite_view cascade;
create materialized view airport_heliport.seaplanerampsite_view as
select distinct on (seaplanerampsite.identifier,seaplanerampsite_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.seaplanerampsite.id::integer as id,
    airport_heliport.seaplanerampsite_ts.id::integer as ts_id,
    airport_heliport.seaplanerampsite_tsp.id::integer as tsp_id,
    airport_heliport.seaplanerampsite.identifier::uuid,
    airport_heliport.seaplanerampsite_ts.interpretation::text,
    airport_heliport.seaplanerampsite_ts.sequence_number::integer,
    airport_heliport.seaplanerampsite_ts.correction_number::integer,
    airport_heliport.seaplanerampsite_ts.valid_time_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.valid_time_end::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_begin::timestamp,
    airport_heliport.seaplanerampsite_ts.feature_lifetime_end::timestamp,
    geometry_elevatedsurface_view_xgxbtw.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_xgxbtw.elevation AS extent_elevation,
    geometry_elevatedsurface_view_xgxbtw.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_xgxbtw.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_xgxbtw.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_xgxbtw.horizontalAccuracy AS extent_horizontalaccuracy,
    geometry_elevatedcurve_view_hdjkbo.geom::geometry(LINESTRING, 4326) AS centreline_geom,
    geometry_elevatedcurve_view_hdjkbo.elevation AS centreline_elevation,
    geometry_elevatedcurve_view_hdjkbo.geoidUndulation AS centreline_geoidundulation,
    geometry_elevatedcurve_view_hdjkbo.verticalDatum AS centreline_verticaldatum,
    geometry_elevatedcurve_view_hdjkbo.verticalAccuracy AS centreline_verticalaccuracy,
    geometry_elevatedcurve_view_hdjkbo.horizontalAccuracy AS centreline_horizontalaccuracy,
    notes_note_view_tpficb.annotation::jsonb as annotation
from airport_heliport.seaplanerampsite 
inner join master_join mj2 on airport_heliport.seaplanerampsite.id = mj2.source_id
inner join airport_heliport.seaplanerampsite_tsp on mj2.target_id = airport_heliport.seaplanerampsite_tsp.id
inner join airport_heliport.seaplanerampsite_ts on airport_heliport.seaplanerampsite_tsp.seaplanerampsitetimeslice_id = airport_heliport.seaplanerampsite_ts.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_xgxbtw on airport_heliport.seaplanerampsite_ts.extent_id = geometry_elevatedsurface_view_xgxbtw.id
left join geometry.elevatedcurve_view geometry_elevatedcurve_view_hdjkbo on airport_heliport.seaplanerampsite_ts.centreline_id = geometry_elevatedcurve_view_hdjkbo.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pieind.*) AS annotation
  from master_join master_join_bjgoec
  join notes.note_view notes_note_lat_pieind on master_join_bjgoec.target_id = notes_note_lat_pieind.id
  where master_join_bjgoec.source_id = airport_heliport.seaplanerampsite_ts.id
) as notes_note_view_tpficb on TRUE
where airport_heliport.seaplanerampsite.feature_status = 'APPROVED'
  and airport_heliport.seaplanerampsite_ts.feature_status = 'APPROVED'
order by seaplanerampsite.identifier, seaplanerampsite_ts.sequence_number, seaplanerampsite_ts.correction_number DESC;
-- SearchRescueServiceTimeSliceType
-- ['service.serviceoperationalstatus_view', 'shared.contactinformation_view', 'service.callsigndetail_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'routes.routeportion_view']
drop materialized view if exists service.searchrescueservice_view cascade;
create materialized view service.searchrescueservice_view as
select distinct on (searchrescueservice.identifier,searchrescueservice_ts.sequence_number)
    (row_number() over ())::integer as row,
    service.searchrescueservice.id::integer as id,
    service.searchrescueservice_ts.id::integer as ts_id,
    service.searchrescueservice_tsp.id::integer as tsp_id,
    service.searchrescueservice.identifier::uuid,
    service.searchrescueservice_ts.interpretation::text,
    service.searchrescueservice_ts.sequence_number::integer,
    service.searchrescueservice_ts.correction_number::integer,
    service.searchrescueservice_ts.valid_time_begin::timestamp,
    service.searchrescueservice_ts.valid_time_end::timestamp,
    service.searchrescueservice_ts.feature_lifetime_begin::timestamp,
    service.searchrescueservice_ts.feature_lifetime_end::timestamp,
    coalesce(cast(service.searchrescueservice_ts.flightoperations_value as varchar), '(' || service.searchrescueservice_ts.flightoperations_nilreason || ')')::text as flightoperations,
    coalesce(cast(service.searchrescueservice_ts.rank_value as varchar), '(' || service.searchrescueservice_ts.rank_nilreason || ')')::text as rank,
    coalesce(cast(service.searchrescueservice_ts.complianticao_value as varchar), '(' || service.searchrescueservice_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(service.searchrescueservice_ts.name_value as varchar), '(' || service.searchrescueservice_ts.name_nilreason || ')')::text as name,
    coalesce(cast(service.searchrescueservice_ts.type_value as varchar), '(' || service.searchrescueservice_ts.type_nilreason || ')')::text as type,
    geometry_elevatedpoint_view_ppgiox.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_ppgiox.longitude AS location_longitude,
    geometry_elevatedpoint_view_ppgiox.latitude AS location_latitude,
    geometry_elevatedpoint_view_ppgiox.elevation AS location_elevation,
    geometry_elevatedpoint_view_ppgiox.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_ppgiox.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_ppgiox.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_ppgiox.horizontalAccuracy AS location_horizontalaccuracy,
    coalesce(cast(organisation_unit_pt_xnrwem.title as varchar), '(' || organisation_unit_pt_xnrwem.nilreason[1] || ')')::text AS serviceprovider,
    organisation_unit_pt_xnrwem.href::text AS serviceprovider_href,
    service_callsigndetail_view_mlwxny.callsign::jsonb as callsign,
    service_radiocommunicationchannel_pt_rxhooi.radiocommunication::jsonb as radiocommunication,
    service_serviceoperationalstatus_view_hkxhwt.availability::jsonb as availability,
    notes_note_view_kasrte.annotation::jsonb as annotation,
    airspace_airspace_pt_sjozuv.clientairspace::jsonb as clientairspace,
    routes_routeportion_view_rgjttq.clientroute::jsonb as clientroute
from service.searchrescueservice 
inner join master_join mj2 on service.searchrescueservice.id = mj2.source_id
inner join service.searchrescueservice_tsp on mj2.target_id = service.searchrescueservice_tsp.id
inner join service.searchrescueservice_ts on service.searchrescueservice_tsp.searchrescueservicetimeslice_id = service.searchrescueservice_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_ppgiox on service.searchrescueservice_ts.location_id = geometry_elevatedpoint_view_ppgiox.id
left join organisation.unit_pt organisation_unit_pt_xnrwem on service.searchrescueservice_ts.serviceprovider_id = organisation_unit_pt_xnrwem.id
left join lateral(
  select jsonb_agg(DISTINCT service_callsigndetail_lat_fczaja.*) as callsign
  from master_join master_join_xzngsl
  join service.callsigndetail_view service_callsigndetail_lat_fczaja on master_join_xzngsl.target_id = service_callsigndetail_lat_fczaja.id
  where master_join_xzngsl.source_id = service.searchrescueservice_ts.id
) as service_callsigndetail_view_mlwxny on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_radiocommunicationchannel_lat_vdqhbm.id,
      'title', coalesce(cast(service_radiocommunicationchannel_lat_vdqhbm.title AS varchar), '(' || service_radiocommunicationchannel_lat_vdqhbm.nilreason[1] || ')'),
      'href', service_radiocommunicationchannel_lat_vdqhbm.href
  )) as radiocommunication  from master_join master_join_tgbicf
  join service.radiocommunicationchannel_pt service_radiocommunicationchannel_lat_vdqhbm on master_join_tgbicf.target_id = service_radiocommunicationchannel_lat_vdqhbm.id
  where master_join_tgbicf.source_id = service.searchrescueservice_ts.id
) as service_radiocommunicationchannel_pt_rxhooi on TRUE
left join lateral(
  select
  from master_join master_join_wxegrw
  join shared.contactinformation_view shared_contactinformation_lat_iufhjw on master_join_wxegrw.target_id = shared_contactinformation_lat_iufhjw.id
  where master_join_wxegrw.source_id = service.searchrescueservice_ts.id
) as shared_contactinformation_view_krmozi on TRUE
left join lateral(
  select jsonb_agg(DISTINCT service_serviceoperationalstatus_lat_ebkemy.*) as availability
  from master_join master_join_pgzxzt
  join service.serviceoperationalstatus_view service_serviceoperationalstatus_lat_ebkemy on master_join_pgzxzt.target_id = service_serviceoperationalstatus_lat_ebkemy.id
  where master_join_pgzxzt.source_id = service.searchrescueservice_ts.id
) as service_serviceoperationalstatus_view_hkxhwt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_tbwdbj.*) AS annotation
  from master_join master_join_chhnvl
  join notes.note_view notes_note_lat_tbwdbj on master_join_chhnvl.target_id = notes_note_lat_tbwdbj.id
  where master_join_chhnvl.source_id = service.searchrescueservice_ts.id
) as notes_note_view_kasrte on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_ybjocb.id,
      'title', coalesce(cast(airspace_airspace_lat_ybjocb.title AS varchar), '(' || airspace_airspace_lat_ybjocb.nilreason[1] || ')'),
      'href', airspace_airspace_lat_ybjocb.href
  )) as clientairspace  from master_join master_join_ynmzcp
  join airspace.airspace_pt airspace_airspace_lat_ybjocb on master_join_ynmzcp.target_id = airspace_airspace_lat_ybjocb.id
  where master_join_ynmzcp.source_id = service.searchrescueservice_ts.id
) as airspace_airspace_pt_sjozuv on TRUE
left join lateral(
  select jsonb_agg(DISTINCT routes_routeportion_lat_wpcybh.*) as clientroute
  from master_join master_join_glfapc
  join routes.routeportion_view routes_routeportion_lat_wpcybh on master_join_glfapc.target_id = routes_routeportion_lat_wpcybh.id
  where master_join_glfapc.source_id = service.searchrescueservice_ts.id
) as routes_routeportion_view_rgjttq on TRUE
where service.searchrescueservice.feature_status = 'APPROVED'
  and service.searchrescueservice_ts.feature_status = 'APPROVED'
order by searchrescueservice.identifier, searchrescueservice_ts.sequence_number, searchrescueservice_ts.correction_number DESC;
-- SecondarySurveillanceRadarTimeSliceType
-- ['shared.contactinformation_view', 'surveillance.surveillancegroundstation_view', 'geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists surveillance.secondarysurveillanceradar_view cascade;
create materialized view surveillance.secondarysurveillanceradar_view as
select distinct on (secondarysurveillanceradar.identifier,secondarysurveillanceradar_ts.sequence_number)
    (row_number() over ())::integer as row,
    surveillance.secondarysurveillanceradar.id::integer as id,
    surveillance.secondarysurveillanceradar_ts.id::integer as ts_id,
    surveillance.secondarysurveillanceradar_tsp.id::integer as tsp_id,
    surveillance.secondarysurveillanceradar.identifier::uuid,
    surveillance.secondarysurveillanceradar_ts.interpretation::text,
    surveillance.secondarysurveillanceradar_ts.sequence_number::integer,
    surveillance.secondarysurveillanceradar_ts.correction_number::integer,
    surveillance.secondarysurveillanceradar_ts.valid_time_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.valid_time_end::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_begin::timestamp,
    surveillance.secondarysurveillanceradar_ts.feature_lifetime_end::timestamp,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.name_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.name_nilreason || ')')::text as name,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.serialnumber_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.serialnumber_nilreason || ')')::text as serialnumber,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.dualchannel_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.dualchannel_nilreason || ')')::text as dualchannel,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.movingtargetindicator_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.movingtargetindicator_nilreason || ')')::text as movingtargetindicator,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.standbypower_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.standbypower_nilreason || ')')::text as standbypower,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.digital_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.digital_nilreason || ')')::text as digital,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.militaryuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.militaryuseonly_nilreason || ')')::text as militaryuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialuseonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialuseonly_nilreason || ')')::text as specialuseonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.specialaircraftonly_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.specialaircraftonly_nilreason || ')')::text as specialaircraftonly,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.datemagneticvariation_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.verticalcoverageazimuth_nilreason || ')')::text as verticalcoverageazimuth,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.antennatiltfixed_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.antennatiltfixed_nilreason || ')')::text as antennatiltfixed,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.tiltangle_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.tiltangle_nilreason || ')')::text as tiltangle,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.automatedradarterminalsystem_nilreason || ')')::text as automatedradarterminalsystem,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.transponder_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.transponder_nilreason || ')')::text as transponder,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.autonomous_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.autonomous_nilreason || ')')::text as autonomous,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.monopulse_value as varchar), '(' || surveillance.secondarysurveillanceradar_ts.monopulse_nilreason || ')')::text as monopulse,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.range_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.range_uom, '(' || surveillance.secondarysurveillanceradar_ts.range_nilreason || ')')::text as range,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.rangeaccuracy_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_uom, '(' || surveillance.secondarysurveillanceradar_ts.rangeaccuracy_nilreason || ')')::text as rangeaccuracy,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragealtitude_nilreason || ')')::text as verticalcoveragealtitude,
    coalesce(cast(surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_value as varchar) || ' ' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_uom, '(' || surveillance.secondarysurveillanceradar_ts.verticalcoveragedistance_nilreason || ')')::text as verticalcoveragedistance,
    geometry_elevatedpoint_view_rvtgdl.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_rvtgdl.longitude AS location_longitude,
    geometry_elevatedpoint_view_rvtgdl.latitude AS location_latitude,
    geometry_elevatedpoint_view_rvtgdl.elevation AS location_elevation,
    geometry_elevatedpoint_view_rvtgdl.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_rvtgdl.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_rvtgdl.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_rvtgdl.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_udnwvd.annotation::jsonb as annotation,
    surveillance_surveillancegroundstation_view_sdyowo.groundstation::jsonb as groundstation
from surveillance.secondarysurveillanceradar 
inner join master_join mj2 on surveillance.secondarysurveillanceradar.id = mj2.source_id
inner join surveillance.secondarysurveillanceradar_tsp on mj2.target_id = surveillance.secondarysurveillanceradar_tsp.id
inner join surveillance.secondarysurveillanceradar_ts on surveillance.secondarysurveillanceradar_tsp.secondarysurveillanceradartimeslice_id = surveillance.secondarysurveillanceradar_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_rvtgdl on surveillance.secondarysurveillanceradar_ts.location_id = geometry_elevatedpoint_view_rvtgdl.id
left join lateral(
  select
  from master_join master_join_pgnyer
  join shared.contactinformation_view shared_contactinformation_lat_yhphtk on master_join_pgnyer.target_id = shared_contactinformation_lat_yhphtk.id
  where master_join_pgnyer.source_id = surveillance.secondarysurveillanceradar_ts.id
) as shared_contactinformation_view_emjqmd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vweeje.*) AS annotation
  from master_join master_join_hopdhl
  join notes.note_view notes_note_lat_vweeje on master_join_hopdhl.target_id = notes_note_lat_vweeje.id
  where master_join_hopdhl.source_id = surveillance.secondarysurveillanceradar_ts.id
) as notes_note_view_udnwvd on TRUE
left join lateral(
  select jsonb_agg(DISTINCT surveillance_surveillancegroundstation_lat_jujoyt.*) as groundstation
  from master_join master_join_eblgec
  join surveillance.surveillancegroundstation_view surveillance_surveillancegroundstation_lat_jujoyt on master_join_eblgec.target_id = surveillance_surveillancegroundstation_lat_jujoyt.id
  where master_join_eblgec.source_id = surveillance.secondarysurveillanceradar_ts.id
) as surveillance_surveillancegroundstation_view_sdyowo on TRUE
where surveillance.secondarysurveillanceradar.feature_status = 'APPROVED'
  and surveillance.secondarysurveillanceradar_ts.feature_status = 'APPROVED'
order by secondarysurveillanceradar.identifier, secondarysurveillanceradar_ts.sequence_number, secondarysurveillanceradar_ts.correction_number DESC;
-- SignificantPointInAirspaceTimeSliceType
-- ['notes.note_view', 'geometry.point_view']
drop materialized view if exists navaids_points.significantpointinairspace_view cascade;
create materialized view navaids_points.significantpointinairspace_view as
select distinct on (significantpointinairspace.identifier,significantpointinairspace_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.significantpointinairspace.id::integer as id,
    navaids_points.significantpointinairspace_ts.id::integer as ts_id,
    navaids_points.significantpointinairspace_tsp.id::integer as tsp_id,
    navaids_points.significantpointinairspace.identifier::uuid,
    navaids_points.significantpointinairspace_ts.interpretation::text,
    navaids_points.significantpointinairspace_ts.sequence_number::integer,
    navaids_points.significantpointinairspace_ts.correction_number::integer,
    navaids_points.significantpointinairspace_ts.valid_time_begin::timestamp,
    navaids_points.significantpointinairspace_ts.valid_time_end::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_begin::timestamp,
    navaids_points.significantpointinairspace_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.significantpointinairspace_ts.type_value as varchar), '(' || navaids_points.significantpointinairspace_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.significantpointinairspace_ts.relativelocation_value as varchar), '(' || navaids_points.significantpointinairspace_ts.relativelocation_nilreason || ')')::text as relativelocation,
    coalesce(cast(airspace_airspace_pt_smbwgr.title as varchar), '(' || airspace_airspace_pt_smbwgr.nilreason[1] || ')')::text AS containingairspace,
    airspace_airspace_pt_smbwgr.href::text AS containingairspace_href,
    coalesce(cast(navaids_points_designatedpoint_pt_frkjwu.title as varchar), '(' || navaids_points_designatedpoint_pt_frkjwu.nilreason[1] || ')')::text AS locationfixdesignatedpoint,
    navaids_points_designatedpoint_pt_frkjwu.href::text AS locationfixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_ghguwv.title as varchar), '(' || navaids_points_navaid_pt_ghguwv.nilreason[1] || ')')::text AS locationnavaidsystem,
    navaids_points_navaid_pt_ghguwv.href::text AS locationnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_fvxvez.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_fvxvez.nilreason[1] || ')')::text AS locationaimingpoint,
    airport_heliport_touchdownliftoff_pt_fvxvez.href::text AS locationaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_nvckoq.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_nvckoq.nilreason[1] || ')')::text AS locationrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_nvckoq.href::text AS locationrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_ixadic.title as varchar), '(' || airport_heliport_airportheliport_pt_ixadic.nilreason[1] || ')')::text AS locationairportreferencepoint,
    airport_heliport_airportheliport_pt_ixadic.href::text AS locationairportreferencepoint_href,
    geometry_point_view_hicpbj.geom::geometry(Point, 4326) AS locationposition_geom,
    geometry_point_view_hicpbj.longitude AS locationposition_longitude,
    geometry_point_view_hicpbj.latitude AS locationposition_latitude,
    geometry_point_view_hicpbj.horizontalAccuracy AS locationposition_horizontalaccuracy,
    notes_note_view_phjydo.annotation::jsonb as annotation
from navaids_points.significantpointinairspace 
inner join master_join mj2 on navaids_points.significantpointinairspace.id = mj2.source_id
inner join navaids_points.significantpointinairspace_tsp on mj2.target_id = navaids_points.significantpointinairspace_tsp.id
inner join navaids_points.significantpointinairspace_ts on navaids_points.significantpointinairspace_tsp.significantpointinairspacetimeslice_id = navaids_points.significantpointinairspace_ts.id
left join airspace.airspace_pt airspace_airspace_pt_smbwgr on navaids_points.significantpointinairspace_ts.containingairspace_id = airspace_airspace_pt_smbwgr.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_frkjwu on navaids_points.significantpointinairspace_ts.location_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_frkjwu.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_ghguwv on navaids_points.significantpointinairspace_ts.location_navaidsystem_id = navaids_points_navaid_pt_ghguwv.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_fvxvez on navaids_points.significantpointinairspace_ts.location_aimingpoint_id = airport_heliport_touchdownliftoff_pt_fvxvez.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_nvckoq on navaids_points.significantpointinairspace_ts.location_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_nvckoq.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_ixadic on navaids_points.significantpointinairspace_ts.location_airportreferencepoint_id = airport_heliport_airportheliport_pt_ixadic.id
left join geometry.point_view geometry_point_view_hicpbj on navaids_points.significantpointinairspace_ts.location_position_id = geometry_point_view_hicpbj.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bahdcm.*) AS annotation
  from master_join master_join_vruwba
  join notes.note_view notes_note_lat_bahdcm on master_join_vruwba.target_id = notes_note_lat_bahdcm.id
  where master_join_vruwba.source_id = navaids_points.significantpointinairspace_ts.id
) as notes_note_view_phjydo on TRUE
where navaids_points.significantpointinairspace.feature_status = 'APPROVED'
  and navaids_points.significantpointinairspace_ts.feature_status = 'APPROVED'
order by significantpointinairspace.identifier, significantpointinairspace_ts.sequence_number, significantpointinairspace_ts.correction_number DESC;
-- SpecialDateTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.specialdate_view cascade;
create materialized view shared.specialdate_view as
select distinct on (specialdate.identifier,specialdate_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.specialdate.id::integer as id,
    shared.specialdate_ts.id::integer as ts_id,
    shared.specialdate_tsp.id::integer as tsp_id,
    shared.specialdate.identifier::uuid,
    shared.specialdate_ts.interpretation::text,
    shared.specialdate_ts.sequence_number::integer,
    shared.specialdate_ts.correction_number::integer,
    shared.specialdate_ts.valid_time_begin::timestamp,
    shared.specialdate_ts.valid_time_end::timestamp,
    shared.specialdate_ts.feature_lifetime_begin::timestamp,
    shared.specialdate_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.specialdate_ts.type_value as varchar), '(' || shared.specialdate_ts.type_nilreason || ')')::text as type,
    coalesce(cast(shared.specialdate_ts.dateday_value as varchar), '(' || shared.specialdate_ts.dateday_nilreason || ')')::text as dateday,
    coalesce(cast(shared.specialdate_ts.dateyear_value as varchar), '(' || shared.specialdate_ts.dateyear_nilreason || ')')::text as dateyear,
    coalesce(cast(shared.specialdate_ts.name_value as varchar), '(' || shared.specialdate_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation_organisationauthority_pt_ybvkmb.title as varchar), '(' || organisation_organisationauthority_pt_ybvkmb.nilreason[1] || ')')::text AS authority,
    organisation_organisationauthority_pt_ybvkmb.href::text AS authority_href,
    notes_note_view_fplyab.annotation::jsonb as annotation
from shared.specialdate 
inner join master_join mj2 on shared.specialdate.id = mj2.source_id
inner join shared.specialdate_tsp on mj2.target_id = shared.specialdate_tsp.id
inner join shared.specialdate_ts on shared.specialdate_tsp.specialdatetimeslice_id = shared.specialdate_ts.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_ybvkmb on shared.specialdate_ts.authority_id = organisation_organisationauthority_pt_ybvkmb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ummymm.*) AS annotation
  from master_join master_join_sxfgdv
  join notes.note_view notes_note_lat_ummymm on master_join_sxfgdv.target_id = notes_note_lat_ummymm.id
  where master_join_sxfgdv.source_id = shared.specialdate_ts.id
) as notes_note_view_fplyab on TRUE
where shared.specialdate.feature_status = 'APPROVED'
  and shared.specialdate_ts.feature_status = 'APPROVED'
order by specialdate.identifier, specialdate_ts.sequence_number, specialdate_ts.correction_number DESC;
-- SpecialNavigationStationTimeSliceType
-- ['geometry.elevatedpoint_view', 'navaids_points.authorityforspecialnavigationstation_view', 'notes.note_view', 'navaids_points.specialnavigationstationstatus_view']
drop materialized view if exists navaids_points.specialnavigationstation_view cascade;
create materialized view navaids_points.specialnavigationstation_view as
select distinct on (specialnavigationstation.identifier,specialnavigationstation_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationstation.id::integer as id,
    navaids_points.specialnavigationstation_ts.id::integer as ts_id,
    navaids_points.specialnavigationstation_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationstation.identifier::uuid,
    navaids_points.specialnavigationstation_ts.interpretation::text,
    navaids_points.specialnavigationstation_ts.sequence_number::integer,
    navaids_points.specialnavigationstation_ts.correction_number::integer,
    navaids_points.specialnavigationstation_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationstation_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationstation_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationstation_ts.name_value as varchar), '(' || navaids_points.specialnavigationstation_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.specialnavigationstation_ts.type_value as varchar), '(' || navaids_points.specialnavigationstation_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationstation_ts.emission_value as varchar), '(' || navaids_points.specialnavigationstation_ts.emission_nilreason || ')')::text as emission,
    coalesce(cast(navaids_points.specialnavigationstation_ts.frequency_value as varchar) || ' ' || navaids_points.specialnavigationstation_ts.frequency_uom, '(' || navaids_points.specialnavigationstation_ts.frequency_nilreason || ')')::text as frequency,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_zcicoe.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_zcicoe.nilreason[1] || ')')::text AS systemchain,
    navaids_points_specialnavigationsystem_pt_zcicoe.href::text AS systemchain_href,
    to_jsonb(navaids_points_authorityforspecialnavigationstation_view_sgzlhz.*)::jsonb AS responsibleorganisation,
    geometry_elevatedpoint_view_lbvgwy.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_lbvgwy.longitude AS position_longitude,
    geometry_elevatedpoint_view_lbvgwy.latitude AS position_latitude,
    geometry_elevatedpoint_view_lbvgwy.elevation AS position_elevation,
    geometry_elevatedpoint_view_lbvgwy.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_lbvgwy.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_lbvgwy.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_lbvgwy.horizontalAccuracy AS position_horizontalaccuracy,
    navaids_points_specialnavigationstationstatus_view_lnfqis.availability::jsonb as availability,
    notes_note_view_rwgzex.annotation::jsonb as annotation
from navaids_points.specialnavigationstation 
inner join master_join mj2 on navaids_points.specialnavigationstation.id = mj2.source_id
inner join navaids_points.specialnavigationstation_tsp on mj2.target_id = navaids_points.specialnavigationstation_tsp.id
inner join navaids_points.specialnavigationstation_ts on navaids_points.specialnavigationstation_tsp.specialnavigationstationtimeslice_id = navaids_points.specialnavigationstation_ts.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_zcicoe on navaids_points.specialnavigationstation_ts.systemchain_id = navaids_points_specialnavigationsystem_pt_zcicoe.id
left join navaids_points.authorityforspecialnavigationstation_view navaids_points_authorityforspecialnavigationstation_view_sgzlhz on navaids_points.specialnavigationstation_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationstation_view_sgzlhz.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lbvgwy on navaids_points.specialnavigationstation_ts.position_id = geometry_elevatedpoint_view_lbvgwy.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_specialnavigationstationstatus_lat_rpbycw.*) as availability
  from master_join master_join_ytnevp
  join navaids_points.specialnavigationstationstatus_view navaids_points_specialnavigationstationstatus_lat_rpbycw on master_join_ytnevp.target_id = navaids_points_specialnavigationstationstatus_lat_rpbycw.id
  where master_join_ytnevp.source_id = navaids_points.specialnavigationstation_ts.id
) as navaids_points_specialnavigationstationstatus_view_lnfqis on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rrlpgx.*) AS annotation
  from master_join master_join_hjxfik
  join notes.note_view notes_note_lat_rrlpgx on master_join_hjxfik.target_id = notes_note_lat_rrlpgx.id
  where master_join_hjxfik.source_id = navaids_points.specialnavigationstation_ts.id
) as notes_note_view_rwgzex on TRUE
where navaids_points.specialnavigationstation.feature_status = 'APPROVED'
  and navaids_points.specialnavigationstation_ts.feature_status = 'APPROVED'
order by specialnavigationstation.identifier, specialnavigationstation_ts.sequence_number, specialnavigationstation_ts.correction_number DESC;
-- SpecialNavigationSystemTimeSliceType
-- ['notes.note_view', 'navaids_points.authorityforspecialnavigationsystem_view']
drop materialized view if exists navaids_points.specialnavigationsystem_view cascade;
create materialized view navaids_points.specialnavigationsystem_view as
select distinct on (specialnavigationsystem.identifier,specialnavigationsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.specialnavigationsystem.id::integer as id,
    navaids_points.specialnavigationsystem_ts.id::integer as ts_id,
    navaids_points.specialnavigationsystem_tsp.id::integer as tsp_id,
    navaids_points.specialnavigationsystem.identifier::uuid,
    navaids_points.specialnavigationsystem_ts.interpretation::text,
    navaids_points.specialnavigationsystem_ts.sequence_number::integer,
    navaids_points.specialnavigationsystem_ts.correction_number::integer,
    navaids_points.specialnavigationsystem_ts.valid_time_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.valid_time_end::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_begin::timestamp,
    navaids_points.specialnavigationsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.type_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.designator_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.specialnavigationsystem_ts.name_value as varchar), '(' || navaids_points.specialnavigationsystem_ts.name_nilreason || ')')::text as name,
    to_jsonb(navaids_points_authorityforspecialnavigationsystem_view_rkdfef.*)::jsonb AS responsibleorganisation,
    notes_note_view_cidhzp.annotation::jsonb as annotation
from navaids_points.specialnavigationsystem 
inner join master_join mj2 on navaids_points.specialnavigationsystem.id = mj2.source_id
inner join navaids_points.specialnavigationsystem_tsp on mj2.target_id = navaids_points.specialnavigationsystem_tsp.id
inner join navaids_points.specialnavigationsystem_ts on navaids_points.specialnavigationsystem_tsp.specialnavigationsystemtimeslice_id = navaids_points.specialnavigationsystem_ts.id
left join navaids_points.authorityforspecialnavigationsystem_view navaids_points_authorityforspecialnavigationsystem_view_rkdfef on navaids_points.specialnavigationsystem_ts.responsibleorganisation_id = navaids_points_authorityforspecialnavigationsystem_view_rkdfef.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wjhurq.*) AS annotation
  from master_join master_join_mmehls
  join notes.note_view notes_note_lat_wjhurq on master_join_mmehls.target_id = notes_note_lat_wjhurq.id
  where master_join_mmehls.source_id = navaids_points.specialnavigationsystem_ts.id
) as notes_note_view_cidhzp on TRUE
where navaids_points.specialnavigationsystem.feature_status = 'APPROVED'
  and navaids_points.specialnavigationsystem_ts.feature_status = 'APPROVED'
order by specialnavigationsystem.identifier, specialnavigationsystem_ts.sequence_number, specialnavigationsystem_ts.correction_number DESC;
-- StandardInstrumentArrivalTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'notes.note_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentarrival_view cascade;
create materialized view procedure.standardinstrumentarrival_view as
select distinct on (standardinstrumentarrival.identifier,standardinstrumentarrival_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentarrival.id::integer as id,
    procedure.standardinstrumentarrival_ts.id::integer as ts_id,
    procedure.standardinstrumentarrival_tsp.id::integer as tsp_id,
    procedure.standardinstrumentarrival.identifier::uuid,
    procedure.standardinstrumentarrival_ts.interpretation::text,
    procedure.standardinstrumentarrival_ts.sequence_number::integer,
    procedure.standardinstrumentarrival_ts.correction_number::integer,
    procedure.standardinstrumentarrival_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentarrival_ts.valid_time_end::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentarrival_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentarrival_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.instruction_value as varchar), '(' || procedure.standardinstrumentarrival_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentarrival_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentarrival_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentarrival_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentarrival_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentarrival_ts.name_value as varchar), '(' || procedure.standardinstrumentarrival_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentarrival_ts.rnav_value as varchar), '(' || procedure.standardinstrumentarrival_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentarrival_ts.designator_value as varchar), '(' || procedure.standardinstrumentarrival_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points_navaid_pt_voeieo.title as varchar), '(' || navaids_points_navaid_pt_voeieo.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_voeieo.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_gmwjcq.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_gmwjcq.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_gmwjcq.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_ahqmwp.title as varchar), '(' || surveillance_radarsystem_pt_ahqmwp.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_ahqmwp.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_mjxfix.title as varchar), '(' || procedure_safealtitudearea_pt_mjxfix.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_mjxfix.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_weivrq.*)::jsonb AS arrival,
    procedure_procedureavailability_view_fqjsdr.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_pumncn.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_xsxdfe.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_svvifb.flighttransition::jsonb as flighttransition,
    notes_note_view_ctnygr.annotation::jsonb as annotation
from procedure.standardinstrumentarrival 
inner join master_join mj2 on procedure.standardinstrumentarrival.id = mj2.source_id
inner join procedure.standardinstrumentarrival_tsp on mj2.target_id = procedure.standardinstrumentarrival_tsp.id
inner join procedure.standardinstrumentarrival_ts on procedure.standardinstrumentarrival_tsp.standardinstrumentarrivaltimeslice_id = procedure.standardinstrumentarrival_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_voeieo on procedure.standardinstrumentarrival_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_voeieo.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_gmwjcq on procedure.standardinstrumentarrival_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_gmwjcq.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_ahqmwp on procedure.standardinstrumentarrival_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_ahqmwp.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_mjxfix on procedure.standardinstrumentarrival_ts.safealtitude_id = procedure_safealtitudearea_pt_mjxfix.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_weivrq on procedure.standardinstrumentarrival_ts.arrival_id = procedure_landingtakeoffareacollection_view_weivrq.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_ftfioj.*) as availability
  from master_join master_join_jclnrk
  join procedure.procedureavailability_view procedure_procedureavailability_lat_ftfioj on master_join_jclnrk.target_id = procedure_procedureavailability_lat_ftfioj.id
  where master_join_jclnrk.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_procedureavailability_view_fqjsdr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_zpkjdm.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_zpkjdm.title AS varchar), '(' || airport_heliport_airportheliport_lat_zpkjdm.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_zpkjdm.href
  )) as airportheliport  from master_join master_join_ypprnf
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_zpkjdm on master_join_ypprnf.target_id = airport_heliport_airportheliport_lat_zpkjdm.id
  where master_join_ypprnf.source_id = procedure.standardinstrumentarrival_ts.id
) as airport_heliport_airportheliport_pt_pumncn on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_qcirng.*) as aircraftcharacteristic
  from master_join master_join_efvrfa
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_qcirng on master_join_efvrfa.target_id = shared_aircraftcharacteristic_lat_qcirng.id
  where master_join_efvrfa.source_id = procedure.standardinstrumentarrival_ts.id
) as shared_aircraftcharacteristic_view_xsxdfe on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_xvrtsd.*) as flighttransition
  from master_join master_join_jvquwu
  join procedure.proceduretransition_view procedure_proceduretransition_lat_xvrtsd on master_join_jvquwu.target_id = procedure_proceduretransition_lat_xvrtsd.id
  where master_join_jvquwu.source_id = procedure.standardinstrumentarrival_ts.id
) as procedure_proceduretransition_view_svvifb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_oetose.*) AS annotation
  from master_join master_join_adfaoe
  join notes.note_view notes_note_lat_oetose on master_join_adfaoe.target_id = notes_note_lat_oetose.id
  where master_join_adfaoe.source_id = procedure.standardinstrumentarrival_ts.id
) as notes_note_view_ctnygr on TRUE
where procedure.standardinstrumentarrival.feature_status = 'APPROVED'
  and procedure.standardinstrumentarrival_ts.feature_status = 'APPROVED'
order by standardinstrumentarrival.identifier, standardinstrumentarrival_ts.sequence_number, standardinstrumentarrival_ts.correction_number DESC;
-- StandardInstrumentDepartureTimeSliceType
-- ['procedure.landingtakeoffareacollection_view', 'procedure.proceduretransition_view', 'notes.note_view', 'procedure.procedureavailability_view', 'shared.aircraftcharacteristic_view']
drop materialized view if exists procedure.standardinstrumentdeparture_view cascade;
create materialized view procedure.standardinstrumentdeparture_view as
select distinct on (standardinstrumentdeparture.identifier,standardinstrumentdeparture_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.standardinstrumentdeparture.id::integer as id,
    procedure.standardinstrumentdeparture_ts.id::integer as ts_id,
    procedure.standardinstrumentdeparture_tsp.id::integer as tsp_id,
    procedure.standardinstrumentdeparture.identifier::uuid,
    procedure.standardinstrumentdeparture_ts.interpretation::text,
    procedure.standardinstrumentdeparture_ts.sequence_number::integer,
    procedure.standardinstrumentdeparture_ts.correction_number::integer,
    procedure.standardinstrumentdeparture_ts.valid_time_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.valid_time_end::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_begin::timestamp,
    procedure.standardinstrumentdeparture_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.communicationfailureinstruction_nilreason || ')')::text as communicationfailureinstruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.instruction_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.instruction_nilreason || ')')::text as instruction,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designcriteria_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designcriteria_nilreason || ')')::text as designcriteria,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.codingstandard_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.codingstandard_nilreason || ')')::text as codingstandard,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.flightchecked_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.name_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.name_nilreason || ')')::text as name,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.rnav_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.rnav_nilreason || ')')::text as rnav,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.designator_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(procedure.standardinstrumentdeparture_ts.contingencyroute_value as varchar), '(' || procedure.standardinstrumentdeparture_ts.contingencyroute_nilreason || ')')::text as contingencyroute,
    coalesce(cast(navaids_points_navaid_pt_jqiozc.title as varchar), '(' || navaids_points_navaid_pt_jqiozc.nilreason[1] || ')')::text AS guidancefacilitynavaid,
    navaids_points_navaid_pt_jqiozc.href::text AS guidancefacilitynavaid_href,
    coalesce(cast(navaids_points_specialnavigationsystem_pt_qickru.title as varchar), '(' || navaids_points_specialnavigationsystem_pt_qickru.nilreason[1] || ')')::text AS guidancefacilityspecialnavigationsystem,
    navaids_points_specialnavigationsystem_pt_qickru.href::text AS guidancefacilityspecialnavigationsystem_href,
    coalesce(cast(surveillance_radarsystem_pt_llzfrn.title as varchar), '(' || surveillance_radarsystem_pt_llzfrn.nilreason[1] || ')')::text AS guidancefacilityradar,
    surveillance_radarsystem_pt_llzfrn.href::text AS guidancefacilityradar_href,
    coalesce(cast(procedure_safealtitudearea_pt_rfmbbr.title as varchar), '(' || procedure_safealtitudearea_pt_rfmbbr.nilreason[1] || ')')::text AS safealtitude,
    procedure_safealtitudearea_pt_rfmbbr.href::text AS safealtitude_href,
    to_jsonb(procedure_landingtakeoffareacollection_view_uobpyh.*)::jsonb AS takeoff,
    procedure_procedureavailability_view_gclwuy.availability::jsonb as availability,
    airport_heliport_airportheliport_pt_vwmmba.airportheliport::jsonb as airportheliport,
    shared_aircraftcharacteristic_view_tcchhs.aircraftcharacteristic::jsonb as aircraftcharacteristic,
    procedure_proceduretransition_view_ujthtf.flighttransition::jsonb as flighttransition,
    notes_note_view_hbidoa.annotation::jsonb as annotation
from procedure.standardinstrumentdeparture 
inner join master_join mj2 on procedure.standardinstrumentdeparture.id = mj2.source_id
inner join procedure.standardinstrumentdeparture_tsp on mj2.target_id = procedure.standardinstrumentdeparture_tsp.id
inner join procedure.standardinstrumentdeparture_ts on procedure.standardinstrumentdeparture_tsp.standardinstrumentdeparturetimeslice_id = procedure.standardinstrumentdeparture_ts.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_jqiozc on procedure.standardinstrumentdeparture_ts.guidancefacility_navaid_id = navaids_points_navaid_pt_jqiozc.id
left join navaids_points.specialnavigationsystem_pt navaids_points_specialnavigationsystem_pt_qickru on procedure.standardinstrumentdeparture_ts.guidancefacility_specialnavigationsystem_id = navaids_points_specialnavigationsystem_pt_qickru.id
left join surveillance.radarsystem_pt surveillance_radarsystem_pt_llzfrn on procedure.standardinstrumentdeparture_ts.guidancefacility_radar_id = surveillance_radarsystem_pt_llzfrn.id
left join procedure.safealtitudearea_pt procedure_safealtitudearea_pt_rfmbbr on procedure.standardinstrumentdeparture_ts.safealtitude_id = procedure_safealtitudearea_pt_rfmbbr.id
left join procedure.landingtakeoffareacollection_view procedure_landingtakeoffareacollection_view_uobpyh on procedure.standardinstrumentdeparture_ts.takeoff_id = procedure_landingtakeoffareacollection_view_uobpyh.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_procedureavailability_lat_hozmvw.*) as availability
  from master_join master_join_nbhklp
  join procedure.procedureavailability_view procedure_procedureavailability_lat_hozmvw on master_join_nbhklp.target_id = procedure_procedureavailability_lat_hozmvw.id
  where master_join_nbhklp.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_procedureavailability_view_gclwuy on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_airportheliport_lat_ztkqww.id,
      'title', coalesce(cast(airport_heliport_airportheliport_lat_ztkqww.title AS varchar), '(' || airport_heliport_airportheliport_lat_ztkqww.nilreason[1] || ')'),
      'href', airport_heliport_airportheliport_lat_ztkqww.href
  )) as airportheliport  from master_join master_join_xakzfq
  join airport_heliport.airportheliport_pt airport_heliport_airportheliport_lat_ztkqww on master_join_xakzfq.target_id = airport_heliport_airportheliport_lat_ztkqww.id
  where master_join_xakzfq.source_id = procedure.standardinstrumentdeparture_ts.id
) as airport_heliport_airportheliport_pt_vwmmba on TRUE
left join lateral(
  select jsonb_agg(DISTINCT shared_aircraftcharacteristic_lat_momirl.*) as aircraftcharacteristic
  from master_join master_join_rkcwhy
  join shared.aircraftcharacteristic_view shared_aircraftcharacteristic_lat_momirl on master_join_rkcwhy.target_id = shared_aircraftcharacteristic_lat_momirl.id
  where master_join_rkcwhy.source_id = procedure.standardinstrumentdeparture_ts.id
) as shared_aircraftcharacteristic_view_tcchhs on TRUE
left join lateral(
  select jsonb_agg(DISTINCT procedure_proceduretransition_lat_wxhebm.*) as flighttransition
  from master_join master_join_ymdwjg
  join procedure.proceduretransition_view procedure_proceduretransition_lat_wxhebm on master_join_ymdwjg.target_id = procedure_proceduretransition_lat_wxhebm.id
  where master_join_ymdwjg.source_id = procedure.standardinstrumentdeparture_ts.id
) as procedure_proceduretransition_view_ujthtf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_jzixne.*) AS annotation
  from master_join master_join_cdmuhf
  join notes.note_view notes_note_lat_jzixne on master_join_cdmuhf.target_id = notes_note_lat_jzixne.id
  where master_join_cdmuhf.source_id = procedure.standardinstrumentdeparture_ts.id
) as notes_note_view_hbidoa on TRUE
where procedure.standardinstrumentdeparture.feature_status = 'APPROVED'
  and procedure.standardinstrumentdeparture_ts.feature_status = 'APPROVED'
order by standardinstrumentdeparture.identifier, standardinstrumentdeparture_ts.sequence_number, standardinstrumentdeparture_ts.correction_number DESC;
-- StandardLevelColumnTimeSliceType
-- ['notes.note_view', 'shared.standardlevel_view']
drop materialized view if exists shared.standardlevelcolumn_view cascade;
create materialized view shared.standardlevelcolumn_view as
select distinct on (standardlevelcolumn.identifier,standardlevelcolumn_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelcolumn.id::integer as id,
    shared.standardlevelcolumn_ts.id::integer as ts_id,
    shared.standardlevelcolumn_tsp.id::integer as tsp_id,
    shared.standardlevelcolumn.identifier::uuid,
    shared.standardlevelcolumn_ts.interpretation::text,
    shared.standardlevelcolumn_ts.sequence_number::integer,
    shared.standardlevelcolumn_ts.correction_number::integer,
    shared.standardlevelcolumn_ts.valid_time_begin::timestamp,
    shared.standardlevelcolumn_ts.valid_time_end::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelcolumn_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelcolumn_ts.series_value as varchar), '(' || shared.standardlevelcolumn_ts.series_nilreason || ')')::text as series,
    coalesce(cast(shared.standardlevelcolumn_ts.separation_value as varchar), '(' || shared.standardlevelcolumn_ts.separation_nilreason || ')')::text as separation,
    coalesce(cast(shared_standardleveltable_pt_hybntu.title as varchar), '(' || shared_standardleveltable_pt_hybntu.nilreason[1] || ')')::text AS leveltable,
    shared_standardleveltable_pt_hybntu.href::text AS leveltable_href,
    shared_standardlevel_view_wqfbaw.level::jsonb as level,
    notes_note_view_imnvvc.annotation::jsonb as annotation
from shared.standardlevelcolumn 
inner join master_join mj2 on shared.standardlevelcolumn.id = mj2.source_id
inner join shared.standardlevelcolumn_tsp on mj2.target_id = shared.standardlevelcolumn_tsp.id
inner join shared.standardlevelcolumn_ts on shared.standardlevelcolumn_tsp.standardlevelcolumntimeslice_id = shared.standardlevelcolumn_ts.id
left join shared.standardleveltable_pt shared_standardleveltable_pt_hybntu on shared.standardlevelcolumn_ts.leveltable_id = shared_standardleveltable_pt_hybntu.id
left join lateral(
  select jsonb_agg(DISTINCT shared_standardlevel_lat_lksipu.*) as level
  from master_join master_join_jrboar
  join shared.standardlevel_view shared_standardlevel_lat_lksipu on master_join_jrboar.target_id = shared_standardlevel_lat_lksipu.id
  where master_join_jrboar.source_id = shared.standardlevelcolumn_ts.id
) as shared_standardlevel_view_wqfbaw on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vqrwpq.*) AS annotation
  from master_join master_join_pzmoln
  join notes.note_view notes_note_lat_vqrwpq on master_join_pzmoln.target_id = notes_note_lat_vqrwpq.id
  where master_join_pzmoln.source_id = shared.standardlevelcolumn_ts.id
) as notes_note_view_imnvvc on TRUE
where shared.standardlevelcolumn.feature_status = 'APPROVED'
  and shared.standardlevelcolumn_ts.feature_status = 'APPROVED'
order by standardlevelcolumn.identifier, standardlevelcolumn_ts.sequence_number, standardlevelcolumn_ts.correction_number DESC;
-- StandardLevelSectorTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardlevelsector_view cascade;
create materialized view shared.standardlevelsector_view as
select distinct on (standardlevelsector.identifier,standardlevelsector_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardlevelsector.id::integer as id,
    shared.standardlevelsector_ts.id::integer as ts_id,
    shared.standardlevelsector_tsp.id::integer as tsp_id,
    shared.standardlevelsector.identifier::uuid,
    shared.standardlevelsector_ts.interpretation::text,
    shared.standardlevelsector_ts.sequence_number::integer,
    shared.standardlevelsector_ts.correction_number::integer,
    shared.standardlevelsector_ts.valid_time_begin::timestamp,
    shared.standardlevelsector_ts.valid_time_end::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_begin::timestamp,
    shared.standardlevelsector_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardlevelsector_ts.flightrule_value as varchar), '(' || shared.standardlevelsector_ts.flightrule_nilreason || ')')::text as flightrule,
    coalesce(cast(shared.standardlevelsector_ts.fromtrack_value as varchar), '(' || shared.standardlevelsector_ts.fromtrack_nilreason || ')')::text as fromtrack,
    coalesce(cast(shared.standardlevelsector_ts.totrack_value as varchar), '(' || shared.standardlevelsector_ts.totrack_nilreason || ')')::text as totrack,
    coalesce(cast(shared.standardlevelsector_ts.angletype_value as varchar), '(' || shared.standardlevelsector_ts.angletype_nilreason || ')')::text as angletype,
    coalesce(cast(shared_standardlevelcolumn_pt_hyfqst.title as varchar), '(' || shared_standardlevelcolumn_pt_hyfqst.nilreason[1] || ')')::text AS applicablelevelcolumn,
    shared_standardlevelcolumn_pt_hyfqst.href::text AS applicablelevelcolumn_href,
    airspace_airspace_pt_qvhewd.applicableairspace::jsonb as applicableairspace,
    notes_note_view_uylwwx.annotation::jsonb as annotation
from shared.standardlevelsector 
inner join master_join mj2 on shared.standardlevelsector.id = mj2.source_id
inner join shared.standardlevelsector_tsp on mj2.target_id = shared.standardlevelsector_tsp.id
inner join shared.standardlevelsector_ts on shared.standardlevelsector_tsp.standardlevelsectortimeslice_id = shared.standardlevelsector_ts.id
left join shared.standardlevelcolumn_pt shared_standardlevelcolumn_pt_hyfqst on shared.standardlevelsector_ts.applicablelevelcolumn_id = shared_standardlevelcolumn_pt_hyfqst.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airspace_airspace_lat_pubako.id,
      'title', coalesce(cast(airspace_airspace_lat_pubako.title AS varchar), '(' || airspace_airspace_lat_pubako.nilreason[1] || ')'),
      'href', airspace_airspace_lat_pubako.href
  )) as applicableairspace  from master_join master_join_fwmizu
  join airspace.airspace_pt airspace_airspace_lat_pubako on master_join_fwmizu.target_id = airspace_airspace_lat_pubako.id
  where master_join_fwmizu.source_id = shared.standardlevelsector_ts.id
) as airspace_airspace_pt_qvhewd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nbwerd.*) AS annotation
  from master_join master_join_gdtlmt
  join notes.note_view notes_note_lat_nbwerd on master_join_gdtlmt.target_id = notes_note_lat_nbwerd.id
  where master_join_gdtlmt.source_id = shared.standardlevelsector_ts.id
) as notes_note_view_uylwwx on TRUE
where shared.standardlevelsector.feature_status = 'APPROVED'
  and shared.standardlevelsector_ts.feature_status = 'APPROVED'
order by standardlevelsector.identifier, standardlevelsector_ts.sequence_number, standardlevelsector_ts.correction_number DESC;
-- StandardLevelTableTimeSliceType
-- ['notes.note_view']
drop materialized view if exists shared.standardleveltable_view cascade;
create materialized view shared.standardleveltable_view as
select distinct on (standardleveltable.identifier,standardleveltable_ts.sequence_number)
    (row_number() over ())::integer as row,
    shared.standardleveltable.id::integer as id,
    shared.standardleveltable_ts.id::integer as ts_id,
    shared.standardleveltable_tsp.id::integer as tsp_id,
    shared.standardleveltable.identifier::uuid,
    shared.standardleveltable_ts.interpretation::text,
    shared.standardleveltable_ts.sequence_number::integer,
    shared.standardleveltable_ts.correction_number::integer,
    shared.standardleveltable_ts.valid_time_begin::timestamp,
    shared.standardleveltable_ts.valid_time_end::timestamp,
    shared.standardleveltable_ts.feature_lifetime_begin::timestamp,
    shared.standardleveltable_ts.feature_lifetime_end::timestamp,
    coalesce(cast(shared.standardleveltable_ts.name_value as varchar), '(' || shared.standardleveltable_ts.name_nilreason || ')')::text as name,
    coalesce(cast(shared.standardleveltable_ts.standardicao_value as varchar), '(' || shared.standardleveltable_ts.standardicao_nilreason || ')')::text as standardicao,
    notes_note_view_saqwco.annotation::jsonb as annotation
from shared.standardleveltable 
inner join master_join mj2 on shared.standardleveltable.id = mj2.source_id
inner join shared.standardleveltable_tsp on mj2.target_id = shared.standardleveltable_tsp.id
inner join shared.standardleveltable_ts on shared.standardleveltable_tsp.standardleveltabletimeslice_id = shared.standardleveltable_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nddgtb.*) AS annotation
  from master_join master_join_wkpjhc
  join notes.note_view notes_note_lat_nddgtb on master_join_wkpjhc.target_id = notes_note_lat_nddgtb.id
  where master_join_wkpjhc.source_id = shared.standardleveltable_ts.id
) as notes_note_view_saqwco on TRUE
where shared.standardleveltable.feature_status = 'APPROVED'
  and shared.standardleveltable_ts.feature_status = 'APPROVED'
order by standardleveltable.identifier, standardleveltable_ts.sequence_number, standardleveltable_ts.correction_number DESC;
-- StandMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.standmarking_view cascade;
create materialized view airport_heliport.standmarking_view as
select distinct on (standmarking.identifier,standmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.standmarking.id::integer as id,
    airport_heliport.standmarking_ts.id::integer as ts_id,
    airport_heliport.standmarking_tsp.id::integer as tsp_id,
    airport_heliport.standmarking.identifier::uuid,
    airport_heliport.standmarking_ts.interpretation::text,
    airport_heliport.standmarking_ts.sequence_number::integer,
    airport_heliport.standmarking_ts.correction_number::integer,
    airport_heliport.standmarking_ts.valid_time_begin::timestamp,
    airport_heliport.standmarking_ts.valid_time_end::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.standmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.standmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.standmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.standmarking_ts.condition_value as varchar), '(' || airport_heliport.standmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_aircraftstand_pt_oimkfy.title as varchar), '(' || airport_heliport_aircraftstand_pt_oimkfy.nilreason[1] || ')')::text AS markedstand,
    airport_heliport_aircraftstand_pt_oimkfy.href::text AS markedstand_href,
    airport_heliport_markingelement_view_hkrgtf.element::jsonb as element,
    notes_note_view_rvvlaw.annotation::jsonb as annotation
from airport_heliport.standmarking 
inner join master_join mj2 on airport_heliport.standmarking.id = mj2.source_id
inner join airport_heliport.standmarking_tsp on mj2.target_id = airport_heliport.standmarking_tsp.id
inner join airport_heliport.standmarking_ts on airport_heliport.standmarking_tsp.standmarkingtimeslice_id = airport_heliport.standmarking_ts.id
left join airport_heliport.aircraftstand_pt airport_heliport_aircraftstand_pt_oimkfy on airport_heliport.standmarking_ts.markedstand_id = airport_heliport_aircraftstand_pt_oimkfy.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_twknuv.*) as element
  from master_join master_join_kwkrha
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_twknuv on master_join_kwkrha.target_id = airport_heliport_markingelement_lat_twknuv.id
  where master_join_kwkrha.source_id = airport_heliport.standmarking_ts.id
) as airport_heliport_markingelement_view_hkrgtf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_nzjvkn.*) AS annotation
  from master_join master_join_lzxzzf
  join notes.note_view notes_note_lat_nzjvkn on master_join_lzxzzf.target_id = notes_note_lat_nzjvkn.id
  where master_join_lzxzzf.source_id = airport_heliport.standmarking_ts.id
) as notes_note_view_rvvlaw on TRUE
where airport_heliport.standmarking.feature_status = 'APPROVED'
  and airport_heliport.standmarking_ts.feature_status = 'APPROVED'
order by standmarking.identifier, standmarking_ts.sequence_number, standmarking_ts.correction_number DESC;
-- SurveyControlPointTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.surveycontrolpoint_view cascade;
create materialized view airport_heliport.surveycontrolpoint_view as
select distinct on (surveycontrolpoint.identifier,surveycontrolpoint_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.surveycontrolpoint.id::integer as id,
    airport_heliport.surveycontrolpoint_ts.id::integer as ts_id,
    airport_heliport.surveycontrolpoint_tsp.id::integer as tsp_id,
    airport_heliport.surveycontrolpoint.identifier::uuid,
    airport_heliport.surveycontrolpoint_ts.interpretation::text,
    airport_heliport.surveycontrolpoint_ts.sequence_number::integer,
    airport_heliport.surveycontrolpoint_ts.correction_number::integer,
    airport_heliport.surveycontrolpoint_ts.valid_time_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.valid_time_end::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_begin::timestamp,
    airport_heliport.surveycontrolpoint_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.surveycontrolpoint_ts.designator_value as varchar), '(' || airport_heliport.surveycontrolpoint_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport_airportheliport_pt_zllyeo.title as varchar), '(' || airport_heliport_airportheliport_pt_zllyeo.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_zllyeo.href::text AS associatedairportheliport_href,
    geometry_elevatedpoint_view_islhbt.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_islhbt.longitude AS location_longitude,
    geometry_elevatedpoint_view_islhbt.latitude AS location_latitude,
    geometry_elevatedpoint_view_islhbt.elevation AS location_elevation,
    geometry_elevatedpoint_view_islhbt.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_islhbt.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_islhbt.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_islhbt.horizontalAccuracy AS location_horizontalaccuracy,
    notes_note_view_vtfzat.annotation::jsonb as annotation
from airport_heliport.surveycontrolpoint 
inner join master_join mj2 on airport_heliport.surveycontrolpoint.id = mj2.source_id
inner join airport_heliport.surveycontrolpoint_tsp on mj2.target_id = airport_heliport.surveycontrolpoint_tsp.id
inner join airport_heliport.surveycontrolpoint_ts on airport_heliport.surveycontrolpoint_tsp.surveycontrolpointtimeslice_id = airport_heliport.surveycontrolpoint_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_zllyeo on airport_heliport.surveycontrolpoint_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_zllyeo.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_islhbt on airport_heliport.surveycontrolpoint_ts.location_id = geometry_elevatedpoint_view_islhbt.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_bkqzts.*) AS annotation
  from master_join master_join_yhzplv
  join notes.note_view notes_note_lat_bkqzts on master_join_yhzplv.target_id = notes_note_lat_bkqzts.id
  where master_join_yhzplv.source_id = airport_heliport.surveycontrolpoint_ts.id
) as notes_note_view_vtfzat on TRUE
where airport_heliport.surveycontrolpoint.feature_status = 'APPROVED'
  and airport_heliport.surveycontrolpoint_ts.feature_status = 'APPROVED'
order by surveycontrolpoint.identifier, surveycontrolpoint_ts.sequence_number, surveycontrolpoint_ts.correction_number DESC;
-- TACANTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.tacan_view cascade;
create materialized view navaids_points.tacan_view as
select distinct on (tacan.identifier,tacan_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.tacan.id::integer as id,
    navaids_points.tacan_ts.id::integer as ts_id,
    navaids_points.tacan_tsp.id::integer as tsp_id,
    navaids_points.tacan.identifier::uuid,
    navaids_points.tacan_ts.interpretation::text,
    navaids_points.tacan_ts.sequence_number::integer,
    navaids_points.tacan_ts.correction_number::integer,
    navaids_points.tacan_ts.valid_time_begin::timestamp,
    navaids_points.tacan_ts.valid_time_end::timestamp,
    navaids_points.tacan_ts.feature_lifetime_begin::timestamp,
    navaids_points.tacan_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.tacan_ts.designator_value as varchar), '(' || navaids_points.tacan_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.tacan_ts.name_value as varchar), '(' || navaids_points.tacan_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.tacan_ts.emissionclass_value as varchar), '(' || navaids_points.tacan_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.tacan_ts.mobile_value as varchar), '(' || navaids_points.tacan_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.tacan_ts.magneticvariation_value as varchar), '(' || navaids_points.tacan_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.tacan_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.tacan_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.tacan_ts.datemagneticvariation_value as varchar), '(' || navaids_points.tacan_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.tacan_ts.flightchecked_value as varchar), '(' || navaids_points.tacan_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.tacan_ts.channel_value as varchar), '(' || navaids_points.tacan_ts.channel_nilreason || ')')::text as channel,
    coalesce(cast(navaids_points.tacan_ts.declination_value as varchar), '(' || navaids_points.tacan_ts.declination_nilreason || ')')::text as declination,
    geometry_elevatedpoint_view_lmrhwj.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_lmrhwj.longitude AS location_longitude,
    geometry_elevatedpoint_view_lmrhwj.latitude AS location_latitude,
    geometry_elevatedpoint_view_lmrhwj.elevation AS location_elevation,
    geometry_elevatedpoint_view_lmrhwj.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_lmrhwj.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_lmrhwj.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_lmrhwj.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_xnvnry.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_xlygvr.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_wbmlxt.availability::jsonb as availability,
    notes_note_view_xuwklv.annotation::jsonb as annotation
from navaids_points.tacan 
inner join master_join mj2 on navaids_points.tacan.id = mj2.source_id
inner join navaids_points.tacan_tsp on mj2.target_id = navaids_points.tacan_tsp.id
inner join navaids_points.tacan_ts on navaids_points.tacan_tsp.tacantimeslice_id = navaids_points.tacan_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_lmrhwj on navaids_points.tacan_ts.location_id = geometry_elevatedpoint_view_lmrhwj.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_ftfjch.*) as authority
  from master_join master_join_jbodqq
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_ftfjch on master_join_jbodqq.target_id = navaids_points_authorityfornavaidequipment_lat_ftfjch.id
  where master_join_jbodqq.source_id = navaids_points.tacan_ts.id
) as navaids_points_authorityfornavaidequipment_view_xnvnry on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_ymkehv.*) as monitoring
  from master_join master_join_kgelop
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_ymkehv on master_join_kgelop.target_id = navaids_points_navaidequipmentmonitoring_lat_ymkehv.id
  where master_join_kgelop.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidequipmentmonitoring_view_xlygvr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_dnczef.*) as availability
  from master_join master_join_cqppph
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_dnczef on master_join_cqppph.target_id = navaids_points_navaidoperationalstatus_lat_dnczef.id
  where master_join_cqppph.source_id = navaids_points.tacan_ts.id
) as navaids_points_navaidoperationalstatus_view_wbmlxt on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_sqvpaj.*) AS annotation
  from master_join master_join_jrtklu
  join notes.note_view notes_note_lat_sqvpaj on master_join_jrtklu.target_id = notes_note_lat_sqvpaj.id
  where master_join_jrtklu.source_id = navaids_points.tacan_ts.id
) as notes_note_view_xuwklv on TRUE
where navaids_points.tacan.feature_status = 'APPROVED'
  and navaids_points.tacan_ts.feature_status = 'APPROVED'
order by tacan.identifier, tacan_ts.sequence_number, tacan_ts.correction_number DESC;
-- TaxiHoldingPositionLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiholdingpositionlightsystem_view cascade;
create materialized view airport_heliport.taxiholdingpositionlightsystem_view as
select distinct on (taxiholdingpositionlightsystem.identifier,taxiholdingpositionlightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionlightsystem.id::integer as id,
    airport_heliport.taxiholdingpositionlightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionlightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionlightsystem.identifier::uuid,
    airport_heliport.taxiholdingpositionlightsystem_ts.interpretation::text,
    airport_heliport.taxiholdingpositionlightsystem_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionlightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiholdingpositionlightsystem_ts.type_value as varchar), '(' || airport_heliport.taxiholdingpositionlightsystem_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_zcnbij.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_zcnbij.nilreason[1] || ')')::text AS taxiholding,
    airport_heliport_taxiholdingposition_pt_zcnbij.href::text AS taxiholding_href,
    shared_lightelement_view_jcupyw.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_feugcq.availability::jsonb as availability,
    notes_note_view_bwoblg.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionlightsystem 
inner join master_join mj2 on airport_heliport.taxiholdingpositionlightsystem.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionlightsystem_tsp on mj2.target_id = airport_heliport.taxiholdingpositionlightsystem_tsp.id
inner join airport_heliport.taxiholdingpositionlightsystem_ts on airport_heliport.taxiholdingpositionlightsystem_tsp.taxiholdingpositionlightsystemtimeslice_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_zcnbij on airport_heliport.taxiholdingpositionlightsystem_ts.taxiholding_id = airport_heliport_taxiholdingposition_pt_zcnbij.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_utvmvc.*) as element
  from master_join master_join_tmpgfq
  join shared.lightelement_view shared_lightelement_lat_utvmvc on master_join_tmpgfq.target_id = shared_lightelement_lat_utvmvc.id
  where master_join_tmpgfq.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as shared_lightelement_view_jcupyw on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_konwim.*) as availability
  from master_join master_join_zssjyx
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_konwim on master_join_zssjyx.target_id = airport_heliport_groundlightingavailability_lat_konwim.id
  where master_join_zssjyx.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_feugcq on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mblnww.*) AS annotation
  from master_join master_join_yuqcga
  join notes.note_view notes_note_lat_mblnww on master_join_yuqcga.target_id = notes_note_lat_mblnww.id
  where master_join_yuqcga.source_id = airport_heliport.taxiholdingpositionlightsystem_ts.id
) as notes_note_view_bwoblg on TRUE
where airport_heliport.taxiholdingpositionlightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionlightsystem_ts.feature_status = 'APPROVED'
order by taxiholdingpositionlightsystem.identifier, taxiholdingpositionlightsystem_ts.sequence_number, taxiholdingpositionlightsystem_ts.correction_number DESC;
-- TaxiHoldingPositionMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiholdingpositionmarking_view cascade;
create materialized view airport_heliport.taxiholdingpositionmarking_view as
select distinct on (taxiholdingpositionmarking.identifier,taxiholdingpositionmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingpositionmarking.id::integer as id,
    airport_heliport.taxiholdingpositionmarking_ts.id::integer as ts_id,
    airport_heliport.taxiholdingpositionmarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingpositionmarking.identifier::uuid,
    airport_heliport.taxiholdingpositionmarking_ts.interpretation::text,
    airport_heliport.taxiholdingpositionmarking_ts.sequence_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.correction_number::integer,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingpositionmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiholdingpositionmarking_ts.condition_value as varchar), '(' || airport_heliport.taxiholdingpositionmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport_taxiholdingposition_pt_iatydv.title as varchar), '(' || airport_heliport_taxiholdingposition_pt_iatydv.nilreason[1] || ')')::text AS markedtaxihold,
    airport_heliport_taxiholdingposition_pt_iatydv.href::text AS markedtaxihold_href,
    airport_heliport_markingelement_view_dopbhn.element::jsonb as element,
    notes_note_view_ovfpmd.annotation::jsonb as annotation
from airport_heliport.taxiholdingpositionmarking 
inner join master_join mj2 on airport_heliport.taxiholdingpositionmarking.id = mj2.source_id
inner join airport_heliport.taxiholdingpositionmarking_tsp on mj2.target_id = airport_heliport.taxiholdingpositionmarking_tsp.id
inner join airport_heliport.taxiholdingpositionmarking_ts on airport_heliport.taxiholdingpositionmarking_tsp.taxiholdingpositionmarkingtimeslice_id = airport_heliport.taxiholdingpositionmarking_ts.id
left join airport_heliport.taxiholdingposition_pt airport_heliport_taxiholdingposition_pt_iatydv on airport_heliport.taxiholdingpositionmarking_ts.markedtaxihold_id = airport_heliport_taxiholdingposition_pt_iatydv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_nuvebx.*) as element
  from master_join master_join_ngomsk
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_nuvebx on master_join_ngomsk.target_id = airport_heliport_markingelement_lat_nuvebx.id
  where master_join_ngomsk.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as airport_heliport_markingelement_view_dopbhn on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_mjwomy.*) AS annotation
  from master_join master_join_pixwiv
  join notes.note_view notes_note_lat_mjwomy on master_join_pixwiv.target_id = notes_note_lat_mjwomy.id
  where master_join_pixwiv.source_id = airport_heliport.taxiholdingpositionmarking_ts.id
) as notes_note_view_ovfpmd on TRUE
where airport_heliport.taxiholdingpositionmarking.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingpositionmarking_ts.feature_status = 'APPROVED'
order by taxiholdingpositionmarking.identifier, taxiholdingpositionmarking_ts.sequence_number, taxiholdingpositionmarking_ts.correction_number DESC;
-- TaxiHoldingPositionTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiholdingposition_view cascade;
create materialized view airport_heliport.taxiholdingposition_view as
select distinct on (taxiholdingposition.identifier,taxiholdingposition_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiholdingposition.id::integer as id,
    airport_heliport.taxiholdingposition_ts.id::integer as ts_id,
    airport_heliport.taxiholdingposition_tsp.id::integer as tsp_id,
    airport_heliport.taxiholdingposition.identifier::uuid,
    airport_heliport.taxiholdingposition_ts.interpretation::text,
    airport_heliport.taxiholdingposition_ts.sequence_number::integer,
    airport_heliport.taxiholdingposition_ts.correction_number::integer,
    airport_heliport.taxiholdingposition_ts.valid_time_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.valid_time_end::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiholdingposition_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.landingcategory_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.landingcategory_nilreason || ')')::text as landingcategory,
    coalesce(cast(airport_heliport.taxiholdingposition_ts.status_value as varchar), '(' || airport_heliport.taxiholdingposition_ts.status_nilreason || ')')::text as status,
    coalesce(cast(airport_heliport_guidanceline_pt_xzvvcc.title as varchar), '(' || airport_heliport_guidanceline_pt_xzvvcc.nilreason[1] || ')')::text AS associatedguidanceline,
    airport_heliport_guidanceline_pt_xzvvcc.href::text AS associatedguidanceline_href,
    geometry_elevatedpoint_view_efhadz.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_efhadz.longitude AS location_longitude,
    geometry_elevatedpoint_view_efhadz.latitude AS location_latitude,
    geometry_elevatedpoint_view_efhadz.elevation AS location_elevation,
    geometry_elevatedpoint_view_efhadz.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_efhadz.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_efhadz.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_efhadz.horizontalAccuracy AS location_horizontalaccuracy,
    airport_heliport_runway_pt_emrmet.protectedrunway::jsonb as protectedrunway,
    notes_note_view_zmtepz.annotation::jsonb as annotation
from airport_heliport.taxiholdingposition 
inner join master_join mj2 on airport_heliport.taxiholdingposition.id = mj2.source_id
inner join airport_heliport.taxiholdingposition_tsp on mj2.target_id = airport_heliport.taxiholdingposition_tsp.id
inner join airport_heliport.taxiholdingposition_ts on airport_heliport.taxiholdingposition_tsp.taxiholdingpositiontimeslice_id = airport_heliport.taxiholdingposition_ts.id
left join airport_heliport.guidanceline_pt airport_heliport_guidanceline_pt_xzvvcc on airport_heliport.taxiholdingposition_ts.associatedguidanceline_id = airport_heliport_guidanceline_pt_xzvvcc.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_efhadz on airport_heliport.taxiholdingposition_ts.location_id = geometry_elevatedpoint_view_efhadz.id
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', airport_heliport_runway_lat_qsxmqt.id,
      'title', coalesce(cast(airport_heliport_runway_lat_qsxmqt.title AS varchar), '(' || airport_heliport_runway_lat_qsxmqt.nilreason[1] || ')'),
      'href', airport_heliport_runway_lat_qsxmqt.href
  )) as protectedrunway  from master_join master_join_jbzkft
  join airport_heliport.runway_pt airport_heliport_runway_lat_qsxmqt on master_join_jbzkft.target_id = airport_heliport_runway_lat_qsxmqt.id
  where master_join_jbzkft.source_id = airport_heliport.taxiholdingposition_ts.id
) as airport_heliport_runway_pt_emrmet on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_fbzxxg.*) AS annotation
  from master_join master_join_zatowm
  join notes.note_view notes_note_lat_fbzxxg on master_join_zatowm.target_id = notes_note_lat_fbzxxg.id
  where master_join_zatowm.source_id = airport_heliport.taxiholdingposition_ts.id
) as notes_note_view_zmtepz on TRUE
where airport_heliport.taxiholdingposition.feature_status = 'APPROVED'
  and airport_heliport.taxiholdingposition_ts.feature_status = 'APPROVED'
order by taxiholdingposition.identifier, taxiholdingposition_ts.sequence_number, taxiholdingposition_ts.correction_number DESC;
-- TaxiwayElementTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.taxiwayelement_view cascade;
create materialized view airport_heliport.taxiwayelement_view as
select distinct on (taxiwayelement.identifier,taxiwayelement_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwayelement.id::integer as id,
    airport_heliport.taxiwayelement_ts.id::integer as ts_id,
    airport_heliport.taxiwayelement_tsp.id::integer as tsp_id,
    airport_heliport.taxiwayelement.identifier::uuid,
    airport_heliport.taxiwayelement_ts.interpretation::text,
    airport_heliport.taxiwayelement_ts.sequence_number::integer,
    airport_heliport.taxiwayelement_ts.correction_number::integer,
    airport_heliport.taxiwayelement_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwayelement_ts.valid_time_end::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwayelement_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwayelement_ts.type_value as varchar), '(' || airport_heliport.taxiwayelement_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiwayelement_ts.gradeseparation_value as varchar), '(' || airport_heliport.taxiwayelement_ts.gradeseparation_nilreason || ')')::text as gradeseparation,
    coalesce(cast(airport_heliport.taxiwayelement_ts.length_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.length_uom, '(' || airport_heliport.taxiwayelement_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.taxiwayelement_ts.width_value as varchar) || ' ' || airport_heliport.taxiwayelement_ts.width_uom, '(' || airport_heliport.taxiwayelement_ts.width_nilreason || ')')::text as width,
    to_jsonb(airport_heliport_surfacecharacteristics_view_exmskz.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_taxiway_pt_oqhurp.title as varchar), '(' || airport_heliport_taxiway_pt_oqhurp.nilreason[1] || ')')::text AS associatedtaxiway,
    airport_heliport_taxiway_pt_oqhurp.href::text AS associatedtaxiway_href,
    geometry_elevatedsurface_view_reaomr.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_reaomr.elevation AS extent_elevation,
    geometry_elevatedsurface_view_reaomr.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_reaomr.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_reaomr.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_reaomr.horizontalAccuracy AS extent_horizontalaccuracy,
    notes_note_view_fhrubm.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_coandt.availability::jsonb as availability
from airport_heliport.taxiwayelement 
inner join master_join mj2 on airport_heliport.taxiwayelement.id = mj2.source_id
inner join airport_heliport.taxiwayelement_tsp on mj2.target_id = airport_heliport.taxiwayelement_tsp.id
inner join airport_heliport.taxiwayelement_ts on airport_heliport.taxiwayelement_tsp.taxiwayelementtimeslice_id = airport_heliport.taxiwayelement_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_exmskz on airport_heliport.taxiwayelement_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_exmskz.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_oqhurp on airport_heliport.taxiwayelement_ts.associatedtaxiway_id = airport_heliport_taxiway_pt_oqhurp.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_reaomr on airport_heliport.taxiwayelement_ts.extent_id = geometry_elevatedsurface_view_reaomr.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_rqqnps.*) AS annotation
  from master_join master_join_nukfgs
  join notes.note_view notes_note_lat_rqqnps on master_join_nukfgs.target_id = notes_note_lat_rqqnps.id
  where master_join_nukfgs.source_id = airport_heliport.taxiwayelement_ts.id
) as notes_note_view_fhrubm on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_atkpsm.*) as availability
  from master_join master_join_uzcapt
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_atkpsm on master_join_uzcapt.target_id = airport_heliport_manoeuvringareaavailability_lat_atkpsm.id
  where master_join_uzcapt.source_id = airport_heliport.taxiwayelement_ts.id
) as airport_heliport_manoeuvringareaavailability_view_coandt on TRUE
where airport_heliport.taxiwayelement.feature_status = 'APPROVED'
  and airport_heliport.taxiwayelement_ts.feature_status = 'APPROVED'
order by taxiwayelement.identifier, taxiwayelement_ts.sequence_number, taxiwayelement_ts.correction_number DESC;
-- TaxiwayLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.taxiwaylightsystem_view cascade;
create materialized view airport_heliport.taxiwaylightsystem_view as
select distinct on (taxiwaylightsystem.identifier,taxiwaylightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaylightsystem.id::integer as id,
    airport_heliport.taxiwaylightsystem_ts.id::integer as ts_id,
    airport_heliport.taxiwaylightsystem_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaylightsystem.identifier::uuid,
    airport_heliport.taxiwaylightsystem_ts.interpretation::text,
    airport_heliport.taxiwaylightsystem_ts.sequence_number::integer,
    airport_heliport.taxiwaylightsystem_ts.correction_number::integer,
    airport_heliport.taxiwaylightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaylightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.colour_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.taxiwaylightsystem_ts.position_value as varchar), '(' || airport_heliport.taxiwaylightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_taxiway_pt_llsrtz.title as varchar), '(' || airport_heliport_taxiway_pt_llsrtz.nilreason[1] || ')')::text AS lightedtaxiway,
    airport_heliport_taxiway_pt_llsrtz.href::text AS lightedtaxiway_href,
    shared_lightelement_view_owtegb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_qpejnf.availability::jsonb as availability,
    notes_note_view_sgttqa.annotation::jsonb as annotation
from airport_heliport.taxiwaylightsystem 
inner join master_join mj2 on airport_heliport.taxiwaylightsystem.id = mj2.source_id
inner join airport_heliport.taxiwaylightsystem_tsp on mj2.target_id = airport_heliport.taxiwaylightsystem_tsp.id
inner join airport_heliport.taxiwaylightsystem_ts on airport_heliport.taxiwaylightsystem_tsp.taxiwaylightsystemtimeslice_id = airport_heliport.taxiwaylightsystem_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_llsrtz on airport_heliport.taxiwaylightsystem_ts.lightedtaxiway_id = airport_heliport_taxiway_pt_llsrtz.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_vexpyd.*) as element
  from master_join master_join_hkqysx
  join shared.lightelement_view shared_lightelement_lat_vexpyd on master_join_hkqysx.target_id = shared_lightelement_lat_vexpyd.id
  where master_join_hkqysx.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as shared_lightelement_view_owtegb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_tapber.*) as availability
  from master_join master_join_jimdjm
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_tapber on master_join_jimdjm.target_id = airport_heliport_groundlightingavailability_lat_tapber.id
  where master_join_jimdjm.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_qpejnf on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_pyqkfv.*) AS annotation
  from master_join master_join_gpuwco
  join notes.note_view notes_note_lat_pyqkfv on master_join_gpuwco.target_id = notes_note_lat_pyqkfv.id
  where master_join_gpuwco.source_id = airport_heliport.taxiwaylightsystem_ts.id
) as notes_note_view_sgttqa on TRUE
where airport_heliport.taxiwaylightsystem.feature_status = 'APPROVED'
  and airport_heliport.taxiwaylightsystem_ts.feature_status = 'APPROVED'
order by taxiwaylightsystem.identifier, taxiwaylightsystem_ts.sequence_number, taxiwaylightsystem_ts.correction_number DESC;
-- TaxiwayMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.taxiwaymarking_view cascade;
create materialized view airport_heliport.taxiwaymarking_view as
select distinct on (taxiwaymarking.identifier,taxiwaymarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiwaymarking.id::integer as id,
    airport_heliport.taxiwaymarking_ts.id::integer as ts_id,
    airport_heliport.taxiwaymarking_tsp.id::integer as tsp_id,
    airport_heliport.taxiwaymarking.identifier::uuid,
    airport_heliport.taxiwaymarking_ts.interpretation::text,
    airport_heliport.taxiwaymarking_ts.sequence_number::integer,
    airport_heliport.taxiwaymarking_ts.correction_number::integer,
    airport_heliport.taxiwaymarking_ts.valid_time_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.valid_time_end::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiwaymarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.condition_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.taxiwaymarking_ts.markinglocation_value as varchar), '(' || airport_heliport.taxiwaymarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_taxiway_pt_xakqwc.title as varchar), '(' || airport_heliport_taxiway_pt_xakqwc.nilreason[1] || ')')::text AS markedtaxiway,
    airport_heliport_taxiway_pt_xakqwc.href::text AS markedtaxiway_href,
    coalesce(cast(airport_heliport_taxiwayelement_pt_jzgekv.title as varchar), '(' || airport_heliport_taxiwayelement_pt_jzgekv.nilreason[1] || ')')::text AS markedelement,
    airport_heliport_taxiwayelement_pt_jzgekv.href::text AS markedelement_href,
    airport_heliport_markingelement_view_cmxjsj.element::jsonb as element,
    notes_note_view_jtpjkg.annotation::jsonb as annotation
from airport_heliport.taxiwaymarking 
inner join master_join mj2 on airport_heliport.taxiwaymarking.id = mj2.source_id
inner join airport_heliport.taxiwaymarking_tsp on mj2.target_id = airport_heliport.taxiwaymarking_tsp.id
inner join airport_heliport.taxiwaymarking_ts on airport_heliport.taxiwaymarking_tsp.taxiwaymarkingtimeslice_id = airport_heliport.taxiwaymarking_ts.id
left join airport_heliport.taxiway_pt airport_heliport_taxiway_pt_xakqwc on airport_heliport.taxiwaymarking_ts.markedtaxiway_id = airport_heliport_taxiway_pt_xakqwc.id
left join airport_heliport.taxiwayelement_pt airport_heliport_taxiwayelement_pt_jzgekv on airport_heliport.taxiwaymarking_ts.markedelement_id = airport_heliport_taxiwayelement_pt_jzgekv.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_gmweio.*) as element
  from master_join master_join_qqkskp
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_gmweio on master_join_qqkskp.target_id = airport_heliport_markingelement_lat_gmweio.id
  where master_join_qqkskp.source_id = airport_heliport.taxiwaymarking_ts.id
) as airport_heliport_markingelement_view_cmxjsj on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_cojvsa.*) AS annotation
  from master_join master_join_uzvvnn
  join notes.note_view notes_note_lat_cojvsa on master_join_uzvvnn.target_id = notes_note_lat_cojvsa.id
  where master_join_uzvvnn.source_id = airport_heliport.taxiwaymarking_ts.id
) as notes_note_view_jtpjkg on TRUE
where airport_heliport.taxiwaymarking.feature_status = 'APPROVED'
  and airport_heliport.taxiwaymarking_ts.feature_status = 'APPROVED'
order by taxiwaymarking.identifier, taxiwaymarking_ts.sequence_number, taxiwaymarking_ts.correction_number DESC;
-- TaxiwayTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'airport_heliport.manoeuvringareaavailability_view', 'airport_heliport.taxiwaycontamination_view', 'notes.note_view']
drop materialized view if exists airport_heliport.taxiway_view cascade;
create materialized view airport_heliport.taxiway_view as
select distinct on (taxiway.identifier,taxiway_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.taxiway.id::integer as id,
    airport_heliport.taxiway_ts.id::integer as ts_id,
    airport_heliport.taxiway_tsp.id::integer as tsp_id,
    airport_heliport.taxiway.identifier::uuid,
    airport_heliport.taxiway_ts.interpretation::text,
    airport_heliport.taxiway_ts.sequence_number::integer,
    airport_heliport.taxiway_ts.correction_number::integer,
    airport_heliport.taxiway_ts.valid_time_begin::timestamp,
    airport_heliport.taxiway_ts.valid_time_end::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_begin::timestamp,
    airport_heliport.taxiway_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.taxiway_ts.designator_value as varchar), '(' || airport_heliport.taxiway_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.taxiway_ts.type_value as varchar), '(' || airport_heliport.taxiway_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.taxiway_ts.abandoned_value as varchar), '(' || airport_heliport.taxiway_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.taxiway_ts.width_value as varchar) || ' ' || airport_heliport.taxiway_ts.width_uom, '(' || airport_heliport.taxiway_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.taxiway_ts.widthshoulder_value as varchar) || ' ' || airport_heliport.taxiway_ts.widthshoulder_uom, '(' || airport_heliport.taxiway_ts.widthshoulder_nilreason || ')')::text as widthshoulder,
    coalesce(cast(airport_heliport.taxiway_ts.length_value as varchar) || ' ' || airport_heliport.taxiway_ts.length_uom, '(' || airport_heliport.taxiway_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_qaayoc.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_jrfbpm.title as varchar), '(' || airport_heliport_airportheliport_pt_jrfbpm.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_jrfbpm.href::text AS associatedairportheliport_href,
    airport_heliport_taxiwaycontamination_view_hrwdae.contaminant::jsonb as contaminant,
    notes_note_view_lzysmk.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_ydrtup.availability::jsonb as availability
from airport_heliport.taxiway 
inner join master_join mj2 on airport_heliport.taxiway.id = mj2.source_id
inner join airport_heliport.taxiway_tsp on mj2.target_id = airport_heliport.taxiway_tsp.id
inner join airport_heliport.taxiway_ts on airport_heliport.taxiway_tsp.taxiwaytimeslice_id = airport_heliport.taxiway_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_qaayoc on airport_heliport.taxiway_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_qaayoc.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_jrfbpm on airport_heliport.taxiway_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_jrfbpm.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_taxiwaycontamination_lat_yegsqy.*) as contaminant
  from master_join master_join_ecksel
  join airport_heliport.taxiwaycontamination_view airport_heliport_taxiwaycontamination_lat_yegsqy on master_join_ecksel.target_id = airport_heliport_taxiwaycontamination_lat_yegsqy.id
  where master_join_ecksel.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_taxiwaycontamination_view_hrwdae on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ntpptp.*) AS annotation
  from master_join master_join_iqhbxq
  join notes.note_view notes_note_lat_ntpptp on master_join_iqhbxq.target_id = notes_note_lat_ntpptp.id
  where master_join_iqhbxq.source_id = airport_heliport.taxiway_ts.id
) as notes_note_view_lzysmk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_rtpjxe.*) as availability
  from master_join master_join_luqolz
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_rtpjxe on master_join_luqolz.target_id = airport_heliport_manoeuvringareaavailability_lat_rtpjxe.id
  where master_join_luqolz.source_id = airport_heliport.taxiway_ts.id
) as airport_heliport_manoeuvringareaavailability_view_ydrtup on TRUE
where airport_heliport.taxiway.feature_status = 'APPROVED'
  and airport_heliport.taxiway_ts.feature_status = 'APPROVED'
order by taxiway.identifier, taxiway_ts.sequence_number, taxiway_ts.correction_number DESC;
-- TerminalArrivalAreaTimeSliceType
-- ['procedure.terminalarrivalareasector_view', 'notes.note_view', 'geometry.point_view', 'geometry.surface_view']
drop materialized view if exists procedure.terminalarrivalarea_view cascade;
create materialized view procedure.terminalarrivalarea_view as
select distinct on (terminalarrivalarea.identifier,terminalarrivalarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    procedure.terminalarrivalarea.id::integer as id,
    procedure.terminalarrivalarea_ts.id::integer as ts_id,
    procedure.terminalarrivalarea_tsp.id::integer as tsp_id,
    procedure.terminalarrivalarea.identifier::uuid,
    procedure.terminalarrivalarea_ts.interpretation::text,
    procedure.terminalarrivalarea_ts.sequence_number::integer,
    procedure.terminalarrivalarea_ts.correction_number::integer,
    procedure.terminalarrivalarea_ts.valid_time_begin::timestamp,
    procedure.terminalarrivalarea_ts.valid_time_end::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_begin::timestamp,
    procedure.terminalarrivalarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(procedure.terminalarrivalarea_ts.arrivalareatype_value as varchar), '(' || procedure.terminalarrivalarea_ts.arrivalareatype_nilreason || ')')::text as arrivalareatype,
    coalesce(cast(procedure.terminalarrivalarea_ts.outerbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.outerbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.outerbufferwidth_nilreason || ')')::text as outerbufferwidth,
    coalesce(cast(procedure.terminalarrivalarea_ts.lateralbufferwidth_value as varchar) || ' ' || procedure.terminalarrivalarea_ts.lateralbufferwidth_uom, '(' || procedure.terminalarrivalarea_ts.lateralbufferwidth_nilreason || ')')::text as lateralbufferwidth,
    coalesce(cast(navaids_points_designatedpoint_pt_ukgair.title as varchar), '(' || navaids_points_designatedpoint_pt_ukgair.nilreason[1] || ')')::text AS iffixdesignatedpoint,
    navaids_points_designatedpoint_pt_ukgair.href::text AS iffixdesignatedpoint_href,
    coalesce(cast(navaids_points_designatedpoint_pt_mpgrrc.title as varchar), '(' || navaids_points_designatedpoint_pt_mpgrrc.nilreason[1] || ')')::text AS iaffixdesignatedpoint,
    navaids_points_designatedpoint_pt_mpgrrc.href::text AS iaffixdesignatedpoint_href,
    coalesce(cast(navaids_points_navaid_pt_lcfkss.title as varchar), '(' || navaids_points_navaid_pt_lcfkss.nilreason[1] || ')')::text AS ifnavaidsystem,
    navaids_points_navaid_pt_lcfkss.href::text AS ifnavaidsystem_href,
    coalesce(cast(navaids_points_navaid_pt_eqbtqw.title as varchar), '(' || navaids_points_navaid_pt_eqbtqw.nilreason[1] || ')')::text AS iafnavaidsystem,
    navaids_points_navaid_pt_eqbtqw.href::text AS iafnavaidsystem_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_vzwall.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_vzwall.nilreason[1] || ')')::text AS ifaimingpoint,
    airport_heliport_touchdownliftoff_pt_vzwall.href::text AS ifaimingpoint_href,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_nigxqu.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_nigxqu.nilreason[1] || ')')::text AS iafaimingpoint,
    airport_heliport_touchdownliftoff_pt_nigxqu.href::text AS iafaimingpoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_ssvuij.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_ssvuij.nilreason[1] || ')')::text AS ifrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_ssvuij.href::text AS ifrunwaypoint_href,
    coalesce(cast(airport_heliport_runwaycentrelinepoint_pt_oiqify.title as varchar), '(' || airport_heliport_runwaycentrelinepoint_pt_oiqify.nilreason[1] || ')')::text AS iafrunwaypoint,
    airport_heliport_runwaycentrelinepoint_pt_oiqify.href::text AS iafrunwaypoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_erhkva.title as varchar), '(' || airport_heliport_airportheliport_pt_erhkva.nilreason[1] || ')')::text AS ifairportreferencepoint,
    airport_heliport_airportheliport_pt_erhkva.href::text AS ifairportreferencepoint_href,
    coalesce(cast(airport_heliport_airportheliport_pt_bgimll.title as varchar), '(' || airport_heliport_airportheliport_pt_bgimll.nilreason[1] || ')')::text AS iafairportreferencepoint,
    airport_heliport_airportheliport_pt_bgimll.href::text AS iafairportreferencepoint_href,
    geometry_point_view_qehewg.geom::geometry(Point, 4326) AS ifposition_geom,
    geometry_point_view_qehewg.longitude AS ifposition_longitude,
    geometry_point_view_qehewg.latitude AS ifposition_latitude,
    geometry_point_view_qehewg.horizontalAccuracy AS ifposition_horizontalaccuracy,
    geometry_point_view_gltqau.geom::geometry(Point, 4326) AS iafposition_geom,
    geometry_point_view_gltqau.longitude AS iafposition_longitude,
    geometry_point_view_gltqau.latitude AS iafposition_latitude,
    geometry_point_view_gltqau.horizontalAccuracy AS iafposition_horizontalaccuracy,
    geometry_surface_view_mecxau.geom::geometry(POLYGON, 4326) AS buffer_geom,
    geometry_surface_view_mecxau.horizontalAccuracy as buffer_horizontalaccuracy,
    coalesce(cast(procedure_instrumentapproachprocedure_pt_ikngyd.title as varchar), '(' || procedure_instrumentapproachprocedure_pt_ikngyd.nilreason[1] || ')')::text AS approachrnav,
    procedure_instrumentapproachprocedure_pt_ikngyd.href::text AS approachrnav_href,
    procedure_terminalarrivalareasector_view_caaiay.sector::jsonb as sector,
    notes_note_view_ditscr.annotation::jsonb as annotation
from procedure.terminalarrivalarea 
inner join master_join mj2 on procedure.terminalarrivalarea.id = mj2.source_id
inner join procedure.terminalarrivalarea_tsp on mj2.target_id = procedure.terminalarrivalarea_tsp.id
inner join procedure.terminalarrivalarea_ts on procedure.terminalarrivalarea_tsp.terminalarrivalareatimeslice_id = procedure.terminalarrivalarea_ts.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_ukgair on procedure.terminalarrivalarea_ts.if_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_ukgair.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_lcfkss on procedure.terminalarrivalarea_ts.if_navaidsystem_id = navaids_points_navaid_pt_lcfkss.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_vzwall on procedure.terminalarrivalarea_ts.if_aimingpoint_id = airport_heliport_touchdownliftoff_pt_vzwall.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_ssvuij on procedure.terminalarrivalarea_ts.if_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_ssvuij.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_erhkva on procedure.terminalarrivalarea_ts.if_airportreferencepoint_id = airport_heliport_airportheliport_pt_erhkva.id
left join geometry.point_view geometry_point_view_qehewg on procedure.terminalarrivalarea_ts.if_position_id = geometry_point_view_qehewg.id
left join navaids_points.designatedpoint_pt navaids_points_designatedpoint_pt_mpgrrc on procedure.terminalarrivalarea_ts.iaf_fixdesignatedpoint_id = navaids_points_designatedpoint_pt_mpgrrc.id
left join navaids_points.navaid_pt navaids_points_navaid_pt_eqbtqw on procedure.terminalarrivalarea_ts.iaf_navaidsystem_id = navaids_points_navaid_pt_eqbtqw.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_nigxqu on procedure.terminalarrivalarea_ts.iaf_aimingpoint_id = airport_heliport_touchdownliftoff_pt_nigxqu.id
left join airport_heliport.runwaycentrelinepoint_pt airport_heliport_runwaycentrelinepoint_pt_oiqify on procedure.terminalarrivalarea_ts.iaf_runwaypoint_id = airport_heliport_runwaycentrelinepoint_pt_oiqify.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_bgimll on procedure.terminalarrivalarea_ts.iaf_airportreferencepoint_id = airport_heliport_airportheliport_pt_bgimll.id
left join geometry.point_view geometry_point_view_gltqau on procedure.terminalarrivalarea_ts.iaf_position_id = geometry_point_view_gltqau.id
left join geometry.surface_view geometry_surface_view_mecxau on procedure.terminalarrivalarea_ts.buffer_id = geometry_surface_view_mecxau.id
left join procedure.instrumentapproachprocedure_pt procedure_instrumentapproachprocedure_pt_ikngyd on procedure.terminalarrivalarea_ts.approachrnav_id = procedure_instrumentapproachprocedure_pt_ikngyd.id
left join lateral(
  select jsonb_agg(DISTINCT procedure_terminalarrivalareasector_lat_pahunz.*) as sector
  from master_join master_join_vsdcmm
  join procedure.terminalarrivalareasector_view procedure_terminalarrivalareasector_lat_pahunz on master_join_vsdcmm.target_id = procedure_terminalarrivalareasector_lat_pahunz.id
  where master_join_vsdcmm.source_id = procedure.terminalarrivalarea_ts.id
) as procedure_terminalarrivalareasector_view_caaiay on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_xybmii.*) AS annotation
  from master_join master_join_liyidb
  join notes.note_view notes_note_lat_xybmii on master_join_liyidb.target_id = notes_note_lat_xybmii.id
  where master_join_liyidb.source_id = procedure.terminalarrivalarea_ts.id
) as notes_note_view_ditscr on TRUE
where procedure.terminalarrivalarea.feature_status = 'APPROVED'
  and procedure.terminalarrivalarea_ts.feature_status = 'APPROVED'
order by terminalarrivalarea.identifier, terminalarrivalarea_ts.sequence_number, terminalarrivalarea_ts.correction_number DESC;
-- TouchDownLiftOffLightSystemTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.touchdownliftofflightsystem_view cascade;
create materialized view airport_heliport.touchdownliftofflightsystem_view as
select distinct on (touchdownliftofflightsystem.identifier,touchdownliftofflightsystem_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftofflightsystem.id::integer as id,
    airport_heliport.touchdownliftofflightsystem_ts.id::integer as ts_id,
    airport_heliport.touchdownliftofflightsystem_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftofflightsystem.identifier::uuid,
    airport_heliport.touchdownliftofflightsystem_ts.interpretation::text,
    airport_heliport.touchdownliftofflightsystem_ts.sequence_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.correction_number::integer,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftofflightsystem_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.colour_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.touchdownliftofflightsystem_ts.position_value as varchar), '(' || airport_heliport.touchdownliftofflightsystem_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_dhbztl.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_dhbztl.nilreason[1] || ')')::text AS lightedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_dhbztl.href::text AS lightedtouchdownliftoff_href,
    shared_lightelement_view_tjpzmb.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_jzilsy.availability::jsonb as availability,
    notes_note_view_nswpjb.annotation::jsonb as annotation
from airport_heliport.touchdownliftofflightsystem 
inner join master_join mj2 on airport_heliport.touchdownliftofflightsystem.id = mj2.source_id
inner join airport_heliport.touchdownliftofflightsystem_tsp on mj2.target_id = airport_heliport.touchdownliftofflightsystem_tsp.id
inner join airport_heliport.touchdownliftofflightsystem_ts on airport_heliport.touchdownliftofflightsystem_tsp.touchdownliftofflightsystemtimeslice_id = airport_heliport.touchdownliftofflightsystem_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_dhbztl on airport_heliport.touchdownliftofflightsystem_ts.lightedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_dhbztl.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_rxphze.*) as element
  from master_join master_join_kpiqqj
  join shared.lightelement_view shared_lightelement_lat_rxphze on master_join_kpiqqj.target_id = shared_lightelement_lat_rxphze.id
  where master_join_kpiqqj.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as shared_lightelement_view_tjpzmb on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_fqdfrj.*) as availability
  from master_join master_join_bkzton
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_fqdfrj on master_join_bkzton.target_id = airport_heliport_groundlightingavailability_lat_fqdfrj.id
  where master_join_bkzton.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as airport_heliport_groundlightingavailability_view_jzilsy on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_qkivux.*) AS annotation
  from master_join master_join_lpksna
  join notes.note_view notes_note_lat_qkivux on master_join_lpksna.target_id = notes_note_lat_qkivux.id
  where master_join_lpksna.source_id = airport_heliport.touchdownliftofflightsystem_ts.id
) as notes_note_view_nswpjb on TRUE
where airport_heliport.touchdownliftofflightsystem.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftofflightsystem_ts.feature_status = 'APPROVED'
order by touchdownliftofflightsystem.identifier, touchdownliftofflightsystem_ts.sequence_number, touchdownliftofflightsystem_ts.correction_number DESC;
-- TouchDownLiftOffMarkingTimeSliceType
-- ['notes.note_view', 'airport_heliport.markingelement_view']
drop materialized view if exists airport_heliport.touchdownliftoffmarking_view cascade;
create materialized view airport_heliport.touchdownliftoffmarking_view as
select distinct on (touchdownliftoffmarking.identifier,touchdownliftoffmarking_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffmarking.id::integer as id,
    airport_heliport.touchdownliftoffmarking_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffmarking_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffmarking.identifier::uuid,
    airport_heliport.touchdownliftoffmarking_ts.interpretation::text,
    airport_heliport.touchdownliftoffmarking_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.correction_number::integer,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffmarking_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.condition_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.condition_nilreason || ')')::text as condition,
    coalesce(cast(airport_heliport.touchdownliftoffmarking_ts.markinglocation_value as varchar), '(' || airport_heliport.touchdownliftoffmarking_ts.markinglocation_nilreason || ')')::text as markinglocation,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_rqupvr.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_rqupvr.nilreason[1] || ')')::text AS markedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_rqupvr.href::text AS markedtouchdownliftoff_href,
    airport_heliport_markingelement_view_pihcrg.element::jsonb as element,
    notes_note_view_ellomj.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffmarking 
inner join master_join mj2 on airport_heliport.touchdownliftoffmarking.id = mj2.source_id
inner join airport_heliport.touchdownliftoffmarking_tsp on mj2.target_id = airport_heliport.touchdownliftoffmarking_tsp.id
inner join airport_heliport.touchdownliftoffmarking_ts on airport_heliport.touchdownliftoffmarking_tsp.touchdownliftoffmarkingtimeslice_id = airport_heliport.touchdownliftoffmarking_ts.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_rqupvr on airport_heliport.touchdownliftoffmarking_ts.markedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_rqupvr.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_markingelement_lat_qgpoob.*) as element
  from master_join master_join_lkbsmt
  join airport_heliport.markingelement_view airport_heliport_markingelement_lat_qgpoob on master_join_lkbsmt.target_id = airport_heliport_markingelement_lat_qgpoob.id
  where master_join_lkbsmt.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as airport_heliport_markingelement_view_pihcrg on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ikcxfb.*) AS annotation
  from master_join master_join_luzihx
  join notes.note_view notes_note_lat_ikcxfb on master_join_luzihx.target_id = notes_note_lat_ikcxfb.id
  where master_join_luzihx.source_id = airport_heliport.touchdownliftoffmarking_ts.id
) as notes_note_view_ellomj on TRUE
where airport_heliport.touchdownliftoffmarking.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffmarking_ts.feature_status = 'APPROVED'
order by touchdownliftoffmarking.identifier, touchdownliftoffmarking_ts.sequence_number, touchdownliftoffmarking_ts.correction_number DESC;
-- TouchDownLiftOffSafeAreaTimeSliceType
-- ['airport_heliport.surfacecharacteristics_view', 'notes.note_view', 'geometry.elevatedsurface_view']
drop materialized view if exists airport_heliport.touchdownliftoffsafearea_view cascade;
create materialized view airport_heliport.touchdownliftoffsafearea_view as
select distinct on (touchdownliftoffsafearea.identifier,touchdownliftoffsafearea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoffsafearea.id::integer as id,
    airport_heliport.touchdownliftoffsafearea_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoffsafearea_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoffsafearea.identifier::uuid,
    airport_heliport.touchdownliftoffsafearea_ts.interpretation::text,
    airport_heliport.touchdownliftoffsafearea_ts.sequence_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.correction_number::integer,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoffsafearea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.lighting_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.lighting_nilreason || ')')::text as lighting,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_value as varchar), '(' || airport_heliport.touchdownliftoffsafearea_ts.obstaclefree_nilreason || ')')::text as obstaclefree,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.width_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.width_nilreason || ')')::text as width,
    coalesce(cast(airport_heliport.touchdownliftoffsafearea_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoffsafearea_ts.length_uom, '(' || airport_heliport.touchdownliftoffsafearea_ts.length_nilreason || ')')::text as length,
    to_jsonb(airport_heliport_surfacecharacteristics_view_drbcpy.*)::jsonb AS surfaceproperties,
    geometry_elevatedsurface_view_cmtbeq.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_cmtbeq.elevation AS extent_elevation,
    geometry_elevatedsurface_view_cmtbeq.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_cmtbeq.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_cmtbeq.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_cmtbeq.horizontalAccuracy AS extent_horizontalaccuracy,
    coalesce(cast(airport_heliport_touchdownliftoff_pt_sasawb.title as varchar), '(' || airport_heliport_touchdownliftoff_pt_sasawb.nilreason[1] || ')')::text AS protectedtouchdownliftoff,
    airport_heliport_touchdownliftoff_pt_sasawb.href::text AS protectedtouchdownliftoff_href,
    notes_note_view_edapwh.annotation::jsonb as annotation
from airport_heliport.touchdownliftoffsafearea 
inner join master_join mj2 on airport_heliport.touchdownliftoffsafearea.id = mj2.source_id
inner join airport_heliport.touchdownliftoffsafearea_tsp on mj2.target_id = airport_heliport.touchdownliftoffsafearea_tsp.id
inner join airport_heliport.touchdownliftoffsafearea_ts on airport_heliport.touchdownliftoffsafearea_tsp.touchdownliftoffsafeareatimeslice_id = airport_heliport.touchdownliftoffsafearea_ts.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_drbcpy on airport_heliport.touchdownliftoffsafearea_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_drbcpy.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_cmtbeq on airport_heliport.touchdownliftoffsafearea_ts.extent_id = geometry_elevatedsurface_view_cmtbeq.id
left join airport_heliport.touchdownliftoff_pt airport_heliport_touchdownliftoff_pt_sasawb on airport_heliport.touchdownliftoffsafearea_ts.protectedtouchdownliftoff_id = airport_heliport_touchdownliftoff_pt_sasawb.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vlrwlh.*) AS annotation
  from master_join master_join_hjiemb
  join notes.note_view notes_note_lat_vlrwlh on master_join_hjiemb.target_id = notes_note_lat_vlrwlh.id
  where master_join_hjiemb.source_id = airport_heliport.touchdownliftoffsafearea_ts.id
) as notes_note_view_edapwh on TRUE
where airport_heliport.touchdownliftoffsafearea.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoffsafearea_ts.feature_status = 'APPROVED'
order by touchdownliftoffsafearea.identifier, touchdownliftoffsafearea_ts.sequence_number, touchdownliftoffsafearea_ts.correction_number DESC;
-- TouchDownLiftOffTimeSliceType
-- ['airport_heliport.touchdownliftoffcontamination_view', 'geometry.elevatedsurface_view', 'airport_heliport.surfacecharacteristics_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'airport_heliport.manoeuvringareaavailability_view']
drop materialized view if exists airport_heliport.touchdownliftoff_view cascade;
create materialized view airport_heliport.touchdownliftoff_view as
select distinct on (touchdownliftoff.identifier,touchdownliftoff_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.touchdownliftoff.id::integer as id,
    airport_heliport.touchdownliftoff_ts.id::integer as ts_id,
    airport_heliport.touchdownliftoff_tsp.id::integer as tsp_id,
    airport_heliport.touchdownliftoff.identifier::uuid,
    airport_heliport.touchdownliftoff_ts.interpretation::text,
    airport_heliport.touchdownliftoff_ts.sequence_number::integer,
    airport_heliport.touchdownliftoff_ts.correction_number::integer,
    airport_heliport.touchdownliftoff_ts.valid_time_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.valid_time_end::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_begin::timestamp,
    airport_heliport.touchdownliftoff_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.designator_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.slope_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.slope_nilreason || ')')::text as slope,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.helicopterclass_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.helicopterclass_nilreason || ')')::text as helicopterclass,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.abandoned_value as varchar), '(' || airport_heliport.touchdownliftoff_ts.abandoned_nilreason || ')')::text as abandoned,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.length_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.length_uom, '(' || airport_heliport.touchdownliftoff_ts.length_nilreason || ')')::text as length,
    coalesce(cast(airport_heliport.touchdownliftoff_ts.width_value as varchar) || ' ' || airport_heliport.touchdownliftoff_ts.width_uom, '(' || airport_heliport.touchdownliftoff_ts.width_nilreason || ')')::text as width,
    geometry_elevatedpoint_view_pkufvh.geom::geometry(Point, 4326) AS aimingpoint_geom,
    geometry_elevatedpoint_view_pkufvh.longitude AS aimingpoint_longitude,
    geometry_elevatedpoint_view_pkufvh.latitude AS aimingpoint_latitude,
    geometry_elevatedpoint_view_pkufvh.elevation AS aimingpoint_elevation,
    geometry_elevatedpoint_view_pkufvh.geoidUndulation AS aimingpoint_geoidundulation,
    geometry_elevatedpoint_view_pkufvh.verticalDatum AS aimingpoint_verticaldatum,
    geometry_elevatedpoint_view_pkufvh.verticalAccuracy AS aimingpoint_verticalaccuracy,
    geometry_elevatedpoint_view_pkufvh.horizontalAccuracy AS aimingpoint_horizontalaccuracy,
    geometry_elevatedsurface_view_dyovaz.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_dyovaz.elevation AS extent_elevation,
    geometry_elevatedsurface_view_dyovaz.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_dyovaz.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_dyovaz.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_dyovaz.horizontalAccuracy AS extent_horizontalaccuracy,
    to_jsonb(airport_heliport_surfacecharacteristics_view_ugzvdb.*)::jsonb AS surfaceproperties,
    coalesce(cast(airport_heliport_airportheliport_pt_asxrsy.title as varchar), '(' || airport_heliport_airportheliport_pt_asxrsy.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_asxrsy.href::text AS associatedairportheliport_href,
    coalesce(cast(airport_heliport_runway_pt_gvksaq.title as varchar), '(' || airport_heliport_runway_pt_gvksaq.nilreason[1] || ')')::text AS approachtakeoffarea,
    airport_heliport_runway_pt_gvksaq.href::text AS approachtakeoffarea_href,
    airport_heliport_touchdownliftoffcontamination_view_euurwb.contaminant::jsonb as contaminant,
    notes_note_view_cglhla.annotation::jsonb as annotation,
    airport_heliport_manoeuvringareaavailability_view_nimhcj.availability::jsonb as availability
from airport_heliport.touchdownliftoff 
inner join master_join mj2 on airport_heliport.touchdownliftoff.id = mj2.source_id
inner join airport_heliport.touchdownliftoff_tsp on mj2.target_id = airport_heliport.touchdownliftoff_tsp.id
inner join airport_heliport.touchdownliftoff_ts on airport_heliport.touchdownliftoff_tsp.touchdownliftofftimeslice_id = airport_heliport.touchdownliftoff_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_pkufvh on airport_heliport.touchdownliftoff_ts.aimingpoint_id = geometry_elevatedpoint_view_pkufvh.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_dyovaz on airport_heliport.touchdownliftoff_ts.extent_id = geometry_elevatedsurface_view_dyovaz.id
left join airport_heliport.surfacecharacteristics_view airport_heliport_surfacecharacteristics_view_ugzvdb on airport_heliport.touchdownliftoff_ts.surfaceproperties_id = airport_heliport_surfacecharacteristics_view_ugzvdb.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_asxrsy on airport_heliport.touchdownliftoff_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_asxrsy.id
left join airport_heliport.runway_pt airport_heliport_runway_pt_gvksaq on airport_heliport.touchdownliftoff_ts.approachtakeoffarea_id = airport_heliport_runway_pt_gvksaq.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_touchdownliftoffcontamination_lat_adepbu.*) as contaminant
  from master_join master_join_cxotzx
  join airport_heliport.touchdownliftoffcontamination_view airport_heliport_touchdownliftoffcontamination_lat_adepbu on master_join_cxotzx.target_id = airport_heliport_touchdownliftoffcontamination_lat_adepbu.id
  where master_join_cxotzx.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_touchdownliftoffcontamination_view_euurwb on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_avtmqa.*) AS annotation
  from master_join master_join_zprjul
  join notes.note_view notes_note_lat_avtmqa on master_join_zprjul.target_id = notes_note_lat_avtmqa.id
  where master_join_zprjul.source_id = airport_heliport.touchdownliftoff_ts.id
) as notes_note_view_cglhla on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_manoeuvringareaavailability_lat_pupcoz.*) as availability
  from master_join master_join_ftuata
  join airport_heliport.manoeuvringareaavailability_view airport_heliport_manoeuvringareaavailability_lat_pupcoz on master_join_ftuata.target_id = airport_heliport_manoeuvringareaavailability_lat_pupcoz.id
  where master_join_ftuata.source_id = airport_heliport.touchdownliftoff_ts.id
) as airport_heliport_manoeuvringareaavailability_view_nimhcj on TRUE
where airport_heliport.touchdownliftoff.feature_status = 'APPROVED'
  and airport_heliport.touchdownliftoff_ts.feature_status = 'APPROVED'
order by touchdownliftoff.identifier, touchdownliftoff_ts.sequence_number, touchdownliftoff_ts.correction_number DESC;
-- UnitTimeSliceType
-- ['shared.contactinformation_view', 'organisation.unitdependency_view', 'geometry.elevatedpoint_view', 'notes.note_view', 'organisation.unitavailability_view']
drop materialized view if exists organisation.unit_view cascade;
create materialized view organisation.unit_view as
select distinct on (unit.identifier,unit_ts.sequence_number)
    (row_number() over ())::integer as row,
    organisation.unit.id::integer as id,
    organisation.unit_ts.id::integer as ts_id,
    organisation.unit_tsp.id::integer as tsp_id,
    organisation.unit.identifier::uuid,
    organisation.unit_ts.interpretation::text,
    organisation.unit_ts.sequence_number::integer,
    organisation.unit_ts.correction_number::integer,
    organisation.unit_ts.valid_time_begin::timestamp,
    organisation.unit_ts.valid_time_end::timestamp,
    organisation.unit_ts.feature_lifetime_begin::timestamp,
    organisation.unit_ts.feature_lifetime_end::timestamp,
    coalesce(cast(organisation.unit_ts.name_value as varchar), '(' || organisation.unit_ts.name_nilreason || ')')::text as name,
    coalesce(cast(organisation.unit_ts.type_value as varchar), '(' || organisation.unit_ts.type_nilreason || ')')::text as type,
    coalesce(cast(organisation.unit_ts.complianticao_value as varchar), '(' || organisation.unit_ts.complianticao_nilreason || ')')::text as complianticao,
    coalesce(cast(organisation.unit_ts.designator_value as varchar), '(' || organisation.unit_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(organisation.unit_ts.military_value as varchar), '(' || organisation.unit_ts.military_nilreason || ')')::text as military,
    geometry_elevatedpoint_view_yogiwk.geom::geometry(Point, 4326) AS position_geom,
    geometry_elevatedpoint_view_yogiwk.longitude AS position_longitude,
    geometry_elevatedpoint_view_yogiwk.latitude AS position_latitude,
    geometry_elevatedpoint_view_yogiwk.elevation AS position_elevation,
    geometry_elevatedpoint_view_yogiwk.geoidUndulation AS position_geoidundulation,
    geometry_elevatedpoint_view_yogiwk.verticalDatum AS position_verticaldatum,
    geometry_elevatedpoint_view_yogiwk.verticalAccuracy AS position_verticalaccuracy,
    geometry_elevatedpoint_view_yogiwk.horizontalAccuracy AS position_horizontalaccuracy,
    coalesce(cast(airport_heliport_airportheliport_pt_gdkrlh.title as varchar), '(' || airport_heliport_airportheliport_pt_gdkrlh.nilreason[1] || ')')::text AS airportlocation,
    airport_heliport_airportheliport_pt_gdkrlh.href::text AS airportlocation_href,
    coalesce(cast(organisation_organisationauthority_pt_hijamd.title as varchar), '(' || organisation_organisationauthority_pt_hijamd.nilreason[1] || ')')::text AS ownerorganisation,
    organisation_organisationauthority_pt_hijamd.href::text AS ownerorganisation_href,
    organisation_unitdependency_view_rlhtxr.relatedunit::jsonb as relatedunit,
    organisation_unitavailability_view_ujbdua.availability::jsonb as availability,
    notes_note_view_hprxkc.annotation::jsonb as annotation
from organisation.unit 
inner join master_join mj2 on organisation.unit.id = mj2.source_id
inner join organisation.unit_tsp on mj2.target_id = organisation.unit_tsp.id
inner join organisation.unit_ts on organisation.unit_tsp.unittimeslice_id = organisation.unit_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_yogiwk on organisation.unit_ts.position_id = geometry_elevatedpoint_view_yogiwk.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_gdkrlh on organisation.unit_ts.airportlocation_id = airport_heliport_airportheliport_pt_gdkrlh.id
left join organisation.organisationauthority_pt organisation_organisationauthority_pt_hijamd on organisation.unit_ts.ownerorganisation_id = organisation_organisationauthority_pt_hijamd.id
left join lateral(
  select
  from master_join master_join_kngcbe
  join shared.contactinformation_view shared_contactinformation_lat_exomhc on master_join_kngcbe.target_id = shared_contactinformation_lat_exomhc.id
  where master_join_kngcbe.source_id = organisation.unit_ts.id
) as shared_contactinformation_view_tvcutc on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitdependency_lat_okcxvm.*) as relatedunit
  from master_join master_join_jklkow
  join organisation.unitdependency_view organisation_unitdependency_lat_okcxvm on master_join_jklkow.target_id = organisation_unitdependency_lat_okcxvm.id
  where master_join_jklkow.source_id = organisation.unit_ts.id
) as organisation_unitdependency_view_rlhtxr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT organisation_unitavailability_lat_tpghgi.*) as availability
  from master_join master_join_xaobuy
  join organisation.unitavailability_view organisation_unitavailability_lat_tpghgi on master_join_xaobuy.target_id = organisation_unitavailability_lat_tpghgi.id
  where master_join_xaobuy.source_id = organisation.unit_ts.id
) as organisation_unitavailability_view_ujbdua on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wrrlou.*) AS annotation
  from master_join master_join_mrbtyi
  join notes.note_view notes_note_lat_wrrlou on master_join_mrbtyi.target_id = notes_note_lat_wrrlou.id
  where master_join_mrbtyi.source_id = organisation.unit_ts.id
) as notes_note_view_hprxkc on TRUE
where organisation.unit.feature_status = 'APPROVED'
  and organisation.unit_ts.feature_status = 'APPROVED'
order by unit.identifier, unit_ts.sequence_number, unit_ts.correction_number DESC;
-- UnplannedHoldingTimeSliceType
-- ['notes.note_view']
drop materialized view if exists holding.unplannedholding_view cascade;
create materialized view holding.unplannedholding_view as
select distinct on (unplannedholding.identifier,unplannedholding_ts.sequence_number)
    (row_number() over ())::integer as row,
    holding.unplannedholding.id::integer as id,
    holding.unplannedholding_ts.id::integer as ts_id,
    holding.unplannedholding_tsp.id::integer as tsp_id,
    holding.unplannedholding.identifier::uuid,
    holding.unplannedholding_ts.interpretation::text,
    holding.unplannedholding_ts.sequence_number::integer,
    holding.unplannedholding_ts.correction_number::integer,
    holding.unplannedholding_ts.valid_time_begin::timestamp,
    holding.unplannedholding_ts.valid_time_end::timestamp,
    holding.unplannedholding_ts.feature_lifetime_begin::timestamp,
    holding.unplannedholding_ts.feature_lifetime_end::timestamp,
    coalesce(cast(holding.unplannedholding_ts.unplannedholding_value as varchar), '(' || holding.unplannedholding_ts.unplannedholding_nilreason || ')')::text as unplannedholding,
    coalesce(cast(holding.unplannedholding_ts.altitudereference_value as varchar), '(' || holding.unplannedholding_ts.altitudereference_nilreason || ')')::text as altitudereference,
    coalesce(cast(holding.unplannedholding_ts.controlledairspace_value as varchar), '(' || holding.unplannedholding_ts.controlledairspace_nilreason || ')')::text as controlledairspace,
    coalesce(cast(holding.unplannedholding_ts.authorizedaltitude_value as varchar) || ' ' || holding.unplannedholding_ts.authorizedaltitude_uom, '(' || holding.unplannedholding_ts.authorizedaltitude_nilreason || ')')::text as authorizedaltitude,
    notes_note_view_qqihhz.annotation::jsonb as annotation
from holding.unplannedholding 
inner join master_join mj2 on holding.unplannedholding.id = mj2.source_id
inner join holding.unplannedholding_tsp on mj2.target_id = holding.unplannedholding_tsp.id
inner join holding.unplannedholding_ts on holding.unplannedholding_tsp.unplannedholdingtimeslice_id = holding.unplannedholding_ts.id
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_gygdbe.*) AS annotation
  from master_join master_join_uhvmer
  join notes.note_view notes_note_lat_gygdbe on master_join_uhvmer.target_id = notes_note_lat_gygdbe.id
  where master_join_uhvmer.source_id = holding.unplannedholding_ts.id
) as notes_note_view_qqihhz on TRUE
where holding.unplannedholding.feature_status = 'APPROVED'
  and holding.unplannedholding_ts.feature_status = 'APPROVED'
order by unplannedholding.identifier, unplannedholding_ts.sequence_number, unplannedholding_ts.correction_number DESC;
-- VerticalStructureTimeSliceType
-- ['obstacles.verticalstructurepart_view', 'notes.note_view', 'obstacles.verticalstructurelightingstatus_view']
drop materialized view if exists obstacles.verticalstructure_view cascade;
create materialized view obstacles.verticalstructure_view as
select distinct on (verticalstructure.identifier,verticalstructure_ts.sequence_number)
    (row_number() over ())::integer as row,
    obstacles.verticalstructure.id::integer as id,
    obstacles.verticalstructure_ts.id::integer as ts_id,
    obstacles.verticalstructure_tsp.id::integer as tsp_id,
    obstacles.verticalstructure.identifier::uuid,
    obstacles.verticalstructure_ts.interpretation::text,
    obstacles.verticalstructure_ts.sequence_number::integer,
    obstacles.verticalstructure_ts.correction_number::integer,
    obstacles.verticalstructure_ts.valid_time_begin::timestamp,
    obstacles.verticalstructure_ts.valid_time_end::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_begin::timestamp,
    obstacles.verticalstructure_ts.feature_lifetime_end::timestamp,
    coalesce(cast(obstacles.verticalstructure_ts.name_value as varchar), '(' || obstacles.verticalstructure_ts.name_nilreason || ')')::text as name,
    coalesce(cast(obstacles.verticalstructure_ts.type_value as varchar), '(' || obstacles.verticalstructure_ts.type_nilreason || ')')::text as type,
    coalesce(cast(obstacles.verticalstructure_ts.lighted_value as varchar), '(' || obstacles.verticalstructure_ts.lighted_nilreason || ')')::text as lighted,
    coalesce(cast(obstacles.verticalstructure_ts.markingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.markingicaostandard_nilreason || ')')::text as markingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.group_value as varchar), '(' || obstacles.verticalstructure_ts.group_nilreason || ')')::text as group,
    coalesce(cast(obstacles.verticalstructure_ts.lightingicaostandard_value as varchar), '(' || obstacles.verticalstructure_ts.lightingicaostandard_nilreason || ')')::text as lightingicaostandard,
    coalesce(cast(obstacles.verticalstructure_ts.synchronisedlighting_value as varchar), '(' || obstacles.verticalstructure_ts.synchronisedlighting_nilreason || ')')::text as synchronisedlighting,
    coalesce(cast(obstacles.verticalstructure_ts.length_value as varchar) || ' ' || obstacles.verticalstructure_ts.length_uom, '(' || obstacles.verticalstructure_ts.length_nilreason || ')')::text as length,
    coalesce(cast(obstacles.verticalstructure_ts.width_value as varchar) || ' ' || obstacles.verticalstructure_ts.width_uom, '(' || obstacles.verticalstructure_ts.width_nilreason || ')')::text as width,
    coalesce(cast(obstacles.verticalstructure_ts.radius_value as varchar) || ' ' || obstacles.verticalstructure_ts.radius_uom, '(' || obstacles.verticalstructure_ts.radius_nilreason || ')')::text as radius,
    coalesce(cast(navaids_points_markerbeacon_pt_ccxrtj.title as varchar), '(' || navaids_points_markerbeacon_pt_ccxrtj.nilreason[1] || ')')::text AS marker,
    navaids_points_markerbeacon_pt_ccxrtj.href::text AS marker_href,
    obstacles_verticalstructurepart_view_oarzvr.part::jsonb as part,
    service_passengerservice_pt_akaets.hostedpassengerservice::jsonb as hostedpassengerservice,
    navaids_points_specialnavigationstation_pt_qkivle.hostedspecialnavstation::jsonb as hostedspecialnavstation,
    organisation_unit_pt_atekzk.hostedunit::jsonb as hostedunit,
    organisation_organisationauthority_pt_jidofd.hostedorganisation::jsonb as hostedorganisation,
    notes_note_view_gypols.annotation::jsonb as annotation,
    obstacles_verticalstructurelightingstatus_view_klbmxy.lightingavailability::jsonb as lightingavailability
from obstacles.verticalstructure 
inner join master_join mj2 on obstacles.verticalstructure.id = mj2.source_id
inner join obstacles.verticalstructure_tsp on mj2.target_id = obstacles.verticalstructure_tsp.id
inner join obstacles.verticalstructure_ts on obstacles.verticalstructure_tsp.verticalstructuretimeslice_id = obstacles.verticalstructure_ts.id
left join navaids_points.markerbeacon_pt navaids_points_markerbeacon_pt_ccxrtj on obstacles.verticalstructure_ts.marker_id = navaids_points_markerbeacon_pt_ccxrtj.id
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurepart_lat_orwzhl.*) as part
  from master_join master_join_aiwabp
  join obstacles.verticalstructurepart_view obstacles_verticalstructurepart_lat_orwzhl on master_join_aiwabp.target_id = obstacles_verticalstructurepart_lat_orwzhl.id
  where master_join_aiwabp.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurepart_view_oarzvr on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', service_passengerservice_lat_ziplca.id,
      'title', coalesce(cast(service_passengerservice_lat_ziplca.title AS varchar), '(' || service_passengerservice_lat_ziplca.nilreason[1] || ')'),
      'href', service_passengerservice_lat_ziplca.href
  )) as hostedpassengerservice  from master_join master_join_ouvaqd
  join service.passengerservice_pt service_passengerservice_lat_ziplca on master_join_ouvaqd.target_id = service_passengerservice_lat_ziplca.id
  where master_join_ouvaqd.source_id = obstacles.verticalstructure_ts.id
) as service_passengerservice_pt_akaets on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', navaids_points_specialnavigationstation_lat_jocluh.id,
      'title', coalesce(cast(navaids_points_specialnavigationstation_lat_jocluh.title AS varchar), '(' || navaids_points_specialnavigationstation_lat_jocluh.nilreason[1] || ')'),
      'href', navaids_points_specialnavigationstation_lat_jocluh.href
  )) as hostedspecialnavstation  from master_join master_join_nzzsmt
  join navaids_points.specialnavigationstation_pt navaids_points_specialnavigationstation_lat_jocluh on master_join_nzzsmt.target_id = navaids_points_specialnavigationstation_lat_jocluh.id
  where master_join_nzzsmt.source_id = obstacles.verticalstructure_ts.id
) as navaids_points_specialnavigationstation_pt_qkivle on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_unit_lat_blbudr.id,
      'title', coalesce(cast(organisation_unit_lat_blbudr.title AS varchar), '(' || organisation_unit_lat_blbudr.nilreason[1] || ')'),
      'href', organisation_unit_lat_blbudr.href
  )) as hostedunit  from master_join master_join_wschva
  join organisation.unit_pt organisation_unit_lat_blbudr on master_join_wschva.target_id = organisation_unit_lat_blbudr.id
  where master_join_wschva.source_id = obstacles.verticalstructure_ts.id
) as organisation_unit_pt_atekzk on TRUE
left join lateral(
  select jsonb_agg(DISTINCT jsonb_build_object(
      'id', organisation_organisationauthority_lat_yoevje.id,
      'title', coalesce(cast(organisation_organisationauthority_lat_yoevje.title AS varchar), '(' || organisation_organisationauthority_lat_yoevje.nilreason[1] || ')'),
      'href', organisation_organisationauthority_lat_yoevje.href
  )) as hostedorganisation  from master_join master_join_ndgnpq
  join organisation.organisationauthority_pt organisation_organisationauthority_lat_yoevje on master_join_ndgnpq.target_id = organisation_organisationauthority_lat_yoevje.id
  where master_join_ndgnpq.source_id = obstacles.verticalstructure_ts.id
) as organisation_organisationauthority_pt_jidofd on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_vteyvw.*) AS annotation
  from master_join master_join_ozpsoi
  join notes.note_view notes_note_lat_vteyvw on master_join_ozpsoi.target_id = notes_note_lat_vteyvw.id
  where master_join_ozpsoi.source_id = obstacles.verticalstructure_ts.id
) as notes_note_view_gypols on TRUE
left join lateral(
  select jsonb_agg(DISTINCT obstacles_verticalstructurelightingstatus_lat_vviddu.*) as lightingavailability
  from master_join master_join_ufucno
  join obstacles.verticalstructurelightingstatus_view obstacles_verticalstructurelightingstatus_lat_vviddu on master_join_ufucno.target_id = obstacles_verticalstructurelightingstatus_lat_vviddu.id
  where master_join_ufucno.source_id = obstacles.verticalstructure_ts.id
) as obstacles_verticalstructurelightingstatus_view_klbmxy on TRUE
where obstacles.verticalstructure.feature_status = 'APPROVED'
  and obstacles.verticalstructure_ts.feature_status = 'APPROVED'
order by verticalstructure.identifier, verticalstructure_ts.sequence_number, verticalstructure_ts.correction_number DESC;
-- VisualGlideSlopeIndicatorTimeSliceType
-- ['notes.note_view', 'shared.lightelement_view', 'airport_heliport.groundlightingavailability_view']
drop materialized view if exists airport_heliport.visualglideslopeindicator_view cascade;
create materialized view airport_heliport.visualglideslopeindicator_view as
select distinct on (visualglideslopeindicator.identifier,visualglideslopeindicator_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.visualglideslopeindicator.id::integer as id,
    airport_heliport.visualglideslopeindicator_ts.id::integer as ts_id,
    airport_heliport.visualglideslopeindicator_tsp.id::integer as tsp_id,
    airport_heliport.visualglideslopeindicator.identifier::uuid,
    airport_heliport.visualglideslopeindicator_ts.interpretation::text,
    airport_heliport.visualglideslopeindicator_ts.sequence_number::integer,
    airport_heliport.visualglideslopeindicator_ts.correction_number::integer,
    airport_heliport.visualglideslopeindicator_ts.valid_time_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.valid_time_end::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_begin::timestamp,
    airport_heliport.visualglideslopeindicator_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.emergencylighting_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.emergencylighting_nilreason || ')')::text as emergencylighting,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.intensitylevel_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.intensitylevel_nilreason || ')')::text as intensitylevel,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.colour_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.colour_nilreason || ')')::text as colour,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.type_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.position_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.position_nilreason || ')')::text as position,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.numberbox_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.numberbox_nilreason || ')')::text as numberbox,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.portable_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.portable_nilreason || ')')::text as portable,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.slopeangle_value as varchar), '(' || airport_heliport.visualglideslopeindicator_ts.slopeangle_nilreason || ')')::text as slopeangle,
    coalesce(cast(airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_value as varchar) || ' ' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_uom, '(' || airport_heliport.visualglideslopeindicator_ts.minimumeyeheightoverthreshold_nilreason || ')')::text as minimumeyeheightoverthreshold,
    coalesce(cast(airport_heliport_runwaydirection_pt_dljnhk.title as varchar), '(' || airport_heliport_runwaydirection_pt_dljnhk.nilreason[1] || ')')::text AS runwaydirection,
    airport_heliport_runwaydirection_pt_dljnhk.href::text AS runwaydirection_href,
    shared_lightelement_view_fhfqwt.element::jsonb as element,
    airport_heliport_groundlightingavailability_view_kgqicu.availability::jsonb as availability,
    notes_note_view_bmbasj.annotation::jsonb as annotation
from airport_heliport.visualglideslopeindicator 
inner join master_join mj2 on airport_heliport.visualglideslopeindicator.id = mj2.source_id
inner join airport_heliport.visualglideslopeindicator_tsp on mj2.target_id = airport_heliport.visualglideslopeindicator_tsp.id
inner join airport_heliport.visualglideslopeindicator_ts on airport_heliport.visualglideslopeindicator_tsp.visualglideslopeindicatortimeslice_id = airport_heliport.visualglideslopeindicator_ts.id
left join airport_heliport.runwaydirection_pt airport_heliport_runwaydirection_pt_dljnhk on airport_heliport.visualglideslopeindicator_ts.runwaydirection_id = airport_heliport_runwaydirection_pt_dljnhk.id
left join lateral(
  select jsonb_agg(DISTINCT shared_lightelement_lat_uqbejt.*) as element
  from master_join master_join_temjay
  join shared.lightelement_view shared_lightelement_lat_uqbejt on master_join_temjay.target_id = shared_lightelement_lat_uqbejt.id
  where master_join_temjay.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as shared_lightelement_view_fhfqwt on TRUE
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_groundlightingavailability_lat_uethog.*) as availability
  from master_join master_join_wxciac
  join airport_heliport.groundlightingavailability_view airport_heliport_groundlightingavailability_lat_uethog on master_join_wxciac.target_id = airport_heliport_groundlightingavailability_lat_uethog.id
  where master_join_wxciac.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as airport_heliport_groundlightingavailability_view_kgqicu on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_wskgjm.*) AS annotation
  from master_join master_join_gmzbhq
  join notes.note_view notes_note_lat_wskgjm on master_join_gmzbhq.target_id = notes_note_lat_wskgjm.id
  where master_join_gmzbhq.source_id = airport_heliport.visualglideslopeindicator_ts.id
) as notes_note_view_bmbasj on TRUE
where airport_heliport.visualglideslopeindicator.feature_status = 'APPROVED'
  and airport_heliport.visualglideslopeindicator_ts.feature_status = 'APPROVED'
order by visualglideslopeindicator.identifier, visualglideslopeindicator_ts.sequence_number, visualglideslopeindicator_ts.correction_number DESC;
-- VORTimeSliceType
-- ['geometry.elevatedpoint_view', 'notes.note_view', 'navaids_points.navaidoperationalstatus_view', 'navaids_points.navaidequipmentmonitoring_view', 'navaids_points.authorityfornavaidequipment_view']
drop materialized view if exists navaids_points.vor_view cascade;
create materialized view navaids_points.vor_view as
select distinct on (vor.identifier,vor_ts.sequence_number)
    (row_number() over ())::integer as row,
    navaids_points.vor.id::integer as id,
    navaids_points.vor_ts.id::integer as ts_id,
    navaids_points.vor_tsp.id::integer as tsp_id,
    navaids_points.vor.identifier::uuid,
    navaids_points.vor_ts.interpretation::text,
    navaids_points.vor_ts.sequence_number::integer,
    navaids_points.vor_ts.correction_number::integer,
    navaids_points.vor_ts.valid_time_begin::timestamp,
    navaids_points.vor_ts.valid_time_end::timestamp,
    navaids_points.vor_ts.feature_lifetime_begin::timestamp,
    navaids_points.vor_ts.feature_lifetime_end::timestamp,
    coalesce(cast(navaids_points.vor_ts.designator_value as varchar), '(' || navaids_points.vor_ts.designator_nilreason || ')')::text as designator,
    coalesce(cast(navaids_points.vor_ts.name_value as varchar), '(' || navaids_points.vor_ts.name_nilreason || ')')::text as name,
    coalesce(cast(navaids_points.vor_ts.emissionclass_value as varchar), '(' || navaids_points.vor_ts.emissionclass_nilreason || ')')::text as emissionclass,
    coalesce(cast(navaids_points.vor_ts.mobile_value as varchar), '(' || navaids_points.vor_ts.mobile_nilreason || ')')::text as mobile,
    coalesce(cast(navaids_points.vor_ts.magneticvariation_value as varchar), '(' || navaids_points.vor_ts.magneticvariation_nilreason || ')')::text as magneticvariation,
    coalesce(cast(navaids_points.vor_ts.magneticvariationaccuracy_value as varchar), '(' || navaids_points.vor_ts.magneticvariationaccuracy_nilreason || ')')::text as magneticvariationaccuracy,
    coalesce(cast(navaids_points.vor_ts.datemagneticvariation_value as varchar), '(' || navaids_points.vor_ts.datemagneticvariation_nilreason || ')')::text as datemagneticvariation,
    coalesce(cast(navaids_points.vor_ts.flightchecked_value as varchar), '(' || navaids_points.vor_ts.flightchecked_nilreason || ')')::text as flightchecked,
    coalesce(cast(navaids_points.vor_ts.type_value as varchar), '(' || navaids_points.vor_ts.type_nilreason || ')')::text as type,
    coalesce(cast(navaids_points.vor_ts.zerobearingdirection_value as varchar), '(' || navaids_points.vor_ts.zerobearingdirection_nilreason || ')')::text as zerobearingdirection,
    coalesce(cast(navaids_points.vor_ts.declination_value as varchar), '(' || navaids_points.vor_ts.declination_nilreason || ')')::text as declination,
    coalesce(cast(navaids_points.vor_ts.frequency_value as varchar) || ' ' || navaids_points.vor_ts.frequency_uom, '(' || navaids_points.vor_ts.frequency_nilreason || ')')::text as frequency,
    geometry_elevatedpoint_view_agqnzh.geom::geometry(Point, 4326) AS location_geom,
    geometry_elevatedpoint_view_agqnzh.longitude AS location_longitude,
    geometry_elevatedpoint_view_agqnzh.latitude AS location_latitude,
    geometry_elevatedpoint_view_agqnzh.elevation AS location_elevation,
    geometry_elevatedpoint_view_agqnzh.geoidUndulation AS location_geoidundulation,
    geometry_elevatedpoint_view_agqnzh.verticalDatum AS location_verticaldatum,
    geometry_elevatedpoint_view_agqnzh.verticalAccuracy AS location_verticalaccuracy,
    geometry_elevatedpoint_view_agqnzh.horizontalAccuracy AS location_horizontalaccuracy,
    navaids_points_authorityfornavaidequipment_view_ednwws.authority::jsonb as authority,
    navaids_points_navaidequipmentmonitoring_view_wsltqp.monitoring::jsonb as monitoring,
    navaids_points_navaidoperationalstatus_view_jvhbbp.availability::jsonb as availability,
    notes_note_view_ixxnpu.annotation::jsonb as annotation
from navaids_points.vor 
inner join master_join mj2 on navaids_points.vor.id = mj2.source_id
inner join navaids_points.vor_tsp on mj2.target_id = navaids_points.vor_tsp.id
inner join navaids_points.vor_ts on navaids_points.vor_tsp.vortimeslice_id = navaids_points.vor_ts.id
left join geometry.elevatedpoint_view geometry_elevatedpoint_view_agqnzh on navaids_points.vor_ts.location_id = geometry_elevatedpoint_view_agqnzh.id
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_authorityfornavaidequipment_lat_eoxnfr.*) as authority
  from master_join master_join_mpenkh
  join navaids_points.authorityfornavaidequipment_view navaids_points_authorityfornavaidequipment_lat_eoxnfr on master_join_mpenkh.target_id = navaids_points_authorityfornavaidequipment_lat_eoxnfr.id
  where master_join_mpenkh.source_id = navaids_points.vor_ts.id
) as navaids_points_authorityfornavaidequipment_view_ednwws on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidequipmentmonitoring_lat_wpxdwz.*) as monitoring
  from master_join master_join_dyzyir
  join navaids_points.navaidequipmentmonitoring_view navaids_points_navaidequipmentmonitoring_lat_wpxdwz on master_join_dyzyir.target_id = navaids_points_navaidequipmentmonitoring_lat_wpxdwz.id
  where master_join_dyzyir.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidequipmentmonitoring_view_wsltqp on TRUE
left join lateral(
  select jsonb_agg(DISTINCT navaids_points_navaidoperationalstatus_lat_wifvlb.*) as availability
  from master_join master_join_bcithp
  join navaids_points.navaidoperationalstatus_view navaids_points_navaidoperationalstatus_lat_wifvlb on master_join_bcithp.target_id = navaids_points_navaidoperationalstatus_lat_wifvlb.id
  where master_join_bcithp.source_id = navaids_points.vor_ts.id
) as navaids_points_navaidoperationalstatus_view_jvhbbp on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_ozbnjw.*) AS annotation
  from master_join master_join_hnprid
  join notes.note_view notes_note_lat_ozbnjw on master_join_hnprid.target_id = notes_note_lat_ozbnjw.id
  where master_join_hnprid.source_id = navaids_points.vor_ts.id
) as notes_note_view_ixxnpu on TRUE
where navaids_points.vor.feature_status = 'APPROVED'
  and navaids_points.vor_ts.feature_status = 'APPROVED'
order by vor.identifier, vor_ts.sequence_number, vor_ts.correction_number DESC;
-- WorkAreaTimeSliceType
-- ['geometry.elevatedsurface_view', 'notes.note_view', 'airport_heliport.workareaactivity_view']
drop materialized view if exists airport_heliport.workarea_view cascade;
create materialized view airport_heliport.workarea_view as
select distinct on (workarea.identifier,workarea_ts.sequence_number)
    (row_number() over ())::integer as row,
    airport_heliport.workarea.id::integer as id,
    airport_heliport.workarea_ts.id::integer as ts_id,
    airport_heliport.workarea_tsp.id::integer as tsp_id,
    airport_heliport.workarea.identifier::uuid,
    airport_heliport.workarea_ts.interpretation::text,
    airport_heliport.workarea_ts.sequence_number::integer,
    airport_heliport.workarea_ts.correction_number::integer,
    airport_heliport.workarea_ts.valid_time_begin::timestamp,
    airport_heliport.workarea_ts.valid_time_end::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_begin::timestamp,
    airport_heliport.workarea_ts.feature_lifetime_end::timestamp,
    coalesce(cast(airport_heliport.workarea_ts.plannedOperational_value as varchar), '(' || airport_heliport.workarea_ts.plannedOperational_nilreason || ')')::text as plannedOperational,
    coalesce(cast(airport_heliport.workarea_ts.type_value as varchar), '(' || airport_heliport.workarea_ts.type_nilreason || ')')::text as type,
    coalesce(cast(airport_heliport_airportheliport_pt_akhwnt.title as varchar), '(' || airport_heliport_airportheliport_pt_akhwnt.nilreason[1] || ')')::text AS associatedairportheliport,
    airport_heliport_airportheliport_pt_akhwnt.href::text AS associatedairportheliport_href,
    geometry_elevatedsurface_view_mjmyqd.geom::geometry(POLYGON, 4326) AS extent_geom,
    geometry_elevatedsurface_view_mjmyqd.elevation AS extent_elevation,
    geometry_elevatedsurface_view_mjmyqd.geoidUndulation AS extent_geoidundulation,
    geometry_elevatedsurface_view_mjmyqd.verticalDatum AS extent_verticaldatum,
    geometry_elevatedsurface_view_mjmyqd.verticalAccuracy AS extent_verticalaccuracy,
    geometry_elevatedsurface_view_mjmyqd.horizontalAccuracy AS extent_horizontalaccuracy,
    airport_heliport_workareaactivity_view_wjqbzl.activation::jsonb as activation,
    notes_note_view_hdlrnz.annotation::jsonb as annotation
from airport_heliport.workarea 
inner join master_join mj2 on airport_heliport.workarea.id = mj2.source_id
inner join airport_heliport.workarea_tsp on mj2.target_id = airport_heliport.workarea_tsp.id
inner join airport_heliport.workarea_ts on airport_heliport.workarea_tsp.workareatimeslice_id = airport_heliport.workarea_ts.id
left join airport_heliport.airportheliport_pt airport_heliport_airportheliport_pt_akhwnt on airport_heliport.workarea_ts.associatedairportheliport_id = airport_heliport_airportheliport_pt_akhwnt.id
left join geometry.elevatedsurface_view geometry_elevatedsurface_view_mjmyqd on airport_heliport.workarea_ts.extent_id = geometry_elevatedsurface_view_mjmyqd.id
left join lateral(
  select jsonb_agg(DISTINCT airport_heliport_workareaactivity_lat_mdkqtf.*) as activation
  from master_join master_join_dyqiuh
  join airport_heliport.workareaactivity_view airport_heliport_workareaactivity_lat_mdkqtf on master_join_dyqiuh.target_id = airport_heliport_workareaactivity_lat_mdkqtf.id
  where master_join_dyqiuh.source_id = airport_heliport.workarea_ts.id
) as airport_heliport_workareaactivity_view_wjqbzl on TRUE
left join lateral(
  select
    jsonb_agg(DISTINCT notes_note_lat_chyhpq.*) AS annotation
  from master_join master_join_rbsrsz
  join notes.note_view notes_note_lat_chyhpq on master_join_rbsrsz.target_id = notes_note_lat_chyhpq.id
  where master_join_rbsrsz.source_id = airport_heliport.workarea_ts.id
) as notes_note_view_hdlrnz on TRUE
where airport_heliport.workarea.feature_status = 'APPROVED'
  and airport_heliport.workarea_ts.feature_status = 'APPROVED'
order by workarea.identifier, workarea_ts.sequence_number, workarea_ts.correction_number DESC;
